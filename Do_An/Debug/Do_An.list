
Do_An.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004044  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004468  08004468  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004468  08004468  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004468  08004468  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800446c  0800446c  0001446c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000078  080044e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080044e8  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e453  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a41  00000000  00000000  0002e4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00030f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  000319f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a01  00000000  00000000  00032340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ee  00000000  00000000  0004bd41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc64  00000000  00000000  0005d12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8d93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003148  00000000  00000000  000e8de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004138 	.word	0x08004138

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004138 	.word	0x08004138

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_ADC1_Init+0x74>)
 8000666:	4a19      	ldr	r2, [pc, #100]	; (80006cc <MX_ADC1_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_ADC1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_ADC1_Init+0x74>)
 8000672:	2201      	movs	r2, #1
 8000674:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_ADC1_Init+0x74>)
 800067e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_ADC1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ADC1_Init+0x74>)
 800068c:	2201      	movs	r2, #1
 800068e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_ADC1_Init+0x74>)
 8000692:	f000 fe49 	bl	8001328 <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 fa24 	bl	8000ae8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80006a8:	2307      	movs	r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_ADC1_Init+0x74>)
 80006b2:	f001 f89f 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006bc:	f000 fa14 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000ac 	.word	0x200000ac
 80006cc:	40012400 	.word	0x40012400

080006d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <HAL_ADC_MspInit+0x7c>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d129      	bne.n	8000744 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <HAL_ADC_MspInit+0x80>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a16      	ldr	r2, [pc, #88]	; (8000750 <HAL_ADC_MspInit+0x80>)
 80006f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <HAL_ADC_MspInit+0x80>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <HAL_ADC_MspInit+0x80>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a10      	ldr	r2, [pc, #64]	; (8000750 <HAL_ADC_MspInit+0x80>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_ADC_MspInit+0x80>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_OUTPUT_Pin;
 8000720:	2301      	movs	r3, #1
 8000722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000724:	2303      	movs	r3, #3
 8000726:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LIGHT_SENSOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4809      	ldr	r0, [pc, #36]	; (8000754 <HAL_ADC_MspInit+0x84>)
 8000730:	f001 fafc 	bl	8001d2c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	2012      	movs	r0, #18
 800073a:	f001 fac0 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800073e:	2012      	movs	r0, #18
 8000740:	f001 fad9 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40012400 	.word	0x40012400
 8000750:	40021000 	.word	0x40021000
 8000754:	40010800 	.word	0x40010800

08000758 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076c:	4b4b      	ldr	r3, [pc, #300]	; (800089c <MX_GPIO_Init+0x144>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a4a      	ldr	r2, [pc, #296]	; (800089c <MX_GPIO_Init+0x144>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b48      	ldr	r3, [pc, #288]	; (800089c <MX_GPIO_Init+0x144>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0310 	and.w	r3, r3, #16
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000784:	4b45      	ldr	r3, [pc, #276]	; (800089c <MX_GPIO_Init+0x144>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a44      	ldr	r2, [pc, #272]	; (800089c <MX_GPIO_Init+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b42      	ldr	r3, [pc, #264]	; (800089c <MX_GPIO_Init+0x144>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0320 	and.w	r3, r3, #32
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b3f      	ldr	r3, [pc, #252]	; (800089c <MX_GPIO_Init+0x144>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a3e      	ldr	r2, [pc, #248]	; (800089c <MX_GPIO_Init+0x144>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b3c      	ldr	r3, [pc, #240]	; (800089c <MX_GPIO_Init+0x144>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b4:	4b39      	ldr	r3, [pc, #228]	; (800089c <MX_GPIO_Init+0x144>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a38      	ldr	r2, [pc, #224]	; (800089c <MX_GPIO_Init+0x144>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b36      	ldr	r3, [pc, #216]	; (800089c <MX_GPIO_Init+0x144>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0308 	and.w	r3, r3, #8
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2102      	movs	r1, #2
 80007d0:	4833      	ldr	r0, [pc, #204]	; (80008a0 <MX_GPIO_Init+0x148>)
 80007d2:	f001 fc2f 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2110      	movs	r1, #16
 80007da:	4831      	ldr	r0, [pc, #196]	; (80008a0 <MX_GPIO_Init+0x148>)
 80007dc:	f001 fc2a 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2101      	movs	r1, #1
 80007e4:	482f      	ldr	r0, [pc, #188]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007e6:	f001 fc25 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f0:	2303      	movs	r3, #3
 80007f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	482b      	ldr	r0, [pc, #172]	; (80008a8 <MX_GPIO_Init+0x150>)
 80007fc:	f001 fa96 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin|SPI1_NSS_Pin;
 8000800:	2312      	movs	r3, #18
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2302      	movs	r3, #2
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4822      	ldr	r0, [pc, #136]	; (80008a0 <MX_GPIO_Init+0x148>)
 8000818:	f001 fa88 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 800081c:	2304      	movs	r3, #4
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	481c      	ldr	r0, [pc, #112]	; (80008a0 <MX_GPIO_Init+0x148>)
 8000830:	f001 fa7c 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_LORA_Pin;
 8000834:	2308      	movs	r3, #8
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_GPIO_Init+0x154>)
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERRUPT_LORA_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4816      	ldr	r0, [pc, #88]	; (80008a0 <MX_GPIO_Init+0x148>)
 8000848:	f001 fa70 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2302      	movs	r3, #2
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	4810      	ldr	r0, [pc, #64]	; (80008a4 <MX_GPIO_Init+0x14c>)
 8000864:	f001 fa62 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000868:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800086c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4619      	mov	r1, r3
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <MX_GPIO_Init+0x14c>)
 800087a:	f001 fa57 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 800087e:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000884:	2303      	movs	r3, #3
 8000886:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0x148>)
 8000890:	f001 fa4c 	bl	8001d2c <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	40011000 	.word	0x40011000
 80008ac:	10110000 	.word	0x10110000

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f000 fcd5 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f895 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f7ff ff4b 	bl	8000758 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008c2:	f7ff fec7 	bl	8000654 <MX_ADC1_Init>
  MX_SPI1_Init();
 80008c6:	f000 fac7 	bl	8000e58 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008ca:	f000 fc2f 	bl	800112c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  iwdgInit(&hiwdg, 10000);
 80008ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80008d2:	4837      	ldr	r0, [pc, #220]	; (80009b0 <main+0x100>)
 80008d4:	f000 f9ba 	bl	8000c4c <iwdgInit>
  RetargetInit(&huart1);
 80008d8:	4836      	ldr	r0, [pc, #216]	; (80009b4 <main+0x104>)
 80008da:	f000 f9f7 	bl	8000ccc <RetargetInit>
  STM_LOGD(MAIN_TAG, "ResetCause: %s", resetCauseGetName(resetCauseGet()));
 80008de:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <main+0x108>)
 80008e0:	681d      	ldr	r5, [r3, #0]
 80008e2:	f000 fd17 	bl	8001314 <HAL_GetTick>
 80008e6:	4606      	mov	r6, r0
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <main+0x108>)
 80008ea:	681c      	ldr	r4, [r3, #0]
 80008ec:	f000 f91a 	bl	8000b24 <resetCauseGet>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f95c 	bl	8000bb0 <resetCauseGetName>
 80008f8:	4603      	mov	r3, r0
 80008fa:	9303      	str	r3, [sp, #12]
 80008fc:	2368      	movs	r3, #104	; 0x68
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <main+0x10c>)
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	9400      	str	r4, [sp, #0]
 8000906:	4633      	mov	r3, r6
 8000908:	4a2d      	ldr	r2, [pc, #180]	; (80009c0 <main+0x110>)
 800090a:	4629      	mov	r1, r5
 800090c:	2004      	movs	r0, #4
 800090e:	f000 fbbb 	bl	8001088 <stm_log_write>
  STM_LOGI(MAIN_TAG, "Start Application");
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <main+0x108>)
 8000914:	681c      	ldr	r4, [r3, #0]
 8000916:	f000 fcfd 	bl	8001314 <HAL_GetTick>
 800091a:	4602      	mov	r2, r0
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <main+0x108>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2169      	movs	r1, #105	; 0x69
 8000922:	9102      	str	r1, [sp, #8]
 8000924:	4925      	ldr	r1, [pc, #148]	; (80009bc <main+0x10c>)
 8000926:	9101      	str	r1, [sp, #4]
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	4613      	mov	r3, r2
 800092c:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <main+0x114>)
 800092e:	4621      	mov	r1, r4
 8000930:	2003      	movs	r0, #3
 8000932:	f000 fba9 	bl	8001088 <stm_log_write>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_IT(&hadc1);
 8000936:	4824      	ldr	r0, [pc, #144]	; (80009c8 <main+0x118>)
 8000938:	f000 fdce 	bl	80014d8 <HAL_ADC_Start_IT>
  relayBlinkDelay = ledBlinkDelay = HAL_GetTick();
 800093c:	f000 fcea 	bl	8001314 <HAL_GetTick>
 8000940:	4603      	mov	r3, r0
 8000942:	4a22      	ldr	r2, [pc, #136]	; (80009cc <main+0x11c>)
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <main+0x11c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <main+0x120>)
 800094c:	6013      	str	r3, [r2, #0]
  while (1)
  {
    if (HAL_GetTick() - ledBlinkDelay >= 500)
 800094e:	f000 fce1 	bl	8001314 <HAL_GetTick>
 8000952:	4602      	mov	r2, r0
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <main+0x11c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800095e:	d323      	bcc.n	80009a8 <main+0xf8>
    {
      TOGGLE_LED_OUTPUT();
 8000960:	2101      	movs	r1, #1
 8000962:	481c      	ldr	r0, [pc, #112]	; (80009d4 <main+0x124>)
 8000964:	f001 fb7e 	bl	8002064 <HAL_GPIO_TogglePin>
      STM_LOGI(MAIN_TAG, "light is: %s", WHICH_LIGHT(adcValue));
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <main+0x108>)
 800096a:	681c      	ldr	r4, [r3, #0]
 800096c:	f000 fcd2 	bl	8001314 <HAL_GetTick>
 8000970:	4601      	mov	r1, r0
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <main+0x108>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <main+0x128>)
 8000978:	8812      	ldrh	r2, [r2, #0]
 800097a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800097e:	d201      	bcs.n	8000984 <main+0xd4>
 8000980:	4a16      	ldr	r2, [pc, #88]	; (80009dc <main+0x12c>)
 8000982:	e000      	b.n	8000986 <main+0xd6>
 8000984:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <main+0x130>)
 8000986:	9203      	str	r2, [sp, #12]
 8000988:	2276      	movs	r2, #118	; 0x76
 800098a:	9202      	str	r2, [sp, #8]
 800098c:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <main+0x10c>)
 800098e:	9201      	str	r2, [sp, #4]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	460b      	mov	r3, r1
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <main+0x134>)
 8000996:	4621      	mov	r1, r4
 8000998:	2003      	movs	r0, #3
 800099a:	f000 fb75 	bl	8001088 <stm_log_write>
      ledBlinkDelay = HAL_GetTick();
 800099e:	f000 fcb9 	bl	8001314 <HAL_GetTick>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <main+0x11c>)
 80009a6:	6013      	str	r3, [r2, #0]
    }

    /* reset IWDG */
    HAL_IWDG_Refresh(&hiwdg);
 80009a8:	4801      	ldr	r0, [pc, #4]	; (80009b0 <main+0x100>)
 80009aa:	f001 fbad 	bl	8002108 <HAL_IWDG_Refresh>
    if (HAL_GetTick() - ledBlinkDelay >= 500)
 80009ae:	e7ce      	b.n	800094e <main+0x9e>
 80009b0:	200000dc 	.word	0x200000dc
 80009b4:	20000144 	.word	0x20000144
 80009b8:	20000000 	.word	0x20000000
 80009bc:	0800437c 	.word	0x0800437c
 80009c0:	0800415c 	.word	0x0800415c
 80009c4:	08004190 	.word	0x08004190
 80009c8:	200000ac 	.word	0x200000ac
 80009cc:	20000098 	.word	0x20000098
 80009d0:	20000094 	.word	0x20000094
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	2000009c 	.word	0x2000009c
 80009dc:	080041c8 	.word	0x080041c8
 80009e0:	080041cc 	.word	0x080041cc
 80009e4:	080041d0 	.word	0x080041d0

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	2228      	movs	r2, #40	; 0x28
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 fb6a 	bl	80030d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000a18:	2309      	movs	r3, #9
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a26:	2301      	movs	r3, #1
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a38:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fb70 	bl	8002128 <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f84b 	bl	8000ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a52:	230f      	movs	r3, #15
 8000a54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fddb 	bl	8002628 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a78:	f000 f836 	bl	8000ae8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000a80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a84:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 ff67 	bl	800295c <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a94:	f000 f828 	bl	8000ae8 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3750      	adds	r7, #80	; 0x50
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_Error_Handler>:

/* USER CODE BEGIN 4 */
void _Error_Handler(char *file, int line)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af06      	add	r7, sp, #24
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aaa:	b672      	cpsid	i
}
 8000aac:	bf00      	nop
  __disable_irq();

  while (1)
  {
    STM_LOGE(MAIN_TAG, "Error file %s line %d", file, line);
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <_Error_Handler+0x3c>)
 8000ab0:	681c      	ldr	r4, [r3, #0]
 8000ab2:	f000 fc2f 	bl	8001314 <HAL_GetTick>
 8000ab6:	4601      	mov	r1, r0
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_Error_Handler+0x3c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	9204      	str	r2, [sp, #16]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	9203      	str	r2, [sp, #12]
 8000ac4:	22b7      	movs	r2, #183	; 0xb7
 8000ac6:	9202      	str	r2, [sp, #8]
 8000ac8:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <_Error_Handler+0x40>)
 8000aca:	9201      	str	r2, [sp, #4]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <_Error_Handler+0x44>)
 8000ad2:	4621      	mov	r1, r4
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 fad7 	bl	8001088 <stm_log_write>
 8000ada:	e7e8      	b.n	8000aae <_Error_Handler+0xe>
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	08004384 	.word	0x08004384
 8000ae4:	08004200 	.word	0x08004200

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af04      	add	r7, sp, #16
  __ASM volatile ("cpsid i" : : : "memory");
 8000aee:	b672      	cpsid	i
}
 8000af0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    STM_LOGE(MAIN_TAG, "");
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <Error_Handler+0x30>)
 8000af4:	681c      	ldr	r4, [r3, #0]
 8000af6:	f000 fc0d 	bl	8001314 <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <Error_Handler+0x30>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	21c7      	movs	r1, #199	; 0xc7
 8000b02:	9102      	str	r1, [sp, #8]
 8000b04:	4905      	ldr	r1, [pc, #20]	; (8000b1c <Error_Handler+0x34>)
 8000b06:	9101      	str	r1, [sp, #4]
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <Error_Handler+0x38>)
 8000b0e:	4621      	mov	r1, r4
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 fab9 	bl	8001088 <stm_log_write>
 8000b16:	e7ec      	b.n	8000af2 <Error_Handler+0xa>
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	08004394 	.word	0x08004394
 8000b20:	0800423c 	.word	0x0800423c

08000b24 <resetCauseGet>:
#include "misc.h"

reset_cause_t resetCauseGet(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
		RCC_FLAG_WWDGRST: Window watchdog reset flag
		RCC_FLAG_LPWRRST: Low power reset flag 
	*/
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <resetCauseGet+0x84>)
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	da02      	bge.n	8000b38 <resetCauseGet+0x14>
    {
        reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 8000b32:	2301      	movs	r3, #1
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	e02e      	b.n	8000b96 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <resetCauseGet+0x84>)
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <resetCauseGet+0x26>
    {
        reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8000b44:	2302      	movs	r3, #2
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	e025      	b.n	8000b96 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <resetCauseGet+0x84>)
 8000b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <resetCauseGet+0x38>
    {
        reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8000b56:	2303      	movs	r3, #3
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	e01c      	b.n	8000b96 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <resetCauseGet+0x84>)
 8000b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <resetCauseGet+0x4a>
    {
        reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8000b68:	2304      	movs	r3, #4
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	e013      	b.n	8000b96 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <resetCauseGet+0x84>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <resetCauseGet+0x5c>
    {
        reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	e00a      	b.n	8000b96 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <resetCauseGet+0x84>)
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <resetCauseGet+0x6e>
    {
        reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	e001      	b.n	8000b96 <resetCauseGet+0x72>
    }
    else
    {
        reset_cause = eRESET_CAUSE_UNKNOWN;
 8000b92:	2300      	movs	r3, #0
 8000b94:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <resetCauseGet+0x88>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]

    return reset_cause;
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	424204e0 	.word	0x424204e0

08000bb0 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
    const char *reset_cause_name = "";
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <resetCauseGetName+0x78>)
 8000bbc:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	d82b      	bhi.n	8000c1c <resetCauseGetName+0x6c>
 8000bc4:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <resetCauseGetName+0x1c>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000bed 	.word	0x08000bed
 8000bd0:	08000bf3 	.word	0x08000bf3
 8000bd4:	08000bf9 	.word	0x08000bf9
 8000bd8:	08000bff 	.word	0x08000bff
 8000bdc:	08000c05 	.word	0x08000c05
 8000be0:	08000c0b 	.word	0x08000c0b
 8000be4:	08000c11 	.word	0x08000c11
 8000be8:	08000c17 	.word	0x08000c17
    {
    case eRESET_CAUSE_UNKNOWN:
        reset_cause_name = "UNKNOWN";
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <resetCauseGetName+0x7c>)
 8000bee:	60fb      	str	r3, [r7, #12]
        break;
 8000bf0:	e014      	b.n	8000c1c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_LOW_POWER_RESET:
        reset_cause_name = "LOW_POWER_RESET";
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <resetCauseGetName+0x80>)
 8000bf4:	60fb      	str	r3, [r7, #12]
        break;
 8000bf6:	e011      	b.n	8000c1c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
        reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <resetCauseGetName+0x84>)
 8000bfa:	60fb      	str	r3, [r7, #12]
        break;
 8000bfc:	e00e      	b.n	8000c1c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
        reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <resetCauseGetName+0x88>)
 8000c00:	60fb      	str	r3, [r7, #12]
        break;
 8000c02:	e00b      	b.n	8000c1c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_SOFTWARE_RESET:
        reset_cause_name = "SOFTWARE_RESET";
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <resetCauseGetName+0x8c>)
 8000c06:	60fb      	str	r3, [r7, #12]
        break;
 8000c08:	e008      	b.n	8000c1c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
        reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <resetCauseGetName+0x90>)
 8000c0c:	60fb      	str	r3, [r7, #12]
        break;
 8000c0e:	e005      	b.n	8000c1c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
        reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <resetCauseGetName+0x94>)
 8000c12:	60fb      	str	r3, [r7, #12]
        break;
 8000c14:	e002      	b.n	8000c1c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_BROWNOUT_RESET:
        reset_cause_name = "BROWNOUT_RESET (BOR)";
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <resetCauseGetName+0x98>)
 8000c18:	60fb      	str	r3, [r7, #12]
        break;
 8000c1a:	bf00      	nop
    }
    return reset_cause_name;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	08004260 	.word	0x08004260
 8000c2c:	08004264 	.word	0x08004264
 8000c30:	0800426c 	.word	0x0800426c
 8000c34:	0800427c 	.word	0x0800427c
 8000c38:	08004294 	.word	0x08004294
 8000c3c:	080042b0 	.word	0x080042b0
 8000c40:	080042c0 	.word	0x080042c0
 8000c44:	080042f0 	.word	0x080042f0
 8000c48:	0800430c 	.word	0x0800430c

08000c4c <iwdgInit>:

void iwdgInit(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
    uint32_t configTime = millis;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
    if (configTime > PRESCALER_256_UPPER_LIMIT)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f246 6266 	movw	r2, #26214	; 0x6666
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d902      	bls.n	8000c6a <iwdgInit+0x1e>
    {
        configTime = PRESCALER_256_UPPER_LIMIT;
 8000c64:	f246 6366 	movw	r3, #26214	; 0x6666
 8000c68:	60fb      	str	r3, [r7, #12]
    }
    /* Select INDEPENDENT_WATCHDOG */
    hiwdg->Instance = IWDG;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <iwdgInit+0x70>)
 8000c6e:	601a      	str	r2, [r3, #0]
    /* Use prescaler LSI/128 */
    hiwdg->Init.Prescaler = IWDG_PRESCALER_128;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2205      	movs	r2, #5
 8000c74:	605a      	str	r2, [r3, #4]
    hiwdg->Init.Reload = (int)(IWDG_RESOLUTION * ((float)configTime / PRESCALER_128_UPPER_LIMIT));
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff fb1e 	bl	80002b8 <__aeabi_ui2f>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4910      	ldr	r1, [pc, #64]	; (8000cc0 <iwdgInit+0x74>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc25 	bl	80004d0 <__aeabi_fdiv>
 8000c86:	4603      	mov	r3, r0
 8000c88:	490e      	ldr	r1, [pc, #56]	; (8000cc4 <iwdgInit+0x78>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fb6c 	bl	8000368 <__aeabi_fmul>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fcb8 	bl	8000608 <__aeabi_f2iz>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f001 f9f8 	bl	8002096 <HAL_IWDG_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <iwdgInit+0x68>
    {
        _Error_Handler(__FILE__, __LINE__);
 8000cac:	2162      	movs	r1, #98	; 0x62
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <iwdgInit+0x7c>)
 8000cb0:	f7ff fef6 	bl	8000aa0 <_Error_Handler>
    }
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40003000 	.word	0x40003000
 8000cc0:	464ccc00 	.word	0x464ccc00
 8000cc4:	457ff000 	.word	0x457ff000
 8000cc8:	08004324 	.word	0x08004324

08000ccc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <RetargetInit+0x28>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <RetargetInit+0x2c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6898      	ldr	r0, [r3, #8]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	f002 f9fb 	bl	80030e0 <setvbuf>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000e8 	.word	0x200000e8
 8000cf8:	20000014 	.word	0x20000014

08000cfc <_isatty>:

int _isatty(int fd) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db04      	blt.n	8000d14 <_isatty+0x18>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	dc01      	bgt.n	8000d14 <_isatty+0x18>
    return 1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e005      	b.n	8000d20 <_isatty+0x24>

  errno = EBADF;
 8000d14:	f002 f9b2 	bl	800307c <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2209      	movs	r2, #9
 8000d1c:	601a      	str	r2, [r3, #0]
  return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_write>:

int _write(int fd, char* ptr, int len) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d002      	beq.n	8000d40 <_write+0x18>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d111      	bne.n	8000d64 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <_write+0x54>)
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	f001 ff8c 	bl	8002c6a <HAL_UART_Transmit>
 8000d52:	4603      	mov	r3, r0
 8000d54:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <_write+0x38>
      return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	e008      	b.n	8000d72 <_write+0x4a>
    else
      return EIO;
 8000d60:	2305      	movs	r3, #5
 8000d62:	e006      	b.n	8000d72 <_write+0x4a>
  }
  errno = EBADF;
 8000d64:	f002 f98a 	bl	800307c <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2209      	movs	r2, #9
 8000d6c:	601a      	str	r2, [r3, #0]
  return -1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000e8 	.word	0x200000e8

08000d80 <_close>:

int _close(int fd) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db04      	blt.n	8000d98 <_close+0x18>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	dc01      	bgt.n	8000d98 <_close+0x18>
    return 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e006      	b.n	8000da6 <_close+0x26>

  errno = EBADF;
 8000d98:	f002 f970 	bl	800307c <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2209      	movs	r2, #9
 8000da0:	601a      	str	r2, [r3, #0]
  return -1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000dba:	f002 f95f 	bl	800307c <__errno>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2209      	movs	r2, #9
 8000dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_read>:

int _read(int fd, char* ptr, int len) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d110      	bne.n	8000e04 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <_read+0x4c>)
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	2201      	movs	r2, #1
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	f001 ffce 	bl	8002d8e <HAL_UART_Receive>
 8000df2:	4603      	mov	r3, r0
 8000df4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <_read+0x30>
      return 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e008      	b.n	8000e12 <_read+0x42>
    else
      return EIO;
 8000e00:	2305      	movs	r3, #5
 8000e02:	e006      	b.n	8000e12 <_read+0x42>
  }
  errno = EBADF;
 8000e04:	f002 f93a 	bl	800307c <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2209      	movs	r2, #9
 8000e0c:	601a      	str	r2, [r3, #0]
  return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000e8 	.word	0x200000e8

08000e20 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db08      	blt.n	8000e42 <_fstat+0x22>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	dc05      	bgt.n	8000e42 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3c:	605a      	str	r2, [r3, #4]
    return 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e005      	b.n	8000e4e <_fstat+0x2e>
  }

  errno = EBADF;
 8000e42:	f002 f91b 	bl	800307c <__errno>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2209      	movs	r2, #9
 8000e4a:	601a      	str	r2, [r3, #0]
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000eaa:	f001 fe0d 	bl	8002ac8 <HAL_SPI_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eb4:	f7ff fe18 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000ec 	.word	0x200000ec
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <HAL_SPI_MspInit+0x88>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d12f      	bne.n	8000f44 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_SPI_MspInit+0x8c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f14:	23a0      	movs	r3, #160	; 0xa0
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <HAL_SPI_MspInit+0x90>)
 8000f28:	f000 ff00 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f2c:	2340      	movs	r3, #64	; 0x40
 8000f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_SPI_MspInit+0x90>)
 8000f40:	f000 fef4 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40013000 	.word	0x40013000
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_MspInit+0x60>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_MspInit+0x60>)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>
	...

08000fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af04      	add	r7, sp, #16

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    STM_LOGE(ISR_TAG, "");
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HardFault_Handler+0x2c>)
 8000fcc:	681c      	ldr	r4, [r3, #0]
 8000fce:	f000 f9a1 	bl	8001314 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HardFault_Handler+0x2c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	215e      	movs	r1, #94	; 0x5e
 8000fda:	9102      	str	r1, [sp, #8]
 8000fdc:	4905      	ldr	r1, [pc, #20]	; (8000ff4 <HardFault_Handler+0x30>)
 8000fde:	9101      	str	r1, [sp, #4]
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HardFault_Handler+0x34>)
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f000 f84d 	bl	8001088 <stm_log_write>
 8000fee:	e7ec      	b.n	8000fca <HardFault_Handler+0x6>
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	080043a4 	.word	0x080043a4
 8000ff8:	08004348 	.word	0x08004348

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001036:	f000 f95b 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <ADC1_2_IRQHandler+0x10>)
 8001046:	f000 fb09 	bl	800165c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000ac 	.word	0x200000ac

08001054 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	429a      	cmp	r2, r3
 8001066:	d106      	bne.n	8001076 <HAL_ADC_ConvCpltCallback+0x22>
  {
    adcValue = HAL_ADC_GetValue(hadc);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 faeb 	bl	8001644 <HAL_ADC_GetValue>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <HAL_ADC_ConvCpltCallback+0x30>)
 8001074:	801a      	strh	r2, [r3, #0]
  }
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000ac 	.word	0x200000ac
 8001084:	2000009c 	.word	0x2000009c

08001088 <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 8001088:	b40c      	push	{r2, r3}
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	6039      	str	r1, [r7, #0]
 8001094:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 800109c:	68f9      	ldr	r1, [r7, #12]
 800109e:	69b8      	ldr	r0, [r7, #24]
 80010a0:	f002 f8e4 	bl	800326c <viprintf>
    va_end(arg);
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ae:	b002      	add	sp, #8
 80010b0:	4770      	bx	lr
	...

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f001 ffca 	bl	800307c <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20005000 	.word	0x20005000
 8001114:	00000400 	.word	0x00000400
 8001118:	200000a0 	.word	0x200000a0
 800111c:	20000198 	.word	0x20000198

08001120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_USART1_UART_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001164:	f001 fd34 	bl	8002bd0 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800116e:	f7ff fcbb 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000144 	.word	0x20000144
 800117c:	40013800 	.word	0x40013800

08001180 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <HAL_UART_MspInit+0x8c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d131      	bne.n	8001204 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_UART_MspInit+0x90>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <HAL_UART_MspInit+0x90>)
 80011a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_UART_MspInit+0x90>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_UART_MspInit+0x90>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_UART_MspInit+0x90>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_UART_MspInit+0x90>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	480b      	ldr	r0, [pc, #44]	; (8001214 <HAL_UART_MspInit+0x94>)
 80011e6:	f000 fda1 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_UART_MspInit+0x94>)
 8001200:	f000 fd94 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40013800 	.word	0x40013800
 8001210:	40021000 	.word	0x40021000
 8001214:	40010800 	.word	0x40010800

08001218 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001218:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800121a:	e003      	b.n	8001224 <LoopCopyDataInit>

0800121c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800121e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001220:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001222:	3104      	adds	r1, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001224:	480a      	ldr	r0, [pc, #40]	; (8001250 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001228:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800122a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800122c:	d3f6      	bcc.n	800121c <CopyDataInit>
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001230:	e002      	b.n	8001238 <LoopFillZerobss>

08001232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001234:	f842 3b04 	str.w	r3, [r2], #4

08001238 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800123c:	d3f9      	bcc.n	8001232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800123e:	f7ff ff6f 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001242:	f001 ff21 	bl	8003088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001246:	f7ff fb33 	bl	80008b0 <main>
  bx lr
 800124a:	4770      	bx	lr
  ldr r3, =_sidata
 800124c:	08004470 	.word	0x08004470
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001254:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001258:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800125c:	20000198 	.word	0x20000198

08001260 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <CAN1_RX1_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x28>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_Init+0x28>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 fd17 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fe6a 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fd2f 	bl	8001d12 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 fcf7 	bl	8001cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000010 	.word	0x20000010
 80012ec:	2000000c 	.word	0x2000000c

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x1c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_IncTick+0x20>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <HAL_IncTick+0x20>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	20000010 	.word	0x20000010
 8001310:	20000184 	.word	0x20000184

08001314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <HAL_GetTick+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000184 	.word	0x20000184

08001328 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0be      	b.n	80014c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	2b00      	cmp	r3, #0
 8001356:	d109      	bne.n	800136c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff f9b2 	bl	80006d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fb8b 	bl	8001a88 <ADC_ConversionStop_Disable>
 8001372:	4603      	mov	r3, r0
 8001374:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 8099 	bne.w	80014b6 <HAL_ADC_Init+0x18e>
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 8095 	bne.w	80014b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001394:	f023 0302 	bic.w	r3, r3, #2
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7b1b      	ldrb	r3, [r3, #12]
 80013ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013c0:	d003      	beq.n	80013ca <HAL_ADC_Init+0xa2>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d102      	bne.n	80013d0 <HAL_ADC_Init+0xa8>
 80013ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ce:	e000      	b.n	80013d2 <HAL_ADC_Init+0xaa>
 80013d0:	2300      	movs	r3, #0
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7d1b      	ldrb	r3, [r3, #20]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d119      	bne.n	8001414 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7b1b      	ldrb	r3, [r3, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	035a      	lsls	r2, r3, #13
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	e00b      	b.n	8001414 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	f043 0220 	orr.w	r2, r3, #32
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_ADC_Init+0x1a8>)
 8001430:	4013      	ands	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	430b      	orrs	r3, r1
 800143a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001444:	d003      	beq.n	800144e <HAL_ADC_Init+0x126>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d104      	bne.n	8001458 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	3b01      	subs	r3, #1
 8001454:	051b      	lsls	r3, r3, #20
 8001456:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	430a      	orrs	r2, r1
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_ADC_Init+0x1ac>)
 8001474:	4013      	ands	r3, r2
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	429a      	cmp	r2, r3
 800147a:	d10b      	bne.n	8001494 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001492:	e018      	b.n	80014c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	f023 0312 	bic.w	r3, r3, #18
 800149c:	f043 0210 	orr.w	r2, r3, #16
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014b4:	e007      	b.n	80014c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	ffe1f7fd 	.word	0xffe1f7fd
 80014d4:	ff1f0efe 	.word	0xff1f0efe

080014d8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Start_IT+0x1a>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e0a0      	b.n	8001634 <HAL_ADC_Start_IT+0x15c>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fa72 	bl	80019e4 <ADC_Enable>
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 808f 	bne.w	800162a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a45      	ldr	r2, [pc, #276]	; (800163c <HAL_ADC_Start_IT+0x164>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d105      	bne.n	8001536 <HAL_ADC_Start_IT+0x5e>
 800152a:	4b45      	ldr	r3, [pc, #276]	; (8001640 <HAL_ADC_Start_IT+0x168>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d115      	bne.n	8001562 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d026      	beq.n	800159e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001558:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001560:	e01d      	b.n	800159e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a33      	ldr	r2, [pc, #204]	; (8001640 <HAL_ADC_Start_IT+0x168>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d004      	beq.n	8001582 <HAL_ADC_Start_IT+0xaa>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a2f      	ldr	r2, [pc, #188]	; (800163c <HAL_ADC_Start_IT+0x164>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10d      	bne.n	800159e <HAL_ADC_Start_IT+0xc6>
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_ADC_Start_IT+0x168>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001596:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	f023 0206 	bic.w	r2, r3, #6
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015b6:	e002      	b.n	80015be <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f06f 0202 	mvn.w	r2, #2
 80015ce:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ee:	d113      	bne.n	8001618 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015f4:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_ADC_Start_IT+0x164>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d105      	bne.n	8001606 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_ADC_Start_IT+0x168>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	d108      	bne.n	8001618 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	e00c      	b.n	8001632 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	e003      	b.n	8001632 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40012800 	.word	0x40012800
 8001640:	40012400 	.word	0x40012400

08001644 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	2b20      	cmp	r3, #32
 8001670:	d140      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b02      	cmp	r3, #2
 800167e:	d139      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016a6:	d11d      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d119      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0220 	bic.w	r2, r2, #32
 80016be:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fcb5 	bl	8001054 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f06f 0212 	mvn.w	r2, #18
 80016f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	2b80      	cmp	r3, #128	; 0x80
 8001700:	d14f      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b04      	cmp	r3, #4
 800170e:	d148      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001732:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001736:	d012      	beq.n	800175e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001742:	2b00      	cmp	r3, #0
 8001744:	d125      	bne.n	8001792 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001750:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001754:	d11d      	bne.n	8001792 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d119      	bne.n	8001792 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800176c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d105      	bne.n	8001792 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f9b2 	bl	8001afc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 020c 	mvn.w	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ac:	2b40      	cmp	r3, #64	; 0x40
 80017ae:	d114      	bne.n	80017da <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10d      	bne.n	80017da <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f809 	bl	80017e2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0201 	mvn.w	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x20>
 8001810:	2302      	movs	r3, #2
 8001812:	e0dc      	b.n	80019ce <HAL_ADC_ConfigChannel+0x1da>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b06      	cmp	r3, #6
 8001822:	d81c      	bhi.n	800185e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	3b05      	subs	r3, #5
 8001836:	221f      	movs	r2, #31
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	4019      	ands	r1, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b05      	subs	r3, #5
 8001850:	fa00 f203 	lsl.w	r2, r0, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	635a      	str	r2, [r3, #52]	; 0x34
 800185c:	e03c      	b.n	80018d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d81c      	bhi.n	80018a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	3b23      	subs	r3, #35	; 0x23
 8001878:	221f      	movs	r2, #31
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	4019      	ands	r1, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	3b23      	subs	r3, #35	; 0x23
 8001892:	fa00 f203 	lsl.w	r2, r0, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
 800189e:	e01b      	b.n	80018d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b41      	subs	r3, #65	; 0x41
 80018b2:	221f      	movs	r2, #31
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4019      	ands	r1, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b41      	subs	r3, #65	; 0x41
 80018cc:	fa00 f203 	lsl.w	r2, r0, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d91c      	bls.n	800191a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68d9      	ldr	r1, [r3, #12]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3b1e      	subs	r3, #30
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4019      	ands	r1, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6898      	ldr	r0, [r3, #8]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	3b1e      	subs	r3, #30
 800190c:	fa00 f203 	lsl.w	r2, r0, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	e019      	b.n	800194e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6919      	ldr	r1, [r3, #16]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	2207      	movs	r2, #7
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	4019      	ands	r1, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6898      	ldr	r0, [r3, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	fa00 f203 	lsl.w	r2, r0, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d003      	beq.n	800195e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800195a:	2b11      	cmp	r3, #17
 800195c:	d132      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d125      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d126      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001984:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b10      	cmp	r3, #16
 800198c:	d11a      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	0c9a      	lsrs	r2, r3, #18
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019a4:	e002      	b.n	80019ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f9      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x1b2>
 80019b2:	e007      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f043 0220 	orr.w	r2, r3, #32
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40012400 	.word	0x40012400
 80019dc:	20000008 	.word	0x20000008
 80019e0:	431bde83 	.word	0x431bde83

080019e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d039      	beq.n	8001a76 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0201 	orr.w	r2, r2, #1
 8001a10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <ADC_Enable+0x9c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <ADC_Enable+0xa0>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	0c9b      	lsrs	r3, r3, #18
 8001a1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a20:	e002      	b.n	8001a28 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a2e:	f7ff fc71 	bl	8001314 <HAL_GetTick>
 8001a32:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a34:	e018      	b.n	8001a68 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a36:	f7ff fc6d 	bl	8001314 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d911      	bls.n	8001a68 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	f043 0210 	orr.w	r2, r3, #16
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	f043 0201 	orr.w	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e007      	b.n	8001a78 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d1df      	bne.n	8001a36 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000008 	.word	0x20000008
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d127      	bne.n	8001af2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ab2:	f7ff fc2f 	bl	8001314 <HAL_GetTick>
 8001ab6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ab8:	e014      	b.n	8001ae4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aba:	f7ff fc2b 	bl	8001314 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d90d      	bls.n	8001ae4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	f043 0210 	orr.w	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e007      	b.n	8001af4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d0e3      	beq.n	8001aba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
	...

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4906      	ldr	r1, [pc, #24]	; (8001ba8 <__NVIC_EnableIRQ+0x34>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f7ff ff90 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff2d 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff42 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff90 	bl	8001c00 <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5f 	bl	8001bac <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff35 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffa2 	bl	8001c64 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b08b      	sub	sp, #44	; 0x2c
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	e169      	b.n	8002014 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d40:	2201      	movs	r2, #1
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	f040 8158 	bne.w	800200e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4a9a      	ldr	r2, [pc, #616]	; (8001fcc <HAL_GPIO_Init+0x2a0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d05e      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d68:	4a98      	ldr	r2, [pc, #608]	; (8001fcc <HAL_GPIO_Init+0x2a0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d875      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d6e:	4a98      	ldr	r2, [pc, #608]	; (8001fd0 <HAL_GPIO_Init+0x2a4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d058      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d74:	4a96      	ldr	r2, [pc, #600]	; (8001fd0 <HAL_GPIO_Init+0x2a4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d86f      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d7a:	4a96      	ldr	r2, [pc, #600]	; (8001fd4 <HAL_GPIO_Init+0x2a8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d052      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d80:	4a94      	ldr	r2, [pc, #592]	; (8001fd4 <HAL_GPIO_Init+0x2a8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d869      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d86:	4a94      	ldr	r2, [pc, #592]	; (8001fd8 <HAL_GPIO_Init+0x2ac>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04c      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d8c:	4a92      	ldr	r2, [pc, #584]	; (8001fd8 <HAL_GPIO_Init+0x2ac>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d863      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d92:	4a92      	ldr	r2, [pc, #584]	; (8001fdc <HAL_GPIO_Init+0x2b0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d046      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d98:	4a90      	ldr	r2, [pc, #576]	; (8001fdc <HAL_GPIO_Init+0x2b0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d85d      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d9e:	2b12      	cmp	r3, #18
 8001da0:	d82a      	bhi.n	8001df8 <HAL_GPIO_Init+0xcc>
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d859      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <HAL_GPIO_Init+0x80>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001e27 	.word	0x08001e27
 8001db0:	08001e01 	.word	0x08001e01
 8001db4:	08001e13 	.word	0x08001e13
 8001db8:	08001e55 	.word	0x08001e55
 8001dbc:	08001e5b 	.word	0x08001e5b
 8001dc0:	08001e5b 	.word	0x08001e5b
 8001dc4:	08001e5b 	.word	0x08001e5b
 8001dc8:	08001e5b 	.word	0x08001e5b
 8001dcc:	08001e5b 	.word	0x08001e5b
 8001dd0:	08001e5b 	.word	0x08001e5b
 8001dd4:	08001e5b 	.word	0x08001e5b
 8001dd8:	08001e5b 	.word	0x08001e5b
 8001ddc:	08001e5b 	.word	0x08001e5b
 8001de0:	08001e5b 	.word	0x08001e5b
 8001de4:	08001e5b 	.word	0x08001e5b
 8001de8:	08001e5b 	.word	0x08001e5b
 8001dec:	08001e5b 	.word	0x08001e5b
 8001df0:	08001e09 	.word	0x08001e09
 8001df4:	08001e1d 	.word	0x08001e1d
 8001df8:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <HAL_GPIO_Init+0x2b4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dfe:	e02c      	b.n	8001e5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e029      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e024      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	3308      	adds	r3, #8
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e01f      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	330c      	adds	r3, #12
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e01a      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e013      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	611a      	str	r2, [r3, #16]
          break;
 8001e46:	e009      	b.n	8001e5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	615a      	str	r2, [r3, #20]
          break;
 8001e52:	e003      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          break;
 8001e5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d801      	bhi.n	8001e66 <HAL_GPIO_Init+0x13a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	e001      	b.n	8001e6a <HAL_GPIO_Init+0x13e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2bff      	cmp	r3, #255	; 0xff
 8001e70:	d802      	bhi.n	8001e78 <HAL_GPIO_Init+0x14c>
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x152>
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3b08      	subs	r3, #8
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	210f      	movs	r1, #15
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	6a39      	ldr	r1, [r7, #32]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80b1 	beq.w	800200e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eac:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <HAL_GPIO_Init+0x2b8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a4c      	ldr	r2, [pc, #304]	; (8001fe4 <HAL_GPIO_Init+0x2b8>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_GPIO_Init+0x2b8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec4:	4a48      	ldr	r2, [pc, #288]	; (8001fe8 <HAL_GPIO_Init+0x2bc>)
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a40      	ldr	r2, [pc, #256]	; (8001fec <HAL_GPIO_Init+0x2c0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_Init+0x1ec>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_GPIO_Init+0x2c4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1e8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3e      	ldr	r2, [pc, #248]	; (8001ff4 <HAL_GPIO_Init+0x2c8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1e4>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3d      	ldr	r2, [pc, #244]	; (8001ff8 <HAL_GPIO_Init+0x2cc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1e0>
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e006      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	e004      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f2a:	492f      	ldr	r1, [pc, #188]	; (8001fe8 <HAL_GPIO_Init+0x2bc>)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f44:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	492c      	ldr	r1, [pc, #176]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4928      	ldr	r1, [pc, #160]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4922      	ldr	r1, [pc, #136]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	491e      	ldr	r1, [pc, #120]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	4918      	ldr	r1, [pc, #96]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4914      	ldr	r1, [pc, #80]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d021      	beq.n	8002000 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	490e      	ldr	r1, [pc, #56]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
 8001fc8:	e021      	b.n	800200e <HAL_GPIO_Init+0x2e2>
 8001fca:	bf00      	nop
 8001fcc:	10320000 	.word	0x10320000
 8001fd0:	10310000 	.word	0x10310000
 8001fd4:	10220000 	.word	0x10220000
 8001fd8:	10210000 	.word	0x10210000
 8001fdc:	10120000 	.word	0x10120000
 8001fe0:	10110000 	.word	0x10110000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40011400 	.word	0x40011400
 8001ffc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_GPIO_Init+0x304>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	43db      	mvns	r3, r3
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <HAL_GPIO_Init+0x304>)
 800200a:	4013      	ands	r3, r2
 800200c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3301      	adds	r3, #1
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	f47f ae8e 	bne.w	8001d40 <HAL_GPIO_Init+0x14>
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	372c      	adds	r7, #44	; 0x2c
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40010400 	.word	0x40010400

08002034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	611a      	str	r2, [r3, #16]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4013      	ands	r3, r2
 800207c:	041a      	lsls	r2, r3, #16
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43d9      	mvns	r1, r3
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	400b      	ands	r3, r1
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	611a      	str	r2, [r3, #16]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e02b      	b.n	8002100 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80020b0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f245 5255 	movw	r2, #21845	; 0x5555
 80020ba:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6852      	ldr	r2, [r2, #4]
 80020c4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6892      	ldr	r2, [r2, #8]
 80020ce:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80020d0:	f7ff f920 	bl	8001314 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80020d6:	e008      	b.n	80020ea <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80020d8:	f7ff f91c 	bl	8001314 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b26      	cmp	r3, #38	; 0x26
 80020e4:	d901      	bls.n	80020ea <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e00a      	b.n	8002100 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f1      	bne.n	80020d8 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80020fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002118:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
	...

08002128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e26c      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8087 	beq.w	8002256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002148:	4b92      	ldr	r3, [pc, #584]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b04      	cmp	r3, #4
 8002152:	d00c      	beq.n	800216e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002154:	4b8f      	ldr	r3, [pc, #572]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d112      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
 8002160:	4b8c      	ldr	r3, [pc, #560]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d10b      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216e:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d06c      	beq.n	8002254 <HAL_RCC_OscConfig+0x12c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d168      	bne.n	8002254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e246      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x76>
 8002190:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a7f      	ldr	r2, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e02e      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x98>
 80021a6:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7a      	ldr	r2, [pc, #488]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b78      	ldr	r3, [pc, #480]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a77      	ldr	r2, [pc, #476]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e01d      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0xbc>
 80021ca:	4b72      	ldr	r3, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a71      	ldr	r2, [pc, #452]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021e4:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6a      	ldr	r2, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b68      	ldr	r3, [pc, #416]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a67      	ldr	r2, [pc, #412]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff f886 	bl	8001314 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff f882 	bl	8001314 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1fa      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b5d      	ldr	r3, [pc, #372]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0xe4>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff f872 	bl	8001314 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff f86e 	bl	8001314 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1e6      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x10c>
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d063      	beq.n	800232a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002262:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b08      	cmp	r3, #8
 8002278:	d11c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d116      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1ba      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4939      	ldr	r1, [pc, #228]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	e03a      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x270>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff f827 	bl	8001314 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7ff f823 	bl	8001314 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e19b      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4927      	ldr	r1, [pc, #156]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x270>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff f806 	bl	8001314 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230c:	f7ff f802 	bl	8001314 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e17a      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d03a      	beq.n	80023ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_RCC_OscConfig+0x274>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7fe ffe6 	bl	8001314 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7fe ffe2 	bl	8001314 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e15a      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f000 fad8 	bl	8002920 <RCC_Delay>
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_RCC_OscConfig+0x274>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe ffcc 	bl	8001314 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237e:	e00f      	b.n	80023a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe ffc8 	bl	8001314 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d908      	bls.n	80023a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e140      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	42420000 	.word	0x42420000
 800239c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b9e      	ldr	r3, [pc, #632]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e9      	bne.n	8002380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a6 	beq.w	8002506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b97      	ldr	r3, [pc, #604]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10d      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b94      	ldr	r3, [pc, #592]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a93      	ldr	r2, [pc, #588]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b91      	ldr	r3, [pc, #580]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b8e      	ldr	r3, [pc, #568]	; (8002620 <HAL_RCC_OscConfig+0x4f8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b8b      	ldr	r3, [pc, #556]	; (8002620 <HAL_RCC_OscConfig+0x4f8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a8a      	ldr	r2, [pc, #552]	; (8002620 <HAL_RCC_OscConfig+0x4f8>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7fe ff89 	bl	8001314 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7fe ff85 	bl	8001314 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b64      	cmp	r3, #100	; 0x64
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0fd      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b81      	ldr	r3, [pc, #516]	; (8002620 <HAL_RCC_OscConfig+0x4f8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x312>
 800242c:	4b7b      	ldr	r3, [pc, #492]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a7a      	ldr	r2, [pc, #488]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	e02d      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x334>
 8002442:	4b76      	ldr	r3, [pc, #472]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a75      	ldr	r2, [pc, #468]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b73      	ldr	r3, [pc, #460]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a72      	ldr	r2, [pc, #456]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	e01c      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b05      	cmp	r3, #5
 8002462:	d10c      	bne.n	800247e <HAL_RCC_OscConfig+0x356>
 8002464:	4b6d      	ldr	r3, [pc, #436]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a6c      	ldr	r2, [pc, #432]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	4b6a      	ldr	r3, [pc, #424]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a69      	ldr	r2, [pc, #420]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e00b      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a66      	ldr	r2, [pc, #408]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b64      	ldr	r3, [pc, #400]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a63      	ldr	r2, [pc, #396]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d015      	beq.n	80024ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7fe ff39 	bl	8001314 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe ff35 	bl	8001314 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0ab      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	4b57      	ldr	r3, [pc, #348]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ee      	beq.n	80024a6 <HAL_RCC_OscConfig+0x37e>
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7fe ff23 	bl	8001314 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7fe ff1f 	bl	8001314 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e095      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	4b4c      	ldr	r3, [pc, #304]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ee      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d105      	bne.n	8002506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4b48      	ldr	r3, [pc, #288]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a47      	ldr	r2, [pc, #284]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8081 	beq.w	8002612 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002510:	4b42      	ldr	r3, [pc, #264]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d061      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d146      	bne.n	80025b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <HAL_RCC_OscConfig+0x4fc>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fef3 	bl	8001314 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002532:	f7fe feef 	bl	8001314 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e067      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	492d      	ldr	r1, [pc, #180]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a19      	ldr	r1, [r3, #32]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	430b      	orrs	r3, r1
 800257e:	4927      	ldr	r1, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_RCC_OscConfig+0x4fc>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe fec3 	bl	8001314 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7fe febf 	bl	8001314 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e037      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x46a>
 80025b0:	e02f      	b.n	8002612 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_RCC_OscConfig+0x4fc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe feac 	bl	8001314 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe fea8 	bl	8001314 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e020      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x498>
 80025de:	e018      	b.n	8002612 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e013      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
 8002624:	42420060 	.word	0x42420060

08002628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0d0      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d910      	bls.n	800266c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4965      	ldr	r1, [pc, #404]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0b8      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a58      	ldr	r2, [pc, #352]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800268e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800269c:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a52      	ldr	r2, [pc, #328]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	494d      	ldr	r1, [pc, #308]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d040      	beq.n	8002748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d115      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07f      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e073      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e06b      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b39      	ldr	r3, [pc, #228]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4936      	ldr	r1, [pc, #216]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7fe fdfc 	bl	8001314 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fe fdf8 	bl	8001314 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e053      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d210      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0207 	bic.w	r2, r3, #7
 800275e:	4922      	ldr	r1, [pc, #136]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e032      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4916      	ldr	r1, [pc, #88]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	490e      	ldr	r1, [pc, #56]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027b6:	f000 f821 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	490a      	ldr	r1, [pc, #40]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	5ccb      	ldrb	r3, [r1, r3]
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1cc>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1d0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fd5a 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40021000 	.word	0x40021000
 80027f0:	080043b8 	.word	0x080043b8
 80027f4:	20000008 	.word	0x20000008
 80027f8:	2000000c 	.word	0x2000000c

080027fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b490      	push	{r4, r7}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002802:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002804:	1d3c      	adds	r4, r7, #4
 8002806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800280c:	f240 2301 	movw	r3, #513	; 0x201
 8002810:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b04      	cmp	r3, #4
 8002834:	d002      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x40>
 8002836:	2b08      	cmp	r3, #8
 8002838:	d003      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0x46>
 800283a:	e02d      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283e:	623b      	str	r3, [r7, #32]
      break;
 8002840:	e02d      	b.n	800289e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	0c9b      	lsrs	r3, r3, #18
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800284e:	4413      	add	r3, r2
 8002850:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002854:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002860:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0c5b      	lsrs	r3, r3, #17
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800286e:	4413      	add	r3, r2
 8002870:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002874:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800287a:	fb02 f203 	mul.w	r2, r2, r3
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	e004      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	623b      	str	r3, [r7, #32]
      break;
 8002896:	e002      	b.n	800289e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289a:	623b      	str	r3, [r7, #32]
      break;
 800289c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289e:	6a3b      	ldr	r3, [r7, #32]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc90      	pop	{r4, r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	0800436c 	.word	0x0800436c
 80028b0:	40021000 	.word	0x40021000
 80028b4:	007a1200 	.word	0x007a1200
 80028b8:	003d0900 	.word	0x003d0900

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b02      	ldr	r3, [pc, #8]	; (80028cc <HAL_RCC_GetHCLKFreq+0x10>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20000008 	.word	0x20000008

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d4:	f7ff fff2 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	080043c8 	.word	0x080043c8

080028f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028fc:	f7ff ffde 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0adb      	lsrs	r3, r3, #11
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <HAL_RCC_GetPCLK2Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	080043c8 	.word	0x080043c8

08002920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <RCC_Delay+0x34>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <RCC_Delay+0x38>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	0a5b      	lsrs	r3, r3, #9
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800293c:	bf00      	nop
  }
  while (Delay --);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	60fa      	str	r2, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f9      	bne.n	800293c <RCC_Delay+0x1c>
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	20000008 	.word	0x20000008
 8002958:	10624dd3 	.word	0x10624dd3

0800295c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d07d      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002978:	2300      	movs	r3, #0
 800297a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297c:	4b4f      	ldr	r3, [pc, #316]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10d      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002992:	61d3      	str	r3, [r2, #28]
 8002994:	4b49      	ldr	r3, [pc, #292]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a0:	2301      	movs	r3, #1
 80029a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d118      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a42      	ldr	r2, [pc, #264]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029bc:	f7fe fcaa 	bl	8001314 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	e008      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe fca6 	bl	8001314 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e06d      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029e2:	4b36      	ldr	r3, [pc, #216]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02e      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d027      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a00:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a10:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a16:	4a29      	ldr	r2, [pc, #164]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d014      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe fc75 	bl	8001314 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe fc71 	bl	8001314 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e036      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ee      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a50:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4917      	ldr	r1, [pc, #92]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	4a13      	ldr	r2, [pc, #76]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	490b      	ldr	r1, [pc, #44]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4904      	ldr	r1, [pc, #16]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	42420440 	.word	0x42420440

08002ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e076      	b.n	8002bc8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aea:	d009      	beq.n	8002b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
 8002af2:	e005      	b.n	8002b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f9d2 	bl	8000ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	ea42 0103 	orr.w	r1, r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	0c1a      	lsrs	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f002 0204 	and.w	r2, r2, #4
 8002ba6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69da      	ldr	r2, [r3, #28]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e03f      	b.n	8002c62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fac2 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	; 0x24
 8002c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f9a3 	bl	8002f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b08a      	sub	sp, #40	; 0x28
 8002c6e:	af02      	add	r7, sp, #8
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d17c      	bne.n	8002d84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_UART_Transmit+0x2c>
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e075      	b.n	8002d86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_UART_Transmit+0x3e>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e06e      	b.n	8002d86 <HAL_UART_Transmit+0x11c>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2221      	movs	r2, #33	; 0x21
 8002cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cbe:	f7fe fb29 	bl	8001314 <HAL_GetTick>
 8002cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	88fa      	ldrh	r2, [r7, #6]
 8002cc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	88fa      	ldrh	r2, [r7, #6]
 8002cce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd8:	d108      	bne.n	8002cec <HAL_UART_Transmit+0x82>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d104      	bne.n	8002cec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	e003      	b.n	8002cf4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002cfc:	e02a      	b.n	8002d54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f8df 	bl	8002ecc <UART_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e036      	b.n	8002d86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10b      	bne.n	8002d36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	3302      	adds	r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	e007      	b.n	8002d46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3301      	adds	r3, #1
 8002d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1cf      	bne.n	8002cfe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2140      	movs	r1, #64	; 0x40
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f8af 	bl	8002ecc <UART_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e006      	b.n	8002d86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b08a      	sub	sp, #40	; 0x28
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	f040 8089 	bne.w	8002ec2 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_UART_Receive+0x2e>
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e081      	b.n	8002ec4 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Receive+0x40>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e07a      	b.n	8002ec4 <HAL_UART_Receive+0x136>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2222      	movs	r2, #34	; 0x22
 8002de0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fa96 	bl	8001314 <HAL_GetTick>
 8002de8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d108      	bne.n	8002e12 <HAL_UART_Receive+0x84>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	e003      	b.n	8002e1a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e22:	e043      	b.n	8002eac <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2120      	movs	r1, #32
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f84c 	bl	8002ecc <UART_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e042      	b.n	8002ec4 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10c      	bne.n	8002e5e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	3302      	adds	r3, #2
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	e01f      	b.n	8002e9e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e66:	d007      	beq.n	8002e78 <HAL_UART_Receive+0xea>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <HAL_UART_Receive+0xf8>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e008      	b.n	8002e98 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1b6      	bne.n	8002e24 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002edc:	e02c      	b.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d028      	beq.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <UART_WaitOnFlagUntilTimeout+0x30>
 8002eec:	f7fe fa12 	bl	8001314 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d21d      	bcs.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e00f      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d0c3      	beq.n	8002ede <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f9a:	f023 030c 	bic.w	r3, r3, #12
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <UART_SetConfig+0x114>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d103      	bne.n	8002fd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fc8:	f7ff fc96 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	e002      	b.n	8002fd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f7ff fc7e 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	009a      	lsls	r2, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	4a22      	ldr	r2, [pc, #136]	; (8003078 <UART_SetConfig+0x118>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	0119      	lsls	r1, r3, #4
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009a      	lsls	r2, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fbb2 f2f3 	udiv	r2, r2, r3
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <UART_SetConfig+0x118>)
 800300e:	fba3 0302 	umull	r0, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2064      	movs	r0, #100	; 0x64
 8003016:	fb00 f303 	mul.w	r3, r0, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	3332      	adds	r3, #50	; 0x32
 8003020:	4a15      	ldr	r2, [pc, #84]	; (8003078 <UART_SetConfig+0x118>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302c:	4419      	add	r1, r3
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	009a      	lsls	r2, r3, #2
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	fbb2 f2f3 	udiv	r2, r2, r3
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <UART_SetConfig+0x118>)
 8003046:	fba3 0302 	umull	r0, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2064      	movs	r0, #100	; 0x64
 800304e:	fb00 f303 	mul.w	r3, r0, r3
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	3332      	adds	r3, #50	; 0x32
 8003058:	4a07      	ldr	r2, [pc, #28]	; (8003078 <UART_SetConfig+0x118>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	440a      	add	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40013800 	.word	0x40013800
 8003078:	51eb851f 	.word	0x51eb851f

0800307c <__errno>:
 800307c:	4b01      	ldr	r3, [pc, #4]	; (8003084 <__errno+0x8>)
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000014 	.word	0x20000014

08003088 <__libc_init_array>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	2600      	movs	r6, #0
 800308c:	4d0c      	ldr	r5, [pc, #48]	; (80030c0 <__libc_init_array+0x38>)
 800308e:	4c0d      	ldr	r4, [pc, #52]	; (80030c4 <__libc_init_array+0x3c>)
 8003090:	1b64      	subs	r4, r4, r5
 8003092:	10a4      	asrs	r4, r4, #2
 8003094:	42a6      	cmp	r6, r4
 8003096:	d109      	bne.n	80030ac <__libc_init_array+0x24>
 8003098:	f001 f84e 	bl	8004138 <_init>
 800309c:	2600      	movs	r6, #0
 800309e:	4d0a      	ldr	r5, [pc, #40]	; (80030c8 <__libc_init_array+0x40>)
 80030a0:	4c0a      	ldr	r4, [pc, #40]	; (80030cc <__libc_init_array+0x44>)
 80030a2:	1b64      	subs	r4, r4, r5
 80030a4:	10a4      	asrs	r4, r4, #2
 80030a6:	42a6      	cmp	r6, r4
 80030a8:	d105      	bne.n	80030b6 <__libc_init_array+0x2e>
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b0:	4798      	blx	r3
 80030b2:	3601      	adds	r6, #1
 80030b4:	e7ee      	b.n	8003094 <__libc_init_array+0xc>
 80030b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ba:	4798      	blx	r3
 80030bc:	3601      	adds	r6, #1
 80030be:	e7f2      	b.n	80030a6 <__libc_init_array+0x1e>
 80030c0:	08004468 	.word	0x08004468
 80030c4:	08004468 	.word	0x08004468
 80030c8:	08004468 	.word	0x08004468
 80030cc:	0800446c 	.word	0x0800446c

080030d0 <memset>:
 80030d0:	4603      	mov	r3, r0
 80030d2:	4402      	add	r2, r0
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d100      	bne.n	80030da <memset+0xa>
 80030d8:	4770      	bx	lr
 80030da:	f803 1b01 	strb.w	r1, [r3], #1
 80030de:	e7f9      	b.n	80030d4 <memset+0x4>

080030e0 <setvbuf>:
 80030e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80030e4:	461d      	mov	r5, r3
 80030e6:	4b5d      	ldr	r3, [pc, #372]	; (800325c <setvbuf+0x17c>)
 80030e8:	4604      	mov	r4, r0
 80030ea:	681f      	ldr	r7, [r3, #0]
 80030ec:	460e      	mov	r6, r1
 80030ee:	4690      	mov	r8, r2
 80030f0:	b127      	cbz	r7, 80030fc <setvbuf+0x1c>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	b913      	cbnz	r3, 80030fc <setvbuf+0x1c>
 80030f6:	4638      	mov	r0, r7
 80030f8:	f000 f9e8 	bl	80034cc <__sinit>
 80030fc:	4b58      	ldr	r3, [pc, #352]	; (8003260 <setvbuf+0x180>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d167      	bne.n	80031d2 <setvbuf+0xf2>
 8003102:	687c      	ldr	r4, [r7, #4]
 8003104:	f1b8 0f02 	cmp.w	r8, #2
 8003108:	d006      	beq.n	8003118 <setvbuf+0x38>
 800310a:	f1b8 0f01 	cmp.w	r8, #1
 800310e:	f200 809f 	bhi.w	8003250 <setvbuf+0x170>
 8003112:	2d00      	cmp	r5, #0
 8003114:	f2c0 809c 	blt.w	8003250 <setvbuf+0x170>
 8003118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800311a:	07db      	lsls	r3, r3, #31
 800311c:	d405      	bmi.n	800312a <setvbuf+0x4a>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	0598      	lsls	r0, r3, #22
 8003122:	d402      	bmi.n	800312a <setvbuf+0x4a>
 8003124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003126:	f000 fa6f 	bl	8003608 <__retarget_lock_acquire_recursive>
 800312a:	4621      	mov	r1, r4
 800312c:	4638      	mov	r0, r7
 800312e:	f000 f939 	bl	80033a4 <_fflush_r>
 8003132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003134:	b141      	cbz	r1, 8003148 <setvbuf+0x68>
 8003136:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800313a:	4299      	cmp	r1, r3
 800313c:	d002      	beq.n	8003144 <setvbuf+0x64>
 800313e:	4638      	mov	r0, r7
 8003140:	f000 fad0 	bl	80036e4 <_free_r>
 8003144:	2300      	movs	r3, #0
 8003146:	6363      	str	r3, [r4, #52]	; 0x34
 8003148:	2300      	movs	r3, #0
 800314a:	61a3      	str	r3, [r4, #24]
 800314c:	6063      	str	r3, [r4, #4]
 800314e:	89a3      	ldrh	r3, [r4, #12]
 8003150:	0619      	lsls	r1, r3, #24
 8003152:	d503      	bpl.n	800315c <setvbuf+0x7c>
 8003154:	4638      	mov	r0, r7
 8003156:	6921      	ldr	r1, [r4, #16]
 8003158:	f000 fac4 	bl	80036e4 <_free_r>
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	f1b8 0f02 	cmp.w	r8, #2
 8003162:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	81a3      	strh	r3, [r4, #12]
 800316c:	d06c      	beq.n	8003248 <setvbuf+0x168>
 800316e:	ab01      	add	r3, sp, #4
 8003170:	466a      	mov	r2, sp
 8003172:	4621      	mov	r1, r4
 8003174:	4638      	mov	r0, r7
 8003176:	f000 fa49 	bl	800360c <__swhatbuf_r>
 800317a:	89a3      	ldrh	r3, [r4, #12]
 800317c:	4318      	orrs	r0, r3
 800317e:	81a0      	strh	r0, [r4, #12]
 8003180:	2d00      	cmp	r5, #0
 8003182:	d130      	bne.n	80031e6 <setvbuf+0x106>
 8003184:	9d00      	ldr	r5, [sp, #0]
 8003186:	4628      	mov	r0, r5
 8003188:	f000 faa4 	bl	80036d4 <malloc>
 800318c:	4606      	mov	r6, r0
 800318e:	2800      	cmp	r0, #0
 8003190:	d155      	bne.n	800323e <setvbuf+0x15e>
 8003192:	f8dd 9000 	ldr.w	r9, [sp]
 8003196:	45a9      	cmp	r9, r5
 8003198:	d14a      	bne.n	8003230 <setvbuf+0x150>
 800319a:	f04f 35ff 	mov.w	r5, #4294967295
 800319e:	2200      	movs	r2, #0
 80031a0:	60a2      	str	r2, [r4, #8]
 80031a2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80031a6:	6022      	str	r2, [r4, #0]
 80031a8:	6122      	str	r2, [r4, #16]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031b0:	6162      	str	r2, [r4, #20]
 80031b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	07d2      	lsls	r2, r2, #31
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	d405      	bmi.n	80031ca <setvbuf+0xea>
 80031be:	f413 7f00 	tst.w	r3, #512	; 0x200
 80031c2:	d102      	bne.n	80031ca <setvbuf+0xea>
 80031c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031c6:	f000 fa20 	bl	800360a <__retarget_lock_release_recursive>
 80031ca:	4628      	mov	r0, r5
 80031cc:	b003      	add	sp, #12
 80031ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <setvbuf+0x184>)
 80031d4:	429c      	cmp	r4, r3
 80031d6:	d101      	bne.n	80031dc <setvbuf+0xfc>
 80031d8:	68bc      	ldr	r4, [r7, #8]
 80031da:	e793      	b.n	8003104 <setvbuf+0x24>
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <setvbuf+0x188>)
 80031de:	429c      	cmp	r4, r3
 80031e0:	bf08      	it	eq
 80031e2:	68fc      	ldreq	r4, [r7, #12]
 80031e4:	e78e      	b.n	8003104 <setvbuf+0x24>
 80031e6:	2e00      	cmp	r6, #0
 80031e8:	d0cd      	beq.n	8003186 <setvbuf+0xa6>
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	b913      	cbnz	r3, 80031f4 <setvbuf+0x114>
 80031ee:	4638      	mov	r0, r7
 80031f0:	f000 f96c 	bl	80034cc <__sinit>
 80031f4:	f1b8 0f01 	cmp.w	r8, #1
 80031f8:	bf08      	it	eq
 80031fa:	89a3      	ldrheq	r3, [r4, #12]
 80031fc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003200:	bf04      	itt	eq
 8003202:	f043 0301 	orreq.w	r3, r3, #1
 8003206:	81a3      	strheq	r3, [r4, #12]
 8003208:	89a2      	ldrh	r2, [r4, #12]
 800320a:	6026      	str	r6, [r4, #0]
 800320c:	f012 0308 	ands.w	r3, r2, #8
 8003210:	d01c      	beq.n	800324c <setvbuf+0x16c>
 8003212:	07d3      	lsls	r3, r2, #31
 8003214:	bf41      	itttt	mi
 8003216:	2300      	movmi	r3, #0
 8003218:	426d      	negmi	r5, r5
 800321a:	60a3      	strmi	r3, [r4, #8]
 800321c:	61a5      	strmi	r5, [r4, #24]
 800321e:	bf58      	it	pl
 8003220:	60a5      	strpl	r5, [r4, #8]
 8003222:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003224:	f015 0501 	ands.w	r5, r5, #1
 8003228:	d115      	bne.n	8003256 <setvbuf+0x176>
 800322a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800322e:	e7c8      	b.n	80031c2 <setvbuf+0xe2>
 8003230:	4648      	mov	r0, r9
 8003232:	f000 fa4f 	bl	80036d4 <malloc>
 8003236:	4606      	mov	r6, r0
 8003238:	2800      	cmp	r0, #0
 800323a:	d0ae      	beq.n	800319a <setvbuf+0xba>
 800323c:	464d      	mov	r5, r9
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003244:	81a3      	strh	r3, [r4, #12]
 8003246:	e7d0      	b.n	80031ea <setvbuf+0x10a>
 8003248:	2500      	movs	r5, #0
 800324a:	e7a8      	b.n	800319e <setvbuf+0xbe>
 800324c:	60a3      	str	r3, [r4, #8]
 800324e:	e7e8      	b.n	8003222 <setvbuf+0x142>
 8003250:	f04f 35ff 	mov.w	r5, #4294967295
 8003254:	e7b9      	b.n	80031ca <setvbuf+0xea>
 8003256:	2500      	movs	r5, #0
 8003258:	e7b7      	b.n	80031ca <setvbuf+0xea>
 800325a:	bf00      	nop
 800325c:	20000014 	.word	0x20000014
 8003260:	080043f4 	.word	0x080043f4
 8003264:	08004414 	.word	0x08004414
 8003268:	080043d4 	.word	0x080043d4

0800326c <viprintf>:
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <viprintf+0x28>)
 800326e:	b570      	push	{r4, r5, r6, lr}
 8003270:	681c      	ldr	r4, [r3, #0]
 8003272:	4605      	mov	r5, r0
 8003274:	460e      	mov	r6, r1
 8003276:	b124      	cbz	r4, 8003282 <viprintf+0x16>
 8003278:	69a3      	ldr	r3, [r4, #24]
 800327a:	b913      	cbnz	r3, 8003282 <viprintf+0x16>
 800327c:	4620      	mov	r0, r4
 800327e:	f000 f925 	bl	80034cc <__sinit>
 8003282:	4633      	mov	r3, r6
 8003284:	462a      	mov	r2, r5
 8003286:	4620      	mov	r0, r4
 8003288:	68a1      	ldr	r1, [r4, #8]
 800328a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800328e:	f000 baf7 	b.w	8003880 <_vfiprintf_r>
 8003292:	bf00      	nop
 8003294:	20000014 	.word	0x20000014

08003298 <__sflush_r>:
 8003298:	898a      	ldrh	r2, [r1, #12]
 800329a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800329e:	4605      	mov	r5, r0
 80032a0:	0710      	lsls	r0, r2, #28
 80032a2:	460c      	mov	r4, r1
 80032a4:	d458      	bmi.n	8003358 <__sflush_r+0xc0>
 80032a6:	684b      	ldr	r3, [r1, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	dc05      	bgt.n	80032b8 <__sflush_r+0x20>
 80032ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	dc02      	bgt.n	80032b8 <__sflush_r+0x20>
 80032b2:	2000      	movs	r0, #0
 80032b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032ba:	2e00      	cmp	r6, #0
 80032bc:	d0f9      	beq.n	80032b2 <__sflush_r+0x1a>
 80032be:	2300      	movs	r3, #0
 80032c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032c4:	682f      	ldr	r7, [r5, #0]
 80032c6:	602b      	str	r3, [r5, #0]
 80032c8:	d032      	beq.n	8003330 <__sflush_r+0x98>
 80032ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	075a      	lsls	r2, r3, #29
 80032d0:	d505      	bpl.n	80032de <__sflush_r+0x46>
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	1ac0      	subs	r0, r0, r3
 80032d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032d8:	b10b      	cbz	r3, 80032de <__sflush_r+0x46>
 80032da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032dc:	1ac0      	subs	r0, r0, r3
 80032de:	2300      	movs	r3, #0
 80032e0:	4602      	mov	r2, r0
 80032e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032e4:	4628      	mov	r0, r5
 80032e6:	6a21      	ldr	r1, [r4, #32]
 80032e8:	47b0      	blx	r6
 80032ea:	1c43      	adds	r3, r0, #1
 80032ec:	89a3      	ldrh	r3, [r4, #12]
 80032ee:	d106      	bne.n	80032fe <__sflush_r+0x66>
 80032f0:	6829      	ldr	r1, [r5, #0]
 80032f2:	291d      	cmp	r1, #29
 80032f4:	d82c      	bhi.n	8003350 <__sflush_r+0xb8>
 80032f6:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <__sflush_r+0x108>)
 80032f8:	40ca      	lsrs	r2, r1
 80032fa:	07d6      	lsls	r6, r2, #31
 80032fc:	d528      	bpl.n	8003350 <__sflush_r+0xb8>
 80032fe:	2200      	movs	r2, #0
 8003300:	6062      	str	r2, [r4, #4]
 8003302:	6922      	ldr	r2, [r4, #16]
 8003304:	04d9      	lsls	r1, r3, #19
 8003306:	6022      	str	r2, [r4, #0]
 8003308:	d504      	bpl.n	8003314 <__sflush_r+0x7c>
 800330a:	1c42      	adds	r2, r0, #1
 800330c:	d101      	bne.n	8003312 <__sflush_r+0x7a>
 800330e:	682b      	ldr	r3, [r5, #0]
 8003310:	b903      	cbnz	r3, 8003314 <__sflush_r+0x7c>
 8003312:	6560      	str	r0, [r4, #84]	; 0x54
 8003314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003316:	602f      	str	r7, [r5, #0]
 8003318:	2900      	cmp	r1, #0
 800331a:	d0ca      	beq.n	80032b2 <__sflush_r+0x1a>
 800331c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003320:	4299      	cmp	r1, r3
 8003322:	d002      	beq.n	800332a <__sflush_r+0x92>
 8003324:	4628      	mov	r0, r5
 8003326:	f000 f9dd 	bl	80036e4 <_free_r>
 800332a:	2000      	movs	r0, #0
 800332c:	6360      	str	r0, [r4, #52]	; 0x34
 800332e:	e7c1      	b.n	80032b4 <__sflush_r+0x1c>
 8003330:	6a21      	ldr	r1, [r4, #32]
 8003332:	2301      	movs	r3, #1
 8003334:	4628      	mov	r0, r5
 8003336:	47b0      	blx	r6
 8003338:	1c41      	adds	r1, r0, #1
 800333a:	d1c7      	bne.n	80032cc <__sflush_r+0x34>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0c4      	beq.n	80032cc <__sflush_r+0x34>
 8003342:	2b1d      	cmp	r3, #29
 8003344:	d001      	beq.n	800334a <__sflush_r+0xb2>
 8003346:	2b16      	cmp	r3, #22
 8003348:	d101      	bne.n	800334e <__sflush_r+0xb6>
 800334a:	602f      	str	r7, [r5, #0]
 800334c:	e7b1      	b.n	80032b2 <__sflush_r+0x1a>
 800334e:	89a3      	ldrh	r3, [r4, #12]
 8003350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003354:	81a3      	strh	r3, [r4, #12]
 8003356:	e7ad      	b.n	80032b4 <__sflush_r+0x1c>
 8003358:	690f      	ldr	r7, [r1, #16]
 800335a:	2f00      	cmp	r7, #0
 800335c:	d0a9      	beq.n	80032b2 <__sflush_r+0x1a>
 800335e:	0793      	lsls	r3, r2, #30
 8003360:	bf18      	it	ne
 8003362:	2300      	movne	r3, #0
 8003364:	680e      	ldr	r6, [r1, #0]
 8003366:	bf08      	it	eq
 8003368:	694b      	ldreq	r3, [r1, #20]
 800336a:	eba6 0807 	sub.w	r8, r6, r7
 800336e:	600f      	str	r7, [r1, #0]
 8003370:	608b      	str	r3, [r1, #8]
 8003372:	f1b8 0f00 	cmp.w	r8, #0
 8003376:	dd9c      	ble.n	80032b2 <__sflush_r+0x1a>
 8003378:	4643      	mov	r3, r8
 800337a:	463a      	mov	r2, r7
 800337c:	4628      	mov	r0, r5
 800337e:	6a21      	ldr	r1, [r4, #32]
 8003380:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003382:	47b0      	blx	r6
 8003384:	2800      	cmp	r0, #0
 8003386:	dc06      	bgt.n	8003396 <__sflush_r+0xfe>
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	f04f 30ff 	mov.w	r0, #4294967295
 800338e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003392:	81a3      	strh	r3, [r4, #12]
 8003394:	e78e      	b.n	80032b4 <__sflush_r+0x1c>
 8003396:	4407      	add	r7, r0
 8003398:	eba8 0800 	sub.w	r8, r8, r0
 800339c:	e7e9      	b.n	8003372 <__sflush_r+0xda>
 800339e:	bf00      	nop
 80033a0:	20400001 	.word	0x20400001

080033a4 <_fflush_r>:
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	690b      	ldr	r3, [r1, #16]
 80033a8:	4605      	mov	r5, r0
 80033aa:	460c      	mov	r4, r1
 80033ac:	b913      	cbnz	r3, 80033b4 <_fflush_r+0x10>
 80033ae:	2500      	movs	r5, #0
 80033b0:	4628      	mov	r0, r5
 80033b2:	bd38      	pop	{r3, r4, r5, pc}
 80033b4:	b118      	cbz	r0, 80033be <_fflush_r+0x1a>
 80033b6:	6983      	ldr	r3, [r0, #24]
 80033b8:	b90b      	cbnz	r3, 80033be <_fflush_r+0x1a>
 80033ba:	f000 f887 	bl	80034cc <__sinit>
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <_fflush_r+0x6c>)
 80033c0:	429c      	cmp	r4, r3
 80033c2:	d11b      	bne.n	80033fc <_fflush_r+0x58>
 80033c4:	686c      	ldr	r4, [r5, #4]
 80033c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0ef      	beq.n	80033ae <_fflush_r+0xa>
 80033ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033d0:	07d0      	lsls	r0, r2, #31
 80033d2:	d404      	bmi.n	80033de <_fflush_r+0x3a>
 80033d4:	0599      	lsls	r1, r3, #22
 80033d6:	d402      	bmi.n	80033de <_fflush_r+0x3a>
 80033d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033da:	f000 f915 	bl	8003608 <__retarget_lock_acquire_recursive>
 80033de:	4628      	mov	r0, r5
 80033e0:	4621      	mov	r1, r4
 80033e2:	f7ff ff59 	bl	8003298 <__sflush_r>
 80033e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033e8:	4605      	mov	r5, r0
 80033ea:	07da      	lsls	r2, r3, #31
 80033ec:	d4e0      	bmi.n	80033b0 <_fflush_r+0xc>
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	059b      	lsls	r3, r3, #22
 80033f2:	d4dd      	bmi.n	80033b0 <_fflush_r+0xc>
 80033f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033f6:	f000 f908 	bl	800360a <__retarget_lock_release_recursive>
 80033fa:	e7d9      	b.n	80033b0 <_fflush_r+0xc>
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <_fflush_r+0x70>)
 80033fe:	429c      	cmp	r4, r3
 8003400:	d101      	bne.n	8003406 <_fflush_r+0x62>
 8003402:	68ac      	ldr	r4, [r5, #8]
 8003404:	e7df      	b.n	80033c6 <_fflush_r+0x22>
 8003406:	4b04      	ldr	r3, [pc, #16]	; (8003418 <_fflush_r+0x74>)
 8003408:	429c      	cmp	r4, r3
 800340a:	bf08      	it	eq
 800340c:	68ec      	ldreq	r4, [r5, #12]
 800340e:	e7da      	b.n	80033c6 <_fflush_r+0x22>
 8003410:	080043f4 	.word	0x080043f4
 8003414:	08004414 	.word	0x08004414
 8003418:	080043d4 	.word	0x080043d4

0800341c <std>:
 800341c:	2300      	movs	r3, #0
 800341e:	b510      	push	{r4, lr}
 8003420:	4604      	mov	r4, r0
 8003422:	e9c0 3300 	strd	r3, r3, [r0]
 8003426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800342a:	6083      	str	r3, [r0, #8]
 800342c:	8181      	strh	r1, [r0, #12]
 800342e:	6643      	str	r3, [r0, #100]	; 0x64
 8003430:	81c2      	strh	r2, [r0, #14]
 8003432:	6183      	str	r3, [r0, #24]
 8003434:	4619      	mov	r1, r3
 8003436:	2208      	movs	r2, #8
 8003438:	305c      	adds	r0, #92	; 0x5c
 800343a:	f7ff fe49 	bl	80030d0 <memset>
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <std+0x38>)
 8003440:	6224      	str	r4, [r4, #32]
 8003442:	6263      	str	r3, [r4, #36]	; 0x24
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <std+0x3c>)
 8003446:	62a3      	str	r3, [r4, #40]	; 0x28
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <std+0x40>)
 800344a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <std+0x44>)
 800344e:	6323      	str	r3, [r4, #48]	; 0x30
 8003450:	bd10      	pop	{r4, pc}
 8003452:	bf00      	nop
 8003454:	08003e2d 	.word	0x08003e2d
 8003458:	08003e4f 	.word	0x08003e4f
 800345c:	08003e87 	.word	0x08003e87
 8003460:	08003eab 	.word	0x08003eab

08003464 <_cleanup_r>:
 8003464:	4901      	ldr	r1, [pc, #4]	; (800346c <_cleanup_r+0x8>)
 8003466:	f000 b8af 	b.w	80035c8 <_fwalk_reent>
 800346a:	bf00      	nop
 800346c:	080033a5 	.word	0x080033a5

08003470 <__sfmoreglue>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	2568      	movs	r5, #104	; 0x68
 8003474:	1e4a      	subs	r2, r1, #1
 8003476:	4355      	muls	r5, r2
 8003478:	460e      	mov	r6, r1
 800347a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800347e:	f000 f97d 	bl	800377c <_malloc_r>
 8003482:	4604      	mov	r4, r0
 8003484:	b140      	cbz	r0, 8003498 <__sfmoreglue+0x28>
 8003486:	2100      	movs	r1, #0
 8003488:	e9c0 1600 	strd	r1, r6, [r0]
 800348c:	300c      	adds	r0, #12
 800348e:	60a0      	str	r0, [r4, #8]
 8003490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003494:	f7ff fe1c 	bl	80030d0 <memset>
 8003498:	4620      	mov	r0, r4
 800349a:	bd70      	pop	{r4, r5, r6, pc}

0800349c <__sfp_lock_acquire>:
 800349c:	4801      	ldr	r0, [pc, #4]	; (80034a4 <__sfp_lock_acquire+0x8>)
 800349e:	f000 b8b3 	b.w	8003608 <__retarget_lock_acquire_recursive>
 80034a2:	bf00      	nop
 80034a4:	20000190 	.word	0x20000190

080034a8 <__sfp_lock_release>:
 80034a8:	4801      	ldr	r0, [pc, #4]	; (80034b0 <__sfp_lock_release+0x8>)
 80034aa:	f000 b8ae 	b.w	800360a <__retarget_lock_release_recursive>
 80034ae:	bf00      	nop
 80034b0:	20000190 	.word	0x20000190

080034b4 <__sinit_lock_acquire>:
 80034b4:	4801      	ldr	r0, [pc, #4]	; (80034bc <__sinit_lock_acquire+0x8>)
 80034b6:	f000 b8a7 	b.w	8003608 <__retarget_lock_acquire_recursive>
 80034ba:	bf00      	nop
 80034bc:	2000018b 	.word	0x2000018b

080034c0 <__sinit_lock_release>:
 80034c0:	4801      	ldr	r0, [pc, #4]	; (80034c8 <__sinit_lock_release+0x8>)
 80034c2:	f000 b8a2 	b.w	800360a <__retarget_lock_release_recursive>
 80034c6:	bf00      	nop
 80034c8:	2000018b 	.word	0x2000018b

080034cc <__sinit>:
 80034cc:	b510      	push	{r4, lr}
 80034ce:	4604      	mov	r4, r0
 80034d0:	f7ff fff0 	bl	80034b4 <__sinit_lock_acquire>
 80034d4:	69a3      	ldr	r3, [r4, #24]
 80034d6:	b11b      	cbz	r3, 80034e0 <__sinit+0x14>
 80034d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034dc:	f7ff bff0 	b.w	80034c0 <__sinit_lock_release>
 80034e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034e4:	6523      	str	r3, [r4, #80]	; 0x50
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <__sinit+0x68>)
 80034e8:	4a13      	ldr	r2, [pc, #76]	; (8003538 <__sinit+0x6c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80034ee:	42a3      	cmp	r3, r4
 80034f0:	bf08      	it	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	4620      	mov	r0, r4
 80034f6:	bf08      	it	eq
 80034f8:	61a3      	streq	r3, [r4, #24]
 80034fa:	f000 f81f 	bl	800353c <__sfp>
 80034fe:	6060      	str	r0, [r4, #4]
 8003500:	4620      	mov	r0, r4
 8003502:	f000 f81b 	bl	800353c <__sfp>
 8003506:	60a0      	str	r0, [r4, #8]
 8003508:	4620      	mov	r0, r4
 800350a:	f000 f817 	bl	800353c <__sfp>
 800350e:	2200      	movs	r2, #0
 8003510:	2104      	movs	r1, #4
 8003512:	60e0      	str	r0, [r4, #12]
 8003514:	6860      	ldr	r0, [r4, #4]
 8003516:	f7ff ff81 	bl	800341c <std>
 800351a:	2201      	movs	r2, #1
 800351c:	2109      	movs	r1, #9
 800351e:	68a0      	ldr	r0, [r4, #8]
 8003520:	f7ff ff7c 	bl	800341c <std>
 8003524:	2202      	movs	r2, #2
 8003526:	2112      	movs	r1, #18
 8003528:	68e0      	ldr	r0, [r4, #12]
 800352a:	f7ff ff77 	bl	800341c <std>
 800352e:	2301      	movs	r3, #1
 8003530:	61a3      	str	r3, [r4, #24]
 8003532:	e7d1      	b.n	80034d8 <__sinit+0xc>
 8003534:	080043d0 	.word	0x080043d0
 8003538:	08003465 	.word	0x08003465

0800353c <__sfp>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	4607      	mov	r7, r0
 8003540:	f7ff ffac 	bl	800349c <__sfp_lock_acquire>
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <__sfp+0x84>)
 8003546:	681e      	ldr	r6, [r3, #0]
 8003548:	69b3      	ldr	r3, [r6, #24]
 800354a:	b913      	cbnz	r3, 8003552 <__sfp+0x16>
 800354c:	4630      	mov	r0, r6
 800354e:	f7ff ffbd 	bl	80034cc <__sinit>
 8003552:	3648      	adds	r6, #72	; 0x48
 8003554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003558:	3b01      	subs	r3, #1
 800355a:	d503      	bpl.n	8003564 <__sfp+0x28>
 800355c:	6833      	ldr	r3, [r6, #0]
 800355e:	b30b      	cbz	r3, 80035a4 <__sfp+0x68>
 8003560:	6836      	ldr	r6, [r6, #0]
 8003562:	e7f7      	b.n	8003554 <__sfp+0x18>
 8003564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003568:	b9d5      	cbnz	r5, 80035a0 <__sfp+0x64>
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <__sfp+0x88>)
 800356c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003570:	60e3      	str	r3, [r4, #12]
 8003572:	6665      	str	r5, [r4, #100]	; 0x64
 8003574:	f000 f847 	bl	8003606 <__retarget_lock_init_recursive>
 8003578:	f7ff ff96 	bl	80034a8 <__sfp_lock_release>
 800357c:	2208      	movs	r2, #8
 800357e:	4629      	mov	r1, r5
 8003580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003588:	6025      	str	r5, [r4, #0]
 800358a:	61a5      	str	r5, [r4, #24]
 800358c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003590:	f7ff fd9e 	bl	80030d0 <memset>
 8003594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800359c:	4620      	mov	r0, r4
 800359e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035a0:	3468      	adds	r4, #104	; 0x68
 80035a2:	e7d9      	b.n	8003558 <__sfp+0x1c>
 80035a4:	2104      	movs	r1, #4
 80035a6:	4638      	mov	r0, r7
 80035a8:	f7ff ff62 	bl	8003470 <__sfmoreglue>
 80035ac:	4604      	mov	r4, r0
 80035ae:	6030      	str	r0, [r6, #0]
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d1d5      	bne.n	8003560 <__sfp+0x24>
 80035b4:	f7ff ff78 	bl	80034a8 <__sfp_lock_release>
 80035b8:	230c      	movs	r3, #12
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	e7ee      	b.n	800359c <__sfp+0x60>
 80035be:	bf00      	nop
 80035c0:	080043d0 	.word	0x080043d0
 80035c4:	ffff0001 	.word	0xffff0001

080035c8 <_fwalk_reent>:
 80035c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035cc:	4606      	mov	r6, r0
 80035ce:	4688      	mov	r8, r1
 80035d0:	2700      	movs	r7, #0
 80035d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035da:	f1b9 0901 	subs.w	r9, r9, #1
 80035de:	d505      	bpl.n	80035ec <_fwalk_reent+0x24>
 80035e0:	6824      	ldr	r4, [r4, #0]
 80035e2:	2c00      	cmp	r4, #0
 80035e4:	d1f7      	bne.n	80035d6 <_fwalk_reent+0xe>
 80035e6:	4638      	mov	r0, r7
 80035e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ec:	89ab      	ldrh	r3, [r5, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d907      	bls.n	8003602 <_fwalk_reent+0x3a>
 80035f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035f6:	3301      	adds	r3, #1
 80035f8:	d003      	beq.n	8003602 <_fwalk_reent+0x3a>
 80035fa:	4629      	mov	r1, r5
 80035fc:	4630      	mov	r0, r6
 80035fe:	47c0      	blx	r8
 8003600:	4307      	orrs	r7, r0
 8003602:	3568      	adds	r5, #104	; 0x68
 8003604:	e7e9      	b.n	80035da <_fwalk_reent+0x12>

08003606 <__retarget_lock_init_recursive>:
 8003606:	4770      	bx	lr

08003608 <__retarget_lock_acquire_recursive>:
 8003608:	4770      	bx	lr

0800360a <__retarget_lock_release_recursive>:
 800360a:	4770      	bx	lr

0800360c <__swhatbuf_r>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	460e      	mov	r6, r1
 8003610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003614:	4614      	mov	r4, r2
 8003616:	2900      	cmp	r1, #0
 8003618:	461d      	mov	r5, r3
 800361a:	b096      	sub	sp, #88	; 0x58
 800361c:	da07      	bge.n	800362e <__swhatbuf_r+0x22>
 800361e:	2300      	movs	r3, #0
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	89b3      	ldrh	r3, [r6, #12]
 8003624:	061a      	lsls	r2, r3, #24
 8003626:	d410      	bmi.n	800364a <__swhatbuf_r+0x3e>
 8003628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362c:	e00e      	b.n	800364c <__swhatbuf_r+0x40>
 800362e:	466a      	mov	r2, sp
 8003630:	f000 fd22 	bl	8004078 <_fstat_r>
 8003634:	2800      	cmp	r0, #0
 8003636:	dbf2      	blt.n	800361e <__swhatbuf_r+0x12>
 8003638:	9a01      	ldr	r2, [sp, #4]
 800363a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800363e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003642:	425a      	negs	r2, r3
 8003644:	415a      	adcs	r2, r3
 8003646:	602a      	str	r2, [r5, #0]
 8003648:	e7ee      	b.n	8003628 <__swhatbuf_r+0x1c>
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	2000      	movs	r0, #0
 800364e:	6023      	str	r3, [r4, #0]
 8003650:	b016      	add	sp, #88	; 0x58
 8003652:	bd70      	pop	{r4, r5, r6, pc}

08003654 <__smakebuf_r>:
 8003654:	898b      	ldrh	r3, [r1, #12]
 8003656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003658:	079d      	lsls	r5, r3, #30
 800365a:	4606      	mov	r6, r0
 800365c:	460c      	mov	r4, r1
 800365e:	d507      	bpl.n	8003670 <__smakebuf_r+0x1c>
 8003660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	6123      	str	r3, [r4, #16]
 8003668:	2301      	movs	r3, #1
 800366a:	6163      	str	r3, [r4, #20]
 800366c:	b002      	add	sp, #8
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	466a      	mov	r2, sp
 8003672:	ab01      	add	r3, sp, #4
 8003674:	f7ff ffca 	bl	800360c <__swhatbuf_r>
 8003678:	9900      	ldr	r1, [sp, #0]
 800367a:	4605      	mov	r5, r0
 800367c:	4630      	mov	r0, r6
 800367e:	f000 f87d 	bl	800377c <_malloc_r>
 8003682:	b948      	cbnz	r0, 8003698 <__smakebuf_r+0x44>
 8003684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003688:	059a      	lsls	r2, r3, #22
 800368a:	d4ef      	bmi.n	800366c <__smakebuf_r+0x18>
 800368c:	f023 0303 	bic.w	r3, r3, #3
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	81a3      	strh	r3, [r4, #12]
 8003696:	e7e3      	b.n	8003660 <__smakebuf_r+0xc>
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <__smakebuf_r+0x7c>)
 800369a:	62b3      	str	r3, [r6, #40]	; 0x28
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	6020      	str	r0, [r4, #0]
 80036a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	9b00      	ldr	r3, [sp, #0]
 80036a8:	6120      	str	r0, [r4, #16]
 80036aa:	6163      	str	r3, [r4, #20]
 80036ac:	9b01      	ldr	r3, [sp, #4]
 80036ae:	b15b      	cbz	r3, 80036c8 <__smakebuf_r+0x74>
 80036b0:	4630      	mov	r0, r6
 80036b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036b6:	f000 fcf1 	bl	800409c <_isatty_r>
 80036ba:	b128      	cbz	r0, 80036c8 <__smakebuf_r+0x74>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	81a3      	strh	r3, [r4, #12]
 80036c8:	89a0      	ldrh	r0, [r4, #12]
 80036ca:	4305      	orrs	r5, r0
 80036cc:	81a5      	strh	r5, [r4, #12]
 80036ce:	e7cd      	b.n	800366c <__smakebuf_r+0x18>
 80036d0:	08003465 	.word	0x08003465

080036d4 <malloc>:
 80036d4:	4b02      	ldr	r3, [pc, #8]	; (80036e0 <malloc+0xc>)
 80036d6:	4601      	mov	r1, r0
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	f000 b84f 	b.w	800377c <_malloc_r>
 80036de:	bf00      	nop
 80036e0:	20000014 	.word	0x20000014

080036e4 <_free_r>:
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	4605      	mov	r5, r0
 80036e8:	2900      	cmp	r1, #0
 80036ea:	d043      	beq.n	8003774 <_free_r+0x90>
 80036ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f0:	1f0c      	subs	r4, r1, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bfb8      	it	lt
 80036f6:	18e4      	addlt	r4, r4, r3
 80036f8:	f000 fd00 	bl	80040fc <__malloc_lock>
 80036fc:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <_free_r+0x94>)
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	4610      	mov	r0, r2
 8003702:	b933      	cbnz	r3, 8003712 <_free_r+0x2e>
 8003704:	6063      	str	r3, [r4, #4]
 8003706:	6014      	str	r4, [r2, #0]
 8003708:	4628      	mov	r0, r5
 800370a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800370e:	f000 bcfb 	b.w	8004108 <__malloc_unlock>
 8003712:	42a3      	cmp	r3, r4
 8003714:	d90a      	bls.n	800372c <_free_r+0x48>
 8003716:	6821      	ldr	r1, [r4, #0]
 8003718:	1862      	adds	r2, r4, r1
 800371a:	4293      	cmp	r3, r2
 800371c:	bf01      	itttt	eq
 800371e:	681a      	ldreq	r2, [r3, #0]
 8003720:	685b      	ldreq	r3, [r3, #4]
 8003722:	1852      	addeq	r2, r2, r1
 8003724:	6022      	streq	r2, [r4, #0]
 8003726:	6063      	str	r3, [r4, #4]
 8003728:	6004      	str	r4, [r0, #0]
 800372a:	e7ed      	b.n	8003708 <_free_r+0x24>
 800372c:	461a      	mov	r2, r3
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	b10b      	cbz	r3, 8003736 <_free_r+0x52>
 8003732:	42a3      	cmp	r3, r4
 8003734:	d9fa      	bls.n	800372c <_free_r+0x48>
 8003736:	6811      	ldr	r1, [r2, #0]
 8003738:	1850      	adds	r0, r2, r1
 800373a:	42a0      	cmp	r0, r4
 800373c:	d10b      	bne.n	8003756 <_free_r+0x72>
 800373e:	6820      	ldr	r0, [r4, #0]
 8003740:	4401      	add	r1, r0
 8003742:	1850      	adds	r0, r2, r1
 8003744:	4283      	cmp	r3, r0
 8003746:	6011      	str	r1, [r2, #0]
 8003748:	d1de      	bne.n	8003708 <_free_r+0x24>
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4401      	add	r1, r0
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	6053      	str	r3, [r2, #4]
 8003754:	e7d8      	b.n	8003708 <_free_r+0x24>
 8003756:	d902      	bls.n	800375e <_free_r+0x7a>
 8003758:	230c      	movs	r3, #12
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	e7d4      	b.n	8003708 <_free_r+0x24>
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	1821      	adds	r1, r4, r0
 8003762:	428b      	cmp	r3, r1
 8003764:	bf01      	itttt	eq
 8003766:	6819      	ldreq	r1, [r3, #0]
 8003768:	685b      	ldreq	r3, [r3, #4]
 800376a:	1809      	addeq	r1, r1, r0
 800376c:	6021      	streq	r1, [r4, #0]
 800376e:	6063      	str	r3, [r4, #4]
 8003770:	6054      	str	r4, [r2, #4]
 8003772:	e7c9      	b.n	8003708 <_free_r+0x24>
 8003774:	bd38      	pop	{r3, r4, r5, pc}
 8003776:	bf00      	nop
 8003778:	200000a4 	.word	0x200000a4

0800377c <_malloc_r>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	1ccd      	adds	r5, r1, #3
 8003780:	f025 0503 	bic.w	r5, r5, #3
 8003784:	3508      	adds	r5, #8
 8003786:	2d0c      	cmp	r5, #12
 8003788:	bf38      	it	cc
 800378a:	250c      	movcc	r5, #12
 800378c:	2d00      	cmp	r5, #0
 800378e:	4606      	mov	r6, r0
 8003790:	db01      	blt.n	8003796 <_malloc_r+0x1a>
 8003792:	42a9      	cmp	r1, r5
 8003794:	d903      	bls.n	800379e <_malloc_r+0x22>
 8003796:	230c      	movs	r3, #12
 8003798:	6033      	str	r3, [r6, #0]
 800379a:	2000      	movs	r0, #0
 800379c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800379e:	f000 fcad 	bl	80040fc <__malloc_lock>
 80037a2:	4921      	ldr	r1, [pc, #132]	; (8003828 <_malloc_r+0xac>)
 80037a4:	680a      	ldr	r2, [r1, #0]
 80037a6:	4614      	mov	r4, r2
 80037a8:	b99c      	cbnz	r4, 80037d2 <_malloc_r+0x56>
 80037aa:	4f20      	ldr	r7, [pc, #128]	; (800382c <_malloc_r+0xb0>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b923      	cbnz	r3, 80037ba <_malloc_r+0x3e>
 80037b0:	4621      	mov	r1, r4
 80037b2:	4630      	mov	r0, r6
 80037b4:	f000 fb2a 	bl	8003e0c <_sbrk_r>
 80037b8:	6038      	str	r0, [r7, #0]
 80037ba:	4629      	mov	r1, r5
 80037bc:	4630      	mov	r0, r6
 80037be:	f000 fb25 	bl	8003e0c <_sbrk_r>
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	d123      	bne.n	800380e <_malloc_r+0x92>
 80037c6:	230c      	movs	r3, #12
 80037c8:	4630      	mov	r0, r6
 80037ca:	6033      	str	r3, [r6, #0]
 80037cc:	f000 fc9c 	bl	8004108 <__malloc_unlock>
 80037d0:	e7e3      	b.n	800379a <_malloc_r+0x1e>
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	1b5b      	subs	r3, r3, r5
 80037d6:	d417      	bmi.n	8003808 <_malloc_r+0x8c>
 80037d8:	2b0b      	cmp	r3, #11
 80037da:	d903      	bls.n	80037e4 <_malloc_r+0x68>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	441c      	add	r4, r3
 80037e0:	6025      	str	r5, [r4, #0]
 80037e2:	e004      	b.n	80037ee <_malloc_r+0x72>
 80037e4:	6863      	ldr	r3, [r4, #4]
 80037e6:	42a2      	cmp	r2, r4
 80037e8:	bf0c      	ite	eq
 80037ea:	600b      	streq	r3, [r1, #0]
 80037ec:	6053      	strne	r3, [r2, #4]
 80037ee:	4630      	mov	r0, r6
 80037f0:	f000 fc8a 	bl	8004108 <__malloc_unlock>
 80037f4:	f104 000b 	add.w	r0, r4, #11
 80037f8:	1d23      	adds	r3, r4, #4
 80037fa:	f020 0007 	bic.w	r0, r0, #7
 80037fe:	1ac2      	subs	r2, r0, r3
 8003800:	d0cc      	beq.n	800379c <_malloc_r+0x20>
 8003802:	1a1b      	subs	r3, r3, r0
 8003804:	50a3      	str	r3, [r4, r2]
 8003806:	e7c9      	b.n	800379c <_malloc_r+0x20>
 8003808:	4622      	mov	r2, r4
 800380a:	6864      	ldr	r4, [r4, #4]
 800380c:	e7cc      	b.n	80037a8 <_malloc_r+0x2c>
 800380e:	1cc4      	adds	r4, r0, #3
 8003810:	f024 0403 	bic.w	r4, r4, #3
 8003814:	42a0      	cmp	r0, r4
 8003816:	d0e3      	beq.n	80037e0 <_malloc_r+0x64>
 8003818:	1a21      	subs	r1, r4, r0
 800381a:	4630      	mov	r0, r6
 800381c:	f000 faf6 	bl	8003e0c <_sbrk_r>
 8003820:	3001      	adds	r0, #1
 8003822:	d1dd      	bne.n	80037e0 <_malloc_r+0x64>
 8003824:	e7cf      	b.n	80037c6 <_malloc_r+0x4a>
 8003826:	bf00      	nop
 8003828:	200000a4 	.word	0x200000a4
 800382c:	200000a8 	.word	0x200000a8

08003830 <__sfputc_r>:
 8003830:	6893      	ldr	r3, [r2, #8]
 8003832:	b410      	push	{r4}
 8003834:	3b01      	subs	r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	6093      	str	r3, [r2, #8]
 800383a:	da07      	bge.n	800384c <__sfputc_r+0x1c>
 800383c:	6994      	ldr	r4, [r2, #24]
 800383e:	42a3      	cmp	r3, r4
 8003840:	db01      	blt.n	8003846 <__sfputc_r+0x16>
 8003842:	290a      	cmp	r1, #10
 8003844:	d102      	bne.n	800384c <__sfputc_r+0x1c>
 8003846:	bc10      	pop	{r4}
 8003848:	f000 bb34 	b.w	8003eb4 <__swbuf_r>
 800384c:	6813      	ldr	r3, [r2, #0]
 800384e:	1c58      	adds	r0, r3, #1
 8003850:	6010      	str	r0, [r2, #0]
 8003852:	7019      	strb	r1, [r3, #0]
 8003854:	4608      	mov	r0, r1
 8003856:	bc10      	pop	{r4}
 8003858:	4770      	bx	lr

0800385a <__sfputs_r>:
 800385a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385c:	4606      	mov	r6, r0
 800385e:	460f      	mov	r7, r1
 8003860:	4614      	mov	r4, r2
 8003862:	18d5      	adds	r5, r2, r3
 8003864:	42ac      	cmp	r4, r5
 8003866:	d101      	bne.n	800386c <__sfputs_r+0x12>
 8003868:	2000      	movs	r0, #0
 800386a:	e007      	b.n	800387c <__sfputs_r+0x22>
 800386c:	463a      	mov	r2, r7
 800386e:	4630      	mov	r0, r6
 8003870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003874:	f7ff ffdc 	bl	8003830 <__sfputc_r>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d1f3      	bne.n	8003864 <__sfputs_r+0xa>
 800387c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003880 <_vfiprintf_r>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	460d      	mov	r5, r1
 8003886:	4614      	mov	r4, r2
 8003888:	4698      	mov	r8, r3
 800388a:	4606      	mov	r6, r0
 800388c:	b09d      	sub	sp, #116	; 0x74
 800388e:	b118      	cbz	r0, 8003898 <_vfiprintf_r+0x18>
 8003890:	6983      	ldr	r3, [r0, #24]
 8003892:	b90b      	cbnz	r3, 8003898 <_vfiprintf_r+0x18>
 8003894:	f7ff fe1a 	bl	80034cc <__sinit>
 8003898:	4b89      	ldr	r3, [pc, #548]	; (8003ac0 <_vfiprintf_r+0x240>)
 800389a:	429d      	cmp	r5, r3
 800389c:	d11b      	bne.n	80038d6 <_vfiprintf_r+0x56>
 800389e:	6875      	ldr	r5, [r6, #4]
 80038a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038a2:	07d9      	lsls	r1, r3, #31
 80038a4:	d405      	bmi.n	80038b2 <_vfiprintf_r+0x32>
 80038a6:	89ab      	ldrh	r3, [r5, #12]
 80038a8:	059a      	lsls	r2, r3, #22
 80038aa:	d402      	bmi.n	80038b2 <_vfiprintf_r+0x32>
 80038ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ae:	f7ff feab 	bl	8003608 <__retarget_lock_acquire_recursive>
 80038b2:	89ab      	ldrh	r3, [r5, #12]
 80038b4:	071b      	lsls	r3, r3, #28
 80038b6:	d501      	bpl.n	80038bc <_vfiprintf_r+0x3c>
 80038b8:	692b      	ldr	r3, [r5, #16]
 80038ba:	b9eb      	cbnz	r3, 80038f8 <_vfiprintf_r+0x78>
 80038bc:	4629      	mov	r1, r5
 80038be:	4630      	mov	r0, r6
 80038c0:	f000 fb5c 	bl	8003f7c <__swsetup_r>
 80038c4:	b1c0      	cbz	r0, 80038f8 <_vfiprintf_r+0x78>
 80038c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038c8:	07dc      	lsls	r4, r3, #31
 80038ca:	d50e      	bpl.n	80038ea <_vfiprintf_r+0x6a>
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	b01d      	add	sp, #116	; 0x74
 80038d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d6:	4b7b      	ldr	r3, [pc, #492]	; (8003ac4 <_vfiprintf_r+0x244>)
 80038d8:	429d      	cmp	r5, r3
 80038da:	d101      	bne.n	80038e0 <_vfiprintf_r+0x60>
 80038dc:	68b5      	ldr	r5, [r6, #8]
 80038de:	e7df      	b.n	80038a0 <_vfiprintf_r+0x20>
 80038e0:	4b79      	ldr	r3, [pc, #484]	; (8003ac8 <_vfiprintf_r+0x248>)
 80038e2:	429d      	cmp	r5, r3
 80038e4:	bf08      	it	eq
 80038e6:	68f5      	ldreq	r5, [r6, #12]
 80038e8:	e7da      	b.n	80038a0 <_vfiprintf_r+0x20>
 80038ea:	89ab      	ldrh	r3, [r5, #12]
 80038ec:	0598      	lsls	r0, r3, #22
 80038ee:	d4ed      	bmi.n	80038cc <_vfiprintf_r+0x4c>
 80038f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038f2:	f7ff fe8a 	bl	800360a <__retarget_lock_release_recursive>
 80038f6:	e7e9      	b.n	80038cc <_vfiprintf_r+0x4c>
 80038f8:	2300      	movs	r3, #0
 80038fa:	9309      	str	r3, [sp, #36]	; 0x24
 80038fc:	2320      	movs	r3, #32
 80038fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003902:	2330      	movs	r3, #48	; 0x30
 8003904:	f04f 0901 	mov.w	r9, #1
 8003908:	f8cd 800c 	str.w	r8, [sp, #12]
 800390c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003acc <_vfiprintf_r+0x24c>
 8003910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003914:	4623      	mov	r3, r4
 8003916:	469a      	mov	sl, r3
 8003918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800391c:	b10a      	cbz	r2, 8003922 <_vfiprintf_r+0xa2>
 800391e:	2a25      	cmp	r2, #37	; 0x25
 8003920:	d1f9      	bne.n	8003916 <_vfiprintf_r+0x96>
 8003922:	ebba 0b04 	subs.w	fp, sl, r4
 8003926:	d00b      	beq.n	8003940 <_vfiprintf_r+0xc0>
 8003928:	465b      	mov	r3, fp
 800392a:	4622      	mov	r2, r4
 800392c:	4629      	mov	r1, r5
 800392e:	4630      	mov	r0, r6
 8003930:	f7ff ff93 	bl	800385a <__sfputs_r>
 8003934:	3001      	adds	r0, #1
 8003936:	f000 80aa 	beq.w	8003a8e <_vfiprintf_r+0x20e>
 800393a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800393c:	445a      	add	r2, fp
 800393e:	9209      	str	r2, [sp, #36]	; 0x24
 8003940:	f89a 3000 	ldrb.w	r3, [sl]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a2 	beq.w	8003a8e <_vfiprintf_r+0x20e>
 800394a:	2300      	movs	r3, #0
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003954:	f10a 0a01 	add.w	sl, sl, #1
 8003958:	9304      	str	r3, [sp, #16]
 800395a:	9307      	str	r3, [sp, #28]
 800395c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003960:	931a      	str	r3, [sp, #104]	; 0x68
 8003962:	4654      	mov	r4, sl
 8003964:	2205      	movs	r2, #5
 8003966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800396a:	4858      	ldr	r0, [pc, #352]	; (8003acc <_vfiprintf_r+0x24c>)
 800396c:	f000 fbb8 	bl	80040e0 <memchr>
 8003970:	9a04      	ldr	r2, [sp, #16]
 8003972:	b9d8      	cbnz	r0, 80039ac <_vfiprintf_r+0x12c>
 8003974:	06d1      	lsls	r1, r2, #27
 8003976:	bf44      	itt	mi
 8003978:	2320      	movmi	r3, #32
 800397a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397e:	0713      	lsls	r3, r2, #28
 8003980:	bf44      	itt	mi
 8003982:	232b      	movmi	r3, #43	; 0x2b
 8003984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003988:	f89a 3000 	ldrb.w	r3, [sl]
 800398c:	2b2a      	cmp	r3, #42	; 0x2a
 800398e:	d015      	beq.n	80039bc <_vfiprintf_r+0x13c>
 8003990:	4654      	mov	r4, sl
 8003992:	2000      	movs	r0, #0
 8003994:	f04f 0c0a 	mov.w	ip, #10
 8003998:	9a07      	ldr	r2, [sp, #28]
 800399a:	4621      	mov	r1, r4
 800399c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039a0:	3b30      	subs	r3, #48	; 0x30
 80039a2:	2b09      	cmp	r3, #9
 80039a4:	d94e      	bls.n	8003a44 <_vfiprintf_r+0x1c4>
 80039a6:	b1b0      	cbz	r0, 80039d6 <_vfiprintf_r+0x156>
 80039a8:	9207      	str	r2, [sp, #28]
 80039aa:	e014      	b.n	80039d6 <_vfiprintf_r+0x156>
 80039ac:	eba0 0308 	sub.w	r3, r0, r8
 80039b0:	fa09 f303 	lsl.w	r3, r9, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	46a2      	mov	sl, r4
 80039b8:	9304      	str	r3, [sp, #16]
 80039ba:	e7d2      	b.n	8003962 <_vfiprintf_r+0xe2>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	1d19      	adds	r1, r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	9103      	str	r1, [sp, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bfbb      	ittet	lt
 80039c8:	425b      	neglt	r3, r3
 80039ca:	f042 0202 	orrlt.w	r2, r2, #2
 80039ce:	9307      	strge	r3, [sp, #28]
 80039d0:	9307      	strlt	r3, [sp, #28]
 80039d2:	bfb8      	it	lt
 80039d4:	9204      	strlt	r2, [sp, #16]
 80039d6:	7823      	ldrb	r3, [r4, #0]
 80039d8:	2b2e      	cmp	r3, #46	; 0x2e
 80039da:	d10c      	bne.n	80039f6 <_vfiprintf_r+0x176>
 80039dc:	7863      	ldrb	r3, [r4, #1]
 80039de:	2b2a      	cmp	r3, #42	; 0x2a
 80039e0:	d135      	bne.n	8003a4e <_vfiprintf_r+0x1ce>
 80039e2:	9b03      	ldr	r3, [sp, #12]
 80039e4:	3402      	adds	r4, #2
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	9203      	str	r2, [sp, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bfb8      	it	lt
 80039f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80039f4:	9305      	str	r3, [sp, #20]
 80039f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003adc <_vfiprintf_r+0x25c>
 80039fa:	2203      	movs	r2, #3
 80039fc:	4650      	mov	r0, sl
 80039fe:	7821      	ldrb	r1, [r4, #0]
 8003a00:	f000 fb6e 	bl	80040e0 <memchr>
 8003a04:	b140      	cbz	r0, 8003a18 <_vfiprintf_r+0x198>
 8003a06:	2340      	movs	r3, #64	; 0x40
 8003a08:	eba0 000a 	sub.w	r0, r0, sl
 8003a0c:	fa03 f000 	lsl.w	r0, r3, r0
 8003a10:	9b04      	ldr	r3, [sp, #16]
 8003a12:	3401      	adds	r4, #1
 8003a14:	4303      	orrs	r3, r0
 8003a16:	9304      	str	r3, [sp, #16]
 8003a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a1c:	2206      	movs	r2, #6
 8003a1e:	482c      	ldr	r0, [pc, #176]	; (8003ad0 <_vfiprintf_r+0x250>)
 8003a20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a24:	f000 fb5c 	bl	80040e0 <memchr>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d03f      	beq.n	8003aac <_vfiprintf_r+0x22c>
 8003a2c:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <_vfiprintf_r+0x254>)
 8003a2e:	bb1b      	cbnz	r3, 8003a78 <_vfiprintf_r+0x1f8>
 8003a30:	9b03      	ldr	r3, [sp, #12]
 8003a32:	3307      	adds	r3, #7
 8003a34:	f023 0307 	bic.w	r3, r3, #7
 8003a38:	3308      	adds	r3, #8
 8003a3a:	9303      	str	r3, [sp, #12]
 8003a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a3e:	443b      	add	r3, r7
 8003a40:	9309      	str	r3, [sp, #36]	; 0x24
 8003a42:	e767      	b.n	8003914 <_vfiprintf_r+0x94>
 8003a44:	460c      	mov	r4, r1
 8003a46:	2001      	movs	r0, #1
 8003a48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a4c:	e7a5      	b.n	800399a <_vfiprintf_r+0x11a>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f04f 0c0a 	mov.w	ip, #10
 8003a54:	4619      	mov	r1, r3
 8003a56:	3401      	adds	r4, #1
 8003a58:	9305      	str	r3, [sp, #20]
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a60:	3a30      	subs	r2, #48	; 0x30
 8003a62:	2a09      	cmp	r2, #9
 8003a64:	d903      	bls.n	8003a6e <_vfiprintf_r+0x1ee>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0c5      	beq.n	80039f6 <_vfiprintf_r+0x176>
 8003a6a:	9105      	str	r1, [sp, #20]
 8003a6c:	e7c3      	b.n	80039f6 <_vfiprintf_r+0x176>
 8003a6e:	4604      	mov	r4, r0
 8003a70:	2301      	movs	r3, #1
 8003a72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a76:	e7f0      	b.n	8003a5a <_vfiprintf_r+0x1da>
 8003a78:	ab03      	add	r3, sp, #12
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	462a      	mov	r2, r5
 8003a7e:	4630      	mov	r0, r6
 8003a80:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <_vfiprintf_r+0x258>)
 8003a82:	a904      	add	r1, sp, #16
 8003a84:	f3af 8000 	nop.w
 8003a88:	4607      	mov	r7, r0
 8003a8a:	1c78      	adds	r0, r7, #1
 8003a8c:	d1d6      	bne.n	8003a3c <_vfiprintf_r+0x1bc>
 8003a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a90:	07d9      	lsls	r1, r3, #31
 8003a92:	d405      	bmi.n	8003aa0 <_vfiprintf_r+0x220>
 8003a94:	89ab      	ldrh	r3, [r5, #12]
 8003a96:	059a      	lsls	r2, r3, #22
 8003a98:	d402      	bmi.n	8003aa0 <_vfiprintf_r+0x220>
 8003a9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a9c:	f7ff fdb5 	bl	800360a <__retarget_lock_release_recursive>
 8003aa0:	89ab      	ldrh	r3, [r5, #12]
 8003aa2:	065b      	lsls	r3, r3, #25
 8003aa4:	f53f af12 	bmi.w	80038cc <_vfiprintf_r+0x4c>
 8003aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aaa:	e711      	b.n	80038d0 <_vfiprintf_r+0x50>
 8003aac:	ab03      	add	r3, sp, #12
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <_vfiprintf_r+0x258>)
 8003ab6:	a904      	add	r1, sp, #16
 8003ab8:	f000 f882 	bl	8003bc0 <_printf_i>
 8003abc:	e7e4      	b.n	8003a88 <_vfiprintf_r+0x208>
 8003abe:	bf00      	nop
 8003ac0:	080043f4 	.word	0x080043f4
 8003ac4:	08004414 	.word	0x08004414
 8003ac8:	080043d4 	.word	0x080043d4
 8003acc:	08004434 	.word	0x08004434
 8003ad0:	0800443e 	.word	0x0800443e
 8003ad4:	00000000 	.word	0x00000000
 8003ad8:	0800385b 	.word	0x0800385b
 8003adc:	0800443a 	.word	0x0800443a

08003ae0 <_printf_common>:
 8003ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	4616      	mov	r6, r2
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	688a      	ldr	r2, [r1, #8]
 8003aea:	690b      	ldr	r3, [r1, #16]
 8003aec:	4607      	mov	r7, r0
 8003aee:	4293      	cmp	r3, r2
 8003af0:	bfb8      	it	lt
 8003af2:	4613      	movlt	r3, r2
 8003af4:	6033      	str	r3, [r6, #0]
 8003af6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003afa:	460c      	mov	r4, r1
 8003afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b00:	b10a      	cbz	r2, 8003b06 <_printf_common+0x26>
 8003b02:	3301      	adds	r3, #1
 8003b04:	6033      	str	r3, [r6, #0]
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	0699      	lsls	r1, r3, #26
 8003b0a:	bf42      	ittt	mi
 8003b0c:	6833      	ldrmi	r3, [r6, #0]
 8003b0e:	3302      	addmi	r3, #2
 8003b10:	6033      	strmi	r3, [r6, #0]
 8003b12:	6825      	ldr	r5, [r4, #0]
 8003b14:	f015 0506 	ands.w	r5, r5, #6
 8003b18:	d106      	bne.n	8003b28 <_printf_common+0x48>
 8003b1a:	f104 0a19 	add.w	sl, r4, #25
 8003b1e:	68e3      	ldr	r3, [r4, #12]
 8003b20:	6832      	ldr	r2, [r6, #0]
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	42ab      	cmp	r3, r5
 8003b26:	dc28      	bgt.n	8003b7a <_printf_common+0x9a>
 8003b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b2c:	1e13      	subs	r3, r2, #0
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	bf18      	it	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	0692      	lsls	r2, r2, #26
 8003b36:	d42d      	bmi.n	8003b94 <_printf_common+0xb4>
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b40:	47c0      	blx	r8
 8003b42:	3001      	adds	r0, #1
 8003b44:	d020      	beq.n	8003b88 <_printf_common+0xa8>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	68e5      	ldr	r5, [r4, #12]
 8003b4a:	f003 0306 	and.w	r3, r3, #6
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	bf18      	it	ne
 8003b52:	2500      	movne	r5, #0
 8003b54:	6832      	ldr	r2, [r6, #0]
 8003b56:	f04f 0600 	mov.w	r6, #0
 8003b5a:	68a3      	ldr	r3, [r4, #8]
 8003b5c:	bf08      	it	eq
 8003b5e:	1aad      	subeq	r5, r5, r2
 8003b60:	6922      	ldr	r2, [r4, #16]
 8003b62:	bf08      	it	eq
 8003b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	bfc4      	itt	gt
 8003b6c:	1a9b      	subgt	r3, r3, r2
 8003b6e:	18ed      	addgt	r5, r5, r3
 8003b70:	341a      	adds	r4, #26
 8003b72:	42b5      	cmp	r5, r6
 8003b74:	d11a      	bne.n	8003bac <_printf_common+0xcc>
 8003b76:	2000      	movs	r0, #0
 8003b78:	e008      	b.n	8003b8c <_printf_common+0xac>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4652      	mov	r2, sl
 8003b7e:	4649      	mov	r1, r9
 8003b80:	4638      	mov	r0, r7
 8003b82:	47c0      	blx	r8
 8003b84:	3001      	adds	r0, #1
 8003b86:	d103      	bne.n	8003b90 <_printf_common+0xb0>
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b90:	3501      	adds	r5, #1
 8003b92:	e7c4      	b.n	8003b1e <_printf_common+0x3e>
 8003b94:	2030      	movs	r0, #48	; 0x30
 8003b96:	18e1      	adds	r1, r4, r3
 8003b98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ba2:	4422      	add	r2, r4
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003baa:	e7c5      	b.n	8003b38 <_printf_common+0x58>
 8003bac:	2301      	movs	r3, #1
 8003bae:	4622      	mov	r2, r4
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	47c0      	blx	r8
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d0e6      	beq.n	8003b88 <_printf_common+0xa8>
 8003bba:	3601      	adds	r6, #1
 8003bbc:	e7d9      	b.n	8003b72 <_printf_common+0x92>
	...

08003bc0 <_printf_i>:
 8003bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	7e27      	ldrb	r7, [r4, #24]
 8003bc8:	4691      	mov	r9, r2
 8003bca:	2f78      	cmp	r7, #120	; 0x78
 8003bcc:	4680      	mov	r8, r0
 8003bce:	469a      	mov	sl, r3
 8003bd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bd6:	d807      	bhi.n	8003be8 <_printf_i+0x28>
 8003bd8:	2f62      	cmp	r7, #98	; 0x62
 8003bda:	d80a      	bhi.n	8003bf2 <_printf_i+0x32>
 8003bdc:	2f00      	cmp	r7, #0
 8003bde:	f000 80d9 	beq.w	8003d94 <_printf_i+0x1d4>
 8003be2:	2f58      	cmp	r7, #88	; 0x58
 8003be4:	f000 80a4 	beq.w	8003d30 <_printf_i+0x170>
 8003be8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bf0:	e03a      	b.n	8003c68 <_printf_i+0xa8>
 8003bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bf6:	2b15      	cmp	r3, #21
 8003bf8:	d8f6      	bhi.n	8003be8 <_printf_i+0x28>
 8003bfa:	a001      	add	r0, pc, #4	; (adr r0, 8003c00 <_printf_i+0x40>)
 8003bfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c00:	08003c59 	.word	0x08003c59
 8003c04:	08003c6d 	.word	0x08003c6d
 8003c08:	08003be9 	.word	0x08003be9
 8003c0c:	08003be9 	.word	0x08003be9
 8003c10:	08003be9 	.word	0x08003be9
 8003c14:	08003be9 	.word	0x08003be9
 8003c18:	08003c6d 	.word	0x08003c6d
 8003c1c:	08003be9 	.word	0x08003be9
 8003c20:	08003be9 	.word	0x08003be9
 8003c24:	08003be9 	.word	0x08003be9
 8003c28:	08003be9 	.word	0x08003be9
 8003c2c:	08003d7b 	.word	0x08003d7b
 8003c30:	08003c9d 	.word	0x08003c9d
 8003c34:	08003d5d 	.word	0x08003d5d
 8003c38:	08003be9 	.word	0x08003be9
 8003c3c:	08003be9 	.word	0x08003be9
 8003c40:	08003d9d 	.word	0x08003d9d
 8003c44:	08003be9 	.word	0x08003be9
 8003c48:	08003c9d 	.word	0x08003c9d
 8003c4c:	08003be9 	.word	0x08003be9
 8003c50:	08003be9 	.word	0x08003be9
 8003c54:	08003d65 	.word	0x08003d65
 8003c58:	680b      	ldr	r3, [r1, #0]
 8003c5a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c5e:	1d1a      	adds	r2, r3, #4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	600a      	str	r2, [r1, #0]
 8003c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0a4      	b.n	8003db6 <_printf_i+0x1f6>
 8003c6c:	6825      	ldr	r5, [r4, #0]
 8003c6e:	6808      	ldr	r0, [r1, #0]
 8003c70:	062e      	lsls	r6, r5, #24
 8003c72:	f100 0304 	add.w	r3, r0, #4
 8003c76:	d50a      	bpl.n	8003c8e <_printf_i+0xce>
 8003c78:	6805      	ldr	r5, [r0, #0]
 8003c7a:	600b      	str	r3, [r1, #0]
 8003c7c:	2d00      	cmp	r5, #0
 8003c7e:	da03      	bge.n	8003c88 <_printf_i+0xc8>
 8003c80:	232d      	movs	r3, #45	; 0x2d
 8003c82:	426d      	negs	r5, r5
 8003c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c88:	230a      	movs	r3, #10
 8003c8a:	485e      	ldr	r0, [pc, #376]	; (8003e04 <_printf_i+0x244>)
 8003c8c:	e019      	b.n	8003cc2 <_printf_i+0x102>
 8003c8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c92:	6805      	ldr	r5, [r0, #0]
 8003c94:	600b      	str	r3, [r1, #0]
 8003c96:	bf18      	it	ne
 8003c98:	b22d      	sxthne	r5, r5
 8003c9a:	e7ef      	b.n	8003c7c <_printf_i+0xbc>
 8003c9c:	680b      	ldr	r3, [r1, #0]
 8003c9e:	6825      	ldr	r5, [r4, #0]
 8003ca0:	1d18      	adds	r0, r3, #4
 8003ca2:	6008      	str	r0, [r1, #0]
 8003ca4:	0628      	lsls	r0, r5, #24
 8003ca6:	d501      	bpl.n	8003cac <_printf_i+0xec>
 8003ca8:	681d      	ldr	r5, [r3, #0]
 8003caa:	e002      	b.n	8003cb2 <_printf_i+0xf2>
 8003cac:	0669      	lsls	r1, r5, #25
 8003cae:	d5fb      	bpl.n	8003ca8 <_printf_i+0xe8>
 8003cb0:	881d      	ldrh	r5, [r3, #0]
 8003cb2:	2f6f      	cmp	r7, #111	; 0x6f
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2308      	moveq	r3, #8
 8003cb8:	230a      	movne	r3, #10
 8003cba:	4852      	ldr	r0, [pc, #328]	; (8003e04 <_printf_i+0x244>)
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cc2:	6866      	ldr	r6, [r4, #4]
 8003cc4:	2e00      	cmp	r6, #0
 8003cc6:	bfa8      	it	ge
 8003cc8:	6821      	ldrge	r1, [r4, #0]
 8003cca:	60a6      	str	r6, [r4, #8]
 8003ccc:	bfa4      	itt	ge
 8003cce:	f021 0104 	bicge.w	r1, r1, #4
 8003cd2:	6021      	strge	r1, [r4, #0]
 8003cd4:	b90d      	cbnz	r5, 8003cda <_printf_i+0x11a>
 8003cd6:	2e00      	cmp	r6, #0
 8003cd8:	d04d      	beq.n	8003d76 <_printf_i+0x1b6>
 8003cda:	4616      	mov	r6, r2
 8003cdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ce0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ce4:	5dc7      	ldrb	r7, [r0, r7]
 8003ce6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cea:	462f      	mov	r7, r5
 8003cec:	42bb      	cmp	r3, r7
 8003cee:	460d      	mov	r5, r1
 8003cf0:	d9f4      	bls.n	8003cdc <_printf_i+0x11c>
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d10b      	bne.n	8003d0e <_printf_i+0x14e>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	07df      	lsls	r7, r3, #31
 8003cfa:	d508      	bpl.n	8003d0e <_printf_i+0x14e>
 8003cfc:	6923      	ldr	r3, [r4, #16]
 8003cfe:	6861      	ldr	r1, [r4, #4]
 8003d00:	4299      	cmp	r1, r3
 8003d02:	bfde      	ittt	le
 8003d04:	2330      	movle	r3, #48	; 0x30
 8003d06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d0e:	1b92      	subs	r2, r2, r6
 8003d10:	6122      	str	r2, [r4, #16]
 8003d12:	464b      	mov	r3, r9
 8003d14:	4621      	mov	r1, r4
 8003d16:	4640      	mov	r0, r8
 8003d18:	f8cd a000 	str.w	sl, [sp]
 8003d1c:	aa03      	add	r2, sp, #12
 8003d1e:	f7ff fedf 	bl	8003ae0 <_printf_common>
 8003d22:	3001      	adds	r0, #1
 8003d24:	d14c      	bne.n	8003dc0 <_printf_i+0x200>
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2a:	b004      	add	sp, #16
 8003d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d30:	4834      	ldr	r0, [pc, #208]	; (8003e04 <_printf_i+0x244>)
 8003d32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d36:	680e      	ldr	r6, [r1, #0]
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d3e:	061f      	lsls	r7, r3, #24
 8003d40:	600e      	str	r6, [r1, #0]
 8003d42:	d514      	bpl.n	8003d6e <_printf_i+0x1ae>
 8003d44:	07d9      	lsls	r1, r3, #31
 8003d46:	bf44      	itt	mi
 8003d48:	f043 0320 	orrmi.w	r3, r3, #32
 8003d4c:	6023      	strmi	r3, [r4, #0]
 8003d4e:	b91d      	cbnz	r5, 8003d58 <_printf_i+0x198>
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	f023 0320 	bic.w	r3, r3, #32
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	2310      	movs	r3, #16
 8003d5a:	e7af      	b.n	8003cbc <_printf_i+0xfc>
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	f043 0320 	orr.w	r3, r3, #32
 8003d62:	6023      	str	r3, [r4, #0]
 8003d64:	2378      	movs	r3, #120	; 0x78
 8003d66:	4828      	ldr	r0, [pc, #160]	; (8003e08 <_printf_i+0x248>)
 8003d68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d6c:	e7e3      	b.n	8003d36 <_printf_i+0x176>
 8003d6e:	065e      	lsls	r6, r3, #25
 8003d70:	bf48      	it	mi
 8003d72:	b2ad      	uxthmi	r5, r5
 8003d74:	e7e6      	b.n	8003d44 <_printf_i+0x184>
 8003d76:	4616      	mov	r6, r2
 8003d78:	e7bb      	b.n	8003cf2 <_printf_i+0x132>
 8003d7a:	680b      	ldr	r3, [r1, #0]
 8003d7c:	6826      	ldr	r6, [r4, #0]
 8003d7e:	1d1d      	adds	r5, r3, #4
 8003d80:	6960      	ldr	r0, [r4, #20]
 8003d82:	600d      	str	r5, [r1, #0]
 8003d84:	0635      	lsls	r5, r6, #24
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	d501      	bpl.n	8003d8e <_printf_i+0x1ce>
 8003d8a:	6018      	str	r0, [r3, #0]
 8003d8c:	e002      	b.n	8003d94 <_printf_i+0x1d4>
 8003d8e:	0671      	lsls	r1, r6, #25
 8003d90:	d5fb      	bpl.n	8003d8a <_printf_i+0x1ca>
 8003d92:	8018      	strh	r0, [r3, #0]
 8003d94:	2300      	movs	r3, #0
 8003d96:	4616      	mov	r6, r2
 8003d98:	6123      	str	r3, [r4, #16]
 8003d9a:	e7ba      	b.n	8003d12 <_printf_i+0x152>
 8003d9c:	680b      	ldr	r3, [r1, #0]
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	600a      	str	r2, [r1, #0]
 8003da2:	681e      	ldr	r6, [r3, #0]
 8003da4:	2100      	movs	r1, #0
 8003da6:	4630      	mov	r0, r6
 8003da8:	6862      	ldr	r2, [r4, #4]
 8003daa:	f000 f999 	bl	80040e0 <memchr>
 8003dae:	b108      	cbz	r0, 8003db4 <_printf_i+0x1f4>
 8003db0:	1b80      	subs	r0, r0, r6
 8003db2:	6060      	str	r0, [r4, #4]
 8003db4:	6863      	ldr	r3, [r4, #4]
 8003db6:	6123      	str	r3, [r4, #16]
 8003db8:	2300      	movs	r3, #0
 8003dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dbe:	e7a8      	b.n	8003d12 <_printf_i+0x152>
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	6923      	ldr	r3, [r4, #16]
 8003dc8:	47d0      	blx	sl
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d0ab      	beq.n	8003d26 <_printf_i+0x166>
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	079b      	lsls	r3, r3, #30
 8003dd2:	d413      	bmi.n	8003dfc <_printf_i+0x23c>
 8003dd4:	68e0      	ldr	r0, [r4, #12]
 8003dd6:	9b03      	ldr	r3, [sp, #12]
 8003dd8:	4298      	cmp	r0, r3
 8003dda:	bfb8      	it	lt
 8003ddc:	4618      	movlt	r0, r3
 8003dde:	e7a4      	b.n	8003d2a <_printf_i+0x16a>
 8003de0:	2301      	movs	r3, #1
 8003de2:	4632      	mov	r2, r6
 8003de4:	4649      	mov	r1, r9
 8003de6:	4640      	mov	r0, r8
 8003de8:	47d0      	blx	sl
 8003dea:	3001      	adds	r0, #1
 8003dec:	d09b      	beq.n	8003d26 <_printf_i+0x166>
 8003dee:	3501      	adds	r5, #1
 8003df0:	68e3      	ldr	r3, [r4, #12]
 8003df2:	9903      	ldr	r1, [sp, #12]
 8003df4:	1a5b      	subs	r3, r3, r1
 8003df6:	42ab      	cmp	r3, r5
 8003df8:	dcf2      	bgt.n	8003de0 <_printf_i+0x220>
 8003dfa:	e7eb      	b.n	8003dd4 <_printf_i+0x214>
 8003dfc:	2500      	movs	r5, #0
 8003dfe:	f104 0619 	add.w	r6, r4, #25
 8003e02:	e7f5      	b.n	8003df0 <_printf_i+0x230>
 8003e04:	08004445 	.word	0x08004445
 8003e08:	08004456 	.word	0x08004456

08003e0c <_sbrk_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	2300      	movs	r3, #0
 8003e10:	4d05      	ldr	r5, [pc, #20]	; (8003e28 <_sbrk_r+0x1c>)
 8003e12:	4604      	mov	r4, r0
 8003e14:	4608      	mov	r0, r1
 8003e16:	602b      	str	r3, [r5, #0]
 8003e18:	f7fd f94c 	bl	80010b4 <_sbrk>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d102      	bne.n	8003e26 <_sbrk_r+0x1a>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	b103      	cbz	r3, 8003e26 <_sbrk_r+0x1a>
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	20000194 	.word	0x20000194

08003e2c <__sread>:
 8003e2c:	b510      	push	{r4, lr}
 8003e2e:	460c      	mov	r4, r1
 8003e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e34:	f000 f96e 	bl	8004114 <_read_r>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	bfab      	itete	ge
 8003e3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e40:	181b      	addge	r3, r3, r0
 8003e42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e46:	bfac      	ite	ge
 8003e48:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e4a:	81a3      	strhlt	r3, [r4, #12]
 8003e4c:	bd10      	pop	{r4, pc}

08003e4e <__swrite>:
 8003e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e52:	461f      	mov	r7, r3
 8003e54:	898b      	ldrh	r3, [r1, #12]
 8003e56:	4605      	mov	r5, r0
 8003e58:	05db      	lsls	r3, r3, #23
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	4616      	mov	r6, r2
 8003e5e:	d505      	bpl.n	8003e6c <__swrite+0x1e>
 8003e60:	2302      	movs	r3, #2
 8003e62:	2200      	movs	r2, #0
 8003e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e68:	f000 f928 	bl	80040bc <_lseek_r>
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	4632      	mov	r2, r6
 8003e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e74:	81a3      	strh	r3, [r4, #12]
 8003e76:	4628      	mov	r0, r5
 8003e78:	463b      	mov	r3, r7
 8003e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e82:	f000 b869 	b.w	8003f58 <_write_r>

08003e86 <__sseek>:
 8003e86:	b510      	push	{r4, lr}
 8003e88:	460c      	mov	r4, r1
 8003e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8e:	f000 f915 	bl	80040bc <_lseek_r>
 8003e92:	1c43      	adds	r3, r0, #1
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	bf15      	itete	ne
 8003e98:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ea2:	81a3      	strheq	r3, [r4, #12]
 8003ea4:	bf18      	it	ne
 8003ea6:	81a3      	strhne	r3, [r4, #12]
 8003ea8:	bd10      	pop	{r4, pc}

08003eaa <__sclose>:
 8003eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eae:	f000 b8d3 	b.w	8004058 <_close_r>
	...

08003eb4 <__swbuf_r>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	460e      	mov	r6, r1
 8003eb8:	4614      	mov	r4, r2
 8003eba:	4605      	mov	r5, r0
 8003ebc:	b118      	cbz	r0, 8003ec6 <__swbuf_r+0x12>
 8003ebe:	6983      	ldr	r3, [r0, #24]
 8003ec0:	b90b      	cbnz	r3, 8003ec6 <__swbuf_r+0x12>
 8003ec2:	f7ff fb03 	bl	80034cc <__sinit>
 8003ec6:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <__swbuf_r+0x98>)
 8003ec8:	429c      	cmp	r4, r3
 8003eca:	d12b      	bne.n	8003f24 <__swbuf_r+0x70>
 8003ecc:	686c      	ldr	r4, [r5, #4]
 8003ece:	69a3      	ldr	r3, [r4, #24]
 8003ed0:	60a3      	str	r3, [r4, #8]
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	071a      	lsls	r2, r3, #28
 8003ed6:	d52f      	bpl.n	8003f38 <__swbuf_r+0x84>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	b36b      	cbz	r3, 8003f38 <__swbuf_r+0x84>
 8003edc:	6923      	ldr	r3, [r4, #16]
 8003ede:	6820      	ldr	r0, [r4, #0]
 8003ee0:	b2f6      	uxtb	r6, r6
 8003ee2:	1ac0      	subs	r0, r0, r3
 8003ee4:	6963      	ldr	r3, [r4, #20]
 8003ee6:	4637      	mov	r7, r6
 8003ee8:	4283      	cmp	r3, r0
 8003eea:	dc04      	bgt.n	8003ef6 <__swbuf_r+0x42>
 8003eec:	4621      	mov	r1, r4
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f7ff fa58 	bl	80033a4 <_fflush_r>
 8003ef4:	bb30      	cbnz	r0, 8003f44 <__swbuf_r+0x90>
 8003ef6:	68a3      	ldr	r3, [r4, #8]
 8003ef8:	3001      	adds	r0, #1
 8003efa:	3b01      	subs	r3, #1
 8003efc:	60a3      	str	r3, [r4, #8]
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	6022      	str	r2, [r4, #0]
 8003f04:	701e      	strb	r6, [r3, #0]
 8003f06:	6963      	ldr	r3, [r4, #20]
 8003f08:	4283      	cmp	r3, r0
 8003f0a:	d004      	beq.n	8003f16 <__swbuf_r+0x62>
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	07db      	lsls	r3, r3, #31
 8003f10:	d506      	bpl.n	8003f20 <__swbuf_r+0x6c>
 8003f12:	2e0a      	cmp	r6, #10
 8003f14:	d104      	bne.n	8003f20 <__swbuf_r+0x6c>
 8003f16:	4621      	mov	r1, r4
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f7ff fa43 	bl	80033a4 <_fflush_r>
 8003f1e:	b988      	cbnz	r0, 8003f44 <__swbuf_r+0x90>
 8003f20:	4638      	mov	r0, r7
 8003f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <__swbuf_r+0x9c>)
 8003f26:	429c      	cmp	r4, r3
 8003f28:	d101      	bne.n	8003f2e <__swbuf_r+0x7a>
 8003f2a:	68ac      	ldr	r4, [r5, #8]
 8003f2c:	e7cf      	b.n	8003ece <__swbuf_r+0x1a>
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <__swbuf_r+0xa0>)
 8003f30:	429c      	cmp	r4, r3
 8003f32:	bf08      	it	eq
 8003f34:	68ec      	ldreq	r4, [r5, #12]
 8003f36:	e7ca      	b.n	8003ece <__swbuf_r+0x1a>
 8003f38:	4621      	mov	r1, r4
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f000 f81e 	bl	8003f7c <__swsetup_r>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d0cb      	beq.n	8003edc <__swbuf_r+0x28>
 8003f44:	f04f 37ff 	mov.w	r7, #4294967295
 8003f48:	e7ea      	b.n	8003f20 <__swbuf_r+0x6c>
 8003f4a:	bf00      	nop
 8003f4c:	080043f4 	.word	0x080043f4
 8003f50:	08004414 	.word	0x08004414
 8003f54:	080043d4 	.word	0x080043d4

08003f58 <_write_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	2200      	movs	r2, #0
 8003f62:	4d05      	ldr	r5, [pc, #20]	; (8003f78 <_write_r+0x20>)
 8003f64:	602a      	str	r2, [r5, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7fc fede 	bl	8000d28 <_write>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_write_r+0x1e>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_write_r+0x1e>
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	20000194 	.word	0x20000194

08003f7c <__swsetup_r>:
 8003f7c:	4b32      	ldr	r3, [pc, #200]	; (8004048 <__swsetup_r+0xcc>)
 8003f7e:	b570      	push	{r4, r5, r6, lr}
 8003f80:	681d      	ldr	r5, [r3, #0]
 8003f82:	4606      	mov	r6, r0
 8003f84:	460c      	mov	r4, r1
 8003f86:	b125      	cbz	r5, 8003f92 <__swsetup_r+0x16>
 8003f88:	69ab      	ldr	r3, [r5, #24]
 8003f8a:	b913      	cbnz	r3, 8003f92 <__swsetup_r+0x16>
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f7ff fa9d 	bl	80034cc <__sinit>
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <__swsetup_r+0xd0>)
 8003f94:	429c      	cmp	r4, r3
 8003f96:	d10f      	bne.n	8003fb8 <__swsetup_r+0x3c>
 8003f98:	686c      	ldr	r4, [r5, #4]
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fa0:	0719      	lsls	r1, r3, #28
 8003fa2:	d42c      	bmi.n	8003ffe <__swsetup_r+0x82>
 8003fa4:	06dd      	lsls	r5, r3, #27
 8003fa6:	d411      	bmi.n	8003fcc <__swsetup_r+0x50>
 8003fa8:	2309      	movs	r3, #9
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	81a3      	strh	r3, [r4, #12]
 8003fb6:	e03e      	b.n	8004036 <__swsetup_r+0xba>
 8003fb8:	4b25      	ldr	r3, [pc, #148]	; (8004050 <__swsetup_r+0xd4>)
 8003fba:	429c      	cmp	r4, r3
 8003fbc:	d101      	bne.n	8003fc2 <__swsetup_r+0x46>
 8003fbe:	68ac      	ldr	r4, [r5, #8]
 8003fc0:	e7eb      	b.n	8003f9a <__swsetup_r+0x1e>
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <__swsetup_r+0xd8>)
 8003fc4:	429c      	cmp	r4, r3
 8003fc6:	bf08      	it	eq
 8003fc8:	68ec      	ldreq	r4, [r5, #12]
 8003fca:	e7e6      	b.n	8003f9a <__swsetup_r+0x1e>
 8003fcc:	0758      	lsls	r0, r3, #29
 8003fce:	d512      	bpl.n	8003ff6 <__swsetup_r+0x7a>
 8003fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fd2:	b141      	cbz	r1, 8003fe6 <__swsetup_r+0x6a>
 8003fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fd8:	4299      	cmp	r1, r3
 8003fda:	d002      	beq.n	8003fe2 <__swsetup_r+0x66>
 8003fdc:	4630      	mov	r0, r6
 8003fde:	f7ff fb81 	bl	80036e4 <_free_r>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6063      	str	r3, [r4, #4]
 8003ff2:	6923      	ldr	r3, [r4, #16]
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	f043 0308 	orr.w	r3, r3, #8
 8003ffc:	81a3      	strh	r3, [r4, #12]
 8003ffe:	6923      	ldr	r3, [r4, #16]
 8004000:	b94b      	cbnz	r3, 8004016 <__swsetup_r+0x9a>
 8004002:	89a3      	ldrh	r3, [r4, #12]
 8004004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d003      	beq.n	8004016 <__swsetup_r+0x9a>
 800400e:	4621      	mov	r1, r4
 8004010:	4630      	mov	r0, r6
 8004012:	f7ff fb1f 	bl	8003654 <__smakebuf_r>
 8004016:	89a0      	ldrh	r0, [r4, #12]
 8004018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800401c:	f010 0301 	ands.w	r3, r0, #1
 8004020:	d00a      	beq.n	8004038 <__swsetup_r+0xbc>
 8004022:	2300      	movs	r3, #0
 8004024:	60a3      	str	r3, [r4, #8]
 8004026:	6963      	ldr	r3, [r4, #20]
 8004028:	425b      	negs	r3, r3
 800402a:	61a3      	str	r3, [r4, #24]
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	b943      	cbnz	r3, 8004042 <__swsetup_r+0xc6>
 8004030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004034:	d1ba      	bne.n	8003fac <__swsetup_r+0x30>
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	0781      	lsls	r1, r0, #30
 800403a:	bf58      	it	pl
 800403c:	6963      	ldrpl	r3, [r4, #20]
 800403e:	60a3      	str	r3, [r4, #8]
 8004040:	e7f4      	b.n	800402c <__swsetup_r+0xb0>
 8004042:	2000      	movs	r0, #0
 8004044:	e7f7      	b.n	8004036 <__swsetup_r+0xba>
 8004046:	bf00      	nop
 8004048:	20000014 	.word	0x20000014
 800404c:	080043f4 	.word	0x080043f4
 8004050:	08004414 	.word	0x08004414
 8004054:	080043d4 	.word	0x080043d4

08004058 <_close_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	2300      	movs	r3, #0
 800405c:	4d05      	ldr	r5, [pc, #20]	; (8004074 <_close_r+0x1c>)
 800405e:	4604      	mov	r4, r0
 8004060:	4608      	mov	r0, r1
 8004062:	602b      	str	r3, [r5, #0]
 8004064:	f7fc fe8c 	bl	8000d80 <_close>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_close_r+0x1a>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_close_r+0x1a>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	20000194 	.word	0x20000194

08004078 <_fstat_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	2300      	movs	r3, #0
 800407c:	4d06      	ldr	r5, [pc, #24]	; (8004098 <_fstat_r+0x20>)
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	602b      	str	r3, [r5, #0]
 8004086:	f7fc fecb 	bl	8000e20 <_fstat>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	d102      	bne.n	8004094 <_fstat_r+0x1c>
 800408e:	682b      	ldr	r3, [r5, #0]
 8004090:	b103      	cbz	r3, 8004094 <_fstat_r+0x1c>
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	bd38      	pop	{r3, r4, r5, pc}
 8004096:	bf00      	nop
 8004098:	20000194 	.word	0x20000194

0800409c <_isatty_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	2300      	movs	r3, #0
 80040a0:	4d05      	ldr	r5, [pc, #20]	; (80040b8 <_isatty_r+0x1c>)
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	602b      	str	r3, [r5, #0]
 80040a8:	f7fc fe28 	bl	8000cfc <_isatty>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_isatty_r+0x1a>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_isatty_r+0x1a>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	20000194 	.word	0x20000194

080040bc <_lseek_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	2200      	movs	r2, #0
 80040c6:	4d05      	ldr	r5, [pc, #20]	; (80040dc <_lseek_r+0x20>)
 80040c8:	602a      	str	r2, [r5, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7fc fe6f 	bl	8000dae <_lseek>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_lseek_r+0x1e>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_lseek_r+0x1e>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	20000194 	.word	0x20000194

080040e0 <memchr>:
 80040e0:	4603      	mov	r3, r0
 80040e2:	b510      	push	{r4, lr}
 80040e4:	b2c9      	uxtb	r1, r1
 80040e6:	4402      	add	r2, r0
 80040e8:	4293      	cmp	r3, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	d101      	bne.n	80040f2 <memchr+0x12>
 80040ee:	2000      	movs	r0, #0
 80040f0:	e003      	b.n	80040fa <memchr+0x1a>
 80040f2:	7804      	ldrb	r4, [r0, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	428c      	cmp	r4, r1
 80040f8:	d1f6      	bne.n	80040e8 <memchr+0x8>
 80040fa:	bd10      	pop	{r4, pc}

080040fc <__malloc_lock>:
 80040fc:	4801      	ldr	r0, [pc, #4]	; (8004104 <__malloc_lock+0x8>)
 80040fe:	f7ff ba83 	b.w	8003608 <__retarget_lock_acquire_recursive>
 8004102:	bf00      	nop
 8004104:	2000018c 	.word	0x2000018c

08004108 <__malloc_unlock>:
 8004108:	4801      	ldr	r0, [pc, #4]	; (8004110 <__malloc_unlock+0x8>)
 800410a:	f7ff ba7e 	b.w	800360a <__retarget_lock_release_recursive>
 800410e:	bf00      	nop
 8004110:	2000018c 	.word	0x2000018c

08004114 <_read_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4604      	mov	r4, r0
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	2200      	movs	r2, #0
 800411e:	4d05      	ldr	r5, [pc, #20]	; (8004134 <_read_r+0x20>)
 8004120:	602a      	str	r2, [r5, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	f7fc fe54 	bl	8000dd0 <_read>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d102      	bne.n	8004132 <_read_r+0x1e>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	b103      	cbz	r3, 8004132 <_read_r+0x1e>
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	20000194 	.word	0x20000194

08004138 <_init>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr

08004144 <_fini>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr

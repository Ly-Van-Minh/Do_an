
Do_An.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800410c  0800410c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800410c  0800410c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800410c  0800410c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000007c  08004190  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004190  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db47  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002293  00000000  00000000  0002dbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  00030a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045a0  00000000  00000000  00031528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e92e  00000000  00000000  00035ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b85a  00000000  00000000  000443f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfc50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c0  00000000  00000000  000cfca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f30 	.word	0x08003f30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08003f30 	.word	0x08003f30

0800014c <ucSpi1Read>:
  * @brief Read Data Function from Lora Module
  * @param ucAddress: Address registers or fifo of Lora Module
  * @retval ucData: Data contained in registers or fifo of Lora Module  
  */
uint8_t ucSpi1Read(uint8_t ucAddress)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af04      	add	r7, sp, #16
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef ret = HAL_ERROR;
 800015a:	2301      	movs	r3, #1
 800015c:	73fb      	strb	r3, [r7, #15]
    ucAddress &= 0x7F; /* A wnr bit, which is 1 for write access and 0 for read access */
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000164:	b2db      	uxtb	r3, r3
 8000166:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	2101      	movs	r1, #1
 800016c:	4828      	ldr	r0, [pc, #160]	; (8000210 <ucSpi1Read+0xc4>)
 800016e:	f001 f9bd 	bl	80014ec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000172:	200a      	movs	r0, #10
 8000174:	f000 fd24 	bl	8000bc0 <HAL_Delay>
    ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)&ucAddress, sizeof(ucAddress), 100);
 8000178:	1df9      	adds	r1, r7, #7
 800017a:	2364      	movs	r3, #100	; 0x64
 800017c:	2201      	movs	r2, #1
 800017e:	4825      	ldr	r0, [pc, #148]	; (8000214 <ucSpi1Read+0xc8>)
 8000180:	f001 ff3a 	bl	8001ff8 <HAL_SPI_Transmit>
 8000184:	4603      	mov	r3, r0
 8000186:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK)
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d013      	beq.n	80001b6 <ucSpi1Read+0x6a>
    {
        STM_LOGE(LORA_TAG, "ret [%d]", ret);
 800018e:	4b22      	ldr	r3, [pc, #136]	; (8000218 <ucSpi1Read+0xcc>)
 8000190:	681c      	ldr	r4, [r3, #0]
 8000192:	f000 fd0b 	bl	8000bac <HAL_GetTick>
 8000196:	4601      	mov	r1, r0
 8000198:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <ucSpi1Read+0xcc>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	7bfa      	ldrb	r2, [r7, #15]
 800019e:	9203      	str	r2, [sp, #12]
 80001a0:	2239      	movs	r2, #57	; 0x39
 80001a2:	9202      	str	r2, [sp, #8]
 80001a4:	4a1d      	ldr	r2, [pc, #116]	; (800021c <ucSpi1Read+0xd0>)
 80001a6:	9201      	str	r2, [sp, #4]
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	460b      	mov	r3, r1
 80001ac:	4a1c      	ldr	r2, [pc, #112]	; (8000220 <ucSpi1Read+0xd4>)
 80001ae:	4621      	mov	r1, r4
 80001b0:	2001      	movs	r0, #1
 80001b2:	f000 fc2c 	bl	8000a0e <stm_log_write>
    }
    ret = HAL_SPI_Receive(&hspi1, (uint8_t *)&ucData, sizeof(ucData), 100);
 80001b6:	f107 010e 	add.w	r1, r7, #14
 80001ba:	2364      	movs	r3, #100	; 0x64
 80001bc:	2201      	movs	r2, #1
 80001be:	4815      	ldr	r0, [pc, #84]	; (8000214 <ucSpi1Read+0xc8>)
 80001c0:	f002 f856 	bl	8002270 <HAL_SPI_Receive>
 80001c4:	4603      	mov	r3, r0
 80001c6:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK)
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d013      	beq.n	80001f6 <ucSpi1Read+0xaa>
    {
        STM_LOGE(LORA_TAG, "ret [%d]", ret);
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <ucSpi1Read+0xcc>)
 80001d0:	681c      	ldr	r4, [r3, #0]
 80001d2:	f000 fceb 	bl	8000bac <HAL_GetTick>
 80001d6:	4601      	mov	r1, r0
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <ucSpi1Read+0xcc>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	7bfa      	ldrb	r2, [r7, #15]
 80001de:	9203      	str	r2, [sp, #12]
 80001e0:	223e      	movs	r2, #62	; 0x3e
 80001e2:	9202      	str	r2, [sp, #8]
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <ucSpi1Read+0xd0>)
 80001e6:	9201      	str	r2, [sp, #4]
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	460b      	mov	r3, r1
 80001ec:	4a0c      	ldr	r2, [pc, #48]	; (8000220 <ucSpi1Read+0xd4>)
 80001ee:	4621      	mov	r1, r4
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 fc0c 	bl	8000a0e <stm_log_write>
    }
    HAL_Delay(10);
 80001f6:	200a      	movs	r0, #10
 80001f8:	f000 fce2 	bl	8000bc0 <HAL_Delay>
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <ucSpi1Read+0xc4>)
 8000202:	f001 f973 	bl	80014ec <HAL_GPIO_WritePin>
    return ucData;
 8000206:	7bbb      	ldrb	r3, [r7, #14]
}
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	bd90      	pop	{r4, r7, pc}
 8000210:	40010800 	.word	0x40010800
 8000214:	20000120 	.word	0x20000120
 8000218:	20000000 	.word	0x20000000
 800021c:	08004024 	.word	0x08004024
 8000220:	08003f54 	.word	0x08003f54

08000224 <main>:

/**
  * @retval int
  */
int main(void)
{
 8000224:	b590      	push	{r4, r7, lr}
 8000226:	b085      	sub	sp, #20
 8000228:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fc67 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f851 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f943 	bl	80004bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000236:	f000 f8a3 	bl	8000380 <MX_ADC1_Init>
  MX_SPI1_Init();
 800023a:	f000 f8df 	bl	80003fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800023e:	f000 f913 	bl	8000468 <MX_USART1_UART_Init>
  RetargetInit(&huart1);
 8000242:	481c      	ldr	r0, [pc, #112]	; (80002b4 <main+0x90>)
 8000244:	f000 f9d8 	bl	80005f8 <RetargetInit>
  /* USER CODE BEGIN 2 */
  relayBlinkDelay = ledBlinkDelay = HAL_GetTick();
 8000248:	f000 fcb0 	bl	8000bac <HAL_GetTick>
 800024c:	4603      	mov	r3, r0
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <main+0x94>)
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <main+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <main+0x98>)
 8000258:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if (HAL_GetTick() - ledBlinkDelay >= 500)
 800025a:	f000 fca7 	bl	8000bac <HAL_GetTick>
 800025e:	4602      	mov	r2, r0
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <main+0x94>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800026a:	d31a      	bcc.n	80002a2 <main+0x7e>
    {
      ledBlinkDelay = HAL_GetTick();
 800026c:	f000 fc9e 	bl	8000bac <HAL_GetTick>
 8000270:	4603      	mov	r3, r0
 8000272:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <main+0x94>)
 8000274:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin);
 8000276:	2101      	movs	r1, #1
 8000278:	4811      	ldr	r0, [pc, #68]	; (80002c0 <main+0x9c>)
 800027a:	f001 f94f 	bl	800151c <HAL_GPIO_TogglePin>
      STM_LOGI(MAIN_TAG, "led blinks");
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <main+0xa0>)
 8000280:	681c      	ldr	r4, [r3, #0]
 8000282:	f000 fc93 	bl	8000bac <HAL_GetTick>
 8000286:	4602      	mov	r2, r0
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <main+0xa0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2172      	movs	r1, #114	; 0x72
 800028e:	9102      	str	r1, [sp, #8]
 8000290:	490d      	ldr	r1, [pc, #52]	; (80002c8 <main+0xa4>)
 8000292:	9101      	str	r1, [sp, #4]
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	4613      	mov	r3, r2
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <main+0xa8>)
 800029a:	4621      	mov	r1, r4
 800029c:	2003      	movs	r0, #3
 800029e:	f000 fbb6 	bl	8000a0e <stm_log_write>
//      HAL_GPIO_TogglePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin);
//      STM_LOGI(MAIN_TAG, "relay toggles");
//    }

    //vSpi1Write(RegFifo, ucData);
    ucData = ucSpi1Read(RegFrfMsb);
 80002a2:	2006      	movs	r0, #6
 80002a4:	f7ff ff52 	bl	800014c <ucSpi1Read>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <main+0xac>)
 80002ae:	701a      	strb	r2, [r3, #0]
    if (HAL_GetTick() - ledBlinkDelay >= 500)
 80002b0:	e7d3      	b.n	800025a <main+0x36>
 80002b2:	bf00      	nop
 80002b4:	200000e0 	.word	0x200000e0
 80002b8:	200000a0 	.word	0x200000a0
 80002bc:	2000009c 	.word	0x2000009c
 80002c0:	40010c00 	.word	0x40010c00
 80002c4:	20000004 	.word	0x20000004
 80002c8:	08004030 	.word	0x08004030
 80002cc:	08003f8c 	.word	0x08003f8c
 80002d0:	20000098 	.word	0x20000098

080002d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b094      	sub	sp, #80	; 0x50
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fdf0 	bl	8002ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	2302      	movs	r3, #2
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	2310      	movs	r3, #16
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	2302      	movs	r3, #2
 8000312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000314:	2300      	movs	r3, #0
 8000316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000318:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000322:	4618      	mov	r0, r3
 8000324:	f001 f914 	bl	8001550 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800032e:	f000 f943 	bl	80005b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
 */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000332:	230f      	movs	r3, #15
 8000334:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	2302      	movs	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000346:	f107 0314 	add.w	r3, r7, #20
 800034a:	2101      	movs	r1, #1
 800034c:	4618      	mov	r0, r3
 800034e:	f001 fb7f 	bl	8001a50 <HAL_RCC_ClockConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000358:	f000 f92e 	bl	80005b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800035c:	2302      	movs	r3, #2
 800035e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000360:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000364:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4618      	mov	r0, r3
 800036a:	f001 fd0b 	bl	8001d84 <HAL_RCCEx_PeriphCLKConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000374:	f000 f920 	bl	80005b8 <Error_Handler>
  }
}
 8000378:	bf00      	nop
 800037a:	3750      	adds	r7, #80	; 0x50
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
 */
  hadc1.Instance = ADC1;
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_ADC1_Init+0x74>)
 8000392:	4a19      	ldr	r2, [pc, #100]	; (80003f8 <MX_ADC1_Init+0x78>)
 8000394:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_ADC1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_ADC1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_ADC1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_ADC1_Init+0x74>)
 80003aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_ADC1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_ADC1_Init+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003bc:	480d      	ldr	r0, [pc, #52]	; (80003f4 <MX_ADC1_Init+0x74>)
 80003be:	f000 fc23 	bl	8000c08 <HAL_ADC_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003c8:	f000 f8f6 	bl	80005b8 <Error_Handler>
  }
  /** Configure Regular Channel
 */
  sConfig.Channel = ADC_CHANNEL_0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_ADC1_Init+0x74>)
 80003de:	f000 fceb 	bl	8000db8 <HAL_ADC_ConfigChannel>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003e8:	f000 f8e6 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80003ec:	bf00      	nop
 80003ee:	3710      	adds	r7, #16
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200000b0 	.word	0x200000b0
 80003f8:	40012400 	.word	0x40012400

080003fc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_SPI1_Init+0x64>)
 8000402:	4a18      	ldr	r2, [pc, #96]	; (8000464 <MX_SPI1_Init+0x68>)
 8000404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <MX_SPI1_Init+0x64>)
 8000408:	f44f 7282 	mov.w	r2, #260	; 0x104
 800040c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_SPI1_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_SPI1_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_SPI1_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_SPI1_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MX_SPI1_Init+0x64>)
 8000428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800042c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_SPI1_Init+0x64>)
 8000430:	2200      	movs	r2, #0
 8000432:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <MX_SPI1_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_SPI1_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <MX_SPI1_Init+0x64>)
 8000442:	2200      	movs	r2, #0
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_SPI1_Init+0x64>)
 8000448:	220a      	movs	r2, #10
 800044a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <MX_SPI1_Init+0x64>)
 800044e:	f001 fd4f 	bl	8001ef0 <HAL_SPI_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000458:	f000 f8ae 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000120 	.word	0x20000120
 8000464:	40013000 	.word	0x40013000

08000468 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <MX_USART1_UART_Init+0x50>)
 8000470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 800048e:	220c      	movs	r2, #12
 8000490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 80004a0:	f002 fa92 	bl	80029c8 <HAL_UART_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004aa:	f000 f885 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000e0 	.word	0x200000e0
 80004b8:	40013800 	.word	0x40013800

080004bc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d0:	4b35      	ldr	r3, [pc, #212]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a34      	ldr	r2, [pc, #208]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b32      	ldr	r3, [pc, #200]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b2f      	ldr	r3, [pc, #188]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a2e      	ldr	r2, [pc, #184]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <MX_GPIO_Init+0xec>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a28      	ldr	r2, [pc, #160]	; (80005a8 <MX_GPIO_Init+0xec>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_GPIO_Init+0xec>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2102      	movs	r1, #2
 800051c:	4823      	ldr	r0, [pc, #140]	; (80005ac <MX_GPIO_Init+0xf0>)
 800051e:	f000 ffe5 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2110      	movs	r1, #16
 8000526:	4821      	ldr	r0, [pc, #132]	; (80005ac <MX_GPIO_Init+0xf0>)
 8000528:	f000 ffe0 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	481f      	ldr	r0, [pc, #124]	; (80005b0 <MX_GPIO_Init+0xf4>)
 8000532:	f000 ffdb 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_OUTPUT_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin | SPI1_NSS_Pin;
 8000536:	2312      	movs	r3, #18
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800053e:	2301      	movs	r3, #1
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2302      	movs	r3, #2
 8000544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4817      	ldr	r0, [pc, #92]	; (80005ac <MX_GPIO_Init+0xf0>)
 800054e:	f000 fe49 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000552:	2304      	movs	r3, #4
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	4811      	ldr	r0, [pc, #68]	; (80005ac <MX_GPIO_Init+0xf0>)
 8000566:	f000 fe3d 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERRUPT_LORA_Pin */
  GPIO_InitStruct.Pin = INTERRUPT_LORA_Pin;
 800056a:	2308      	movs	r3, #8
 800056c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_GPIO_Init+0xf8>)
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERRUPT_LORA_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <MX_GPIO_Init+0xf0>)
 800057e:	f000 fe31 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OUTPUT_Pin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 8000582:	2301      	movs	r3, #1
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2302      	movs	r3, #2
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_GPIO_Init+0xf4>)
 800059a:	f000 fe23 	bl	80011e4 <HAL_GPIO_Init>
}
 800059e:	bf00      	nop
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010800 	.word	0x40010800
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	10110000 	.word	0x10110000

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af04      	add	r7, sp, #16
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005be:	b672      	cpsid	i
}
 80005c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    STM_LOGE(MAIN_TAG, "");
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <Error_Handler+0x34>)
 80005c4:	681c      	ldr	r4, [r3, #0]
 80005c6:	f000 faf1 	bl	8000bac <HAL_GetTick>
 80005ca:	4602      	mov	r2, r0
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <Error_Handler+0x34>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80005d4:	9102      	str	r1, [sp, #8]
 80005d6:	4906      	ldr	r1, [pc, #24]	; (80005f0 <Error_Handler+0x38>)
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	4613      	mov	r3, r2
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <Error_Handler+0x3c>)
 80005e0:	4621      	mov	r1, r4
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fa13 	bl	8000a0e <stm_log_write>
 80005e8:	e7eb      	b.n	80005c2 <Error_Handler+0xa>
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004
 80005f0:	08004038 	.word	0x08004038
 80005f4:	08003fbc 	.word	0x08003fbc

080005f8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <RetargetInit+0x28>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <RetargetInit+0x2c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6898      	ldr	r0, [r3, #8]
 800060c:	2300      	movs	r3, #0
 800060e:	2202      	movs	r2, #2
 8000610:	2100      	movs	r1, #0
 8000612:	f002 fc61 	bl	8002ed8 <setvbuf>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000178 	.word	0x20000178
 8000624:	20000018 	.word	0x20000018

08000628 <_isatty>:

int _isatty(int fd) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	db04      	blt.n	8000640 <_isatty+0x18>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b02      	cmp	r3, #2
 800063a:	dc01      	bgt.n	8000640 <_isatty+0x18>
    return 1;
 800063c:	2301      	movs	r3, #1
 800063e:	e005      	b.n	800064c <_isatty+0x24>

  errno = EBADF;
 8000640:	f002 fc18 	bl	8002e74 <__errno>
 8000644:	4603      	mov	r3, r0
 8000646:	2209      	movs	r2, #9
 8000648:	601a      	str	r2, [r3, #0]
  return 0;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <_write>:

int _write(int fd, char* ptr, int len) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d002      	beq.n	800066c <_write+0x18>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d111      	bne.n	8000690 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <_write+0x54>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	b29a      	uxth	r2, r3
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	68b9      	ldr	r1, [r7, #8]
 800067a:	f002 f9f2 	bl	8002a62 <HAL_UART_Transmit>
 800067e:	4603      	mov	r3, r0
 8000680:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <_write+0x38>
      return len;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	e008      	b.n	800069e <_write+0x4a>
    else
      return EIO;
 800068c:	2305      	movs	r3, #5
 800068e:	e006      	b.n	800069e <_write+0x4a>
  }
  errno = EBADF;
 8000690:	f002 fbf0 	bl	8002e74 <__errno>
 8000694:	4603      	mov	r3, r0
 8000696:	2209      	movs	r2, #9
 8000698:	601a      	str	r2, [r3, #0]
  return -1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000178 	.word	0x20000178

080006ac <_close>:

int _close(int fd) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db04      	blt.n	80006c4 <_close+0x18>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	dc01      	bgt.n	80006c4 <_close+0x18>
    return 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	e006      	b.n	80006d2 <_close+0x26>

  errno = EBADF;
 80006c4:	f002 fbd6 	bl	8002e74 <__errno>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2209      	movs	r2, #9
 80006cc:	601a      	str	r2, [r3, #0]
  return -1;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80006e6:	f002 fbc5 	bl	8002e74 <__errno>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2209      	movs	r2, #9
 80006ee:	601a      	str	r2, [r3, #0]
  return -1;
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_read>:

int _read(int fd, char* ptr, int len) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d110      	bne.n	8000730 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <_read+0x4c>)
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2201      	movs	r2, #1
 8000718:	68b9      	ldr	r1, [r7, #8]
 800071a:	f002 fa34 	bl	8002b86 <HAL_UART_Receive>
 800071e:	4603      	mov	r3, r0
 8000720:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d101      	bne.n	800072c <_read+0x30>
      return 1;
 8000728:	2301      	movs	r3, #1
 800072a:	e008      	b.n	800073e <_read+0x42>
    else
      return EIO;
 800072c:	2305      	movs	r3, #5
 800072e:	e006      	b.n	800073e <_read+0x42>
  }
  errno = EBADF;
 8000730:	f002 fba0 	bl	8002e74 <__errno>
 8000734:	4603      	mov	r3, r0
 8000736:	2209      	movs	r2, #9
 8000738:	601a      	str	r2, [r3, #0]
  return -1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000178 	.word	0x20000178

0800074c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db08      	blt.n	800076e <_fstat+0x22>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b02      	cmp	r3, #2
 8000760:	dc05      	bgt.n	800076e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000768:	605a      	str	r2, [r3, #4]
    return 0;
 800076a:	2300      	movs	r3, #0
 800076c:	e005      	b.n	800077a <_fstat+0x2e>
  }

  errno = EBADF;
 800076e:	f002 fb81 	bl	8002e74 <__errno>
 8000772:	4603      	mov	r3, r0
 8000774:	2209      	movs	r2, #9
 8000776:	601a      	str	r2, [r3, #0]
  return 0;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_MspInit+0x5c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <HAL_MspInit+0x5c>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_MspInit+0x5c>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_MspInit+0x5c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <HAL_MspInit+0x5c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_MspInit+0x5c>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_MspInit+0x60>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_MspInit+0x60>)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010000 	.word	0x40010000

080007e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_ADC_MspInit+0x6c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d121      	bne.n	800084c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_ADC_MspInit+0x74>)
 8000848:	f000 fccc 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40012400 	.word	0x40012400
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <HAL_SPI_MspInit+0x88>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d12f      	bne.n	80008e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 8000886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a13      	ldr	r2, [pc, #76]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4619      	mov	r1, r3
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <HAL_SPI_MspInit+0x90>)
 80008c4:	f000 fc8e 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_SPI_MspInit+0x90>)
 80008dc:	f000 fc82 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800

080008f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <HAL_UART_MspInit+0x8c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d131      	bne.n	8000978 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_UART_MspInit+0x90>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <HAL_UART_MspInit+0x90>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_UART_MspInit+0x90>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_UART_MspInit+0x90>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <HAL_UART_MspInit+0x90>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_UART_MspInit+0x90>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4619      	mov	r1, r3
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <HAL_UART_MspInit+0x94>)
 800095a:	f000 fc43 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <HAL_UART_MspInit+0x94>)
 8000974:	f000 fc36 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40013800 	.word	0x40013800
 8000984:	40021000 	.word	0x40021000
 8000988:	40010800 	.word	0x40010800

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>
	...

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b085      	sub	sp, #20
 8000998:	af04      	add	r7, sp, #16

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    STM_LOGE(FILE_TAG, "");
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HardFault_Handler+0x2c>)
 800099c:	681c      	ldr	r4, [r3, #0]
 800099e:	f000 f905 	bl	8000bac <HAL_GetTick>
 80009a2:	4602      	mov	r2, r0
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HardFault_Handler+0x2c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	215e      	movs	r1, #94	; 0x5e
 80009aa:	9102      	str	r1, [sp, #8]
 80009ac:	4905      	ldr	r1, [pc, #20]	; (80009c4 <HardFault_Handler+0x30>)
 80009ae:	9101      	str	r1, [sp, #4]
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	4613      	mov	r3, r2
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HardFault_Handler+0x34>)
 80009b6:	4621      	mov	r1, r4
 80009b8:	2001      	movs	r0, #1
 80009ba:	f000 f828 	bl	8000a0e <stm_log_write>
 80009be:	e7ec      	b.n	800099a <HardFault_Handler+0x6>
 80009c0:	20000008 	.word	0x20000008
 80009c4:	08004048 	.word	0x08004048
 80009c8:	08003ff0 	.word	0x08003ff0

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a06:	f000 f8bf 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 8000a0e:	b40c      	push	{r2, r3}
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 8000a22:	68f9      	ldr	r1, [r7, #12]
 8000a24:	69b8      	ldr	r0, [r7, #24]
 8000a26:	f002 fb1d 	bl	8003064 <viprintf>
    va_end(arg);
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a34:	b002      	add	sp, #8
 8000a36:	4770      	bx	lr

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f002 fa04 	bl	8002e74 <__errno>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20005000 	.word	0x20005000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	200000a4 	.word	0x200000a4
 8000aa0:	20000190 	.word	0x20000190

08000aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ab0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ab2:	e003      	b.n	8000abc <LoopCopyDataInit>

08000ab4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ab6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ab8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aba:	3104      	adds	r1, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ac0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ac4:	d3f6      	bcc.n	8000ab4 <CopyDataInit>
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ac8:	e002      	b.n	8000ad0 <LoopFillZerobss>

08000aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000acc:	f842 3b04 	str.w	r3, [r2], #4

08000ad0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ad4:	d3f9      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad6:	f7ff ffe5 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f002 f9d1 	bl	8002e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fba1 	bl	8000224 <main>
  bx lr
 8000ae2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ae4:	08004114 	.word	0x08004114
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000aec:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8000af0:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8000af4:	20000190 	.word	0x20000190

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x28>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x28>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 fb35 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f808 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fe34 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x58>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fb3f 	bl	80011ca <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f000 fb15 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_InitTick+0x5c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000000c 	.word	0x2000000c
 8000b80:	20000014 	.word	0x20000014
 8000b84:	20000010 	.word	0x20000010

08000b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	2000017c 	.word	0x2000017c

08000bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <HAL_GetTick+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	2000017c 	.word	0x2000017c

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff fff0 	bl	8000bac <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffe0 	bl	8000bac <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000014 	.word	0x20000014

08000c08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e0be      	b.n	8000da8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d109      	bne.n	8000c4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fdce 	bl	80007e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f9ab 	bl	8000fa8 <ADC_ConversionStop_Disable>
 8000c52:	4603      	mov	r3, r0
 8000c54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 8099 	bne.w	8000d96 <HAL_ADC_Init+0x18e>
 8000c64:	7dfb      	ldrb	r3, [r7, #23]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8095 	bne.w	8000d96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c74:	f023 0302 	bic.w	r3, r3, #2
 8000c78:	f043 0202 	orr.w	r2, r3, #2
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7b1b      	ldrb	r3, [r3, #12]
 8000c8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ca0:	d003      	beq.n	8000caa <HAL_ADC_Init+0xa2>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d102      	bne.n	8000cb0 <HAL_ADC_Init+0xa8>
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	e000      	b.n	8000cb2 <HAL_ADC_Init+0xaa>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7d1b      	ldrb	r3, [r3, #20]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d119      	bne.n	8000cf4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7b1b      	ldrb	r3, [r3, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	035a      	lsls	r2, r3, #13
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	e00b      	b.n	8000cf4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	f043 0220 	orr.w	r2, r3, #32
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	f043 0201 	orr.w	r2, r3, #1
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	430a      	orrs	r2, r1
 8000d06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <HAL_ADC_Init+0x1a8>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6812      	ldr	r2, [r2, #0]
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d24:	d003      	beq.n	8000d2e <HAL_ADC_Init+0x126>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d104      	bne.n	8000d38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	051b      	lsls	r3, r3, #20
 8000d36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_ADC_Init+0x1ac>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d10b      	bne.n	8000d74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d66:	f023 0303 	bic.w	r3, r3, #3
 8000d6a:	f043 0201 	orr.w	r2, r3, #1
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d72:	e018      	b.n	8000da6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	f023 0312 	bic.w	r3, r3, #18
 8000d7c:	f043 0210 	orr.w	r2, r3, #16
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	f043 0201 	orr.w	r2, r3, #1
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d94:	e007      	b.n	8000da6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f043 0210 	orr.w	r2, r3, #16
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	ffe1f7fd 	.word	0xffe1f7fd
 8000db4:	ff1f0efe 	.word	0xff1f0efe

08000db8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x20>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e0dc      	b.n	8000f92 <HAL_ADC_ConfigChannel+0x1da>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b06      	cmp	r3, #6
 8000de6:	d81c      	bhi.n	8000e22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	3b05      	subs	r3, #5
 8000dfa:	221f      	movs	r2, #31
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4019      	ands	r1, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	3b05      	subs	r3, #5
 8000e14:	fa00 f203 	lsl.w	r2, r0, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e20:	e03c      	b.n	8000e9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b0c      	cmp	r3, #12
 8000e28:	d81c      	bhi.n	8000e64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	3b23      	subs	r3, #35	; 0x23
 8000e3c:	221f      	movs	r2, #31
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4019      	ands	r1, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	3b23      	subs	r3, #35	; 0x23
 8000e56:	fa00 f203 	lsl.w	r2, r0, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	631a      	str	r2, [r3, #48]	; 0x30
 8000e62:	e01b      	b.n	8000e9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	3b41      	subs	r3, #65	; 0x41
 8000e76:	221f      	movs	r2, #31
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4019      	ands	r1, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b41      	subs	r3, #65	; 0x41
 8000e90:	fa00 f203 	lsl.w	r2, r0, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b09      	cmp	r3, #9
 8000ea2:	d91c      	bls.n	8000ede <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68d9      	ldr	r1, [r3, #12]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b1e      	subs	r3, #30
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	6898      	ldr	r0, [r3, #8]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	3b1e      	subs	r3, #30
 8000ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	e019      	b.n	8000f12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6919      	ldr	r1, [r3, #16]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	2207      	movs	r2, #7
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	4019      	ands	r1, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	6898      	ldr	r0, [r3, #8]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b10      	cmp	r3, #16
 8000f18:	d003      	beq.n	8000f22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f1e:	2b11      	cmp	r3, #17
 8000f20:	d132      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <HAL_ADC_ConfigChannel+0x1e4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d125      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d126      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f48:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b10      	cmp	r3, #16
 8000f50:	d11a      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	0c9a      	lsrs	r2, r3, #18
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f68:	e002      	b.n	8000f70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f9      	bne.n	8000f6a <HAL_ADC_ConfigChannel+0x1b2>
 8000f76:	e007      	b.n	8000f88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	f043 0220 	orr.w	r2, r3, #32
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40012400 	.word	0x40012400
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	431bde83 	.word	0x431bde83

08000fa8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d127      	bne.n	8001012 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fd2:	f7ff fdeb 	bl	8000bac <HAL_GetTick>
 8000fd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fd8:	e014      	b.n	8001004 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fda:	f7ff fde7 	bl	8000bac <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d90d      	bls.n	8001004 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	f043 0210 	orr.w	r2, r3, #16
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	f043 0201 	orr.w	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e007      	b.n	8001014 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b01      	cmp	r3, #1
 8001010:	d0e3      	beq.n	8000fda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff90 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff49 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff5e 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff90 	bl	80010d4 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5f 	bl	8001080 <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffb0 	bl	8001138 <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b08b      	sub	sp, #44	; 0x2c
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e169      	b.n	80014cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011f8:	2201      	movs	r2, #1
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8158 	bne.w	80014c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a9a      	ldr	r2, [pc, #616]	; (8001484 <HAL_GPIO_Init+0x2a0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d05e      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001220:	4a98      	ldr	r2, [pc, #608]	; (8001484 <HAL_GPIO_Init+0x2a0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d875      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001226:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_GPIO_Init+0x2a4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d058      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 800122c:	4a96      	ldr	r2, [pc, #600]	; (8001488 <HAL_GPIO_Init+0x2a4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d86f      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001232:	4a96      	ldr	r2, [pc, #600]	; (800148c <HAL_GPIO_Init+0x2a8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d052      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001238:	4a94      	ldr	r2, [pc, #592]	; (800148c <HAL_GPIO_Init+0x2a8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d869      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800123e:	4a94      	ldr	r2, [pc, #592]	; (8001490 <HAL_GPIO_Init+0x2ac>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d04c      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001244:	4a92      	ldr	r2, [pc, #584]	; (8001490 <HAL_GPIO_Init+0x2ac>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d863      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800124a:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d046      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001250:	4a90      	ldr	r2, [pc, #576]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d85d      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001256:	2b12      	cmp	r3, #18
 8001258:	d82a      	bhi.n	80012b0 <HAL_GPIO_Init+0xcc>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d859      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <HAL_GPIO_Init+0x80>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	080012df 	.word	0x080012df
 8001268:	080012b9 	.word	0x080012b9
 800126c:	080012cb 	.word	0x080012cb
 8001270:	0800130d 	.word	0x0800130d
 8001274:	08001313 	.word	0x08001313
 8001278:	08001313 	.word	0x08001313
 800127c:	08001313 	.word	0x08001313
 8001280:	08001313 	.word	0x08001313
 8001284:	08001313 	.word	0x08001313
 8001288:	08001313 	.word	0x08001313
 800128c:	08001313 	.word	0x08001313
 8001290:	08001313 	.word	0x08001313
 8001294:	08001313 	.word	0x08001313
 8001298:	08001313 	.word	0x08001313
 800129c:	08001313 	.word	0x08001313
 80012a0:	08001313 	.word	0x08001313
 80012a4:	08001313 	.word	0x08001313
 80012a8:	080012c1 	.word	0x080012c1
 80012ac:	080012d5 	.word	0x080012d5
 80012b0:	4a79      	ldr	r2, [pc, #484]	; (8001498 <HAL_GPIO_Init+0x2b4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012b6:	e02c      	b.n	8001312 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	623b      	str	r3, [r7, #32]
          break;
 80012be:	e029      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	3304      	adds	r3, #4
 80012c6:	623b      	str	r3, [r7, #32]
          break;
 80012c8:	e024      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	3308      	adds	r3, #8
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e01f      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	330c      	adds	r3, #12
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e01a      	b.n	8001314 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012e6:	2304      	movs	r3, #4
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e013      	b.n	8001314 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	611a      	str	r2, [r3, #16]
          break;
 80012fe:	e009      	b.n	8001314 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001300:	2308      	movs	r3, #8
 8001302:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	615a      	str	r2, [r3, #20]
          break;
 800130a:	e003      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x130>
          break;
 8001312:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	d801      	bhi.n	800131e <HAL_GPIO_Init+0x13a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	e001      	b.n	8001322 <HAL_GPIO_Init+0x13e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3304      	adds	r3, #4
 8001322:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2bff      	cmp	r3, #255	; 0xff
 8001328:	d802      	bhi.n	8001330 <HAL_GPIO_Init+0x14c>
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x152>
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	3b08      	subs	r3, #8
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	210f      	movs	r1, #15
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	401a      	ands	r2, r3
 8001348:	6a39      	ldr	r1, [r7, #32]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	431a      	orrs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80b1 	beq.w	80014c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001364:	4b4d      	ldr	r3, [pc, #308]	; (800149c <HAL_GPIO_Init+0x2b8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x2b8>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b4a      	ldr	r3, [pc, #296]	; (800149c <HAL_GPIO_Init+0x2b8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <HAL_GPIO_Init+0x2bc>)
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <HAL_GPIO_Init+0x2c0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_GPIO_Init+0x1ec>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a3f      	ldr	r2, [pc, #252]	; (80014a8 <HAL_GPIO_Init+0x2c4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00d      	beq.n	80013cc <HAL_GPIO_Init+0x1e8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a3e      	ldr	r2, [pc, #248]	; (80014ac <HAL_GPIO_Init+0x2c8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0x1e4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a3d      	ldr	r2, [pc, #244]	; (80014b0 <HAL_GPIO_Init+0x2cc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_GPIO_Init+0x1e0>
 80013c0:	2303      	movs	r3, #3
 80013c2:	e006      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e004      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e002      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013d0:	2300      	movs	r3, #0
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	f002 0203 	and.w	r2, r2, #3
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	4093      	lsls	r3, r2
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e2:	492f      	ldr	r1, [pc, #188]	; (80014a0 <HAL_GPIO_Init+0x2bc>)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	492c      	ldr	r1, [pc, #176]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	4928      	ldr	r1, [pc, #160]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001414:	4013      	ands	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4922      	ldr	r1, [pc, #136]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	491e      	ldr	r1, [pc, #120]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800143c:	4013      	ands	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	4918      	ldr	r1, [pc, #96]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4914      	ldr	r1, [pc, #80]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001464:	4013      	ands	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d021      	beq.n	80014b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	490e      	ldr	r1, [pc, #56]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]
 8001480:	e021      	b.n	80014c6 <HAL_GPIO_Init+0x2e2>
 8001482:	bf00      	nop
 8001484:	10320000 	.word	0x10320000
 8001488:	10310000 	.word	0x10310000
 800148c:	10220000 	.word	0x10220000
 8001490:	10210000 	.word	0x10210000
 8001494:	10120000 	.word	0x10120000
 8001498:	10110000 	.word	0x10110000
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40011400 	.word	0x40011400
 80014b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_GPIO_Init+0x304>)
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	43db      	mvns	r3, r3
 80014c0:	4909      	ldr	r1, [pc, #36]	; (80014e8 <HAL_GPIO_Init+0x304>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	3301      	adds	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f47f ae8e 	bne.w	80011f8 <HAL_GPIO_Init+0x14>
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	372c      	adds	r7, #44	; 0x2c
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	611a      	str	r2, [r3, #16]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4013      	ands	r3, r2
 8001534:	041a      	lsls	r2, r3, #16
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43d9      	mvns	r1, r3
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	400b      	ands	r3, r1
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
	...

08001550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e26c      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8087 	beq.w	800167e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001570:	4b92      	ldr	r3, [pc, #584]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b04      	cmp	r3, #4
 800157a:	d00c      	beq.n	8001596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800157c:	4b8f      	ldr	r3, [pc, #572]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	d112      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
 8001588:	4b8c      	ldr	r3, [pc, #560]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d10b      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	4b89      	ldr	r3, [pc, #548]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d06c      	beq.n	800167c <HAL_RCC_OscConfig+0x12c>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d168      	bne.n	800167c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e246      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x76>
 80015b8:	4b80      	ldr	r3, [pc, #512]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a7f      	ldr	r2, [pc, #508]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e02e      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x98>
 80015ce:	4b7b      	ldr	r3, [pc, #492]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a7a      	ldr	r2, [pc, #488]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b78      	ldr	r3, [pc, #480]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a77      	ldr	r2, [pc, #476]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e01d      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0xbc>
 80015f2:	4b72      	ldr	r3, [pc, #456]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a71      	ldr	r2, [pc, #452]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 800160c:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a6a      	ldr	r2, [pc, #424]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a67      	ldr	r2, [pc, #412]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800161e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fabe 	bl	8000bac <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff faba 	bl	8000bac <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1fa      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0xe4>
 8001652:	e014      	b.n	800167e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff faaa 	bl	8000bac <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff faa6 	bl	8000bac <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e1e6      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x10c>
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d063      	beq.n	8001752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d11c      	bne.n	80016dc <HAL_RCC_OscConfig+0x18c>
 80016a2:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d116      	bne.n	80016dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1ba      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4939      	ldr	r1, [pc, #228]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	e03a      	b.n	8001752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fa5f 	bl	8000bac <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fa5b 	bl	8000bac <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e19b      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4927      	ldr	r1, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fa3e 	bl	8000bac <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff fa3a 	bl	8000bac <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e17a      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d03a      	beq.n	80017d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d019      	beq.n	800179a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7ff fa1e 	bl	8000bac <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff fa1a 	bl	8000bac <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e15a      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f000 fad8 	bl	8001d48 <RCC_Delay>
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7ff fa04 	bl	8000bac <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a6:	e00f      	b.n	80017c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fa00 	bl	8000bac <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d908      	bls.n	80017c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e140      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	42420000 	.word	0x42420000
 80017c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b9e      	ldr	r3, [pc, #632]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e9      	bne.n	80017a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a6 	beq.w	800192e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b97      	ldr	r3, [pc, #604]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10d      	bne.n	800180e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a8a      	ldr	r2, [pc, #552]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff f9c1 	bl	8000bac <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7ff f9bd 	bl	8000bac <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0fd      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x312>
 8001854:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a7a      	ldr	r2, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	e02d      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x334>
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6213      	str	r3, [r2, #32]
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a72      	ldr	r2, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	e01c      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x356>
 800188c:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a6c      	ldr	r2, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a66      	ldr	r2, [pc, #408]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a63      	ldr	r2, [pc, #396]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d015      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff f971 	bl	8000bac <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff f96d 	bl	8000bac <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0ab      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ee      	beq.n	80018ce <HAL_RCC_OscConfig+0x37e>
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff f95b 	bl	8000bac <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff f957 	bl	8000bac <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e095      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8081 	beq.w	8001a3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001938:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d061      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d146      	bne.n	80019da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff f92b 	bl	8000bac <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff f927 	bl	8000bac <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e067      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001980:	d108      	bne.n	8001994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	492d      	ldr	r1, [pc, #180]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a19      	ldr	r1, [r3, #32]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	430b      	orrs	r3, r1
 80019a6:	4927      	ldr	r1, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff f8fb 	bl	8000bac <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff f8f7 	bl	8000bac <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e037      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x46a>
 80019d8:	e02f      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff f8e4 	bl	8000bac <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f8e0 	bl	8000bac <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e020      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x498>
 8001a06:	e018      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e013      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42420060 	.word	0x42420060

08001a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0d0      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d910      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4965      	ldr	r1, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	494d      	ldr	r1, [pc, #308]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d040      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d115      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e073      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06b      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4936      	ldr	r1, [pc, #216]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7ff f834 	bl	8000bac <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff f830 	bl	8000bac <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e053      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d210      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4922      	ldr	r1, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e032      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	490a      	ldr	r1, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1cc>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1d0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe ff92 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	0800405c 	.word	0x0800405c
 8001c1c:	2000000c 	.word	0x2000000c
 8001c20:	20000010 	.word	0x20000010

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b490      	push	{r4, r7}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c2c:	1d3c      	adds	r4, r7, #4
 8001c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c34:	f240 2301 	movw	r3, #513	; 0x201
 8001c38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x46>
 8001c62:	e02d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c66:	623b      	str	r3, [r7, #32]
      break;
 8001c68:	e02d      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	0c9b      	lsrs	r3, r3, #18
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c5b      	lsrs	r3, r3, #17
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c96:	4413      	add	r3, r2
 8001c98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca2:	fb02 f203 	mul.w	r2, r2, r3
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	e004      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	623b      	str	r3, [r7, #32]
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc2:	623b      	str	r3, [r7, #32]
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc90      	pop	{r4, r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	08004014 	.word	0x08004014
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	007a1200 	.word	0x007a1200
 8001ce0:	003d0900 	.word	0x003d0900

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b02      	ldr	r3, [pc, #8]	; (8001cf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	2000000c 	.word	0x2000000c

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cfc:	f7ff fff2 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	0800406c 	.word	0x0800406c

08001d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d24:	f7ff ffde 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0adb      	lsrs	r3, r3, #11
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4903      	ldr	r1, [pc, #12]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	0800406c 	.word	0x0800406c

08001d48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <RCC_Delay+0x34>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <RCC_Delay+0x38>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0a5b      	lsrs	r3, r3, #9
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d64:	bf00      	nop
  }
  while (Delay --);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e5a      	subs	r2, r3, #1
 8001d6a:	60fa      	str	r2, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f9      	bne.n	8001d64 <RCC_Delay+0x1c>
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	2000000c 	.word	0x2000000c
 8001d80:	10624dd3 	.word	0x10624dd3

08001d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d07d      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da4:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10d      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dba:	61d3      	str	r3, [r2, #28]
 8001dbc:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d118      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd8:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a42      	ldr	r2, [pc, #264]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de4:	f7fe fee2 	bl	8000bac <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	e008      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dec:	f7fe fede 	bl	8000bac <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e06d      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d02e      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d027      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e28:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e32:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e3e:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d014      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fead 	bl	8000bac <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fea9 	bl	8000bac <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e036      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ee      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4917      	ldr	r1, [pc, #92]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	490b      	ldr	r1, [pc, #44]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4904      	ldr	r1, [pc, #16]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42420440 	.word	0x42420440

08001ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e076      	b.n	8001ff0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f12:	d009      	beq.n	8001f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
 8001f1a:	e005      	b.n	8001f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fc8c 	bl	8000860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	ea42 0103 	orr.w	r1, r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	0c1a      	lsrs	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f002 0204 	and.w	r2, r2, #4
 8001fce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_SPI_Transmit+0x22>
 8002016:	2302      	movs	r3, #2
 8002018:	e126      	b.n	8002268 <HAL_SPI_Transmit+0x270>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002022:	f7fe fdc3 	bl	8000bac <HAL_GetTick>
 8002026:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d002      	beq.n	800203e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002038:	2302      	movs	r3, #2
 800203a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800203c:	e10b      	b.n	8002256 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_SPI_Transmit+0x52>
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800204e:	e102      	b.n	8002256 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2203      	movs	r2, #3
 8002054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	88fa      	ldrh	r2, [r7, #6]
 800206e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002096:	d10f      	bne.n	80020b8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d007      	beq.n	80020d6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020de:	d14b      	bne.n	8002178 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_SPI_Transmit+0xf6>
 80020e8:	8afb      	ldrh	r3, [r7, #22]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d13e      	bne.n	800216c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	881a      	ldrh	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	1c9a      	adds	r2, r3, #2
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002112:	e02b      	b.n	800216c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b02      	cmp	r3, #2
 8002120:	d112      	bne.n	8002148 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	881a      	ldrh	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	1c9a      	adds	r2, r3, #2
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	86da      	strh	r2, [r3, #54]	; 0x36
 8002146:	e011      	b.n	800216c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002148:	f7fe fd30 	bl	8000bac <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d803      	bhi.n	8002160 <HAL_SPI_Transmit+0x168>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d102      	bne.n	8002166 <HAL_SPI_Transmit+0x16e>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	77fb      	strb	r3, [r7, #31]
          goto error;
 800216a:	e074      	b.n	8002256 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ce      	bne.n	8002114 <HAL_SPI_Transmit+0x11c>
 8002176:	e04c      	b.n	8002212 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_SPI_Transmit+0x18e>
 8002180:	8afb      	ldrh	r3, [r7, #22]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d140      	bne.n	8002208 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	330c      	adds	r3, #12
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021ac:	e02c      	b.n	8002208 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d113      	bne.n	80021e4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	330c      	adds	r3, #12
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80021e2:	e011      	b.n	8002208 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e4:	f7fe fce2 	bl	8000bac <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d803      	bhi.n	80021fc <HAL_SPI_Transmit+0x204>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fa:	d102      	bne.n	8002202 <HAL_SPI_Transmit+0x20a>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002206:	e026      	b.n	8002256 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1cd      	bne.n	80021ae <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fbb8 	bl	800298c <SPI_EndRxTxTransaction>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	77fb      	strb	r3, [r7, #31]
 8002252:	e000      	b.n	8002256 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002254:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002266:	7ffb      	ldrb	r3, [r7, #31]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800228c:	d112      	bne.n	80022b4 <HAL_SPI_Receive+0x44>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10e      	bne.n	80022b4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2204      	movs	r2, #4
 800229a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f8f1 	bl	8002492 <HAL_SPI_TransmitReceive>
 80022b0:	4603      	mov	r3, r0
 80022b2:	e0ea      	b.n	800248a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_SPI_Receive+0x52>
 80022be:	2302      	movs	r3, #2
 80022c0:	e0e3      	b.n	800248a <HAL_SPI_Receive+0x21a>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ca:	f7fe fc6f 	bl	8000bac <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d002      	beq.n	80022e2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022dc:	2302      	movs	r3, #2
 80022de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022e0:	e0ca      	b.n	8002478 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_SPI_Receive+0x7e>
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022f2:	e0c1      	b.n	8002478 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2204      	movs	r2, #4
 80022f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800233a:	d10f      	bne.n	800235c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800234a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d007      	beq.n	800237a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d162      	bne.n	8002448 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002382:	e02e      	b.n	80023e2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d115      	bne.n	80023be <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f103 020c 	add.w	r2, r3, #12
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	7812      	ldrb	r2, [r2, #0]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023bc:	e011      	b.n	80023e2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023be:	f7fe fbf5 	bl	8000bac <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d803      	bhi.n	80023d6 <HAL_SPI_Receive+0x166>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d102      	bne.n	80023dc <HAL_SPI_Receive+0x16c>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023e0:	e04a      	b.n	8002478 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1cb      	bne.n	8002384 <HAL_SPI_Receive+0x114>
 80023ec:	e031      	b.n	8002452 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d113      	bne.n	8002424 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	b292      	uxth	r2, r2
 8002408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	1c9a      	adds	r2, r3, #2
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002422:	e011      	b.n	8002448 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002424:	f7fe fbc2 	bl	8000bac <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d803      	bhi.n	800243c <HAL_SPI_Receive+0x1cc>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d102      	bne.n	8002442 <HAL_SPI_Receive+0x1d2>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002446:	e017      	b.n	8002478 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1cd      	bne.n	80023ee <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fa46 	bl	80028e8 <SPI_EndRxTransaction>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	75fb      	strb	r3, [r7, #23]
 8002474:	e000      	b.n	8002478 <HAL_SPI_Receive+0x208>
  }

error :
 8002476:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002488:	7dfb      	ldrb	r3, [r7, #23]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b08c      	sub	sp, #48	; 0x30
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024a0:	2301      	movs	r3, #1
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x26>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e18a      	b.n	80027ce <HAL_SPI_TransmitReceive+0x33c>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024c0:	f7fe fb74 	bl	8000bac <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d00f      	beq.n	8002502 <HAL_SPI_TransmitReceive+0x70>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e8:	d107      	bne.n	80024fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <HAL_SPI_TransmitReceive+0x68>
 80024f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d003      	beq.n	8002502 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
 80024fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002500:	e15b      	b.n	80027ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x82>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x82>
 800250e:	887b      	ldrh	r3, [r7, #2]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800251a:	e14e      	b.n	80027ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b04      	cmp	r3, #4
 8002526:	d003      	beq.n	8002530 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2205      	movs	r2, #5
 800252c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	887a      	ldrh	r2, [r7, #2]
 8002546:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d007      	beq.n	8002584 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800258c:	d178      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_SPI_TransmitReceive+0x10a>
 8002596:	8b7b      	ldrh	r3, [r7, #26]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d166      	bne.n	800266a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	881a      	ldrh	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	1c9a      	adds	r2, r3, #2
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c0:	e053      	b.n	800266a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d11b      	bne.n	8002608 <HAL_SPI_TransmitReceive+0x176>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d016      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x176>
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d113      	bne.n	8002608 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	881a      	ldrh	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	1c9a      	adds	r2, r3, #2
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d119      	bne.n	800264a <HAL_SPI_TransmitReceive+0x1b8>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d014      	beq.n	800264a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	b292      	uxth	r2, r2
 800262c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	1c9a      	adds	r2, r3, #2
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002646:	2301      	movs	r3, #1
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800264a:	f7fe faaf 	bl	8000bac <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002656:	429a      	cmp	r2, r3
 8002658:	d807      	bhi.n	800266a <HAL_SPI_TransmitReceive+0x1d8>
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d003      	beq.n	800266a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002668:	e0a7      	b.n	80027ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1a6      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x130>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1a1      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x130>
 800267e:	e07c      	b.n	800277a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_SPI_TransmitReceive+0x1fc>
 8002688:	8b7b      	ldrh	r3, [r7, #26]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d16b      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b4:	e057      	b.n	8002766 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d11c      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x26c>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d017      	beq.n	80026fe <HAL_SPI_TransmitReceive+0x26c>
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d114      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	330c      	adds	r3, #12
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d119      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x2ae>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d014      	beq.n	8002740 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800273c:	2301      	movs	r3, #1
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002740:	f7fe fa34 	bl	8000bac <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800274c:	429a      	cmp	r2, r3
 800274e:	d803      	bhi.n	8002758 <HAL_SPI_TransmitReceive+0x2c6>
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d102      	bne.n	800275e <HAL_SPI_TransmitReceive+0x2cc>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002764:	e029      	b.n	80027ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1a2      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x224>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d19d      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f904 	bl	800298c <SPI_EndRxTxTransaction>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002796:	e010      	b.n	80027ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	e000      	b.n	80027ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3730      	adds	r7, #48	; 0x30
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027e8:	f7fe f9e0 	bl	8000bac <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027f8:	f7fe f9d8 	bl	8000bac <HAL_GetTick>
 80027fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	015b      	lsls	r3, r3, #5
 8002804:	0d1b      	lsrs	r3, r3, #20
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800280e:	e054      	b.n	80028ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d050      	beq.n	80028ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002818:	f7fe f9c8 	bl	8000bac <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	429a      	cmp	r2, r3
 8002826:	d902      	bls.n	800282e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d13d      	bne.n	80028aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800283c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002846:	d111      	bne.n	800286c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002850:	d004      	beq.n	800285c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285a:	d107      	bne.n	800286c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800286a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002874:	d10f      	bne.n	8002896 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e017      	b.n	80028da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d19b      	bne.n	8002810 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000000c 	.word	0x2000000c

080028e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028fc:	d111      	bne.n	8002922 <SPI_EndRxTransaction+0x3a>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002906:	d004      	beq.n	8002912 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002910:	d107      	bne.n	8002922 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002920:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800292a:	d117      	bne.n	800295c <SPI_EndRxTransaction+0x74>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	d112      	bne.n	800295c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2200      	movs	r2, #0
 800293e:	2101      	movs	r1, #1
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7ff ff49 	bl	80027d8 <SPI_WaitFlagStateUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01a      	beq.n	8002982 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e013      	b.n	8002984 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2200      	movs	r2, #0
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7ff ff36 	bl	80027d8 <SPI_WaitFlagStateUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e000      	b.n	8002984 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7ff ff18 	bl	80027d8 <SPI_WaitFlagStateUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f043 0220 	orr.w	r2, r3, #32
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e000      	b.n	80029c0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e03f      	b.n	8002a5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fd ff80 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f9a3 	bl	8002d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08a      	sub	sp, #40	; 0x28
 8002a66:	af02      	add	r7, sp, #8
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d17c      	bne.n	8002b7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_UART_Transmit+0x2c>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e075      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_UART_Transmit+0x3e>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e06e      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe f879 	bl	8000bac <HAL_GetTick>
 8002aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_UART_Transmit+0x82>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e003      	b.n	8002aec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002af4:	e02a      	b.n	8002b4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f8df 	bl	8002cc4 <UART_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e036      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	e007      	b.n	8002b3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1cf      	bne.n	8002af6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2140      	movs	r1, #64	; 0x40
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f8af 	bl	8002cc4 <UART_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e006      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b08a      	sub	sp, #40	; 0x28
 8002b8a:	af02      	add	r7, sp, #8
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	f040 8089 	bne.w	8002cba <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_UART_Receive+0x2e>
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e081      	b.n	8002cbc <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Receive+0x40>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e07a      	b.n	8002cbc <HAL_UART_Receive+0x136>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2222      	movs	r2, #34	; 0x22
 8002bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002bdc:	f7fd ffe6 	bl	8000bac <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf6:	d108      	bne.n	8002c0a <HAL_UART_Receive+0x84>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d104      	bne.n	8002c0a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e003      	b.n	8002c12 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c1a:	e043      	b.n	8002ca4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	2120      	movs	r1, #32
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f84c 	bl	8002cc4 <UART_WaitOnFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e042      	b.n	8002cbc <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10c      	bne.n	8002c56 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	3302      	adds	r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e01f      	b.n	8002c96 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	d007      	beq.n	8002c70 <HAL_UART_Receive+0xea>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <HAL_UART_Receive+0xf8>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e008      	b.n	8002c90 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3301      	adds	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1b6      	bne.n	8002c1c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd4:	e02c      	b.n	8002d30 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d028      	beq.n	8002d30 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ce4:	f7fd ff62 	bl	8000bac <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d21d      	bcs.n	8002d30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d02:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e00f      	b.n	8002d50 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d0c3      	beq.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d92:	f023 030c 	bic.w	r3, r3, #12
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <UART_SetConfig+0x114>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d103      	bne.n	8002dc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7fe ffae 	bl	8001d20 <HAL_RCC_GetPCLK2Freq>
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	e002      	b.n	8002dce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f7fe ff96 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009a      	lsls	r2, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <UART_SetConfig+0x118>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	0119      	lsls	r1, r3, #4
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009a      	lsls	r2, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <UART_SetConfig+0x118>)
 8002e06:	fba3 0302 	umull	r0, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2064      	movs	r0, #100	; 0x64
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	3332      	adds	r3, #50	; 0x32
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <UART_SetConfig+0x118>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e24:	4419      	add	r1, r3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009a      	lsls	r2, r3, #2
 8002e30:	441a      	add	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <UART_SetConfig+0x118>)
 8002e3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2064      	movs	r0, #100	; 0x64
 8002e46:	fb00 f303 	mul.w	r3, r0, r3
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	3332      	adds	r3, #50	; 0x32
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <UART_SetConfig+0x118>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	440a      	add	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	51eb851f 	.word	0x51eb851f

08002e74 <__errno>:
 8002e74:	4b01      	ldr	r3, [pc, #4]	; (8002e7c <__errno+0x8>)
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000018 	.word	0x20000018

08002e80 <__libc_init_array>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	2600      	movs	r6, #0
 8002e84:	4d0c      	ldr	r5, [pc, #48]	; (8002eb8 <__libc_init_array+0x38>)
 8002e86:	4c0d      	ldr	r4, [pc, #52]	; (8002ebc <__libc_init_array+0x3c>)
 8002e88:	1b64      	subs	r4, r4, r5
 8002e8a:	10a4      	asrs	r4, r4, #2
 8002e8c:	42a6      	cmp	r6, r4
 8002e8e:	d109      	bne.n	8002ea4 <__libc_init_array+0x24>
 8002e90:	f001 f84e 	bl	8003f30 <_init>
 8002e94:	2600      	movs	r6, #0
 8002e96:	4d0a      	ldr	r5, [pc, #40]	; (8002ec0 <__libc_init_array+0x40>)
 8002e98:	4c0a      	ldr	r4, [pc, #40]	; (8002ec4 <__libc_init_array+0x44>)
 8002e9a:	1b64      	subs	r4, r4, r5
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	42a6      	cmp	r6, r4
 8002ea0:	d105      	bne.n	8002eae <__libc_init_array+0x2e>
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea8:	4798      	blx	r3
 8002eaa:	3601      	adds	r6, #1
 8002eac:	e7ee      	b.n	8002e8c <__libc_init_array+0xc>
 8002eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb2:	4798      	blx	r3
 8002eb4:	3601      	adds	r6, #1
 8002eb6:	e7f2      	b.n	8002e9e <__libc_init_array+0x1e>
 8002eb8:	0800410c 	.word	0x0800410c
 8002ebc:	0800410c 	.word	0x0800410c
 8002ec0:	0800410c 	.word	0x0800410c
 8002ec4:	08004110 	.word	0x08004110

08002ec8 <memset>:
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4402      	add	r2, r0
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <memset+0xa>
 8002ed0:	4770      	bx	lr
 8002ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed6:	e7f9      	b.n	8002ecc <memset+0x4>

08002ed8 <setvbuf>:
 8002ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002edc:	461d      	mov	r5, r3
 8002ede:	4b5d      	ldr	r3, [pc, #372]	; (8003054 <setvbuf+0x17c>)
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	681f      	ldr	r7, [r3, #0]
 8002ee4:	460e      	mov	r6, r1
 8002ee6:	4690      	mov	r8, r2
 8002ee8:	b127      	cbz	r7, 8002ef4 <setvbuf+0x1c>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	b913      	cbnz	r3, 8002ef4 <setvbuf+0x1c>
 8002eee:	4638      	mov	r0, r7
 8002ef0:	f000 f9e8 	bl	80032c4 <__sinit>
 8002ef4:	4b58      	ldr	r3, [pc, #352]	; (8003058 <setvbuf+0x180>)
 8002ef6:	429c      	cmp	r4, r3
 8002ef8:	d167      	bne.n	8002fca <setvbuf+0xf2>
 8002efa:	687c      	ldr	r4, [r7, #4]
 8002efc:	f1b8 0f02 	cmp.w	r8, #2
 8002f00:	d006      	beq.n	8002f10 <setvbuf+0x38>
 8002f02:	f1b8 0f01 	cmp.w	r8, #1
 8002f06:	f200 809f 	bhi.w	8003048 <setvbuf+0x170>
 8002f0a:	2d00      	cmp	r5, #0
 8002f0c:	f2c0 809c 	blt.w	8003048 <setvbuf+0x170>
 8002f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f12:	07db      	lsls	r3, r3, #31
 8002f14:	d405      	bmi.n	8002f22 <setvbuf+0x4a>
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	0598      	lsls	r0, r3, #22
 8002f1a:	d402      	bmi.n	8002f22 <setvbuf+0x4a>
 8002f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f1e:	f000 fa6f 	bl	8003400 <__retarget_lock_acquire_recursive>
 8002f22:	4621      	mov	r1, r4
 8002f24:	4638      	mov	r0, r7
 8002f26:	f000 f939 	bl	800319c <_fflush_r>
 8002f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f2c:	b141      	cbz	r1, 8002f40 <setvbuf+0x68>
 8002f2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f32:	4299      	cmp	r1, r3
 8002f34:	d002      	beq.n	8002f3c <setvbuf+0x64>
 8002f36:	4638      	mov	r0, r7
 8002f38:	f000 fad0 	bl	80034dc <_free_r>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6363      	str	r3, [r4, #52]	; 0x34
 8002f40:	2300      	movs	r3, #0
 8002f42:	61a3      	str	r3, [r4, #24]
 8002f44:	6063      	str	r3, [r4, #4]
 8002f46:	89a3      	ldrh	r3, [r4, #12]
 8002f48:	0619      	lsls	r1, r3, #24
 8002f4a:	d503      	bpl.n	8002f54 <setvbuf+0x7c>
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	6921      	ldr	r1, [r4, #16]
 8002f50:	f000 fac4 	bl	80034dc <_free_r>
 8002f54:	89a3      	ldrh	r3, [r4, #12]
 8002f56:	f1b8 0f02 	cmp.w	r8, #2
 8002f5a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	81a3      	strh	r3, [r4, #12]
 8002f64:	d06c      	beq.n	8003040 <setvbuf+0x168>
 8002f66:	ab01      	add	r3, sp, #4
 8002f68:	466a      	mov	r2, sp
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	f000 fa49 	bl	8003404 <__swhatbuf_r>
 8002f72:	89a3      	ldrh	r3, [r4, #12]
 8002f74:	4318      	orrs	r0, r3
 8002f76:	81a0      	strh	r0, [r4, #12]
 8002f78:	2d00      	cmp	r5, #0
 8002f7a:	d130      	bne.n	8002fde <setvbuf+0x106>
 8002f7c:	9d00      	ldr	r5, [sp, #0]
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f000 faa4 	bl	80034cc <malloc>
 8002f84:	4606      	mov	r6, r0
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d155      	bne.n	8003036 <setvbuf+0x15e>
 8002f8a:	f8dd 9000 	ldr.w	r9, [sp]
 8002f8e:	45a9      	cmp	r9, r5
 8002f90:	d14a      	bne.n	8003028 <setvbuf+0x150>
 8002f92:	f04f 35ff 	mov.w	r5, #4294967295
 8002f96:	2200      	movs	r2, #0
 8002f98:	60a2      	str	r2, [r4, #8]
 8002f9a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002f9e:	6022      	str	r2, [r4, #0]
 8002fa0:	6122      	str	r2, [r4, #16]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fa8:	6162      	str	r2, [r4, #20]
 8002faa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	07d2      	lsls	r2, r2, #31
 8002fb2:	81a3      	strh	r3, [r4, #12]
 8002fb4:	d405      	bmi.n	8002fc2 <setvbuf+0xea>
 8002fb6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002fba:	d102      	bne.n	8002fc2 <setvbuf+0xea>
 8002fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fbe:	f000 fa20 	bl	8003402 <__retarget_lock_release_recursive>
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	b003      	add	sp, #12
 8002fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <setvbuf+0x184>)
 8002fcc:	429c      	cmp	r4, r3
 8002fce:	d101      	bne.n	8002fd4 <setvbuf+0xfc>
 8002fd0:	68bc      	ldr	r4, [r7, #8]
 8002fd2:	e793      	b.n	8002efc <setvbuf+0x24>
 8002fd4:	4b22      	ldr	r3, [pc, #136]	; (8003060 <setvbuf+0x188>)
 8002fd6:	429c      	cmp	r4, r3
 8002fd8:	bf08      	it	eq
 8002fda:	68fc      	ldreq	r4, [r7, #12]
 8002fdc:	e78e      	b.n	8002efc <setvbuf+0x24>
 8002fde:	2e00      	cmp	r6, #0
 8002fe0:	d0cd      	beq.n	8002f7e <setvbuf+0xa6>
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	b913      	cbnz	r3, 8002fec <setvbuf+0x114>
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	f000 f96c 	bl	80032c4 <__sinit>
 8002fec:	f1b8 0f01 	cmp.w	r8, #1
 8002ff0:	bf08      	it	eq
 8002ff2:	89a3      	ldrheq	r3, [r4, #12]
 8002ff4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002ff8:	bf04      	itt	eq
 8002ffa:	f043 0301 	orreq.w	r3, r3, #1
 8002ffe:	81a3      	strheq	r3, [r4, #12]
 8003000:	89a2      	ldrh	r2, [r4, #12]
 8003002:	6026      	str	r6, [r4, #0]
 8003004:	f012 0308 	ands.w	r3, r2, #8
 8003008:	d01c      	beq.n	8003044 <setvbuf+0x16c>
 800300a:	07d3      	lsls	r3, r2, #31
 800300c:	bf41      	itttt	mi
 800300e:	2300      	movmi	r3, #0
 8003010:	426d      	negmi	r5, r5
 8003012:	60a3      	strmi	r3, [r4, #8]
 8003014:	61a5      	strmi	r5, [r4, #24]
 8003016:	bf58      	it	pl
 8003018:	60a5      	strpl	r5, [r4, #8]
 800301a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800301c:	f015 0501 	ands.w	r5, r5, #1
 8003020:	d115      	bne.n	800304e <setvbuf+0x176>
 8003022:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003026:	e7c8      	b.n	8002fba <setvbuf+0xe2>
 8003028:	4648      	mov	r0, r9
 800302a:	f000 fa4f 	bl	80034cc <malloc>
 800302e:	4606      	mov	r6, r0
 8003030:	2800      	cmp	r0, #0
 8003032:	d0ae      	beq.n	8002f92 <setvbuf+0xba>
 8003034:	464d      	mov	r5, r9
 8003036:	89a3      	ldrh	r3, [r4, #12]
 8003038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303c:	81a3      	strh	r3, [r4, #12]
 800303e:	e7d0      	b.n	8002fe2 <setvbuf+0x10a>
 8003040:	2500      	movs	r5, #0
 8003042:	e7a8      	b.n	8002f96 <setvbuf+0xbe>
 8003044:	60a3      	str	r3, [r4, #8]
 8003046:	e7e8      	b.n	800301a <setvbuf+0x142>
 8003048:	f04f 35ff 	mov.w	r5, #4294967295
 800304c:	e7b9      	b.n	8002fc2 <setvbuf+0xea>
 800304e:	2500      	movs	r5, #0
 8003050:	e7b7      	b.n	8002fc2 <setvbuf+0xea>
 8003052:	bf00      	nop
 8003054:	20000018 	.word	0x20000018
 8003058:	08004098 	.word	0x08004098
 800305c:	080040b8 	.word	0x080040b8
 8003060:	08004078 	.word	0x08004078

08003064 <viprintf>:
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <viprintf+0x28>)
 8003066:	b570      	push	{r4, r5, r6, lr}
 8003068:	681c      	ldr	r4, [r3, #0]
 800306a:	4605      	mov	r5, r0
 800306c:	460e      	mov	r6, r1
 800306e:	b124      	cbz	r4, 800307a <viprintf+0x16>
 8003070:	69a3      	ldr	r3, [r4, #24]
 8003072:	b913      	cbnz	r3, 800307a <viprintf+0x16>
 8003074:	4620      	mov	r0, r4
 8003076:	f000 f925 	bl	80032c4 <__sinit>
 800307a:	4633      	mov	r3, r6
 800307c:	462a      	mov	r2, r5
 800307e:	4620      	mov	r0, r4
 8003080:	68a1      	ldr	r1, [r4, #8]
 8003082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003086:	f000 baf7 	b.w	8003678 <_vfiprintf_r>
 800308a:	bf00      	nop
 800308c:	20000018 	.word	0x20000018

08003090 <__sflush_r>:
 8003090:	898a      	ldrh	r2, [r1, #12]
 8003092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003096:	4605      	mov	r5, r0
 8003098:	0710      	lsls	r0, r2, #28
 800309a:	460c      	mov	r4, r1
 800309c:	d458      	bmi.n	8003150 <__sflush_r+0xc0>
 800309e:	684b      	ldr	r3, [r1, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	dc05      	bgt.n	80030b0 <__sflush_r+0x20>
 80030a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	dc02      	bgt.n	80030b0 <__sflush_r+0x20>
 80030aa:	2000      	movs	r0, #0
 80030ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030b2:	2e00      	cmp	r6, #0
 80030b4:	d0f9      	beq.n	80030aa <__sflush_r+0x1a>
 80030b6:	2300      	movs	r3, #0
 80030b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030bc:	682f      	ldr	r7, [r5, #0]
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	d032      	beq.n	8003128 <__sflush_r+0x98>
 80030c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030c4:	89a3      	ldrh	r3, [r4, #12]
 80030c6:	075a      	lsls	r2, r3, #29
 80030c8:	d505      	bpl.n	80030d6 <__sflush_r+0x46>
 80030ca:	6863      	ldr	r3, [r4, #4]
 80030cc:	1ac0      	subs	r0, r0, r3
 80030ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030d0:	b10b      	cbz	r3, 80030d6 <__sflush_r+0x46>
 80030d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030d4:	1ac0      	subs	r0, r0, r3
 80030d6:	2300      	movs	r3, #0
 80030d8:	4602      	mov	r2, r0
 80030da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030dc:	4628      	mov	r0, r5
 80030de:	6a21      	ldr	r1, [r4, #32]
 80030e0:	47b0      	blx	r6
 80030e2:	1c43      	adds	r3, r0, #1
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	d106      	bne.n	80030f6 <__sflush_r+0x66>
 80030e8:	6829      	ldr	r1, [r5, #0]
 80030ea:	291d      	cmp	r1, #29
 80030ec:	d82c      	bhi.n	8003148 <__sflush_r+0xb8>
 80030ee:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <__sflush_r+0x108>)
 80030f0:	40ca      	lsrs	r2, r1
 80030f2:	07d6      	lsls	r6, r2, #31
 80030f4:	d528      	bpl.n	8003148 <__sflush_r+0xb8>
 80030f6:	2200      	movs	r2, #0
 80030f8:	6062      	str	r2, [r4, #4]
 80030fa:	6922      	ldr	r2, [r4, #16]
 80030fc:	04d9      	lsls	r1, r3, #19
 80030fe:	6022      	str	r2, [r4, #0]
 8003100:	d504      	bpl.n	800310c <__sflush_r+0x7c>
 8003102:	1c42      	adds	r2, r0, #1
 8003104:	d101      	bne.n	800310a <__sflush_r+0x7a>
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	b903      	cbnz	r3, 800310c <__sflush_r+0x7c>
 800310a:	6560      	str	r0, [r4, #84]	; 0x54
 800310c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800310e:	602f      	str	r7, [r5, #0]
 8003110:	2900      	cmp	r1, #0
 8003112:	d0ca      	beq.n	80030aa <__sflush_r+0x1a>
 8003114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003118:	4299      	cmp	r1, r3
 800311a:	d002      	beq.n	8003122 <__sflush_r+0x92>
 800311c:	4628      	mov	r0, r5
 800311e:	f000 f9dd 	bl	80034dc <_free_r>
 8003122:	2000      	movs	r0, #0
 8003124:	6360      	str	r0, [r4, #52]	; 0x34
 8003126:	e7c1      	b.n	80030ac <__sflush_r+0x1c>
 8003128:	6a21      	ldr	r1, [r4, #32]
 800312a:	2301      	movs	r3, #1
 800312c:	4628      	mov	r0, r5
 800312e:	47b0      	blx	r6
 8003130:	1c41      	adds	r1, r0, #1
 8003132:	d1c7      	bne.n	80030c4 <__sflush_r+0x34>
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0c4      	beq.n	80030c4 <__sflush_r+0x34>
 800313a:	2b1d      	cmp	r3, #29
 800313c:	d001      	beq.n	8003142 <__sflush_r+0xb2>
 800313e:	2b16      	cmp	r3, #22
 8003140:	d101      	bne.n	8003146 <__sflush_r+0xb6>
 8003142:	602f      	str	r7, [r5, #0]
 8003144:	e7b1      	b.n	80030aa <__sflush_r+0x1a>
 8003146:	89a3      	ldrh	r3, [r4, #12]
 8003148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800314c:	81a3      	strh	r3, [r4, #12]
 800314e:	e7ad      	b.n	80030ac <__sflush_r+0x1c>
 8003150:	690f      	ldr	r7, [r1, #16]
 8003152:	2f00      	cmp	r7, #0
 8003154:	d0a9      	beq.n	80030aa <__sflush_r+0x1a>
 8003156:	0793      	lsls	r3, r2, #30
 8003158:	bf18      	it	ne
 800315a:	2300      	movne	r3, #0
 800315c:	680e      	ldr	r6, [r1, #0]
 800315e:	bf08      	it	eq
 8003160:	694b      	ldreq	r3, [r1, #20]
 8003162:	eba6 0807 	sub.w	r8, r6, r7
 8003166:	600f      	str	r7, [r1, #0]
 8003168:	608b      	str	r3, [r1, #8]
 800316a:	f1b8 0f00 	cmp.w	r8, #0
 800316e:	dd9c      	ble.n	80030aa <__sflush_r+0x1a>
 8003170:	4643      	mov	r3, r8
 8003172:	463a      	mov	r2, r7
 8003174:	4628      	mov	r0, r5
 8003176:	6a21      	ldr	r1, [r4, #32]
 8003178:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800317a:	47b0      	blx	r6
 800317c:	2800      	cmp	r0, #0
 800317e:	dc06      	bgt.n	800318e <__sflush_r+0xfe>
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	f04f 30ff 	mov.w	r0, #4294967295
 8003186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318a:	81a3      	strh	r3, [r4, #12]
 800318c:	e78e      	b.n	80030ac <__sflush_r+0x1c>
 800318e:	4407      	add	r7, r0
 8003190:	eba8 0800 	sub.w	r8, r8, r0
 8003194:	e7e9      	b.n	800316a <__sflush_r+0xda>
 8003196:	bf00      	nop
 8003198:	20400001 	.word	0x20400001

0800319c <_fflush_r>:
 800319c:	b538      	push	{r3, r4, r5, lr}
 800319e:	690b      	ldr	r3, [r1, #16]
 80031a0:	4605      	mov	r5, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	b913      	cbnz	r3, 80031ac <_fflush_r+0x10>
 80031a6:	2500      	movs	r5, #0
 80031a8:	4628      	mov	r0, r5
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
 80031ac:	b118      	cbz	r0, 80031b6 <_fflush_r+0x1a>
 80031ae:	6983      	ldr	r3, [r0, #24]
 80031b0:	b90b      	cbnz	r3, 80031b6 <_fflush_r+0x1a>
 80031b2:	f000 f887 	bl	80032c4 <__sinit>
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <_fflush_r+0x6c>)
 80031b8:	429c      	cmp	r4, r3
 80031ba:	d11b      	bne.n	80031f4 <_fflush_r+0x58>
 80031bc:	686c      	ldr	r4, [r5, #4]
 80031be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ef      	beq.n	80031a6 <_fflush_r+0xa>
 80031c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031c8:	07d0      	lsls	r0, r2, #31
 80031ca:	d404      	bmi.n	80031d6 <_fflush_r+0x3a>
 80031cc:	0599      	lsls	r1, r3, #22
 80031ce:	d402      	bmi.n	80031d6 <_fflush_r+0x3a>
 80031d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031d2:	f000 f915 	bl	8003400 <__retarget_lock_acquire_recursive>
 80031d6:	4628      	mov	r0, r5
 80031d8:	4621      	mov	r1, r4
 80031da:	f7ff ff59 	bl	8003090 <__sflush_r>
 80031de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031e0:	4605      	mov	r5, r0
 80031e2:	07da      	lsls	r2, r3, #31
 80031e4:	d4e0      	bmi.n	80031a8 <_fflush_r+0xc>
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	059b      	lsls	r3, r3, #22
 80031ea:	d4dd      	bmi.n	80031a8 <_fflush_r+0xc>
 80031ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ee:	f000 f908 	bl	8003402 <__retarget_lock_release_recursive>
 80031f2:	e7d9      	b.n	80031a8 <_fflush_r+0xc>
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <_fflush_r+0x70>)
 80031f6:	429c      	cmp	r4, r3
 80031f8:	d101      	bne.n	80031fe <_fflush_r+0x62>
 80031fa:	68ac      	ldr	r4, [r5, #8]
 80031fc:	e7df      	b.n	80031be <_fflush_r+0x22>
 80031fe:	4b04      	ldr	r3, [pc, #16]	; (8003210 <_fflush_r+0x74>)
 8003200:	429c      	cmp	r4, r3
 8003202:	bf08      	it	eq
 8003204:	68ec      	ldreq	r4, [r5, #12]
 8003206:	e7da      	b.n	80031be <_fflush_r+0x22>
 8003208:	08004098 	.word	0x08004098
 800320c:	080040b8 	.word	0x080040b8
 8003210:	08004078 	.word	0x08004078

08003214 <std>:
 8003214:	2300      	movs	r3, #0
 8003216:	b510      	push	{r4, lr}
 8003218:	4604      	mov	r4, r0
 800321a:	e9c0 3300 	strd	r3, r3, [r0]
 800321e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003222:	6083      	str	r3, [r0, #8]
 8003224:	8181      	strh	r1, [r0, #12]
 8003226:	6643      	str	r3, [r0, #100]	; 0x64
 8003228:	81c2      	strh	r2, [r0, #14]
 800322a:	6183      	str	r3, [r0, #24]
 800322c:	4619      	mov	r1, r3
 800322e:	2208      	movs	r2, #8
 8003230:	305c      	adds	r0, #92	; 0x5c
 8003232:	f7ff fe49 	bl	8002ec8 <memset>
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <std+0x38>)
 8003238:	6224      	str	r4, [r4, #32]
 800323a:	6263      	str	r3, [r4, #36]	; 0x24
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <std+0x3c>)
 800323e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <std+0x40>)
 8003242:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <std+0x44>)
 8003246:	6323      	str	r3, [r4, #48]	; 0x30
 8003248:	bd10      	pop	{r4, pc}
 800324a:	bf00      	nop
 800324c:	08003c25 	.word	0x08003c25
 8003250:	08003c47 	.word	0x08003c47
 8003254:	08003c7f 	.word	0x08003c7f
 8003258:	08003ca3 	.word	0x08003ca3

0800325c <_cleanup_r>:
 800325c:	4901      	ldr	r1, [pc, #4]	; (8003264 <_cleanup_r+0x8>)
 800325e:	f000 b8af 	b.w	80033c0 <_fwalk_reent>
 8003262:	bf00      	nop
 8003264:	0800319d 	.word	0x0800319d

08003268 <__sfmoreglue>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	2568      	movs	r5, #104	; 0x68
 800326c:	1e4a      	subs	r2, r1, #1
 800326e:	4355      	muls	r5, r2
 8003270:	460e      	mov	r6, r1
 8003272:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003276:	f000 f97d 	bl	8003574 <_malloc_r>
 800327a:	4604      	mov	r4, r0
 800327c:	b140      	cbz	r0, 8003290 <__sfmoreglue+0x28>
 800327e:	2100      	movs	r1, #0
 8003280:	e9c0 1600 	strd	r1, r6, [r0]
 8003284:	300c      	adds	r0, #12
 8003286:	60a0      	str	r0, [r4, #8]
 8003288:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800328c:	f7ff fe1c 	bl	8002ec8 <memset>
 8003290:	4620      	mov	r0, r4
 8003292:	bd70      	pop	{r4, r5, r6, pc}

08003294 <__sfp_lock_acquire>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__sfp_lock_acquire+0x8>)
 8003296:	f000 b8b3 	b.w	8003400 <__retarget_lock_acquire_recursive>
 800329a:	bf00      	nop
 800329c:	20000188 	.word	0x20000188

080032a0 <__sfp_lock_release>:
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <__sfp_lock_release+0x8>)
 80032a2:	f000 b8ae 	b.w	8003402 <__retarget_lock_release_recursive>
 80032a6:	bf00      	nop
 80032a8:	20000188 	.word	0x20000188

080032ac <__sinit_lock_acquire>:
 80032ac:	4801      	ldr	r0, [pc, #4]	; (80032b4 <__sinit_lock_acquire+0x8>)
 80032ae:	f000 b8a7 	b.w	8003400 <__retarget_lock_acquire_recursive>
 80032b2:	bf00      	nop
 80032b4:	20000183 	.word	0x20000183

080032b8 <__sinit_lock_release>:
 80032b8:	4801      	ldr	r0, [pc, #4]	; (80032c0 <__sinit_lock_release+0x8>)
 80032ba:	f000 b8a2 	b.w	8003402 <__retarget_lock_release_recursive>
 80032be:	bf00      	nop
 80032c0:	20000183 	.word	0x20000183

080032c4 <__sinit>:
 80032c4:	b510      	push	{r4, lr}
 80032c6:	4604      	mov	r4, r0
 80032c8:	f7ff fff0 	bl	80032ac <__sinit_lock_acquire>
 80032cc:	69a3      	ldr	r3, [r4, #24]
 80032ce:	b11b      	cbz	r3, 80032d8 <__sinit+0x14>
 80032d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032d4:	f7ff bff0 	b.w	80032b8 <__sinit_lock_release>
 80032d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032dc:	6523      	str	r3, [r4, #80]	; 0x50
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <__sinit+0x68>)
 80032e0:	4a13      	ldr	r2, [pc, #76]	; (8003330 <__sinit+0x6c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	bf08      	it	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	4620      	mov	r0, r4
 80032ee:	bf08      	it	eq
 80032f0:	61a3      	streq	r3, [r4, #24]
 80032f2:	f000 f81f 	bl	8003334 <__sfp>
 80032f6:	6060      	str	r0, [r4, #4]
 80032f8:	4620      	mov	r0, r4
 80032fa:	f000 f81b 	bl	8003334 <__sfp>
 80032fe:	60a0      	str	r0, [r4, #8]
 8003300:	4620      	mov	r0, r4
 8003302:	f000 f817 	bl	8003334 <__sfp>
 8003306:	2200      	movs	r2, #0
 8003308:	2104      	movs	r1, #4
 800330a:	60e0      	str	r0, [r4, #12]
 800330c:	6860      	ldr	r0, [r4, #4]
 800330e:	f7ff ff81 	bl	8003214 <std>
 8003312:	2201      	movs	r2, #1
 8003314:	2109      	movs	r1, #9
 8003316:	68a0      	ldr	r0, [r4, #8]
 8003318:	f7ff ff7c 	bl	8003214 <std>
 800331c:	2202      	movs	r2, #2
 800331e:	2112      	movs	r1, #18
 8003320:	68e0      	ldr	r0, [r4, #12]
 8003322:	f7ff ff77 	bl	8003214 <std>
 8003326:	2301      	movs	r3, #1
 8003328:	61a3      	str	r3, [r4, #24]
 800332a:	e7d1      	b.n	80032d0 <__sinit+0xc>
 800332c:	08004074 	.word	0x08004074
 8003330:	0800325d 	.word	0x0800325d

08003334 <__sfp>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	4607      	mov	r7, r0
 8003338:	f7ff ffac 	bl	8003294 <__sfp_lock_acquire>
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <__sfp+0x84>)
 800333e:	681e      	ldr	r6, [r3, #0]
 8003340:	69b3      	ldr	r3, [r6, #24]
 8003342:	b913      	cbnz	r3, 800334a <__sfp+0x16>
 8003344:	4630      	mov	r0, r6
 8003346:	f7ff ffbd 	bl	80032c4 <__sinit>
 800334a:	3648      	adds	r6, #72	; 0x48
 800334c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003350:	3b01      	subs	r3, #1
 8003352:	d503      	bpl.n	800335c <__sfp+0x28>
 8003354:	6833      	ldr	r3, [r6, #0]
 8003356:	b30b      	cbz	r3, 800339c <__sfp+0x68>
 8003358:	6836      	ldr	r6, [r6, #0]
 800335a:	e7f7      	b.n	800334c <__sfp+0x18>
 800335c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003360:	b9d5      	cbnz	r5, 8003398 <__sfp+0x64>
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <__sfp+0x88>)
 8003364:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003368:	60e3      	str	r3, [r4, #12]
 800336a:	6665      	str	r5, [r4, #100]	; 0x64
 800336c:	f000 f847 	bl	80033fe <__retarget_lock_init_recursive>
 8003370:	f7ff ff96 	bl	80032a0 <__sfp_lock_release>
 8003374:	2208      	movs	r2, #8
 8003376:	4629      	mov	r1, r5
 8003378:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800337c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003380:	6025      	str	r5, [r4, #0]
 8003382:	61a5      	str	r5, [r4, #24]
 8003384:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003388:	f7ff fd9e 	bl	8002ec8 <memset>
 800338c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003390:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003394:	4620      	mov	r0, r4
 8003396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003398:	3468      	adds	r4, #104	; 0x68
 800339a:	e7d9      	b.n	8003350 <__sfp+0x1c>
 800339c:	2104      	movs	r1, #4
 800339e:	4638      	mov	r0, r7
 80033a0:	f7ff ff62 	bl	8003268 <__sfmoreglue>
 80033a4:	4604      	mov	r4, r0
 80033a6:	6030      	str	r0, [r6, #0]
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d1d5      	bne.n	8003358 <__sfp+0x24>
 80033ac:	f7ff ff78 	bl	80032a0 <__sfp_lock_release>
 80033b0:	230c      	movs	r3, #12
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	e7ee      	b.n	8003394 <__sfp+0x60>
 80033b6:	bf00      	nop
 80033b8:	08004074 	.word	0x08004074
 80033bc:	ffff0001 	.word	0xffff0001

080033c0 <_fwalk_reent>:
 80033c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c4:	4606      	mov	r6, r0
 80033c6:	4688      	mov	r8, r1
 80033c8:	2700      	movs	r7, #0
 80033ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033d2:	f1b9 0901 	subs.w	r9, r9, #1
 80033d6:	d505      	bpl.n	80033e4 <_fwalk_reent+0x24>
 80033d8:	6824      	ldr	r4, [r4, #0]
 80033da:	2c00      	cmp	r4, #0
 80033dc:	d1f7      	bne.n	80033ce <_fwalk_reent+0xe>
 80033de:	4638      	mov	r0, r7
 80033e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033e4:	89ab      	ldrh	r3, [r5, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d907      	bls.n	80033fa <_fwalk_reent+0x3a>
 80033ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033ee:	3301      	adds	r3, #1
 80033f0:	d003      	beq.n	80033fa <_fwalk_reent+0x3a>
 80033f2:	4629      	mov	r1, r5
 80033f4:	4630      	mov	r0, r6
 80033f6:	47c0      	blx	r8
 80033f8:	4307      	orrs	r7, r0
 80033fa:	3568      	adds	r5, #104	; 0x68
 80033fc:	e7e9      	b.n	80033d2 <_fwalk_reent+0x12>

080033fe <__retarget_lock_init_recursive>:
 80033fe:	4770      	bx	lr

08003400 <__retarget_lock_acquire_recursive>:
 8003400:	4770      	bx	lr

08003402 <__retarget_lock_release_recursive>:
 8003402:	4770      	bx	lr

08003404 <__swhatbuf_r>:
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	460e      	mov	r6, r1
 8003408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800340c:	4614      	mov	r4, r2
 800340e:	2900      	cmp	r1, #0
 8003410:	461d      	mov	r5, r3
 8003412:	b096      	sub	sp, #88	; 0x58
 8003414:	da07      	bge.n	8003426 <__swhatbuf_r+0x22>
 8003416:	2300      	movs	r3, #0
 8003418:	602b      	str	r3, [r5, #0]
 800341a:	89b3      	ldrh	r3, [r6, #12]
 800341c:	061a      	lsls	r2, r3, #24
 800341e:	d410      	bmi.n	8003442 <__swhatbuf_r+0x3e>
 8003420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003424:	e00e      	b.n	8003444 <__swhatbuf_r+0x40>
 8003426:	466a      	mov	r2, sp
 8003428:	f000 fd22 	bl	8003e70 <_fstat_r>
 800342c:	2800      	cmp	r0, #0
 800342e:	dbf2      	blt.n	8003416 <__swhatbuf_r+0x12>
 8003430:	9a01      	ldr	r2, [sp, #4]
 8003432:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003436:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800343a:	425a      	negs	r2, r3
 800343c:	415a      	adcs	r2, r3
 800343e:	602a      	str	r2, [r5, #0]
 8003440:	e7ee      	b.n	8003420 <__swhatbuf_r+0x1c>
 8003442:	2340      	movs	r3, #64	; 0x40
 8003444:	2000      	movs	r0, #0
 8003446:	6023      	str	r3, [r4, #0]
 8003448:	b016      	add	sp, #88	; 0x58
 800344a:	bd70      	pop	{r4, r5, r6, pc}

0800344c <__smakebuf_r>:
 800344c:	898b      	ldrh	r3, [r1, #12]
 800344e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003450:	079d      	lsls	r5, r3, #30
 8003452:	4606      	mov	r6, r0
 8003454:	460c      	mov	r4, r1
 8003456:	d507      	bpl.n	8003468 <__smakebuf_r+0x1c>
 8003458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	6123      	str	r3, [r4, #16]
 8003460:	2301      	movs	r3, #1
 8003462:	6163      	str	r3, [r4, #20]
 8003464:	b002      	add	sp, #8
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	466a      	mov	r2, sp
 800346a:	ab01      	add	r3, sp, #4
 800346c:	f7ff ffca 	bl	8003404 <__swhatbuf_r>
 8003470:	9900      	ldr	r1, [sp, #0]
 8003472:	4605      	mov	r5, r0
 8003474:	4630      	mov	r0, r6
 8003476:	f000 f87d 	bl	8003574 <_malloc_r>
 800347a:	b948      	cbnz	r0, 8003490 <__smakebuf_r+0x44>
 800347c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003480:	059a      	lsls	r2, r3, #22
 8003482:	d4ef      	bmi.n	8003464 <__smakebuf_r+0x18>
 8003484:	f023 0303 	bic.w	r3, r3, #3
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	e7e3      	b.n	8003458 <__smakebuf_r+0xc>
 8003490:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <__smakebuf_r+0x7c>)
 8003492:	62b3      	str	r3, [r6, #40]	; 0x28
 8003494:	89a3      	ldrh	r3, [r4, #12]
 8003496:	6020      	str	r0, [r4, #0]
 8003498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349c:	81a3      	strh	r3, [r4, #12]
 800349e:	9b00      	ldr	r3, [sp, #0]
 80034a0:	6120      	str	r0, [r4, #16]
 80034a2:	6163      	str	r3, [r4, #20]
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	b15b      	cbz	r3, 80034c0 <__smakebuf_r+0x74>
 80034a8:	4630      	mov	r0, r6
 80034aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034ae:	f000 fcf1 	bl	8003e94 <_isatty_r>
 80034b2:	b128      	cbz	r0, 80034c0 <__smakebuf_r+0x74>
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	81a3      	strh	r3, [r4, #12]
 80034c0:	89a0      	ldrh	r0, [r4, #12]
 80034c2:	4305      	orrs	r5, r0
 80034c4:	81a5      	strh	r5, [r4, #12]
 80034c6:	e7cd      	b.n	8003464 <__smakebuf_r+0x18>
 80034c8:	0800325d 	.word	0x0800325d

080034cc <malloc>:
 80034cc:	4b02      	ldr	r3, [pc, #8]	; (80034d8 <malloc+0xc>)
 80034ce:	4601      	mov	r1, r0
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	f000 b84f 	b.w	8003574 <_malloc_r>
 80034d6:	bf00      	nop
 80034d8:	20000018 	.word	0x20000018

080034dc <_free_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	4605      	mov	r5, r0
 80034e0:	2900      	cmp	r1, #0
 80034e2:	d043      	beq.n	800356c <_free_r+0x90>
 80034e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e8:	1f0c      	subs	r4, r1, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfb8      	it	lt
 80034ee:	18e4      	addlt	r4, r4, r3
 80034f0:	f000 fd00 	bl	8003ef4 <__malloc_lock>
 80034f4:	4a1e      	ldr	r2, [pc, #120]	; (8003570 <_free_r+0x94>)
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	4610      	mov	r0, r2
 80034fa:	b933      	cbnz	r3, 800350a <_free_r+0x2e>
 80034fc:	6063      	str	r3, [r4, #4]
 80034fe:	6014      	str	r4, [r2, #0]
 8003500:	4628      	mov	r0, r5
 8003502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003506:	f000 bcfb 	b.w	8003f00 <__malloc_unlock>
 800350a:	42a3      	cmp	r3, r4
 800350c:	d90a      	bls.n	8003524 <_free_r+0x48>
 800350e:	6821      	ldr	r1, [r4, #0]
 8003510:	1862      	adds	r2, r4, r1
 8003512:	4293      	cmp	r3, r2
 8003514:	bf01      	itttt	eq
 8003516:	681a      	ldreq	r2, [r3, #0]
 8003518:	685b      	ldreq	r3, [r3, #4]
 800351a:	1852      	addeq	r2, r2, r1
 800351c:	6022      	streq	r2, [r4, #0]
 800351e:	6063      	str	r3, [r4, #4]
 8003520:	6004      	str	r4, [r0, #0]
 8003522:	e7ed      	b.n	8003500 <_free_r+0x24>
 8003524:	461a      	mov	r2, r3
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	b10b      	cbz	r3, 800352e <_free_r+0x52>
 800352a:	42a3      	cmp	r3, r4
 800352c:	d9fa      	bls.n	8003524 <_free_r+0x48>
 800352e:	6811      	ldr	r1, [r2, #0]
 8003530:	1850      	adds	r0, r2, r1
 8003532:	42a0      	cmp	r0, r4
 8003534:	d10b      	bne.n	800354e <_free_r+0x72>
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	4401      	add	r1, r0
 800353a:	1850      	adds	r0, r2, r1
 800353c:	4283      	cmp	r3, r0
 800353e:	6011      	str	r1, [r2, #0]
 8003540:	d1de      	bne.n	8003500 <_free_r+0x24>
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4401      	add	r1, r0
 8003548:	6011      	str	r1, [r2, #0]
 800354a:	6053      	str	r3, [r2, #4]
 800354c:	e7d8      	b.n	8003500 <_free_r+0x24>
 800354e:	d902      	bls.n	8003556 <_free_r+0x7a>
 8003550:	230c      	movs	r3, #12
 8003552:	602b      	str	r3, [r5, #0]
 8003554:	e7d4      	b.n	8003500 <_free_r+0x24>
 8003556:	6820      	ldr	r0, [r4, #0]
 8003558:	1821      	adds	r1, r4, r0
 800355a:	428b      	cmp	r3, r1
 800355c:	bf01      	itttt	eq
 800355e:	6819      	ldreq	r1, [r3, #0]
 8003560:	685b      	ldreq	r3, [r3, #4]
 8003562:	1809      	addeq	r1, r1, r0
 8003564:	6021      	streq	r1, [r4, #0]
 8003566:	6063      	str	r3, [r4, #4]
 8003568:	6054      	str	r4, [r2, #4]
 800356a:	e7c9      	b.n	8003500 <_free_r+0x24>
 800356c:	bd38      	pop	{r3, r4, r5, pc}
 800356e:	bf00      	nop
 8003570:	200000a8 	.word	0x200000a8

08003574 <_malloc_r>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	1ccd      	adds	r5, r1, #3
 8003578:	f025 0503 	bic.w	r5, r5, #3
 800357c:	3508      	adds	r5, #8
 800357e:	2d0c      	cmp	r5, #12
 8003580:	bf38      	it	cc
 8003582:	250c      	movcc	r5, #12
 8003584:	2d00      	cmp	r5, #0
 8003586:	4606      	mov	r6, r0
 8003588:	db01      	blt.n	800358e <_malloc_r+0x1a>
 800358a:	42a9      	cmp	r1, r5
 800358c:	d903      	bls.n	8003596 <_malloc_r+0x22>
 800358e:	230c      	movs	r3, #12
 8003590:	6033      	str	r3, [r6, #0]
 8003592:	2000      	movs	r0, #0
 8003594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003596:	f000 fcad 	bl	8003ef4 <__malloc_lock>
 800359a:	4921      	ldr	r1, [pc, #132]	; (8003620 <_malloc_r+0xac>)
 800359c:	680a      	ldr	r2, [r1, #0]
 800359e:	4614      	mov	r4, r2
 80035a0:	b99c      	cbnz	r4, 80035ca <_malloc_r+0x56>
 80035a2:	4f20      	ldr	r7, [pc, #128]	; (8003624 <_malloc_r+0xb0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b923      	cbnz	r3, 80035b2 <_malloc_r+0x3e>
 80035a8:	4621      	mov	r1, r4
 80035aa:	4630      	mov	r0, r6
 80035ac:	f000 fb2a 	bl	8003c04 <_sbrk_r>
 80035b0:	6038      	str	r0, [r7, #0]
 80035b2:	4629      	mov	r1, r5
 80035b4:	4630      	mov	r0, r6
 80035b6:	f000 fb25 	bl	8003c04 <_sbrk_r>
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	d123      	bne.n	8003606 <_malloc_r+0x92>
 80035be:	230c      	movs	r3, #12
 80035c0:	4630      	mov	r0, r6
 80035c2:	6033      	str	r3, [r6, #0]
 80035c4:	f000 fc9c 	bl	8003f00 <__malloc_unlock>
 80035c8:	e7e3      	b.n	8003592 <_malloc_r+0x1e>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	1b5b      	subs	r3, r3, r5
 80035ce:	d417      	bmi.n	8003600 <_malloc_r+0x8c>
 80035d0:	2b0b      	cmp	r3, #11
 80035d2:	d903      	bls.n	80035dc <_malloc_r+0x68>
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	441c      	add	r4, r3
 80035d8:	6025      	str	r5, [r4, #0]
 80035da:	e004      	b.n	80035e6 <_malloc_r+0x72>
 80035dc:	6863      	ldr	r3, [r4, #4]
 80035de:	42a2      	cmp	r2, r4
 80035e0:	bf0c      	ite	eq
 80035e2:	600b      	streq	r3, [r1, #0]
 80035e4:	6053      	strne	r3, [r2, #4]
 80035e6:	4630      	mov	r0, r6
 80035e8:	f000 fc8a 	bl	8003f00 <__malloc_unlock>
 80035ec:	f104 000b 	add.w	r0, r4, #11
 80035f0:	1d23      	adds	r3, r4, #4
 80035f2:	f020 0007 	bic.w	r0, r0, #7
 80035f6:	1ac2      	subs	r2, r0, r3
 80035f8:	d0cc      	beq.n	8003594 <_malloc_r+0x20>
 80035fa:	1a1b      	subs	r3, r3, r0
 80035fc:	50a3      	str	r3, [r4, r2]
 80035fe:	e7c9      	b.n	8003594 <_malloc_r+0x20>
 8003600:	4622      	mov	r2, r4
 8003602:	6864      	ldr	r4, [r4, #4]
 8003604:	e7cc      	b.n	80035a0 <_malloc_r+0x2c>
 8003606:	1cc4      	adds	r4, r0, #3
 8003608:	f024 0403 	bic.w	r4, r4, #3
 800360c:	42a0      	cmp	r0, r4
 800360e:	d0e3      	beq.n	80035d8 <_malloc_r+0x64>
 8003610:	1a21      	subs	r1, r4, r0
 8003612:	4630      	mov	r0, r6
 8003614:	f000 faf6 	bl	8003c04 <_sbrk_r>
 8003618:	3001      	adds	r0, #1
 800361a:	d1dd      	bne.n	80035d8 <_malloc_r+0x64>
 800361c:	e7cf      	b.n	80035be <_malloc_r+0x4a>
 800361e:	bf00      	nop
 8003620:	200000a8 	.word	0x200000a8
 8003624:	200000ac 	.word	0x200000ac

08003628 <__sfputc_r>:
 8003628:	6893      	ldr	r3, [r2, #8]
 800362a:	b410      	push	{r4}
 800362c:	3b01      	subs	r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	6093      	str	r3, [r2, #8]
 8003632:	da07      	bge.n	8003644 <__sfputc_r+0x1c>
 8003634:	6994      	ldr	r4, [r2, #24]
 8003636:	42a3      	cmp	r3, r4
 8003638:	db01      	blt.n	800363e <__sfputc_r+0x16>
 800363a:	290a      	cmp	r1, #10
 800363c:	d102      	bne.n	8003644 <__sfputc_r+0x1c>
 800363e:	bc10      	pop	{r4}
 8003640:	f000 bb34 	b.w	8003cac <__swbuf_r>
 8003644:	6813      	ldr	r3, [r2, #0]
 8003646:	1c58      	adds	r0, r3, #1
 8003648:	6010      	str	r0, [r2, #0]
 800364a:	7019      	strb	r1, [r3, #0]
 800364c:	4608      	mov	r0, r1
 800364e:	bc10      	pop	{r4}
 8003650:	4770      	bx	lr

08003652 <__sfputs_r>:
 8003652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003654:	4606      	mov	r6, r0
 8003656:	460f      	mov	r7, r1
 8003658:	4614      	mov	r4, r2
 800365a:	18d5      	adds	r5, r2, r3
 800365c:	42ac      	cmp	r4, r5
 800365e:	d101      	bne.n	8003664 <__sfputs_r+0x12>
 8003660:	2000      	movs	r0, #0
 8003662:	e007      	b.n	8003674 <__sfputs_r+0x22>
 8003664:	463a      	mov	r2, r7
 8003666:	4630      	mov	r0, r6
 8003668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800366c:	f7ff ffdc 	bl	8003628 <__sfputc_r>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d1f3      	bne.n	800365c <__sfputs_r+0xa>
 8003674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003678 <_vfiprintf_r>:
 8003678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367c:	460d      	mov	r5, r1
 800367e:	4614      	mov	r4, r2
 8003680:	4698      	mov	r8, r3
 8003682:	4606      	mov	r6, r0
 8003684:	b09d      	sub	sp, #116	; 0x74
 8003686:	b118      	cbz	r0, 8003690 <_vfiprintf_r+0x18>
 8003688:	6983      	ldr	r3, [r0, #24]
 800368a:	b90b      	cbnz	r3, 8003690 <_vfiprintf_r+0x18>
 800368c:	f7ff fe1a 	bl	80032c4 <__sinit>
 8003690:	4b89      	ldr	r3, [pc, #548]	; (80038b8 <_vfiprintf_r+0x240>)
 8003692:	429d      	cmp	r5, r3
 8003694:	d11b      	bne.n	80036ce <_vfiprintf_r+0x56>
 8003696:	6875      	ldr	r5, [r6, #4]
 8003698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800369a:	07d9      	lsls	r1, r3, #31
 800369c:	d405      	bmi.n	80036aa <_vfiprintf_r+0x32>
 800369e:	89ab      	ldrh	r3, [r5, #12]
 80036a0:	059a      	lsls	r2, r3, #22
 80036a2:	d402      	bmi.n	80036aa <_vfiprintf_r+0x32>
 80036a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036a6:	f7ff feab 	bl	8003400 <__retarget_lock_acquire_recursive>
 80036aa:	89ab      	ldrh	r3, [r5, #12]
 80036ac:	071b      	lsls	r3, r3, #28
 80036ae:	d501      	bpl.n	80036b4 <_vfiprintf_r+0x3c>
 80036b0:	692b      	ldr	r3, [r5, #16]
 80036b2:	b9eb      	cbnz	r3, 80036f0 <_vfiprintf_r+0x78>
 80036b4:	4629      	mov	r1, r5
 80036b6:	4630      	mov	r0, r6
 80036b8:	f000 fb5c 	bl	8003d74 <__swsetup_r>
 80036bc:	b1c0      	cbz	r0, 80036f0 <_vfiprintf_r+0x78>
 80036be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036c0:	07dc      	lsls	r4, r3, #31
 80036c2:	d50e      	bpl.n	80036e2 <_vfiprintf_r+0x6a>
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	b01d      	add	sp, #116	; 0x74
 80036ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ce:	4b7b      	ldr	r3, [pc, #492]	; (80038bc <_vfiprintf_r+0x244>)
 80036d0:	429d      	cmp	r5, r3
 80036d2:	d101      	bne.n	80036d8 <_vfiprintf_r+0x60>
 80036d4:	68b5      	ldr	r5, [r6, #8]
 80036d6:	e7df      	b.n	8003698 <_vfiprintf_r+0x20>
 80036d8:	4b79      	ldr	r3, [pc, #484]	; (80038c0 <_vfiprintf_r+0x248>)
 80036da:	429d      	cmp	r5, r3
 80036dc:	bf08      	it	eq
 80036de:	68f5      	ldreq	r5, [r6, #12]
 80036e0:	e7da      	b.n	8003698 <_vfiprintf_r+0x20>
 80036e2:	89ab      	ldrh	r3, [r5, #12]
 80036e4:	0598      	lsls	r0, r3, #22
 80036e6:	d4ed      	bmi.n	80036c4 <_vfiprintf_r+0x4c>
 80036e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036ea:	f7ff fe8a 	bl	8003402 <__retarget_lock_release_recursive>
 80036ee:	e7e9      	b.n	80036c4 <_vfiprintf_r+0x4c>
 80036f0:	2300      	movs	r3, #0
 80036f2:	9309      	str	r3, [sp, #36]	; 0x24
 80036f4:	2320      	movs	r3, #32
 80036f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036fa:	2330      	movs	r3, #48	; 0x30
 80036fc:	f04f 0901 	mov.w	r9, #1
 8003700:	f8cd 800c 	str.w	r8, [sp, #12]
 8003704:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80038c4 <_vfiprintf_r+0x24c>
 8003708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800370c:	4623      	mov	r3, r4
 800370e:	469a      	mov	sl, r3
 8003710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003714:	b10a      	cbz	r2, 800371a <_vfiprintf_r+0xa2>
 8003716:	2a25      	cmp	r2, #37	; 0x25
 8003718:	d1f9      	bne.n	800370e <_vfiprintf_r+0x96>
 800371a:	ebba 0b04 	subs.w	fp, sl, r4
 800371e:	d00b      	beq.n	8003738 <_vfiprintf_r+0xc0>
 8003720:	465b      	mov	r3, fp
 8003722:	4622      	mov	r2, r4
 8003724:	4629      	mov	r1, r5
 8003726:	4630      	mov	r0, r6
 8003728:	f7ff ff93 	bl	8003652 <__sfputs_r>
 800372c:	3001      	adds	r0, #1
 800372e:	f000 80aa 	beq.w	8003886 <_vfiprintf_r+0x20e>
 8003732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003734:	445a      	add	r2, fp
 8003736:	9209      	str	r2, [sp, #36]	; 0x24
 8003738:	f89a 3000 	ldrb.w	r3, [sl]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a2 	beq.w	8003886 <_vfiprintf_r+0x20e>
 8003742:	2300      	movs	r3, #0
 8003744:	f04f 32ff 	mov.w	r2, #4294967295
 8003748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800374c:	f10a 0a01 	add.w	sl, sl, #1
 8003750:	9304      	str	r3, [sp, #16]
 8003752:	9307      	str	r3, [sp, #28]
 8003754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003758:	931a      	str	r3, [sp, #104]	; 0x68
 800375a:	4654      	mov	r4, sl
 800375c:	2205      	movs	r2, #5
 800375e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003762:	4858      	ldr	r0, [pc, #352]	; (80038c4 <_vfiprintf_r+0x24c>)
 8003764:	f000 fbb8 	bl	8003ed8 <memchr>
 8003768:	9a04      	ldr	r2, [sp, #16]
 800376a:	b9d8      	cbnz	r0, 80037a4 <_vfiprintf_r+0x12c>
 800376c:	06d1      	lsls	r1, r2, #27
 800376e:	bf44      	itt	mi
 8003770:	2320      	movmi	r3, #32
 8003772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003776:	0713      	lsls	r3, r2, #28
 8003778:	bf44      	itt	mi
 800377a:	232b      	movmi	r3, #43	; 0x2b
 800377c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003780:	f89a 3000 	ldrb.w	r3, [sl]
 8003784:	2b2a      	cmp	r3, #42	; 0x2a
 8003786:	d015      	beq.n	80037b4 <_vfiprintf_r+0x13c>
 8003788:	4654      	mov	r4, sl
 800378a:	2000      	movs	r0, #0
 800378c:	f04f 0c0a 	mov.w	ip, #10
 8003790:	9a07      	ldr	r2, [sp, #28]
 8003792:	4621      	mov	r1, r4
 8003794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003798:	3b30      	subs	r3, #48	; 0x30
 800379a:	2b09      	cmp	r3, #9
 800379c:	d94e      	bls.n	800383c <_vfiprintf_r+0x1c4>
 800379e:	b1b0      	cbz	r0, 80037ce <_vfiprintf_r+0x156>
 80037a0:	9207      	str	r2, [sp, #28]
 80037a2:	e014      	b.n	80037ce <_vfiprintf_r+0x156>
 80037a4:	eba0 0308 	sub.w	r3, r0, r8
 80037a8:	fa09 f303 	lsl.w	r3, r9, r3
 80037ac:	4313      	orrs	r3, r2
 80037ae:	46a2      	mov	sl, r4
 80037b0:	9304      	str	r3, [sp, #16]
 80037b2:	e7d2      	b.n	800375a <_vfiprintf_r+0xe2>
 80037b4:	9b03      	ldr	r3, [sp, #12]
 80037b6:	1d19      	adds	r1, r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	9103      	str	r1, [sp, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bfbb      	ittet	lt
 80037c0:	425b      	neglt	r3, r3
 80037c2:	f042 0202 	orrlt.w	r2, r2, #2
 80037c6:	9307      	strge	r3, [sp, #28]
 80037c8:	9307      	strlt	r3, [sp, #28]
 80037ca:	bfb8      	it	lt
 80037cc:	9204      	strlt	r2, [sp, #16]
 80037ce:	7823      	ldrb	r3, [r4, #0]
 80037d0:	2b2e      	cmp	r3, #46	; 0x2e
 80037d2:	d10c      	bne.n	80037ee <_vfiprintf_r+0x176>
 80037d4:	7863      	ldrb	r3, [r4, #1]
 80037d6:	2b2a      	cmp	r3, #42	; 0x2a
 80037d8:	d135      	bne.n	8003846 <_vfiprintf_r+0x1ce>
 80037da:	9b03      	ldr	r3, [sp, #12]
 80037dc:	3402      	adds	r4, #2
 80037de:	1d1a      	adds	r2, r3, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	9203      	str	r2, [sp, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bfb8      	it	lt
 80037e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80037ec:	9305      	str	r3, [sp, #20]
 80037ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80038d4 <_vfiprintf_r+0x25c>
 80037f2:	2203      	movs	r2, #3
 80037f4:	4650      	mov	r0, sl
 80037f6:	7821      	ldrb	r1, [r4, #0]
 80037f8:	f000 fb6e 	bl	8003ed8 <memchr>
 80037fc:	b140      	cbz	r0, 8003810 <_vfiprintf_r+0x198>
 80037fe:	2340      	movs	r3, #64	; 0x40
 8003800:	eba0 000a 	sub.w	r0, r0, sl
 8003804:	fa03 f000 	lsl.w	r0, r3, r0
 8003808:	9b04      	ldr	r3, [sp, #16]
 800380a:	3401      	adds	r4, #1
 800380c:	4303      	orrs	r3, r0
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003814:	2206      	movs	r2, #6
 8003816:	482c      	ldr	r0, [pc, #176]	; (80038c8 <_vfiprintf_r+0x250>)
 8003818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800381c:	f000 fb5c 	bl	8003ed8 <memchr>
 8003820:	2800      	cmp	r0, #0
 8003822:	d03f      	beq.n	80038a4 <_vfiprintf_r+0x22c>
 8003824:	4b29      	ldr	r3, [pc, #164]	; (80038cc <_vfiprintf_r+0x254>)
 8003826:	bb1b      	cbnz	r3, 8003870 <_vfiprintf_r+0x1f8>
 8003828:	9b03      	ldr	r3, [sp, #12]
 800382a:	3307      	adds	r3, #7
 800382c:	f023 0307 	bic.w	r3, r3, #7
 8003830:	3308      	adds	r3, #8
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003836:	443b      	add	r3, r7
 8003838:	9309      	str	r3, [sp, #36]	; 0x24
 800383a:	e767      	b.n	800370c <_vfiprintf_r+0x94>
 800383c:	460c      	mov	r4, r1
 800383e:	2001      	movs	r0, #1
 8003840:	fb0c 3202 	mla	r2, ip, r2, r3
 8003844:	e7a5      	b.n	8003792 <_vfiprintf_r+0x11a>
 8003846:	2300      	movs	r3, #0
 8003848:	f04f 0c0a 	mov.w	ip, #10
 800384c:	4619      	mov	r1, r3
 800384e:	3401      	adds	r4, #1
 8003850:	9305      	str	r3, [sp, #20]
 8003852:	4620      	mov	r0, r4
 8003854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003858:	3a30      	subs	r2, #48	; 0x30
 800385a:	2a09      	cmp	r2, #9
 800385c:	d903      	bls.n	8003866 <_vfiprintf_r+0x1ee>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0c5      	beq.n	80037ee <_vfiprintf_r+0x176>
 8003862:	9105      	str	r1, [sp, #20]
 8003864:	e7c3      	b.n	80037ee <_vfiprintf_r+0x176>
 8003866:	4604      	mov	r4, r0
 8003868:	2301      	movs	r3, #1
 800386a:	fb0c 2101 	mla	r1, ip, r1, r2
 800386e:	e7f0      	b.n	8003852 <_vfiprintf_r+0x1da>
 8003870:	ab03      	add	r3, sp, #12
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	462a      	mov	r2, r5
 8003876:	4630      	mov	r0, r6
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <_vfiprintf_r+0x258>)
 800387a:	a904      	add	r1, sp, #16
 800387c:	f3af 8000 	nop.w
 8003880:	4607      	mov	r7, r0
 8003882:	1c78      	adds	r0, r7, #1
 8003884:	d1d6      	bne.n	8003834 <_vfiprintf_r+0x1bc>
 8003886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003888:	07d9      	lsls	r1, r3, #31
 800388a:	d405      	bmi.n	8003898 <_vfiprintf_r+0x220>
 800388c:	89ab      	ldrh	r3, [r5, #12]
 800388e:	059a      	lsls	r2, r3, #22
 8003890:	d402      	bmi.n	8003898 <_vfiprintf_r+0x220>
 8003892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003894:	f7ff fdb5 	bl	8003402 <__retarget_lock_release_recursive>
 8003898:	89ab      	ldrh	r3, [r5, #12]
 800389a:	065b      	lsls	r3, r3, #25
 800389c:	f53f af12 	bmi.w	80036c4 <_vfiprintf_r+0x4c>
 80038a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038a2:	e711      	b.n	80036c8 <_vfiprintf_r+0x50>
 80038a4:	ab03      	add	r3, sp, #12
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	462a      	mov	r2, r5
 80038aa:	4630      	mov	r0, r6
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <_vfiprintf_r+0x258>)
 80038ae:	a904      	add	r1, sp, #16
 80038b0:	f000 f882 	bl	80039b8 <_printf_i>
 80038b4:	e7e4      	b.n	8003880 <_vfiprintf_r+0x208>
 80038b6:	bf00      	nop
 80038b8:	08004098 	.word	0x08004098
 80038bc:	080040b8 	.word	0x080040b8
 80038c0:	08004078 	.word	0x08004078
 80038c4:	080040d8 	.word	0x080040d8
 80038c8:	080040e2 	.word	0x080040e2
 80038cc:	00000000 	.word	0x00000000
 80038d0:	08003653 	.word	0x08003653
 80038d4:	080040de 	.word	0x080040de

080038d8 <_printf_common>:
 80038d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038dc:	4616      	mov	r6, r2
 80038de:	4699      	mov	r9, r3
 80038e0:	688a      	ldr	r2, [r1, #8]
 80038e2:	690b      	ldr	r3, [r1, #16]
 80038e4:	4607      	mov	r7, r0
 80038e6:	4293      	cmp	r3, r2
 80038e8:	bfb8      	it	lt
 80038ea:	4613      	movlt	r3, r2
 80038ec:	6033      	str	r3, [r6, #0]
 80038ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038f2:	460c      	mov	r4, r1
 80038f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038f8:	b10a      	cbz	r2, 80038fe <_printf_common+0x26>
 80038fa:	3301      	adds	r3, #1
 80038fc:	6033      	str	r3, [r6, #0]
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	0699      	lsls	r1, r3, #26
 8003902:	bf42      	ittt	mi
 8003904:	6833      	ldrmi	r3, [r6, #0]
 8003906:	3302      	addmi	r3, #2
 8003908:	6033      	strmi	r3, [r6, #0]
 800390a:	6825      	ldr	r5, [r4, #0]
 800390c:	f015 0506 	ands.w	r5, r5, #6
 8003910:	d106      	bne.n	8003920 <_printf_common+0x48>
 8003912:	f104 0a19 	add.w	sl, r4, #25
 8003916:	68e3      	ldr	r3, [r4, #12]
 8003918:	6832      	ldr	r2, [r6, #0]
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	42ab      	cmp	r3, r5
 800391e:	dc28      	bgt.n	8003972 <_printf_common+0x9a>
 8003920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003924:	1e13      	subs	r3, r2, #0
 8003926:	6822      	ldr	r2, [r4, #0]
 8003928:	bf18      	it	ne
 800392a:	2301      	movne	r3, #1
 800392c:	0692      	lsls	r2, r2, #26
 800392e:	d42d      	bmi.n	800398c <_printf_common+0xb4>
 8003930:	4649      	mov	r1, r9
 8003932:	4638      	mov	r0, r7
 8003934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003938:	47c0      	blx	r8
 800393a:	3001      	adds	r0, #1
 800393c:	d020      	beq.n	8003980 <_printf_common+0xa8>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	68e5      	ldr	r5, [r4, #12]
 8003942:	f003 0306 	and.w	r3, r3, #6
 8003946:	2b04      	cmp	r3, #4
 8003948:	bf18      	it	ne
 800394a:	2500      	movne	r5, #0
 800394c:	6832      	ldr	r2, [r6, #0]
 800394e:	f04f 0600 	mov.w	r6, #0
 8003952:	68a3      	ldr	r3, [r4, #8]
 8003954:	bf08      	it	eq
 8003956:	1aad      	subeq	r5, r5, r2
 8003958:	6922      	ldr	r2, [r4, #16]
 800395a:	bf08      	it	eq
 800395c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003960:	4293      	cmp	r3, r2
 8003962:	bfc4      	itt	gt
 8003964:	1a9b      	subgt	r3, r3, r2
 8003966:	18ed      	addgt	r5, r5, r3
 8003968:	341a      	adds	r4, #26
 800396a:	42b5      	cmp	r5, r6
 800396c:	d11a      	bne.n	80039a4 <_printf_common+0xcc>
 800396e:	2000      	movs	r0, #0
 8003970:	e008      	b.n	8003984 <_printf_common+0xac>
 8003972:	2301      	movs	r3, #1
 8003974:	4652      	mov	r2, sl
 8003976:	4649      	mov	r1, r9
 8003978:	4638      	mov	r0, r7
 800397a:	47c0      	blx	r8
 800397c:	3001      	adds	r0, #1
 800397e:	d103      	bne.n	8003988 <_printf_common+0xb0>
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003988:	3501      	adds	r5, #1
 800398a:	e7c4      	b.n	8003916 <_printf_common+0x3e>
 800398c:	2030      	movs	r0, #48	; 0x30
 800398e:	18e1      	adds	r1, r4, r3
 8003990:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800399a:	4422      	add	r2, r4
 800399c:	3302      	adds	r3, #2
 800399e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a2:	e7c5      	b.n	8003930 <_printf_common+0x58>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4622      	mov	r2, r4
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d0e6      	beq.n	8003980 <_printf_common+0xa8>
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7d9      	b.n	800396a <_printf_common+0x92>
	...

080039b8 <_printf_i>:
 80039b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	460c      	mov	r4, r1
 80039be:	7e27      	ldrb	r7, [r4, #24]
 80039c0:	4691      	mov	r9, r2
 80039c2:	2f78      	cmp	r7, #120	; 0x78
 80039c4:	4680      	mov	r8, r0
 80039c6:	469a      	mov	sl, r3
 80039c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039ce:	d807      	bhi.n	80039e0 <_printf_i+0x28>
 80039d0:	2f62      	cmp	r7, #98	; 0x62
 80039d2:	d80a      	bhi.n	80039ea <_printf_i+0x32>
 80039d4:	2f00      	cmp	r7, #0
 80039d6:	f000 80d9 	beq.w	8003b8c <_printf_i+0x1d4>
 80039da:	2f58      	cmp	r7, #88	; 0x58
 80039dc:	f000 80a4 	beq.w	8003b28 <_printf_i+0x170>
 80039e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039e8:	e03a      	b.n	8003a60 <_printf_i+0xa8>
 80039ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ee:	2b15      	cmp	r3, #21
 80039f0:	d8f6      	bhi.n	80039e0 <_printf_i+0x28>
 80039f2:	a001      	add	r0, pc, #4	; (adr r0, 80039f8 <_printf_i+0x40>)
 80039f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a65 	.word	0x08003a65
 8003a00:	080039e1 	.word	0x080039e1
 8003a04:	080039e1 	.word	0x080039e1
 8003a08:	080039e1 	.word	0x080039e1
 8003a0c:	080039e1 	.word	0x080039e1
 8003a10:	08003a65 	.word	0x08003a65
 8003a14:	080039e1 	.word	0x080039e1
 8003a18:	080039e1 	.word	0x080039e1
 8003a1c:	080039e1 	.word	0x080039e1
 8003a20:	080039e1 	.word	0x080039e1
 8003a24:	08003b73 	.word	0x08003b73
 8003a28:	08003a95 	.word	0x08003a95
 8003a2c:	08003b55 	.word	0x08003b55
 8003a30:	080039e1 	.word	0x080039e1
 8003a34:	080039e1 	.word	0x080039e1
 8003a38:	08003b95 	.word	0x08003b95
 8003a3c:	080039e1 	.word	0x080039e1
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	080039e1 	.word	0x080039e1
 8003a48:	080039e1 	.word	0x080039e1
 8003a4c:	08003b5d 	.word	0x08003b5d
 8003a50:	680b      	ldr	r3, [r1, #0]
 8003a52:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a56:	1d1a      	adds	r2, r3, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	600a      	str	r2, [r1, #0]
 8003a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0a4      	b.n	8003bae <_printf_i+0x1f6>
 8003a64:	6825      	ldr	r5, [r4, #0]
 8003a66:	6808      	ldr	r0, [r1, #0]
 8003a68:	062e      	lsls	r6, r5, #24
 8003a6a:	f100 0304 	add.w	r3, r0, #4
 8003a6e:	d50a      	bpl.n	8003a86 <_printf_i+0xce>
 8003a70:	6805      	ldr	r5, [r0, #0]
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	2d00      	cmp	r5, #0
 8003a76:	da03      	bge.n	8003a80 <_printf_i+0xc8>
 8003a78:	232d      	movs	r3, #45	; 0x2d
 8003a7a:	426d      	negs	r5, r5
 8003a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a80:	230a      	movs	r3, #10
 8003a82:	485e      	ldr	r0, [pc, #376]	; (8003bfc <_printf_i+0x244>)
 8003a84:	e019      	b.n	8003aba <_printf_i+0x102>
 8003a86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a8a:	6805      	ldr	r5, [r0, #0]
 8003a8c:	600b      	str	r3, [r1, #0]
 8003a8e:	bf18      	it	ne
 8003a90:	b22d      	sxthne	r5, r5
 8003a92:	e7ef      	b.n	8003a74 <_printf_i+0xbc>
 8003a94:	680b      	ldr	r3, [r1, #0]
 8003a96:	6825      	ldr	r5, [r4, #0]
 8003a98:	1d18      	adds	r0, r3, #4
 8003a9a:	6008      	str	r0, [r1, #0]
 8003a9c:	0628      	lsls	r0, r5, #24
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_i+0xec>
 8003aa0:	681d      	ldr	r5, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <_printf_i+0xf2>
 8003aa4:	0669      	lsls	r1, r5, #25
 8003aa6:	d5fb      	bpl.n	8003aa0 <_printf_i+0xe8>
 8003aa8:	881d      	ldrh	r5, [r3, #0]
 8003aaa:	2f6f      	cmp	r7, #111	; 0x6f
 8003aac:	bf0c      	ite	eq
 8003aae:	2308      	moveq	r3, #8
 8003ab0:	230a      	movne	r3, #10
 8003ab2:	4852      	ldr	r0, [pc, #328]	; (8003bfc <_printf_i+0x244>)
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aba:	6866      	ldr	r6, [r4, #4]
 8003abc:	2e00      	cmp	r6, #0
 8003abe:	bfa8      	it	ge
 8003ac0:	6821      	ldrge	r1, [r4, #0]
 8003ac2:	60a6      	str	r6, [r4, #8]
 8003ac4:	bfa4      	itt	ge
 8003ac6:	f021 0104 	bicge.w	r1, r1, #4
 8003aca:	6021      	strge	r1, [r4, #0]
 8003acc:	b90d      	cbnz	r5, 8003ad2 <_printf_i+0x11a>
 8003ace:	2e00      	cmp	r6, #0
 8003ad0:	d04d      	beq.n	8003b6e <_printf_i+0x1b6>
 8003ad2:	4616      	mov	r6, r2
 8003ad4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ad8:	fb03 5711 	mls	r7, r3, r1, r5
 8003adc:	5dc7      	ldrb	r7, [r0, r7]
 8003ade:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ae2:	462f      	mov	r7, r5
 8003ae4:	42bb      	cmp	r3, r7
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	d9f4      	bls.n	8003ad4 <_printf_i+0x11c>
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d10b      	bne.n	8003b06 <_printf_i+0x14e>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	07df      	lsls	r7, r3, #31
 8003af2:	d508      	bpl.n	8003b06 <_printf_i+0x14e>
 8003af4:	6923      	ldr	r3, [r4, #16]
 8003af6:	6861      	ldr	r1, [r4, #4]
 8003af8:	4299      	cmp	r1, r3
 8003afa:	bfde      	ittt	le
 8003afc:	2330      	movle	r3, #48	; 0x30
 8003afe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b06:	1b92      	subs	r2, r2, r6
 8003b08:	6122      	str	r2, [r4, #16]
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4640      	mov	r0, r8
 8003b10:	f8cd a000 	str.w	sl, [sp]
 8003b14:	aa03      	add	r2, sp, #12
 8003b16:	f7ff fedf 	bl	80038d8 <_printf_common>
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d14c      	bne.n	8003bb8 <_printf_i+0x200>
 8003b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b22:	b004      	add	sp, #16
 8003b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b28:	4834      	ldr	r0, [pc, #208]	; (8003bfc <_printf_i+0x244>)
 8003b2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b2e:	680e      	ldr	r6, [r1, #0]
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b36:	061f      	lsls	r7, r3, #24
 8003b38:	600e      	str	r6, [r1, #0]
 8003b3a:	d514      	bpl.n	8003b66 <_printf_i+0x1ae>
 8003b3c:	07d9      	lsls	r1, r3, #31
 8003b3e:	bf44      	itt	mi
 8003b40:	f043 0320 	orrmi.w	r3, r3, #32
 8003b44:	6023      	strmi	r3, [r4, #0]
 8003b46:	b91d      	cbnz	r5, 8003b50 <_printf_i+0x198>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	f023 0320 	bic.w	r3, r3, #32
 8003b4e:	6023      	str	r3, [r4, #0]
 8003b50:	2310      	movs	r3, #16
 8003b52:	e7af      	b.n	8003ab4 <_printf_i+0xfc>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	f043 0320 	orr.w	r3, r3, #32
 8003b5a:	6023      	str	r3, [r4, #0]
 8003b5c:	2378      	movs	r3, #120	; 0x78
 8003b5e:	4828      	ldr	r0, [pc, #160]	; (8003c00 <_printf_i+0x248>)
 8003b60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b64:	e7e3      	b.n	8003b2e <_printf_i+0x176>
 8003b66:	065e      	lsls	r6, r3, #25
 8003b68:	bf48      	it	mi
 8003b6a:	b2ad      	uxthmi	r5, r5
 8003b6c:	e7e6      	b.n	8003b3c <_printf_i+0x184>
 8003b6e:	4616      	mov	r6, r2
 8003b70:	e7bb      	b.n	8003aea <_printf_i+0x132>
 8003b72:	680b      	ldr	r3, [r1, #0]
 8003b74:	6826      	ldr	r6, [r4, #0]
 8003b76:	1d1d      	adds	r5, r3, #4
 8003b78:	6960      	ldr	r0, [r4, #20]
 8003b7a:	600d      	str	r5, [r1, #0]
 8003b7c:	0635      	lsls	r5, r6, #24
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	d501      	bpl.n	8003b86 <_printf_i+0x1ce>
 8003b82:	6018      	str	r0, [r3, #0]
 8003b84:	e002      	b.n	8003b8c <_printf_i+0x1d4>
 8003b86:	0671      	lsls	r1, r6, #25
 8003b88:	d5fb      	bpl.n	8003b82 <_printf_i+0x1ca>
 8003b8a:	8018      	strh	r0, [r3, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	4616      	mov	r6, r2
 8003b90:	6123      	str	r3, [r4, #16]
 8003b92:	e7ba      	b.n	8003b0a <_printf_i+0x152>
 8003b94:	680b      	ldr	r3, [r1, #0]
 8003b96:	1d1a      	adds	r2, r3, #4
 8003b98:	600a      	str	r2, [r1, #0]
 8003b9a:	681e      	ldr	r6, [r3, #0]
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	6862      	ldr	r2, [r4, #4]
 8003ba2:	f000 f999 	bl	8003ed8 <memchr>
 8003ba6:	b108      	cbz	r0, 8003bac <_printf_i+0x1f4>
 8003ba8:	1b80      	subs	r0, r0, r6
 8003baa:	6060      	str	r0, [r4, #4]
 8003bac:	6863      	ldr	r3, [r4, #4]
 8003bae:	6123      	str	r3, [r4, #16]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb6:	e7a8      	b.n	8003b0a <_printf_i+0x152>
 8003bb8:	4632      	mov	r2, r6
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	6923      	ldr	r3, [r4, #16]
 8003bc0:	47d0      	blx	sl
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	d0ab      	beq.n	8003b1e <_printf_i+0x166>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	079b      	lsls	r3, r3, #30
 8003bca:	d413      	bmi.n	8003bf4 <_printf_i+0x23c>
 8003bcc:	68e0      	ldr	r0, [r4, #12]
 8003bce:	9b03      	ldr	r3, [sp, #12]
 8003bd0:	4298      	cmp	r0, r3
 8003bd2:	bfb8      	it	lt
 8003bd4:	4618      	movlt	r0, r3
 8003bd6:	e7a4      	b.n	8003b22 <_printf_i+0x16a>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4632      	mov	r2, r6
 8003bdc:	4649      	mov	r1, r9
 8003bde:	4640      	mov	r0, r8
 8003be0:	47d0      	blx	sl
 8003be2:	3001      	adds	r0, #1
 8003be4:	d09b      	beq.n	8003b1e <_printf_i+0x166>
 8003be6:	3501      	adds	r5, #1
 8003be8:	68e3      	ldr	r3, [r4, #12]
 8003bea:	9903      	ldr	r1, [sp, #12]
 8003bec:	1a5b      	subs	r3, r3, r1
 8003bee:	42ab      	cmp	r3, r5
 8003bf0:	dcf2      	bgt.n	8003bd8 <_printf_i+0x220>
 8003bf2:	e7eb      	b.n	8003bcc <_printf_i+0x214>
 8003bf4:	2500      	movs	r5, #0
 8003bf6:	f104 0619 	add.w	r6, r4, #25
 8003bfa:	e7f5      	b.n	8003be8 <_printf_i+0x230>
 8003bfc:	080040e9 	.word	0x080040e9
 8003c00:	080040fa 	.word	0x080040fa

08003c04 <_sbrk_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	2300      	movs	r3, #0
 8003c08:	4d05      	ldr	r5, [pc, #20]	; (8003c20 <_sbrk_r+0x1c>)
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	602b      	str	r3, [r5, #0]
 8003c10:	f7fc ff12 	bl	8000a38 <_sbrk>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_sbrk_r+0x1a>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_sbrk_r+0x1a>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	2000018c 	.word	0x2000018c

08003c24 <__sread>:
 8003c24:	b510      	push	{r4, lr}
 8003c26:	460c      	mov	r4, r1
 8003c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c2c:	f000 f96e 	bl	8003f0c <_read_r>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	bfab      	itete	ge
 8003c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c36:	89a3      	ldrhlt	r3, [r4, #12]
 8003c38:	181b      	addge	r3, r3, r0
 8003c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c3e:	bfac      	ite	ge
 8003c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c42:	81a3      	strhlt	r3, [r4, #12]
 8003c44:	bd10      	pop	{r4, pc}

08003c46 <__swrite>:
 8003c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4a:	461f      	mov	r7, r3
 8003c4c:	898b      	ldrh	r3, [r1, #12]
 8003c4e:	4605      	mov	r5, r0
 8003c50:	05db      	lsls	r3, r3, #23
 8003c52:	460c      	mov	r4, r1
 8003c54:	4616      	mov	r6, r2
 8003c56:	d505      	bpl.n	8003c64 <__swrite+0x1e>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c60:	f000 f928 	bl	8003eb4 <_lseek_r>
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	4632      	mov	r2, r6
 8003c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c6c:	81a3      	strh	r3, [r4, #12]
 8003c6e:	4628      	mov	r0, r5
 8003c70:	463b      	mov	r3, r7
 8003c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c7a:	f000 b869 	b.w	8003d50 <_write_r>

08003c7e <__sseek>:
 8003c7e:	b510      	push	{r4, lr}
 8003c80:	460c      	mov	r4, r1
 8003c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c86:	f000 f915 	bl	8003eb4 <_lseek_r>
 8003c8a:	1c43      	adds	r3, r0, #1
 8003c8c:	89a3      	ldrh	r3, [r4, #12]
 8003c8e:	bf15      	itete	ne
 8003c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c9a:	81a3      	strheq	r3, [r4, #12]
 8003c9c:	bf18      	it	ne
 8003c9e:	81a3      	strhne	r3, [r4, #12]
 8003ca0:	bd10      	pop	{r4, pc}

08003ca2 <__sclose>:
 8003ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca6:	f000 b8d3 	b.w	8003e50 <_close_r>
	...

08003cac <__swbuf_r>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	460e      	mov	r6, r1
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	b118      	cbz	r0, 8003cbe <__swbuf_r+0x12>
 8003cb6:	6983      	ldr	r3, [r0, #24]
 8003cb8:	b90b      	cbnz	r3, 8003cbe <__swbuf_r+0x12>
 8003cba:	f7ff fb03 	bl	80032c4 <__sinit>
 8003cbe:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <__swbuf_r+0x98>)
 8003cc0:	429c      	cmp	r4, r3
 8003cc2:	d12b      	bne.n	8003d1c <__swbuf_r+0x70>
 8003cc4:	686c      	ldr	r4, [r5, #4]
 8003cc6:	69a3      	ldr	r3, [r4, #24]
 8003cc8:	60a3      	str	r3, [r4, #8]
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	071a      	lsls	r2, r3, #28
 8003cce:	d52f      	bpl.n	8003d30 <__swbuf_r+0x84>
 8003cd0:	6923      	ldr	r3, [r4, #16]
 8003cd2:	b36b      	cbz	r3, 8003d30 <__swbuf_r+0x84>
 8003cd4:	6923      	ldr	r3, [r4, #16]
 8003cd6:	6820      	ldr	r0, [r4, #0]
 8003cd8:	b2f6      	uxtb	r6, r6
 8003cda:	1ac0      	subs	r0, r0, r3
 8003cdc:	6963      	ldr	r3, [r4, #20]
 8003cde:	4637      	mov	r7, r6
 8003ce0:	4283      	cmp	r3, r0
 8003ce2:	dc04      	bgt.n	8003cee <__swbuf_r+0x42>
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f7ff fa58 	bl	800319c <_fflush_r>
 8003cec:	bb30      	cbnz	r0, 8003d3c <__swbuf_r+0x90>
 8003cee:	68a3      	ldr	r3, [r4, #8]
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	60a3      	str	r3, [r4, #8]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	6022      	str	r2, [r4, #0]
 8003cfc:	701e      	strb	r6, [r3, #0]
 8003cfe:	6963      	ldr	r3, [r4, #20]
 8003d00:	4283      	cmp	r3, r0
 8003d02:	d004      	beq.n	8003d0e <__swbuf_r+0x62>
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	07db      	lsls	r3, r3, #31
 8003d08:	d506      	bpl.n	8003d18 <__swbuf_r+0x6c>
 8003d0a:	2e0a      	cmp	r6, #10
 8003d0c:	d104      	bne.n	8003d18 <__swbuf_r+0x6c>
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	f7ff fa43 	bl	800319c <_fflush_r>
 8003d16:	b988      	cbnz	r0, 8003d3c <__swbuf_r+0x90>
 8003d18:	4638      	mov	r0, r7
 8003d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <__swbuf_r+0x9c>)
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d101      	bne.n	8003d26 <__swbuf_r+0x7a>
 8003d22:	68ac      	ldr	r4, [r5, #8]
 8003d24:	e7cf      	b.n	8003cc6 <__swbuf_r+0x1a>
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <__swbuf_r+0xa0>)
 8003d28:	429c      	cmp	r4, r3
 8003d2a:	bf08      	it	eq
 8003d2c:	68ec      	ldreq	r4, [r5, #12]
 8003d2e:	e7ca      	b.n	8003cc6 <__swbuf_r+0x1a>
 8003d30:	4621      	mov	r1, r4
 8003d32:	4628      	mov	r0, r5
 8003d34:	f000 f81e 	bl	8003d74 <__swsetup_r>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d0cb      	beq.n	8003cd4 <__swbuf_r+0x28>
 8003d3c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d40:	e7ea      	b.n	8003d18 <__swbuf_r+0x6c>
 8003d42:	bf00      	nop
 8003d44:	08004098 	.word	0x08004098
 8003d48:	080040b8 	.word	0x080040b8
 8003d4c:	08004078 	.word	0x08004078

08003d50 <_write_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	4604      	mov	r4, r0
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	2200      	movs	r2, #0
 8003d5a:	4d05      	ldr	r5, [pc, #20]	; (8003d70 <_write_r+0x20>)
 8003d5c:	602a      	str	r2, [r5, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f7fc fc78 	bl	8000654 <_write>
 8003d64:	1c43      	adds	r3, r0, #1
 8003d66:	d102      	bne.n	8003d6e <_write_r+0x1e>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	b103      	cbz	r3, 8003d6e <_write_r+0x1e>
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
 8003d70:	2000018c 	.word	0x2000018c

08003d74 <__swsetup_r>:
 8003d74:	4b32      	ldr	r3, [pc, #200]	; (8003e40 <__swsetup_r+0xcc>)
 8003d76:	b570      	push	{r4, r5, r6, lr}
 8003d78:	681d      	ldr	r5, [r3, #0]
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	b125      	cbz	r5, 8003d8a <__swsetup_r+0x16>
 8003d80:	69ab      	ldr	r3, [r5, #24]
 8003d82:	b913      	cbnz	r3, 8003d8a <__swsetup_r+0x16>
 8003d84:	4628      	mov	r0, r5
 8003d86:	f7ff fa9d 	bl	80032c4 <__sinit>
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <__swsetup_r+0xd0>)
 8003d8c:	429c      	cmp	r4, r3
 8003d8e:	d10f      	bne.n	8003db0 <__swsetup_r+0x3c>
 8003d90:	686c      	ldr	r4, [r5, #4]
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d98:	0719      	lsls	r1, r3, #28
 8003d9a:	d42c      	bmi.n	8003df6 <__swsetup_r+0x82>
 8003d9c:	06dd      	lsls	r5, r3, #27
 8003d9e:	d411      	bmi.n	8003dc4 <__swsetup_r+0x50>
 8003da0:	2309      	movs	r3, #9
 8003da2:	6033      	str	r3, [r6, #0]
 8003da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	81a3      	strh	r3, [r4, #12]
 8003dae:	e03e      	b.n	8003e2e <__swsetup_r+0xba>
 8003db0:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <__swsetup_r+0xd4>)
 8003db2:	429c      	cmp	r4, r3
 8003db4:	d101      	bne.n	8003dba <__swsetup_r+0x46>
 8003db6:	68ac      	ldr	r4, [r5, #8]
 8003db8:	e7eb      	b.n	8003d92 <__swsetup_r+0x1e>
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <__swsetup_r+0xd8>)
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	bf08      	it	eq
 8003dc0:	68ec      	ldreq	r4, [r5, #12]
 8003dc2:	e7e6      	b.n	8003d92 <__swsetup_r+0x1e>
 8003dc4:	0758      	lsls	r0, r3, #29
 8003dc6:	d512      	bpl.n	8003dee <__swsetup_r+0x7a>
 8003dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dca:	b141      	cbz	r1, 8003dde <__swsetup_r+0x6a>
 8003dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dd0:	4299      	cmp	r1, r3
 8003dd2:	d002      	beq.n	8003dda <__swsetup_r+0x66>
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f7ff fb81 	bl	80034dc <_free_r>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	2300      	movs	r3, #0
 8003de8:	6063      	str	r3, [r4, #4]
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	6023      	str	r3, [r4, #0]
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	f043 0308 	orr.w	r3, r3, #8
 8003df4:	81a3      	strh	r3, [r4, #12]
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	b94b      	cbnz	r3, 8003e0e <__swsetup_r+0x9a>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d003      	beq.n	8003e0e <__swsetup_r+0x9a>
 8003e06:	4621      	mov	r1, r4
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f7ff fb1f 	bl	800344c <__smakebuf_r>
 8003e0e:	89a0      	ldrh	r0, [r4, #12]
 8003e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e14:	f010 0301 	ands.w	r3, r0, #1
 8003e18:	d00a      	beq.n	8003e30 <__swsetup_r+0xbc>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60a3      	str	r3, [r4, #8]
 8003e1e:	6963      	ldr	r3, [r4, #20]
 8003e20:	425b      	negs	r3, r3
 8003e22:	61a3      	str	r3, [r4, #24]
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	b943      	cbnz	r3, 8003e3a <__swsetup_r+0xc6>
 8003e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e2c:	d1ba      	bne.n	8003da4 <__swsetup_r+0x30>
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	0781      	lsls	r1, r0, #30
 8003e32:	bf58      	it	pl
 8003e34:	6963      	ldrpl	r3, [r4, #20]
 8003e36:	60a3      	str	r3, [r4, #8]
 8003e38:	e7f4      	b.n	8003e24 <__swsetup_r+0xb0>
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e7f7      	b.n	8003e2e <__swsetup_r+0xba>
 8003e3e:	bf00      	nop
 8003e40:	20000018 	.word	0x20000018
 8003e44:	08004098 	.word	0x08004098
 8003e48:	080040b8 	.word	0x080040b8
 8003e4c:	08004078 	.word	0x08004078

08003e50 <_close_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	2300      	movs	r3, #0
 8003e54:	4d05      	ldr	r5, [pc, #20]	; (8003e6c <_close_r+0x1c>)
 8003e56:	4604      	mov	r4, r0
 8003e58:	4608      	mov	r0, r1
 8003e5a:	602b      	str	r3, [r5, #0]
 8003e5c:	f7fc fc26 	bl	80006ac <_close>
 8003e60:	1c43      	adds	r3, r0, #1
 8003e62:	d102      	bne.n	8003e6a <_close_r+0x1a>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	b103      	cbz	r3, 8003e6a <_close_r+0x1a>
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
 8003e6c:	2000018c 	.word	0x2000018c

08003e70 <_fstat_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	2300      	movs	r3, #0
 8003e74:	4d06      	ldr	r5, [pc, #24]	; (8003e90 <_fstat_r+0x20>)
 8003e76:	4604      	mov	r4, r0
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	602b      	str	r3, [r5, #0]
 8003e7e:	f7fc fc65 	bl	800074c <_fstat>
 8003e82:	1c43      	adds	r3, r0, #1
 8003e84:	d102      	bne.n	8003e8c <_fstat_r+0x1c>
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	b103      	cbz	r3, 8003e8c <_fstat_r+0x1c>
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	bd38      	pop	{r3, r4, r5, pc}
 8003e8e:	bf00      	nop
 8003e90:	2000018c 	.word	0x2000018c

08003e94 <_isatty_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	2300      	movs	r3, #0
 8003e98:	4d05      	ldr	r5, [pc, #20]	; (8003eb0 <_isatty_r+0x1c>)
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	f7fc fbc2 	bl	8000628 <_isatty>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_isatty_r+0x1a>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_isatty_r+0x1a>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	2000018c 	.word	0x2000018c

08003eb4 <_lseek_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	4d05      	ldr	r5, [pc, #20]	; (8003ed4 <_lseek_r+0x20>)
 8003ec0:	602a      	str	r2, [r5, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f7fc fc09 	bl	80006da <_lseek>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_lseek_r+0x1e>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_lseek_r+0x1e>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	2000018c 	.word	0x2000018c

08003ed8 <memchr>:
 8003ed8:	4603      	mov	r3, r0
 8003eda:	b510      	push	{r4, lr}
 8003edc:	b2c9      	uxtb	r1, r1
 8003ede:	4402      	add	r2, r0
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	d101      	bne.n	8003eea <memchr+0x12>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	e003      	b.n	8003ef2 <memchr+0x1a>
 8003eea:	7804      	ldrb	r4, [r0, #0]
 8003eec:	3301      	adds	r3, #1
 8003eee:	428c      	cmp	r4, r1
 8003ef0:	d1f6      	bne.n	8003ee0 <memchr+0x8>
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <__malloc_lock>:
 8003ef4:	4801      	ldr	r0, [pc, #4]	; (8003efc <__malloc_lock+0x8>)
 8003ef6:	f7ff ba83 	b.w	8003400 <__retarget_lock_acquire_recursive>
 8003efa:	bf00      	nop
 8003efc:	20000184 	.word	0x20000184

08003f00 <__malloc_unlock>:
 8003f00:	4801      	ldr	r0, [pc, #4]	; (8003f08 <__malloc_unlock+0x8>)
 8003f02:	f7ff ba7e 	b.w	8003402 <__retarget_lock_release_recursive>
 8003f06:	bf00      	nop
 8003f08:	20000184 	.word	0x20000184

08003f0c <_read_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4604      	mov	r4, r0
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	2200      	movs	r2, #0
 8003f16:	4d05      	ldr	r5, [pc, #20]	; (8003f2c <_read_r+0x20>)
 8003f18:	602a      	str	r2, [r5, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f7fc fbee 	bl	80006fc <_read>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d102      	bne.n	8003f2a <_read_r+0x1e>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	b103      	cbz	r3, 8003f2a <_read_r+0x1e>
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	2000018c 	.word	0x2000018c

08003f30 <_init>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr

08003f3c <_fini>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	bf00      	nop
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr

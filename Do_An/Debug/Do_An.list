
Do_An.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800785c  0800785c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800785c  0800785c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800785c  0800785c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000008c  080078f0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080078f0  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad76  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a7e  00000000  00000000  0003ae2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0003e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d374  00000000  00000000  00040e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180c5  00000000  00000000  0005e17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095fd8  00000000  00000000  00076241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005924  00000000  00000000  0010c26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006e20 	.word	0x08006e20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08006e20 	.word	0x08006e20

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b089      	sub	sp, #36	; 0x24
 8000658:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <MX_ADC1_Init+0xc8>)
 8000668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_ADC1_Init+0xc4>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000672:	2200      	movs	r2, #0
 8000674:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000678:	2200      	movs	r2, #0
 800067a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MX_ADC1_Init+0xc4>)
 800067e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <MX_ADC1_Init+0xc4>)
 800068c:	2201      	movs	r2, #1
 800068e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	4821      	ldr	r0, [pc, #132]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000692:	f002 f841 	bl	8002718 <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f001 f9fc 	bl	8001a98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80006a8:	2307      	movs	r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4819      	ldr	r0, [pc, #100]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006b2:	f002 fa97 	bl	8002be4 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006bc:	f001 f9ec 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ERROR_CHECK(HAL_ADC_Start_IT(&hadc1));
 80006c0:	4815      	ldr	r0, [pc, #84]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006c2:	f002 f901 	bl	80028c8 <HAL_ADC_Start_IT>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d020      	beq.n	800070e <MX_ADC1_Init+0xba>
 80006cc:	f001 fff6 	bl	80026bc <HAL_GetTick>
 80006d0:	4604      	mov	r4, r0
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006d4:	f002 f8f8 	bl	80028c8 <HAL_ADC_Start_IT>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d009      	beq.n	80006f2 <MX_ADC1_Init+0x9e>
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006e0:	f002 f8f2 	bl	80028c8 <HAL_ADC_Start_IT>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d101      	bne.n	80006ee <MX_ADC1_Init+0x9a>
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_ADC1_Init+0xcc>)
 80006ec:	e002      	b.n	80006f4 <MX_ADC1_Init+0xa0>
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_ADC1_Init+0xd0>)
 80006f0:	e000      	b.n	80006f4 <MX_ADC1_Init+0xa0>
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_ADC1_Init+0xd4>)
 80006f4:	9303      	str	r3, [sp, #12]
 80006f6:	2341      	movs	r3, #65	; 0x41
 80006f8:	9302      	str	r3, [sp, #8]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_ADC1_Init+0xd8>)
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_ADC1_Init+0xdc>)
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4623      	mov	r3, r4
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <MX_ADC1_Init+0xe0>)
 8000706:	490a      	ldr	r1, [pc, #40]	; (8000730 <MX_ADC1_Init+0xdc>)
 8000708:	2001      	movs	r0, #1
 800070a:	f001 fd95 	bl	8002238 <stm_log_write>
  /* USER CODE END ADC1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bd90      	pop	{r4, r7, pc}
 8000716:	bf00      	nop
 8000718:	200000c8 	.word	0x200000c8
 800071c:	40012400 	.word	0x40012400
 8000720:	08006e38 	.word	0x08006e38
 8000724:	08006e44 	.word	0x08006e44
 8000728:	08006e50 	.word	0x08006e50
 800072c:	080076bc 	.word	0x080076bc
 8000730:	08006e8c 	.word	0x08006e8c
 8000734:	08006e5c 	.word	0x08006e5c

08000738 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <HAL_ADC_MspInit+0x7c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d129      	bne.n	80007ac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 800075e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_OUTPUT_Pin;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078c:	2303      	movs	r3, #3
 800078e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LIGHT_SENSOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <HAL_ADC_MspInit+0x84>)
 8000798:	f002 fd36 	bl	8003208 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	2012      	movs	r0, #18
 80007a2:	f002 fc84 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007a6:	2012      	movs	r0, #18
 80007a8:	f002 fc9d 	bl	80030e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40012400 	.word	0x40012400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b4d      	ldr	r3, [pc, #308]	; (800090c <MX_GPIO_Init+0x14c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a4c      	ldr	r2, [pc, #304]	; (800090c <MX_GPIO_Init+0x14c>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b4a      	ldr	r3, [pc, #296]	; (800090c <MX_GPIO_Init+0x14c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ec:	4b47      	ldr	r3, [pc, #284]	; (800090c <MX_GPIO_Init+0x14c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a46      	ldr	r2, [pc, #280]	; (800090c <MX_GPIO_Init+0x14c>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b44      	ldr	r3, [pc, #272]	; (800090c <MX_GPIO_Init+0x14c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b41      	ldr	r3, [pc, #260]	; (800090c <MX_GPIO_Init+0x14c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a40      	ldr	r2, [pc, #256]	; (800090c <MX_GPIO_Init+0x14c>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b3e      	ldr	r3, [pc, #248]	; (800090c <MX_GPIO_Init+0x14c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b3b      	ldr	r3, [pc, #236]	; (800090c <MX_GPIO_Init+0x14c>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a3a      	ldr	r2, [pc, #232]	; (800090c <MX_GPIO_Init+0x14c>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b38      	ldr	r3, [pc, #224]	; (800090c <MX_GPIO_Init+0x14c>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2102      	movs	r1, #2
 8000838:	4835      	ldr	r0, [pc, #212]	; (8000910 <MX_GPIO_Init+0x150>)
 800083a:	f002 fe69 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2110      	movs	r1, #16
 8000842:	4833      	ldr	r0, [pc, #204]	; (8000910 <MX_GPIO_Init+0x150>)
 8000844:	f002 fe64 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2101      	movs	r1, #1
 800084c:	4831      	ldr	r0, [pc, #196]	; (8000914 <MX_GPIO_Init+0x154>)
 800084e:	f002 fe5f 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000852:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000858:	2303      	movs	r3, #3
 800085a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	482d      	ldr	r0, [pc, #180]	; (8000918 <MX_GPIO_Init+0x158>)
 8000864:	f002 fcd0 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin|SPI1_NSS_Pin;
 8000868:	2312      	movs	r3, #18
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2302      	movs	r3, #2
 8000876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4824      	ldr	r0, [pc, #144]	; (8000910 <MX_GPIO_Init+0x150>)
 8000880:	f002 fcc2 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin|INTERRUPT_LORA_Pin;
 8000884:	230c      	movs	r3, #12
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_GPIO_Init+0x15c>)
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	481e      	ldr	r0, [pc, #120]	; (8000910 <MX_GPIO_Init+0x150>)
 8000898:	f002 fcb6 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4818      	ldr	r0, [pc, #96]	; (8000914 <MX_GPIO_Init+0x154>)
 80008b4:	f002 fca8 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80008b8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80008bc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	2303      	movs	r3, #3
 80008c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_GPIO_Init+0x154>)
 80008ca:	f002 fc9d 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80008ce:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d4:	2303      	movs	r3, #3
 80008d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_GPIO_Init+0x150>)
 80008e0:	f002 fc92 	bl	8003208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2008      	movs	r0, #8
 80008ea:	f002 fbe0 	bl	80030ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008ee:	2008      	movs	r0, #8
 80008f0:	f002 fbf9 	bl	80030e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2009      	movs	r0, #9
 80008fa:	f002 fbd8 	bl	80030ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008fe:	2009      	movs	r0, #9
 8000900:	f002 fbf1 	bl	80030e6 <HAL_NVIC_EnableIRQ>

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	40010800 	.word	0x40010800
 8000914:	40010c00 	.word	0x40010c00
 8000918:	40011000 	.word	0x40011000
 800091c:	10110000 	.word	0x10110000

08000920 <vSpi1Write>:
  * @param ucData: Data need write into registers or fifo of Lora
  * @retval None
  */

void vSpi1Write(u8 ucAddress, u8 ucData)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af04      	add	r7, sp, #16
 8000926:	4603      	mov	r3, r0
 8000928:	460a      	mov	r2, r1
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	4613      	mov	r3, r2
 800092e:	71bb      	strb	r3, [r7, #6]
  u8 ucDataMatrix[2];
  ucAddress |= SPI1_WRITE; /* A wnr bit, which is 1 for write access and 0 for read access */
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000936:	71fb      	strb	r3, [r7, #7]
  ucDataMatrix[0] = ucAddress;
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	733b      	strb	r3, [r7, #12]
  ucDataMatrix[1] = ucData;
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2110      	movs	r1, #16
 8000944:	4822      	ldr	r0, [pc, #136]	; (80009d0 <vSpi1Write+0xb0>)
 8000946:	f002 fde3 	bl	8003510 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 800094a:	2003      	movs	r0, #3
 800094c:	f001 fec0 	bl	80026d0 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (u8 *)ucDataMatrix, sizeof(ucDataMatrix), 100));
 8000950:	f107 010c 	add.w	r1, r7, #12
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	2202      	movs	r2, #2
 8000958:	481e      	ldr	r0, [pc, #120]	; (80009d4 <vSpi1Write+0xb4>)
 800095a:	f003 fbbf 	bl	80040dc <HAL_SPI_Transmit>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d028      	beq.n	80009b6 <vSpi1Write+0x96>
 8000964:	f001 feaa 	bl	80026bc <HAL_GetTick>
 8000968:	4604      	mov	r4, r0
 800096a:	f107 010c 	add.w	r1, r7, #12
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	2202      	movs	r2, #2
 8000972:	4818      	ldr	r0, [pc, #96]	; (80009d4 <vSpi1Write+0xb4>)
 8000974:	f003 fbb2 	bl	80040dc <HAL_SPI_Transmit>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d00d      	beq.n	800099a <vSpi1Write+0x7a>
 800097e:	f107 010c 	add.w	r1, r7, #12
 8000982:	2364      	movs	r3, #100	; 0x64
 8000984:	2202      	movs	r2, #2
 8000986:	4813      	ldr	r0, [pc, #76]	; (80009d4 <vSpi1Write+0xb4>)
 8000988:	f003 fba8 	bl	80040dc <HAL_SPI_Transmit>
 800098c:	4603      	mov	r3, r0
 800098e:	2b02      	cmp	r3, #2
 8000990:	d101      	bne.n	8000996 <vSpi1Write+0x76>
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <vSpi1Write+0xb8>)
 8000994:	e002      	b.n	800099c <vSpi1Write+0x7c>
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <vSpi1Write+0xbc>)
 8000998:	e000      	b.n	800099c <vSpi1Write+0x7c>
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <vSpi1Write+0xc0>)
 800099c:	9303      	str	r3, [sp, #12]
 800099e:	2326      	movs	r3, #38	; 0x26
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <vSpi1Write+0xc4>)
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <vSpi1Write+0xc8>)
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4623      	mov	r3, r4
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <vSpi1Write+0xcc>)
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <vSpi1Write+0xc8>)
 80009b0:	2001      	movs	r0, #1
 80009b2:	f001 fc41 	bl	8002238 <stm_log_write>
  HAL_Delay(DELAY_SPI);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f001 fe8a 	bl	80026d0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2110      	movs	r1, #16
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <vSpi1Write+0xb0>)
 80009c2:	f002 fda5 	bl	8003510 <HAL_GPIO_WritePin>
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010800 	.word	0x40010800
 80009d4:	2000012c 	.word	0x2000012c
 80009d8:	08006e9c 	.word	0x08006e9c
 80009dc:	08006ea8 	.word	0x08006ea8
 80009e0:	08006eb4 	.word	0x08006eb4
 80009e4:	080076cc 	.word	0x080076cc
 80009e8:	08006ef0 	.word	0x08006ef0
 80009ec:	08006ec0 	.word	0x08006ec0

080009f0 <ucSpi1Read>:
  * @brief Read Data Function from Lora Module
  * @param ucAddress: Address registers or fifo of Lora Module
  * @retval ucData: Data contained in registers or fifo of Lora Module  
  */
u8 ucSpi1Read(u8 ucAddress)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af04      	add	r7, sp, #16
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	73fb      	strb	r3, [r7, #15]
  ucAddress &= SPI1_READ; /* A wnr bit, which is 1 for write access and 0 for read access */
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	483a      	ldr	r0, [pc, #232]	; (8000af8 <ucSpi1Read+0x108>)
 8000a0e:	f002 fd7f 	bl	8003510 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f001 fe5c 	bl	80026d0 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (u8 *)&ucAddress, sizeof(ucAddress), 100));
 8000a18:	1df9      	adds	r1, r7, #7
 8000a1a:	2364      	movs	r3, #100	; 0x64
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4837      	ldr	r0, [pc, #220]	; (8000afc <ucSpi1Read+0x10c>)
 8000a20:	f003 fb5c 	bl	80040dc <HAL_SPI_Transmit>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d026      	beq.n	8000a78 <ucSpi1Read+0x88>
 8000a2a:	f001 fe47 	bl	80026bc <HAL_GetTick>
 8000a2e:	4604      	mov	r4, r0
 8000a30:	1df9      	adds	r1, r7, #7
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	2201      	movs	r2, #1
 8000a36:	4831      	ldr	r0, [pc, #196]	; (8000afc <ucSpi1Read+0x10c>)
 8000a38:	f003 fb50 	bl	80040dc <HAL_SPI_Transmit>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d00c      	beq.n	8000a5c <ucSpi1Read+0x6c>
 8000a42:	1df9      	adds	r1, r7, #7
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	2201      	movs	r2, #1
 8000a48:	482c      	ldr	r0, [pc, #176]	; (8000afc <ucSpi1Read+0x10c>)
 8000a4a:	f003 fb47 	bl	80040dc <HAL_SPI_Transmit>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d101      	bne.n	8000a58 <ucSpi1Read+0x68>
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <ucSpi1Read+0x110>)
 8000a56:	e002      	b.n	8000a5e <ucSpi1Read+0x6e>
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <ucSpi1Read+0x114>)
 8000a5a:	e000      	b.n	8000a5e <ucSpi1Read+0x6e>
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <ucSpi1Read+0x118>)
 8000a5e:	9303      	str	r3, [sp, #12]
 8000a60:	2336      	movs	r3, #54	; 0x36
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <ucSpi1Read+0x11c>)
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <ucSpi1Read+0x120>)
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	4623      	mov	r3, r4
 8000a6e:	4a29      	ldr	r2, [pc, #164]	; (8000b14 <ucSpi1Read+0x124>)
 8000a70:	4927      	ldr	r1, [pc, #156]	; (8000b10 <ucSpi1Read+0x120>)
 8000a72:	2001      	movs	r0, #1
 8000a74:	f001 fbe0 	bl	8002238 <stm_log_write>
  ERROR_CHECK(HAL_SPI_Receive(&hspi1, (u8 *)&ucData, sizeof(ucData), 100));
 8000a78:	f107 010f 	add.w	r1, r7, #15
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	2201      	movs	r2, #1
 8000a80:	481e      	ldr	r0, [pc, #120]	; (8000afc <ucSpi1Read+0x10c>)
 8000a82:	f003 fc67 	bl	8004354 <HAL_SPI_Receive>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d028      	beq.n	8000ade <ucSpi1Read+0xee>
 8000a8c:	f001 fe16 	bl	80026bc <HAL_GetTick>
 8000a90:	4604      	mov	r4, r0
 8000a92:	f107 010f 	add.w	r1, r7, #15
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <ucSpi1Read+0x10c>)
 8000a9c:	f003 fc5a 	bl	8004354 <HAL_SPI_Receive>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d00d      	beq.n	8000ac2 <ucSpi1Read+0xd2>
 8000aa6:	f107 010f 	add.w	r1, r7, #15
 8000aaa:	2364      	movs	r3, #100	; 0x64
 8000aac:	2201      	movs	r2, #1
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <ucSpi1Read+0x10c>)
 8000ab0:	f003 fc50 	bl	8004354 <HAL_SPI_Receive>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d101      	bne.n	8000abe <ucSpi1Read+0xce>
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <ucSpi1Read+0x110>)
 8000abc:	e002      	b.n	8000ac4 <ucSpi1Read+0xd4>
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <ucSpi1Read+0x114>)
 8000ac0:	e000      	b.n	8000ac4 <ucSpi1Read+0xd4>
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <ucSpi1Read+0x118>)
 8000ac4:	9303      	str	r3, [sp, #12]
 8000ac6:	2337      	movs	r3, #55	; 0x37
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <ucSpi1Read+0x11c>)
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <ucSpi1Read+0x120>)
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <ucSpi1Read+0x124>)
 8000ad6:	490e      	ldr	r1, [pc, #56]	; (8000b10 <ucSpi1Read+0x120>)
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f001 fbad 	bl	8002238 <stm_log_write>
  HAL_Delay(DELAY_SPI);
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f001 fdf6 	bl	80026d0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <ucSpi1Read+0x108>)
 8000aea:	f002 fd11 	bl	8003510 <HAL_GPIO_WritePin>
  return ucData;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	40010800 	.word	0x40010800
 8000afc:	2000012c 	.word	0x2000012c
 8000b00:	08006e9c 	.word	0x08006e9c
 8000b04:	08006ea8 	.word	0x08006ea8
 8000b08:	08006eb4 	.word	0x08006eb4
 8000b0c:	080076d8 	.word	0x080076d8
 8000b10:	08006ef0 	.word	0x08006ef0
 8000b14:	08006ec0 	.word	0x08006ec0

08000b18 <vLongRangeModeInit>:
  * @brief Mode Initialization LoraTM or FSK/OOK 
  * @param ucMode: Value of mode: LoraTM if 1, FSK/OOK if 0
  * @retval None
  */
void vLongRangeModeInit(u8 ucLongRangeMode)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  vModeInit(SLEEP_MODE);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f870 	bl	8000c08 <vModeInit>
  u8 ucData = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff ff5f 	bl	80009f0 <ucSpi1Read>
 8000b32:	4603      	mov	r3, r0
 8000b34:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b3c:	73fb      	strb	r3, [r7, #15]
  if (ucLongRangeMode == 0u || ucLongRangeMode == 1u)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <vLongRangeModeInit+0x32>
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d10c      	bne.n	8000b64 <vLongRangeModeInit+0x4c>
  {
    ucData |= (ucLongRangeMode << 7);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	01db      	lsls	r3, r3, #7
 8000b4e:	b25a      	sxtb	r2, r3
 8000b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b25b      	sxtb	r3, r3
 8000b58:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f7ff fede 	bl	8000920 <vSpi1Write>
  }
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <vAccessSharedRegInit>:
  * @brief Access Low Frequency Mode Initialization  
  * @param ucAccessSharedReg: Value of mode
  * @retval None
  */
void vAccessSharedRegInit(u8 ucAccessSharedReg)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff ff38 	bl	80009f0 <ucSpi1Read>
 8000b80:	4603      	mov	r3, r0
 8000b82:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xBF;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b8a:	73fb      	strb	r3, [r7, #15]
  if (ucAccessSharedReg == 0u || ucAccessSharedReg == 1u)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <vAccessSharedRegInit+0x2c>
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d10c      	bne.n	8000bb2 <vAccessSharedRegInit+0x46>
  {
    ucData |= (ucAccessSharedReg << 6);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	019b      	lsls	r3, r3, #6
 8000b9c:	b25a      	sxtb	r2, r3
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	4619      	mov	r1, r3
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff feb7 	bl	8000920 <vSpi1Write>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <vLowFrequencyModeOnInit>:
  * @brief Access Low Frequency Mode Initialization  
  * @param ucLowFrequencyModeOn: Value of mode
  * @retval None
  */
void vLowFrequencyModeOnInit(u8 ucLowFrequencyModeOn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff ff11 	bl	80009f0 <ucSpi1Read>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF7;
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	f023 0308 	bic.w	r3, r3, #8
 8000bd8:	73fb      	strb	r3, [r7, #15]
  if (ucLowFrequencyModeOn == 0u || ucLowFrequencyModeOn == 1u)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <vLowFrequencyModeOnInit+0x2c>
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d10c      	bne.n	8000c00 <vLowFrequencyModeOnInit+0x46>
  {
    ucData |= (ucLowFrequencyModeOn << 3);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	b25a      	sxtb	r2, r3
 8000bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f7ff fe90 	bl	8000920 <vSpi1Write>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <vModeInit>:
  * @brief Device Modes Initialization  
  * @param ucDeviceMode: Value of mode
  * @retval None
  */
void vModeInit(u8 ucMode)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff feea 	bl	80009f0 <ucSpi1Read>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	f023 0307 	bic.w	r3, r3, #7
 8000c26:	73fb      	strb	r3, [r7, #15]
  if (ucMode >= 0u && ucMode <= 7u)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b07      	cmp	r3, #7
 8000c2c:	d808      	bhi.n	8000c40 <vModeInit+0x38>
  {
    ucData |= ucMode;
 8000c2e:	7bfa      	ldrb	r2, [r7, #15]
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fe70 	bl	8000920 <vSpi1Write>
  }
  mInfo.loraCurMode = ucMode;
 8000c40:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <vModeInit+0x48>)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	7313      	strb	r3, [r2, #12]
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000000c 	.word	0x2000000c

08000c54 <vFrfInit>:
  * @brief RF carrier frequency Initialization  
  * @param uiFrf: Value of RF carrier frequency
  * @retval None
  */
void vFrfInit(unsigned int uiFrf)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  vSpi1Write(RegFrfMsb, (u8)(uiFrf >> 16));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	4619      	mov	r1, r3
 8000c64:	2006      	movs	r0, #6
 8000c66:	f7ff fe5b 	bl	8000920 <vSpi1Write>
  vSpi1Write(RegFrfMid, (u8)(uiFrf >> 8));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	2007      	movs	r0, #7
 8000c74:	f7ff fe54 	bl	8000920 <vSpi1Write>
  vSpi1Write(RegFrfLsb, (u8)uiFrf);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	2008      	movs	r0, #8
 8000c80:	f7ff fe4e 	bl	8000920 <vSpi1Write>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <vPaSelectInit>:
  * @brief Power Amplifier Initialization
  * @param ucPaSelect: Power Amplifier Value 
  * @retval None
  */
void vPaSelectInit(u8 ucPaSelect)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 8000c9a:	2009      	movs	r0, #9
 8000c9c:	f7ff fea8 	bl	80009f0 <ucSpi1Read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000caa:	73fb      	strb	r3, [r7, #15]
  if (ucPaSelect == 0u || ucPaSelect == 1u)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <vPaSelectInit+0x2c>
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d10c      	bne.n	8000cd2 <vPaSelectInit+0x46>
  {
    ucData |= (ucPaSelect << 7);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	01db      	lsls	r3, r3, #7
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2009      	movs	r0, #9
 8000cce:	f7ff fe27 	bl	8000920 <vSpi1Write>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <vOutputPowerInit>:
  * @brief Output Power Initialization
  * @param ucOutputPower: Output Power Value 
  * @retval None
  */
void vOutputPowerInit(u8 ucOutputPower)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b084      	sub	sp, #16
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 8000ce8:	2009      	movs	r0, #9
 8000cea:	f7ff fe81 	bl	80009f0 <ucSpi1Read>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF0;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	f023 030f 	bic.w	r3, r3, #15
 8000cf8:	73fb      	strb	r3, [r7, #15]
  if (ucOutputPower >= 0u && ucOutputPower <= 15u)
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d808      	bhi.n	8000d12 <vOutputPowerInit+0x38>
  {
    ucData |= ucOutputPower;
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	2009      	movs	r0, #9
 8000d0e:	f7ff fe07 	bl	8000920 <vSpi1Write>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <vOcpTrimInit>:
  * @brief  Overload Current Protection Initialization
  * @param ucOcpTrim: OcpTrim Value
  * @retval None
  */
void vOcpTrimInit(u8 ucOcpTrim)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOcp);
 8000d28:	200b      	movs	r0, #11
 8000d2a:	f7ff fe61 	bl	80009f0 <ucSpi1Read>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xE0;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	f023 031f 	bic.w	r3, r3, #31
 8000d38:	73fb      	strb	r3, [r7, #15]
  if (ucOcpTrim >= 0u && ucOcpTrim <= 31u)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b1f      	cmp	r3, #31
 8000d3e:	d808      	bhi.n	8000d52 <vOcpTrimInit+0x38>
  {
    ucData |= ucOcpTrim;
 8000d40:	7bfa      	ldrb	r2, [r7, #15]
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOcp, ucData);
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	200b      	movs	r0, #11
 8000d4e:	f7ff fde7 	bl	8000920 <vSpi1Write>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <vCodingRateInit>:
  * @brief Error coding rate Initialization
  * @param ucCodingRate: Error coding rate Value
  * @retval None 
  */
void vCodingRateInit(u8 ucCodingRate)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 8000d68:	201d      	movs	r0, #29
 8000d6a:	f7ff fe41 	bl	80009f0 <ucSpi1Read>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF1;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	f023 030e 	bic.w	r3, r3, #14
 8000d78:	73fb      	strb	r3, [r7, #15]
  if (ucCodingRate >= 1u && ucCodingRate <= 4u)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00f      	beq.n	8000da0 <vCodingRateInit+0x46>
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d80c      	bhi.n	8000da0 <vCodingRateInit+0x46>
  {
    ucData |= (ucCodingRate << 1);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	b25a      	sxtb	r2, r3
 8000d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	201d      	movs	r0, #29
 8000d9c:	f7ff fdc0 	bl	8000920 <vSpi1Write>
  }
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <vImplicitHeaderModeOnInit>:
  * @brief Explicit or Implicit Header mode Initialization
  * @param ucHeaderMode: Error coding rate Value
  * @retval None 
  */
void vImplicitHeaderModeOnInit(u8 ucHeaderMode)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 8000db6:	201d      	movs	r0, #29
 8000db8:	f7ff fe1a 	bl	80009f0 <ucSpi1Read>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFE;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f023 0301 	bic.w	r3, r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
  if (ucHeaderMode == 0u || ucHeaderMode == 1u)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <vImplicitHeaderModeOnInit+0x2c>
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d108      	bne.n	8000de6 <vImplicitHeaderModeOnInit+0x3e>
  {
    ucData |= ucHeaderMode;
 8000dd4:	7bfa      	ldrb	r2, [r7, #15]
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	4619      	mov	r1, r3
 8000de0:	201d      	movs	r0, #29
 8000de2:	f7ff fd9d 	bl	8000920 <vSpi1Write>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <vSpreadingFactorInit>:
  * @brief Spreading Factor rate Initialization
  * @param ucSpreadingFactor: Spreading Factor Value
  * @retval None 
  */
void vSpreadingFactorInit(u8 ucSpreadingFactor)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 8000dfc:	201e      	movs	r0, #30
 8000dfe:	f7ff fdf7 	bl	80009f0 <ucSpi1Read>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x0F;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	73fb      	strb	r3, [r7, #15]
  if (ucSpreadingFactor >= 6u && ucSpreadingFactor <= 12u)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b05      	cmp	r3, #5
 8000e12:	d90f      	bls.n	8000e34 <vSpreadingFactorInit+0x46>
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b0c      	cmp	r3, #12
 8000e18:	d80c      	bhi.n	8000e34 <vSpreadingFactorInit+0x46>
  {
    ucData |= (ucSpreadingFactor << 4);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	b25a      	sxtb	r2, r3
 8000e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	201e      	movs	r0, #30
 8000e30:	f7ff fd76 	bl	8000920 <vSpi1Write>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <vRxPayloadCrcOnInit>:
  * @brief CRC generation and check on payload Initialization
  * @param ucRxPayloadCrcOn: CRCON Value
  * @retval None 
  */
void vRxPayloadCrcOnInit(u8 ucRxPayloadCrcOn)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 8000e4a:	201e      	movs	r0, #30
 8000e4c:	f7ff fdd0 	bl	80009f0 <ucSpi1Read>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFB;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	f023 0304 	bic.w	r3, r3, #4
 8000e5a:	73fb      	strb	r3, [r7, #15]
  if (ucRxPayloadCrcOn == 0u || ucRxPayloadCrcOn == 1u)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <vRxPayloadCrcOnInit+0x2c>
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d10c      	bne.n	8000e82 <vRxPayloadCrcOnInit+0x46>
  {
    ucData |= (ucRxPayloadCrcOn << 2);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	b25a      	sxtb	r2, r3
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	201e      	movs	r0, #30
 8000e7e:	f7ff fd4f 	bl	8000920 <vSpi1Write>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <vPreambleLengthInit>:
  * @brief Preamble Length Initialization
  * @param ucPreambleLength: Preamble Length Value
  * @retval None
  */
void vPreambleLengthInit(u16 ucPreambleLength)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	80fb      	strh	r3, [r7, #6]
  vSpi1Write(RegPreambleMsb, (u8)(ucPreambleLength >> 8));
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	0a1b      	lsrs	r3, r3, #8
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2020      	movs	r0, #32
 8000ea0:	f7ff fd3e 	bl	8000920 <vSpi1Write>
  vSpi1Write(RegPreambleLsb, (u8)(ucPreambleLength));
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2021      	movs	r0, #33	; 0x21
 8000eac:	f7ff fd38 	bl	8000920 <vSpi1Write>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <vPayloadLengthInit>:
  * @brief Payload Length Initialization
  * @param ucPayloadLength: Payload Length Value
  * @retval None
  */
void vPayloadLengthInit(u8 ucPayloadLength)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegPayloadLength, ucPayloadLength);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	2022      	movs	r0, #34	; 0x22
 8000ec8:	f7ff fd2a 	bl	8000920 <vSpi1Write>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <vDetectionOptimizeInit>:
  * @brief  LoRa Detection Optimize Initialization
  * @param ucDetectionOptimize: Detection Optimize Value 
  * @retval None
  */
void vDetectionOptimizeInit(u8 ucDetectionOptimize)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegDetectOptimize);
 8000ee2:	2031      	movs	r0, #49	; 0x31
 8000ee4:	f7ff fd84 	bl	80009f0 <ucSpi1Read>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f023 0307 	bic.w	r3, r3, #7
 8000ef2:	73fb      	strb	r3, [r7, #15]
  if (ucDetectionOptimize == 3u || ucDetectionOptimize == 5u)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d002      	beq.n	8000f00 <vDetectionOptimizeInit+0x2c>
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	d108      	bne.n	8000f12 <vDetectionOptimizeInit+0x3e>
  {
    ucData |= ucDetectionOptimize;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegDetectOptimize, ucData);
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2031      	movs	r0, #49	; 0x31
 8000f0e:	f7ff fd07 	bl	8000920 <vSpi1Write>
  }
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <vDetectionThresholdInit>:
  * @brief LoRa detection threshold Initialization
  * @param ucDetectionThreshold: LoRa detection threshold Value 
  * @retval None
  */
void vDetectionThresholdInit(u8 ucDetectionThreshold)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
  if (ucDetectionThreshold == 0x0A || ucDetectionThreshold == 0x0C)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b0a      	cmp	r3, #10
 8000f28:	d002      	beq.n	8000f30 <vDetectionThresholdInit+0x16>
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b0c      	cmp	r3, #12
 8000f2e:	d104      	bne.n	8000f3a <vDetectionThresholdInit+0x20>
  {
    vSpi1Write(RegDetectionThreshold, ucDetectionThreshold);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4619      	mov	r1, r3
 8000f34:	2037      	movs	r0, #55	; 0x37
 8000f36:	f7ff fcf3 	bl	8000920 <vSpi1Write>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <vTcxoInputOnInit>:
  * @brief Controls the crystal oscillator Initialization
  * @param ucTcxoInputOn: Tcxo Input On Value
  * @retval None
  */
void vTcxoInputOnInit(u8 ucTcxoInputOn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegTcxo);
 8000f50:	204b      	movs	r0, #75	; 0x4b
 8000f52:	f7ff fd4d 	bl	80009f0 <ucSpi1Read>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xEF;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f023 0310 	bic.w	r3, r3, #16
 8000f60:	73fb      	strb	r3, [r7, #15]
  if (ucTcxoInputOn == 0u || ucTcxoInputOn == 1u)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <vTcxoInputOnInit+0x2c>
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d10c      	bne.n	8000f88 <vTcxoInputOnInit+0x46>
  {
    ucData |= (ucTcxoInputOn << 4);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	b25a      	sxtb	r2, r3
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegTcxo, ucData);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4619      	mov	r1, r3
 8000f82:	204b      	movs	r0, #75	; 0x4b
 8000f84:	f7ff fccc 	bl	8000920 <vSpi1Write>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <vPaDacInit>:
  * @brief Enables the +20dBm option on PA_BOOST pin Initialization
  * @param ucPaDac: Pa Dac Value
  * @retval None
  */
void vPaDacInit(u8 ucPaDac)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  u8 ucData = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaDac);
 8000f9e:	204d      	movs	r0, #77	; 0x4d
 8000fa0:	f7ff fd26 	bl	80009f0 <ucSpi1Read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f023 0307 	bic.w	r3, r3, #7
 8000fae:	73fb      	strb	r3, [r7, #15]
  if (ucPaDac == 4u || ucPaDac == 7u)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d002      	beq.n	8000fbc <vPaDacInit+0x2c>
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d108      	bne.n	8000fce <vPaDacInit+0x3e>
  {
    ucData |= ucPaDac;
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaDac, ucData);
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	204d      	movs	r0, #77	; 0x4d
 8000fca:	f7ff fca9 	bl	8000920 <vSpi1Write>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <vLoraInit>:
  * @brief Lora Module Initialization
  * @param: None
  * @retval: None
  */
void vLoraInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af04      	add	r7, sp, #16

  STM_LOGD("MainInit", "LoRa module init");
 8000fde:	f001 fb6d 	bl	80026bc <HAL_GetTick>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8000fe8:	9202      	str	r2, [sp, #8]
 8000fea:	4a21      	ldr	r2, [pc, #132]	; (8001070 <vLoraInit+0x98>)
 8000fec:	9201      	str	r2, [sp, #4]
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <vLoraInit+0x9c>)
 8000ff0:	9200      	str	r2, [sp, #0]
 8000ff2:	4a21      	ldr	r2, [pc, #132]	; (8001078 <vLoraInit+0xa0>)
 8000ff4:	491f      	ldr	r1, [pc, #124]	; (8001074 <vLoraInit+0x9c>)
 8000ff6:	2004      	movs	r0, #4
 8000ff8:	f001 f91e 	bl	8002238 <stm_log_write>

  vLongRangeModeInit(LORA_MODE); /*  Init Module Lora into Lora TM Mode */
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff fd8b 	bl	8000b18 <vLongRangeModeInit>
  // LORA_GET_REGISTER(RegOpMode);

  vModeInit(STDBY_MODE);                              /* Init Module Lora into Standby Mode */
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fe00 	bl	8000c08 <vModeInit>
  vAccessSharedRegInit(ACCESS_LORA_REGISTERS);        /* Access LoRa registers page 0x0D: 0x3F */
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fdaf 	bl	8000b6c <vAccessSharedRegInit>
  vLowFrequencyModeOnInit(ACCESS_LOW_FREQUENCY_MODE); /* Access Low Frequency Mode registers */
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff fdd3 	bl	8000bba <vLowFrequencyModeOnInit>
  // LORA_GET_REGISTER(RegOpMode);

  vFrfInit(RF_FREQUENCY); /*  Init RF carrier frequency */
 8001014:	f44f 00d9 	mov.w	r0, #7110656	; 0x6c8000
 8001018:	f7ff fe1c 	bl	8000c54 <vFrfInit>
  // LORA_GET_REGISTER(RegFrfMsb);
  // LORA_GET_REGISTER(RegFrfMid);
  // LORA_GET_REGISTER(RegFrfLsb);

  vPaSelectInit(PA_BOOST); /* Output power is limited to +20 dBm */
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fe35 	bl	8000c8c <vPaSelectInit>
  // vMaxPowerInit(MAX_POWER);
  vOutputPowerInit(OUTPUT_POWER); /* Pout=17-(15-OutputPower) */
 8001022:	200f      	movs	r0, #15
 8001024:	f7ff fe59 	bl	8000cda <vOutputPowerInit>

  // vPaRampInit(PA_RAMP);
  // LORA_GET_REGISTER(RegPaRamp);

  // vOcpOnInit(OCP_ON); /* OCP enabled */
  vOcpTrimInit(OCP_TRIM); /* Trimming of OCP current: Imax = 240mA */
 8001028:	201b      	movs	r0, #27
 800102a:	f7ff fe76 	bl	8000d1a <vOcpTrimInit>

  // vIrqFlagsMaskInit(IRQ_FLAGS_MASK); /* Disable all interrupts mask */
  // LORA_GET_REGISTER(RegIrqFlagsMask);

  // vBandWidthInit(BANDWIDTH_125K); /*  Signal bandwidth: 250kHz */
  vCodingRateInit(CODING_RATE_4_5); /* ANCHOR Error coding rate 4/5 */
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff fe93 	bl	8000d5a <vCodingRateInit>

  // vBandWidthInit(BANDWIDTH_125K);
  // vCodingRateInit(CODING_RATE_4_5);
  vImplicitHeaderModeOnInit(IMPLICIT_HEADER); /* ANCHOR Init Implicit Header mode */
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff feb7 	bl	8000da8 <vImplicitHeaderModeOnInit>
  // LORA_GET_REGISTER(RegModemConfig1);

  vSpreadingFactorInit(SPREADING_FACTOR_6_64); /* ANCHOR SF rate 64 chips / symbol */
 800103a:	2006      	movs	r0, #6
 800103c:	f7ff fed7 	bl	8000dee <vSpreadingFactorInit>
  // vTxContinuousModeInit(TX_SINGLE); /* ANCHOR Normal mode, a single packet is sent */
  vRxPayloadCrcOnInit(CRC_ENABLE); /* ANCHOR Enable CRC generation and check on payload */
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fefb 	bl	8000e3c <vRxPayloadCrcOnInit>
  // vSymbTimeoutInit(RX_TIMEOUT); /* ANCHOR RX operation time-out */
  // // LORA_GET_REGISTER(RegModemConfig2);
  // // LORA_GET_REGISTER(RegSymbTimeoutLsb);

  // vPreambleLengthInit(PREAMBLE_LENGTH); /* ANCHOR Preamble length = PreambleLength + 4.25 Symbols */
  vPreambleLengthInit(0x0080);
 8001046:	2080      	movs	r0, #128	; 0x80
 8001048:	f7ff ff1f 	bl	8000e8a <vPreambleLengthInit>
  // // LORA_GET_REGISTER(RegPreambleMsb);
  // // LORA_GET_REGISTER(RegPreambleLsb);

  vPayloadLengthInit(PAYLOAD_LENGTH); /*  Init Payload length */
 800104c:	200a      	movs	r0, #10
 800104e:	f7ff ff33 	bl	8000eb8 <vPayloadLengthInit>

  // vLowDataRateOptimizeInit(LOW_DATA_RATE_OPTIMIZE); /*  Enabled; mandated for when the symbol length exceeds16ms */
  // vAgcAutoOnInit(AGC_AUTO); /* 0 -> LNA gain set by register LnaGain 1 -> LNA gain set by the internal AGC loop*/
  // // LORA_GET_REGISTER(RegModemConfig3);

  vDetectionOptimizeInit(LORA_DETECTION_OPTIMIZE); /* LoRa Detection Optimize 0x03 -> SF7 to SF12; 0x05 -> SF6 */
 8001052:	2005      	movs	r0, #5
 8001054:	f7ff ff3e 	bl	8000ed4 <vDetectionOptimizeInit>
  // LORA_GET_REGISTER(RegDetectOptimize);

  // vInvertIQInit(INVERT_IQ); /* ANCHOR Invert the LoRa I and Q signals */
  // // LORA_GET_REGISTER(RegInvertIQ);

  vDetectionThresholdInit(LORA_DETECTION_THRESHOLD); /* ANCHOR LoRa detection threshold 0x0A -> SF7 to SF12; 0x0C -> SF6 */
 8001058:	200c      	movs	r0, #12
 800105a:	f7ff ff5e 	bl	8000f1a <vDetectionThresholdInit>

  // vMapPreambleDetect(PREAMBBLE_DETECT_INTERRUPT);
  // // LORA_GET_REGISTER(RegTcxo);
  // printf("RegTcxo = 0x%x\r\n", ucData);

  vTcxoInputOnInit(XTAL_INPUT); /* ANCHOR Controls the crystal oscillator */
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff ff6f 	bl	8000f42 <vTcxoInputOnInit>
  // LORA_GET_REGISTER(RegTcxo);

  vPaDacInit(PA_DAC); /* Enables the +20dBm option on PA_BOOST pin */
 8001064:	2007      	movs	r0, #7
 8001066:	f7ff ff93 	bl	8000f90 <vPaDacInit>
  // LORA_GET_REGISTER(RegLna);
  // LORA_GET_REGISTER(RegVersion);
  // LORA_GET_REGISTER(RegOpMode);

  // STM_LOGD("lora.c", "---------- LoraInit Finish ----------");
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	080076e4 	.word	0x080076e4
 8001074:	08006f34 	.word	0x08006f34
 8001078:	08006f00 	.word	0x08006f00

0800107c <LoRaTransmit>:
{
  return (ucSpi1Read(RegModemConfig2) & SPREADING_FACTOR_Msk) >> SPREADING_FACTOR_MskPos;
}

void LoRaTransmit(u8 *data, u8 size, u32 timeoutMs)
{
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	b099      	sub	sp, #100	; 0x64
 8001080:	af0e      	add	r7, sp, #56	; 0x38
 8001082:	6178      	str	r0, [r7, #20]
 8001084:	460b      	mov	r3, r1
 8001086:	60fa      	str	r2, [r7, #12]
 8001088:	74fb      	strb	r3, [r7, #19]
  static bool isInit = false;
  if (!isInit)
 800108a:	4ba1      	ldr	r3, [pc, #644]	; (8001310 <LoRaTransmit+0x294>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f083 0301 	eor.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <LoRaTransmit+0x28>
  {
    vModeInit(STDBY_MODE);
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff fdb5 	bl	8000c08 <vModeInit>
    // LORA_GET_REGISTER(RegOpMode);

    /* TX INIT */
    // LORA_GET_REGISTER(RegFifoAddrPtr);
    isInit = true;
 800109e:	4b9c      	ldr	r3, [pc, #624]	; (8001310 <LoRaTransmit+0x294>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
  }
  /* STANDBY MODE */
  LORA_GET_REGISTER(RegFifoRxCurrentAddr);
 80010a4:	2010      	movs	r0, #16
 80010a6:	f7ff fca3 	bl	80009f0 <ucSpi1Read>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80010b0:	f001 fb04 	bl	80026bc <HAL_GetTick>
 80010b4:	4686      	mov	lr, r0
 80010b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	da01      	bge.n	80010c8 <LoRaTransmit+0x4c>
 80010c4:	2231      	movs	r2, #49	; 0x31
 80010c6:	e000      	b.n	80010ca <LoRaTransmit+0x4e>
 80010c8:	2230      	movs	r2, #48	; 0x30
 80010ca:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80010ce:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80010d2:	2900      	cmp	r1, #0
 80010d4:	d001      	beq.n	80010da <LoRaTransmit+0x5e>
 80010d6:	2131      	movs	r1, #49	; 0x31
 80010d8:	e000      	b.n	80010dc <LoRaTransmit+0x60>
 80010da:	2130      	movs	r1, #48	; 0x30
 80010dc:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 80010e0:	f000 0020 	and.w	r0, r0, #32
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d001      	beq.n	80010ec <LoRaTransmit+0x70>
 80010e8:	2031      	movs	r0, #49	; 0x31
 80010ea:	e000      	b.n	80010ee <LoRaTransmit+0x72>
 80010ec:	2030      	movs	r0, #48	; 0x30
 80010ee:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 80010f2:	f004 0410 	and.w	r4, r4, #16
 80010f6:	2c00      	cmp	r4, #0
 80010f8:	d001      	beq.n	80010fe <LoRaTransmit+0x82>
 80010fa:	2431      	movs	r4, #49	; 0x31
 80010fc:	e000      	b.n	8001100 <LoRaTransmit+0x84>
 80010fe:	2430      	movs	r4, #48	; 0x30
 8001100:	f897 5023 	ldrb.w	r5, [r7, #35]	; 0x23
 8001104:	f005 0508 	and.w	r5, r5, #8
 8001108:	2d00      	cmp	r5, #0
 800110a:	d001      	beq.n	8001110 <LoRaTransmit+0x94>
 800110c:	2531      	movs	r5, #49	; 0x31
 800110e:	e000      	b.n	8001112 <LoRaTransmit+0x96>
 8001110:	2530      	movs	r5, #48	; 0x30
 8001112:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8001116:	f006 0604 	and.w	r6, r6, #4
 800111a:	2e00      	cmp	r6, #0
 800111c:	d001      	beq.n	8001122 <LoRaTransmit+0xa6>
 800111e:	2631      	movs	r6, #49	; 0x31
 8001120:	e000      	b.n	8001124 <LoRaTransmit+0xa8>
 8001122:	2630      	movs	r6, #48	; 0x30
 8001124:	f897 c023 	ldrb.w	ip, [r7, #35]	; 0x23
 8001128:	f00c 0c02 	and.w	ip, ip, #2
 800112c:	f1bc 0f00 	cmp.w	ip, #0
 8001130:	d002      	beq.n	8001138 <LoRaTransmit+0xbc>
 8001132:	2331      	movs	r3, #49	; 0x31
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	e001      	b.n	800113c <LoRaTransmit+0xc0>
 8001138:	2330      	movs	r3, #48	; 0x30
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	f897 c023 	ldrb.w	ip, [r7, #35]	; 0x23
 8001140:	f00c 0c01 	and.w	ip, ip, #1
 8001144:	f1bc 0f00 	cmp.w	ip, #0
 8001148:	d001      	beq.n	800114e <LoRaTransmit+0xd2>
 800114a:	2331      	movs	r3, #49	; 0x31
 800114c:	e000      	b.n	8001150 <LoRaTransmit+0xd4>
 800114e:	2330      	movs	r3, #48	; 0x30
 8001150:	930c      	str	r3, [sp, #48]	; 0x30
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	930b      	str	r3, [sp, #44]	; 0x2c
 8001156:	960a      	str	r6, [sp, #40]	; 0x28
 8001158:	9509      	str	r5, [sp, #36]	; 0x24
 800115a:	9408      	str	r4, [sp, #32]
 800115c:	9007      	str	r0, [sp, #28]
 800115e:	9106      	str	r1, [sp, #24]
 8001160:	9205      	str	r2, [sp, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	9304      	str	r3, [sp, #16]
 8001166:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <LoRaTransmit+0x298>)
 8001168:	9303      	str	r3, [sp, #12]
 800116a:	f240 6391 	movw	r3, #1681	; 0x691
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	4b69      	ldr	r3, [pc, #420]	; (8001318 <LoRaTransmit+0x29c>)
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	4b69      	ldr	r3, [pc, #420]	; (800131c <LoRaTransmit+0x2a0>)
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	4673      	mov	r3, lr
 800117a:	4a69      	ldr	r2, [pc, #420]	; (8001320 <LoRaTransmit+0x2a4>)
 800117c:	4967      	ldr	r1, [pc, #412]	; (800131c <LoRaTransmit+0x2a0>)
 800117e:	2005      	movs	r0, #5
 8001180:	f001 f85a 	bl	8002238 <stm_log_write>

  // vSpi1Write(RegFifoAddrPtr, ucSpi1Read(RegFifoRxCurrentAddr) - PAYLOAD_LENGTH*2); /* Set FifoPtrAddr to FifoTxPtrBase */
  vSpi1Write(RegFifoAddrPtr, FIFO_TX_BASE_ADDR);
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	200d      	movs	r0, #13
 8001188:	f7ff fbca 	bl	8000920 <vSpi1Write>
  

  /* WRITE DATA FIFO */
  for (size_t i = 0u; i < PAYLOAD_LENGTH; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
 8001190:	e08a      	b.n	80012a8 <LoRaTransmit+0x22c>
  {
    STM_LOGV("Transmit", "data transmit[%d]: 0x%x", i, *(data + i));
 8001192:	f001 fa93 	bl	80026bc <HAL_GetTick>
 8001196:	4601      	mov	r1, r0
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	9304      	str	r3, [sp, #16]
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	9303      	str	r3, [sp, #12]
 80011a6:	f240 639a 	movw	r3, #1690	; 0x69a
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <LoRaTransmit+0x29c>)
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <LoRaTransmit+0x2a8>)
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	460b      	mov	r3, r1
 80011b6:	4a5c      	ldr	r2, [pc, #368]	; (8001328 <LoRaTransmit+0x2ac>)
 80011b8:	495a      	ldr	r1, [pc, #360]	; (8001324 <LoRaTransmit+0x2a8>)
 80011ba:	2005      	movs	r0, #5
 80011bc:	f001 f83c 	bl	8002238 <stm_log_write>
    LORA_GET_REGISTER(RegFifoAddrPtr);
 80011c0:	200d      	movs	r0, #13
 80011c2:	f7ff fc15 	bl	80009f0 <ucSpi1Read>
 80011c6:	4603      	mov	r3, r0
 80011c8:	76fb      	strb	r3, [r7, #27]
 80011ca:	f001 fa77 	bl	80026bc <HAL_GetTick>
 80011ce:	4686      	mov	lr, r0
 80011d0:	7efb      	ldrb	r3, [r7, #27]
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80011d8:	2a00      	cmp	r2, #0
 80011da:	da01      	bge.n	80011e0 <LoRaTransmit+0x164>
 80011dc:	2231      	movs	r2, #49	; 0x31
 80011de:	e000      	b.n	80011e2 <LoRaTransmit+0x166>
 80011e0:	2230      	movs	r2, #48	; 0x30
 80011e2:	7ef9      	ldrb	r1, [r7, #27]
 80011e4:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80011e8:	2900      	cmp	r1, #0
 80011ea:	d001      	beq.n	80011f0 <LoRaTransmit+0x174>
 80011ec:	2131      	movs	r1, #49	; 0x31
 80011ee:	e000      	b.n	80011f2 <LoRaTransmit+0x176>
 80011f0:	2130      	movs	r1, #48	; 0x30
 80011f2:	7ef8      	ldrb	r0, [r7, #27]
 80011f4:	f000 0020 	and.w	r0, r0, #32
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d001      	beq.n	8001200 <LoRaTransmit+0x184>
 80011fc:	2031      	movs	r0, #49	; 0x31
 80011fe:	e000      	b.n	8001202 <LoRaTransmit+0x186>
 8001200:	2030      	movs	r0, #48	; 0x30
 8001202:	7efc      	ldrb	r4, [r7, #27]
 8001204:	f004 0410 	and.w	r4, r4, #16
 8001208:	2c00      	cmp	r4, #0
 800120a:	d001      	beq.n	8001210 <LoRaTransmit+0x194>
 800120c:	2431      	movs	r4, #49	; 0x31
 800120e:	e000      	b.n	8001212 <LoRaTransmit+0x196>
 8001210:	2430      	movs	r4, #48	; 0x30
 8001212:	7efd      	ldrb	r5, [r7, #27]
 8001214:	f005 0508 	and.w	r5, r5, #8
 8001218:	2d00      	cmp	r5, #0
 800121a:	d001      	beq.n	8001220 <LoRaTransmit+0x1a4>
 800121c:	2531      	movs	r5, #49	; 0x31
 800121e:	e000      	b.n	8001222 <LoRaTransmit+0x1a6>
 8001220:	2530      	movs	r5, #48	; 0x30
 8001222:	7efe      	ldrb	r6, [r7, #27]
 8001224:	f006 0604 	and.w	r6, r6, #4
 8001228:	2e00      	cmp	r6, #0
 800122a:	d001      	beq.n	8001230 <LoRaTransmit+0x1b4>
 800122c:	2631      	movs	r6, #49	; 0x31
 800122e:	e000      	b.n	8001232 <LoRaTransmit+0x1b6>
 8001230:	2630      	movs	r6, #48	; 0x30
 8001232:	f897 c01b 	ldrb.w	ip, [r7, #27]
 8001236:	f00c 0c02 	and.w	ip, ip, #2
 800123a:	f1bc 0f00 	cmp.w	ip, #0
 800123e:	d002      	beq.n	8001246 <LoRaTransmit+0x1ca>
 8001240:	2331      	movs	r3, #49	; 0x31
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	e001      	b.n	800124a <LoRaTransmit+0x1ce>
 8001246:	2330      	movs	r3, #48	; 0x30
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	f897 c01b 	ldrb.w	ip, [r7, #27]
 800124e:	f00c 0c01 	and.w	ip, ip, #1
 8001252:	f1bc 0f00 	cmp.w	ip, #0
 8001256:	d001      	beq.n	800125c <LoRaTransmit+0x1e0>
 8001258:	2331      	movs	r3, #49	; 0x31
 800125a:	e000      	b.n	800125e <LoRaTransmit+0x1e2>
 800125c:	2330      	movs	r3, #48	; 0x30
 800125e:	930c      	str	r3, [sp, #48]	; 0x30
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	930b      	str	r3, [sp, #44]	; 0x2c
 8001264:	960a      	str	r6, [sp, #40]	; 0x28
 8001266:	9509      	str	r5, [sp, #36]	; 0x24
 8001268:	9408      	str	r4, [sp, #32]
 800126a:	9007      	str	r0, [sp, #28]
 800126c:	9106      	str	r1, [sp, #24]
 800126e:	9205      	str	r2, [sp, #20]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	9304      	str	r3, [sp, #16]
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <LoRaTransmit+0x2b0>)
 8001276:	9303      	str	r3, [sp, #12]
 8001278:	f240 639b 	movw	r3, #1691	; 0x69b
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <LoRaTransmit+0x29c>)
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <LoRaTransmit+0x2a0>)
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4673      	mov	r3, lr
 8001288:	4a25      	ldr	r2, [pc, #148]	; (8001320 <LoRaTransmit+0x2a4>)
 800128a:	4924      	ldr	r1, [pc, #144]	; (800131c <LoRaTransmit+0x2a0>)
 800128c:	2005      	movs	r0, #5
 800128e:	f000 ffd3 	bl	8002238 <stm_log_write>
    vSpi1Write(RegFifo, *(data + i));
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4619      	mov	r1, r3
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fb3f 	bl	8000920 <vSpi1Write>
  for (size_t i = 0u; i < PAYLOAD_LENGTH; i++)
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	f67f af71 	bls.w	8001192 <LoRaTransmit+0x116>
  }
  /* MODE REQUEST TX */
  vModeInit(TX_MODE);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f7ff fca9 	bl	8000c08 <vModeInit>
  // LORA_GET_REGISTER(RegOpMode);
  /* Init Module Lora into TX Mode */
  u32 startTick = HAL_GetTick();
 80012b6:	f001 fa01 	bl	80026bc <HAL_GetTick>
 80012ba:	61f8      	str	r0, [r7, #28]
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 80012bc:	e017      	b.n	80012ee <LoRaTransmit+0x272>
  {
    // STM_LOGV("Transmit", "Wait for TX_DONE ...\r\n");
    if (HAL_GetTick() - startTick >= timeoutMs)
 80012be:	f001 f9fd 	bl	80026bc <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d80f      	bhi.n	80012ee <LoRaTransmit+0x272>
    {
      STM_LOGE("TransmitErr", "TX_TIMEOUT");
 80012ce:	f001 f9f5 	bl	80026bc <HAL_GetTick>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 80012d8:	9202      	str	r2, [sp, #8]
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <LoRaTransmit+0x29c>)
 80012dc:	9201      	str	r2, [sp, #4]
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <LoRaTransmit+0x2b4>)
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <LoRaTransmit+0x2b8>)
 80012e4:	4912      	ldr	r1, [pc, #72]	; (8001330 <LoRaTransmit+0x2b4>)
 80012e6:	2001      	movs	r0, #1
 80012e8:	f000 ffa6 	bl	8002238 <stm_log_write>
      break;
 80012ec:	e008      	b.n	8001300 <LoRaTransmit+0x284>
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 80012ee:	2012      	movs	r0, #18
 80012f0:	f7ff fb7e 	bl	80009f0 <ucSpi1Read>
 80012f4:	4603      	mov	r3, r0
 80012f6:	10db      	asrs	r3, r3, #3
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0de      	beq.n	80012be <LoRaTransmit+0x242>
    }
  }
  /* Clear TxDone Flag */
  vSpi1Write(RegIrqFlags, TX_DONE_Msk);
 8001300:	2108      	movs	r1, #8
 8001302:	2012      	movs	r0, #18
 8001304:	f7ff fb0c 	bl	8000920 <vSpi1Write>
  // LORA_GET_REGISTER(RegIrqFlags);
}
 8001308:	bf00      	nop
 800130a:	372c      	adds	r7, #44	; 0x2c
 800130c:	46bd      	mov	sp, r7
 800130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001310:	200000a8 	.word	0x200000a8
 8001314:	08006f84 	.word	0x08006f84
 8001318:	080076f0 	.word	0x080076f0
 800131c:	08006f7c 	.word	0x08006f7c
 8001320:	08006f40 	.word	0x08006f40
 8001324:	08006fd0 	.word	0x08006fd0
 8001328:	08006f9c 	.word	0x08006f9c
 800132c:	08006fdc 	.word	0x08006fdc
 8001330:	0800701c 	.word	0x0800701c
 8001334:	08006fec 	.word	0x08006fec

08001338 <vGateWayTransmitRequest>:
    vModeInit(RXCONTINUOUS_MODE);
  }
}

void vGateWayTransmitRequest(u32 Timeout)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af04      	add	r7, sp, #16
 800133e:	6078      	str	r0, [r7, #4]
  u8 ucTransmitRepeat = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
  do
  {
    if(ucTransmitRepeat <= 3)
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d81c      	bhi.n	8001384 <vGateWayTransmitRequest+0x4c>
    {
      printf("\r\n");
 800134a:	481f      	ldr	r0, [pc, #124]	; (80013c8 <vGateWayTransmitRequest+0x90>)
 800134c:	f004 fd34 	bl	8005db8 <puts>
      LoRaTransmit(mInfo.pTxData , PAYLOAD_LENGTH, 5000);
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <vGateWayTransmitRequest+0x94>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f241 3288 	movw	r2, #5000	; 0x1388
 8001358:	210a      	movs	r1, #10
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe8e 	bl	800107c <LoRaTransmit>

      /* Change Lora into Receive continous mode */
      vModeInit(STDBY_MODE);
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff fc51 	bl	8000c08 <vModeInit>
      vSpi1Write(RegFifoAddrPtr, FIFO_RX_BASE_ADDR);
 8001366:	2100      	movs	r1, #0
 8001368:	200d      	movs	r0, #13
 800136a:	f7ff fad9 	bl	8000920 <vSpi1Write>
      vModeInit(RXCONTINUOUS_MODE);
 800136e:	2005      	movs	r0, #5
 8001370:	f7ff fc4a 	bl	8000c08 <vModeInit>
      ucTransmitRepeat++;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	3301      	adds	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(1000);
 800137a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137e:	f001 f9a7 	bl	80026d0 <HAL_Delay>
 8001382:	e015      	b.n	80013b0 <vGateWayTransmitRequest+0x78>
    }
    else
    {
      STM_LOGE("GateWay", "Node Address = %d not response", *(mInfo.pTxData + INDEX_DEST_ID));
 8001384:	f001 f99a 	bl	80026bc <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <vGateWayTransmitRequest+0x94>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	9303      	str	r3, [sp, #12]
 8001394:	f240 7344 	movw	r3, #1860	; 0x744
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <vGateWayTransmitRequest+0x98>)
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <vGateWayTransmitRequest+0x9c>)
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4613      	mov	r3, r2
 80013a4:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <vGateWayTransmitRequest+0xa0>)
 80013a6:	490b      	ldr	r1, [pc, #44]	; (80013d4 <vGateWayTransmitRequest+0x9c>)
 80013a8:	2001      	movs	r0, #1
 80013aa:	f000 ff45 	bl	8002238 <stm_log_write>
      break;
 80013ae:	e007      	b.n	80013c0 <vGateWayTransmitRequest+0x88>
    }
  } while (!mInfo.isRxDone);
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <vGateWayTransmitRequest+0x94>)
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1c2      	bne.n	8001344 <vGateWayTransmitRequest+0xc>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	08007158 	.word	0x08007158
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	08007700 	.word	0x08007700
 80013d4:	080071a0 	.word	0x080071a0
 80013d8:	0800715c 	.word	0x0800715c

080013dc <vReceiveFifoData>:

void vReceiveFifoData(void)
{
 80013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013de:	b093      	sub	sp, #76	; 0x4c
 80013e0:	af0e      	add	r7, sp, #56	; 0x38
  vSpi1Write(RegFifoAddrPtr, ucSpi1Read(RegFifoRxCurrentAddr));
 80013e2:	2010      	movs	r0, #16
 80013e4:	f7ff fb04 	bl	80009f0 <ucSpi1Read>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4619      	mov	r1, r3
 80013ec:	200d      	movs	r0, #13
 80013ee:	f7ff fa97 	bl	8000920 <vSpi1Write>
  for (size_t i = 0u; i < ucSpi1Read(RegRxNbBytes); i++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e08c      	b.n	8001512 <vReceiveFifoData+0x136>
  {
    LORA_GET_REGISTER(RegFifoAddrPtr);
 80013f8:	200d      	movs	r0, #13
 80013fa:	f7ff faf9 	bl	80009f0 <ucSpi1Read>
 80013fe:	4603      	mov	r3, r0
 8001400:	72fb      	strb	r3, [r7, #11]
 8001402:	f001 f95b 	bl	80026bc <HAL_GetTick>
 8001406:	4686      	mov	lr, r0
 8001408:	7afb      	ldrb	r3, [r7, #11]
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001410:	2a00      	cmp	r2, #0
 8001412:	da01      	bge.n	8001418 <vReceiveFifoData+0x3c>
 8001414:	2231      	movs	r2, #49	; 0x31
 8001416:	e000      	b.n	800141a <vReceiveFifoData+0x3e>
 8001418:	2230      	movs	r2, #48	; 0x30
 800141a:	7af9      	ldrb	r1, [r7, #11]
 800141c:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8001420:	2900      	cmp	r1, #0
 8001422:	d001      	beq.n	8001428 <vReceiveFifoData+0x4c>
 8001424:	2131      	movs	r1, #49	; 0x31
 8001426:	e000      	b.n	800142a <vReceiveFifoData+0x4e>
 8001428:	2130      	movs	r1, #48	; 0x30
 800142a:	7af8      	ldrb	r0, [r7, #11]
 800142c:	f000 0020 	and.w	r0, r0, #32
 8001430:	2800      	cmp	r0, #0
 8001432:	d001      	beq.n	8001438 <vReceiveFifoData+0x5c>
 8001434:	2031      	movs	r0, #49	; 0x31
 8001436:	e000      	b.n	800143a <vReceiveFifoData+0x5e>
 8001438:	2030      	movs	r0, #48	; 0x30
 800143a:	7afc      	ldrb	r4, [r7, #11]
 800143c:	f004 0410 	and.w	r4, r4, #16
 8001440:	2c00      	cmp	r4, #0
 8001442:	d001      	beq.n	8001448 <vReceiveFifoData+0x6c>
 8001444:	2431      	movs	r4, #49	; 0x31
 8001446:	e000      	b.n	800144a <vReceiveFifoData+0x6e>
 8001448:	2430      	movs	r4, #48	; 0x30
 800144a:	7afd      	ldrb	r5, [r7, #11]
 800144c:	f005 0508 	and.w	r5, r5, #8
 8001450:	2d00      	cmp	r5, #0
 8001452:	d001      	beq.n	8001458 <vReceiveFifoData+0x7c>
 8001454:	2531      	movs	r5, #49	; 0x31
 8001456:	e000      	b.n	800145a <vReceiveFifoData+0x7e>
 8001458:	2530      	movs	r5, #48	; 0x30
 800145a:	7afe      	ldrb	r6, [r7, #11]
 800145c:	f006 0604 	and.w	r6, r6, #4
 8001460:	2e00      	cmp	r6, #0
 8001462:	d001      	beq.n	8001468 <vReceiveFifoData+0x8c>
 8001464:	2631      	movs	r6, #49	; 0x31
 8001466:	e000      	b.n	800146a <vReceiveFifoData+0x8e>
 8001468:	2630      	movs	r6, #48	; 0x30
 800146a:	f897 c00b 	ldrb.w	ip, [r7, #11]
 800146e:	f00c 0c02 	and.w	ip, ip, #2
 8001472:	f1bc 0f00 	cmp.w	ip, #0
 8001476:	d002      	beq.n	800147e <vReceiveFifoData+0xa2>
 8001478:	2331      	movs	r3, #49	; 0x31
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	e001      	b.n	8001482 <vReceiveFifoData+0xa6>
 800147e:	2330      	movs	r3, #48	; 0x30
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	f897 c00b 	ldrb.w	ip, [r7, #11]
 8001486:	f00c 0c01 	and.w	ip, ip, #1
 800148a:	f1bc 0f00 	cmp.w	ip, #0
 800148e:	d001      	beq.n	8001494 <vReceiveFifoData+0xb8>
 8001490:	2331      	movs	r3, #49	; 0x31
 8001492:	e000      	b.n	8001496 <vReceiveFifoData+0xba>
 8001494:	2330      	movs	r3, #48	; 0x30
 8001496:	930c      	str	r3, [sp, #48]	; 0x30
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	930b      	str	r3, [sp, #44]	; 0x2c
 800149c:	960a      	str	r6, [sp, #40]	; 0x28
 800149e:	9509      	str	r5, [sp, #36]	; 0x24
 80014a0:	9408      	str	r4, [sp, #32]
 80014a2:	9007      	str	r0, [sp, #28]
 80014a4:	9106      	str	r1, [sp, #24]
 80014a6:	9205      	str	r2, [sp, #20]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	9304      	str	r3, [sp, #16]
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <vReceiveFifoData+0x158>)
 80014ae:	9303      	str	r3, [sp, #12]
 80014b0:	f240 734f 	movw	r3, #1871	; 0x74f
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <vReceiveFifoData+0x15c>)
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <vReceiveFifoData+0x160>)
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	4673      	mov	r3, lr
 80014c0:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <vReceiveFifoData+0x164>)
 80014c2:	491e      	ldr	r1, [pc, #120]	; (800153c <vReceiveFifoData+0x160>)
 80014c4:	2005      	movs	r0, #5
 80014c6:	f000 feb7 	bl	8002238 <stm_log_write>
    *(mInfo.pRxData + i) = ucSpi1Read(RegFifo);
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <vReceiveFifoData+0x168>)
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	18d4      	adds	r4, r2, r3
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fa8c 	bl	80009f0 <ucSpi1Read>
 80014d8:	4603      	mov	r3, r0
 80014da:	7023      	strb	r3, [r4, #0]
    STM_LOGV("Receive", "data receive[%d]: 0x%x", i, *(mInfo.pRxData + i));
 80014dc:	f001 f8ee 	bl	80026bc <HAL_GetTick>
 80014e0:	4601      	mov	r1, r0
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <vReceiveFifoData+0x168>)
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	9304      	str	r3, [sp, #16]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	9303      	str	r3, [sp, #12]
 80014f2:	f240 7351 	movw	r3, #1873	; 0x751
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <vReceiveFifoData+0x15c>)
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <vReceiveFifoData+0x16c>)
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	460b      	mov	r3, r1
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <vReceiveFifoData+0x170>)
 8001504:	4910      	ldr	r1, [pc, #64]	; (8001548 <vReceiveFifoData+0x16c>)
 8001506:	2005      	movs	r0, #5
 8001508:	f000 fe96 	bl	8002238 <stm_log_write>
  for (size_t i = 0u; i < ucSpi1Read(RegRxNbBytes); i++)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	2013      	movs	r0, #19
 8001514:	f7ff fa6c 	bl	80009f0 <ucSpi1Read>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4293      	cmp	r3, r2
 8001520:	f4ff af6a 	bcc.w	80013f8 <vReceiveFifoData+0x1c>
  }

    /* CLEAR RX_DONE FLAG */
  vSpi1Write(RegIrqFlags, RX_DONE_Msk | PAYLOAD_CRC_ERROR_Msk);
 8001524:	2160      	movs	r1, #96	; 0x60
 8001526:	2012      	movs	r0, #18
 8001528:	f7ff f9fa 	bl	8000920 <vSpi1Write>
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001534:	08006fdc 	.word	0x08006fdc
 8001538:	08007718 	.word	0x08007718
 800153c:	08006f7c 	.word	0x08006f7c
 8001540:	08006f40 	.word	0x08006f40
 8001544:	2000000c 	.word	0x2000000c
 8001548:	080071a8 	.word	0x080071a8
 800154c:	080070a8 	.word	0x080070a8

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	b093      	sub	sp, #76	; 0x4c
 8001554:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001556:	f001 f859 	bl	800260c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155a:	f000 fa1f 	bl	800199c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155e:	f7ff f92f 	bl	80007c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001562:	f7ff f877 	bl	8000654 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001566:	f000 fc4f 	bl	8001e08 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800156a:	f000 ff5d 	bl	8002428 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800156e:	f000 feb5 	bl	80022dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  STM_LOGD("MainInit", "Reset cause: {%s}", resetCauseGetName(resetCauseGet()));
 8001572:	f001 f8a3 	bl	80026bc <HAL_GetTick>
 8001576:	4604      	mov	r4, r0
 8001578:	f000 faaa 	bl	8001ad0 <resetCauseGet>
 800157c:	4603      	mov	r3, r0
 800157e:	4618      	mov	r0, r3
 8001580:	f000 faec 	bl	8001b5c <resetCauseGetName>
 8001584:	4603      	mov	r3, r0
 8001586:	9303      	str	r3, [sp, #12]
 8001588:	2384      	movs	r3, #132	; 0x84
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	4bb2      	ldr	r3, [pc, #712]	; (8001858 <main+0x308>)
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	4bb2      	ldr	r3, [pc, #712]	; (800185c <main+0x30c>)
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4623      	mov	r3, r4
 8001596:	4ab2      	ldr	r2, [pc, #712]	; (8001860 <main+0x310>)
 8001598:	49b0      	ldr	r1, [pc, #704]	; (800185c <main+0x30c>)
 800159a:	2004      	movs	r0, #4
 800159c:	f000 fe4c 	bl	8002238 <stm_log_write>
  STM_LOGD("MainInit", "Watchdog Init {%ums}", iwdgInit(&hiwdg, WATCHDOG_TIME));
 80015a0:	f001 f88c 	bl	80026bc <HAL_GetTick>
 80015a4:	4604      	mov	r4, r0
 80015a6:	f242 7110 	movw	r1, #10000	; 0x2710
 80015aa:	48ae      	ldr	r0, [pc, #696]	; (8001864 <main+0x314>)
 80015ac:	f000 fb24 	bl	8001bf8 <iwdgInit>
 80015b0:	4603      	mov	r3, r0
 80015b2:	9303      	str	r3, [sp, #12]
 80015b4:	2385      	movs	r3, #133	; 0x85
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	4ba7      	ldr	r3, [pc, #668]	; (8001858 <main+0x308>)
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	4ba7      	ldr	r3, [pc, #668]	; (800185c <main+0x30c>)
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4623      	mov	r3, r4
 80015c2:	4aa9      	ldr	r2, [pc, #676]	; (8001868 <main+0x318>)
 80015c4:	49a5      	ldr	r1, [pc, #660]	; (800185c <main+0x30c>)
 80015c6:	2004      	movs	r0, #4
 80015c8:	f000 fe36 	bl	8002238 <stm_log_write>
  vLoraInit();
 80015cc:	f7ff fd04 	bl	8000fd8 <vLoraInit>
  STM_LOGD("MainInit", "------START APPLICATION------");
 80015d0:	f001 f874 	bl	80026bc <HAL_GetTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2287      	movs	r2, #135	; 0x87
 80015d8:	9202      	str	r2, [sp, #8]
 80015da:	4a9f      	ldr	r2, [pc, #636]	; (8001858 <main+0x308>)
 80015dc:	9201      	str	r2, [sp, #4]
 80015de:	4a9f      	ldr	r2, [pc, #636]	; (800185c <main+0x30c>)
 80015e0:	9200      	str	r2, [sp, #0]
 80015e2:	4aa2      	ldr	r2, [pc, #648]	; (800186c <main+0x31c>)
 80015e4:	499d      	ldr	r1, [pc, #628]	; (800185c <main+0x30c>)
 80015e6:	2004      	movs	r0, #4
 80015e8:	f000 fe26 	bl	8002238 <stm_log_write>
  LORA_GET_REGISTER(RegSyncWord);
 80015ec:	2039      	movs	r0, #57	; 0x39
 80015ee:	f7ff f9ff 	bl	80009f0 <ucSpi1Read>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	f001 f861 	bl	80026bc <HAL_GetTick>
 80015fa:	4686      	mov	lr, r0
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001604:	2a00      	cmp	r2, #0
 8001606:	da01      	bge.n	800160c <main+0xbc>
 8001608:	2231      	movs	r2, #49	; 0x31
 800160a:	e000      	b.n	800160e <main+0xbe>
 800160c:	2230      	movs	r2, #48	; 0x30
 800160e:	7bf9      	ldrb	r1, [r7, #15]
 8001610:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8001614:	2900      	cmp	r1, #0
 8001616:	d001      	beq.n	800161c <main+0xcc>
 8001618:	2131      	movs	r1, #49	; 0x31
 800161a:	e000      	b.n	800161e <main+0xce>
 800161c:	2130      	movs	r1, #48	; 0x30
 800161e:	7bf8      	ldrb	r0, [r7, #15]
 8001620:	f000 0020 	and.w	r0, r0, #32
 8001624:	2800      	cmp	r0, #0
 8001626:	d001      	beq.n	800162c <main+0xdc>
 8001628:	2031      	movs	r0, #49	; 0x31
 800162a:	e000      	b.n	800162e <main+0xde>
 800162c:	2030      	movs	r0, #48	; 0x30
 800162e:	7bfc      	ldrb	r4, [r7, #15]
 8001630:	f004 0410 	and.w	r4, r4, #16
 8001634:	2c00      	cmp	r4, #0
 8001636:	d001      	beq.n	800163c <main+0xec>
 8001638:	2431      	movs	r4, #49	; 0x31
 800163a:	e000      	b.n	800163e <main+0xee>
 800163c:	2430      	movs	r4, #48	; 0x30
 800163e:	7bfd      	ldrb	r5, [r7, #15]
 8001640:	f005 0508 	and.w	r5, r5, #8
 8001644:	2d00      	cmp	r5, #0
 8001646:	d001      	beq.n	800164c <main+0xfc>
 8001648:	2531      	movs	r5, #49	; 0x31
 800164a:	e000      	b.n	800164e <main+0xfe>
 800164c:	2530      	movs	r5, #48	; 0x30
 800164e:	7bfe      	ldrb	r6, [r7, #15]
 8001650:	f006 0604 	and.w	r6, r6, #4
 8001654:	2e00      	cmp	r6, #0
 8001656:	d001      	beq.n	800165c <main+0x10c>
 8001658:	2631      	movs	r6, #49	; 0x31
 800165a:	e000      	b.n	800165e <main+0x10e>
 800165c:	2630      	movs	r6, #48	; 0x30
 800165e:	f897 c00f 	ldrb.w	ip, [r7, #15]
 8001662:	f00c 0c02 	and.w	ip, ip, #2
 8001666:	f1bc 0f00 	cmp.w	ip, #0
 800166a:	d002      	beq.n	8001672 <main+0x122>
 800166c:	2331      	movs	r3, #49	; 0x31
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	e001      	b.n	8001676 <main+0x126>
 8001672:	2330      	movs	r3, #48	; 0x30
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	f897 c00f 	ldrb.w	ip, [r7, #15]
 800167a:	f00c 0c01 	and.w	ip, ip, #1
 800167e:	f1bc 0f00 	cmp.w	ip, #0
 8001682:	d001      	beq.n	8001688 <main+0x138>
 8001684:	2331      	movs	r3, #49	; 0x31
 8001686:	e000      	b.n	800168a <main+0x13a>
 8001688:	2330      	movs	r3, #48	; 0x30
 800168a:	930c      	str	r3, [sp, #48]	; 0x30
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001690:	960a      	str	r6, [sp, #40]	; 0x28
 8001692:	9509      	str	r5, [sp, #36]	; 0x24
 8001694:	9408      	str	r4, [sp, #32]
 8001696:	9007      	str	r0, [sp, #28]
 8001698:	9106      	str	r1, [sp, #24]
 800169a:	9205      	str	r2, [sp, #20]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	9304      	str	r3, [sp, #16]
 80016a0:	4b73      	ldr	r3, [pc, #460]	; (8001870 <main+0x320>)
 80016a2:	9303      	str	r3, [sp, #12]
 80016a4:	2388      	movs	r3, #136	; 0x88
 80016a6:	9302      	str	r3, [sp, #8]
 80016a8:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <main+0x308>)
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	4b71      	ldr	r3, [pc, #452]	; (8001874 <main+0x324>)
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4673      	mov	r3, lr
 80016b2:	4a71      	ldr	r2, [pc, #452]	; (8001878 <main+0x328>)
 80016b4:	496f      	ldr	r1, [pc, #444]	; (8001874 <main+0x324>)
 80016b6:	2005      	movs	r0, #5
 80016b8:	f000 fdbe 	bl	8002238 <stm_log_write>
  LORA_GET_REGISTER(RegPayloadLength);
 80016bc:	2022      	movs	r0, #34	; 0x22
 80016be:	f7ff f997 	bl	80009f0 <ucSpi1Read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73bb      	strb	r3, [r7, #14]
 80016c6:	f000 fff9 	bl	80026bc <HAL_GetTick>
 80016ca:	4686      	mov	lr, r0
 80016cc:	7bbb      	ldrb	r3, [r7, #14]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80016d4:	2a00      	cmp	r2, #0
 80016d6:	da01      	bge.n	80016dc <main+0x18c>
 80016d8:	2231      	movs	r2, #49	; 0x31
 80016da:	e000      	b.n	80016de <main+0x18e>
 80016dc:	2230      	movs	r2, #48	; 0x30
 80016de:	7bb9      	ldrb	r1, [r7, #14]
 80016e0:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80016e4:	2900      	cmp	r1, #0
 80016e6:	d001      	beq.n	80016ec <main+0x19c>
 80016e8:	2131      	movs	r1, #49	; 0x31
 80016ea:	e000      	b.n	80016ee <main+0x19e>
 80016ec:	2130      	movs	r1, #48	; 0x30
 80016ee:	7bb8      	ldrb	r0, [r7, #14]
 80016f0:	f000 0020 	and.w	r0, r0, #32
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d001      	beq.n	80016fc <main+0x1ac>
 80016f8:	2031      	movs	r0, #49	; 0x31
 80016fa:	e000      	b.n	80016fe <main+0x1ae>
 80016fc:	2030      	movs	r0, #48	; 0x30
 80016fe:	7bbc      	ldrb	r4, [r7, #14]
 8001700:	f004 0410 	and.w	r4, r4, #16
 8001704:	2c00      	cmp	r4, #0
 8001706:	d001      	beq.n	800170c <main+0x1bc>
 8001708:	2431      	movs	r4, #49	; 0x31
 800170a:	e000      	b.n	800170e <main+0x1be>
 800170c:	2430      	movs	r4, #48	; 0x30
 800170e:	7bbd      	ldrb	r5, [r7, #14]
 8001710:	f005 0508 	and.w	r5, r5, #8
 8001714:	2d00      	cmp	r5, #0
 8001716:	d001      	beq.n	800171c <main+0x1cc>
 8001718:	2531      	movs	r5, #49	; 0x31
 800171a:	e000      	b.n	800171e <main+0x1ce>
 800171c:	2530      	movs	r5, #48	; 0x30
 800171e:	7bbe      	ldrb	r6, [r7, #14]
 8001720:	f006 0604 	and.w	r6, r6, #4
 8001724:	2e00      	cmp	r6, #0
 8001726:	d001      	beq.n	800172c <main+0x1dc>
 8001728:	2631      	movs	r6, #49	; 0x31
 800172a:	e000      	b.n	800172e <main+0x1de>
 800172c:	2630      	movs	r6, #48	; 0x30
 800172e:	f897 c00e 	ldrb.w	ip, [r7, #14]
 8001732:	f00c 0c02 	and.w	ip, ip, #2
 8001736:	f1bc 0f00 	cmp.w	ip, #0
 800173a:	d002      	beq.n	8001742 <main+0x1f2>
 800173c:	2331      	movs	r3, #49	; 0x31
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	e001      	b.n	8001746 <main+0x1f6>
 8001742:	2330      	movs	r3, #48	; 0x30
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	f897 c00e 	ldrb.w	ip, [r7, #14]
 800174a:	f00c 0c01 	and.w	ip, ip, #1
 800174e:	f1bc 0f00 	cmp.w	ip, #0
 8001752:	d001      	beq.n	8001758 <main+0x208>
 8001754:	2331      	movs	r3, #49	; 0x31
 8001756:	e000      	b.n	800175a <main+0x20a>
 8001758:	2330      	movs	r3, #48	; 0x30
 800175a:	930c      	str	r3, [sp, #48]	; 0x30
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001760:	960a      	str	r6, [sp, #40]	; 0x28
 8001762:	9509      	str	r5, [sp, #36]	; 0x24
 8001764:	9408      	str	r4, [sp, #32]
 8001766:	9007      	str	r0, [sp, #28]
 8001768:	9106      	str	r1, [sp, #24]
 800176a:	9205      	str	r2, [sp, #20]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	9304      	str	r3, [sp, #16]
 8001770:	4b42      	ldr	r3, [pc, #264]	; (800187c <main+0x32c>)
 8001772:	9303      	str	r3, [sp, #12]
 8001774:	2389      	movs	r3, #137	; 0x89
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	4b37      	ldr	r3, [pc, #220]	; (8001858 <main+0x308>)
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <main+0x324>)
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	4673      	mov	r3, lr
 8001782:	4a3d      	ldr	r2, [pc, #244]	; (8001878 <main+0x328>)
 8001784:	493b      	ldr	r1, [pc, #236]	; (8001874 <main+0x324>)
 8001786:	2005      	movs	r0, #5
 8001788:	f000 fd56 	bl	8002238 <stm_log_write>
  while (1)
  {

    /* Transmit data and init Lora into receive continous mode */
    #if GATEWAY
      if(isTransmit == true)  /* Check Button: Pin PA2 */
 800178c:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <main+0x330>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d027      	beq.n	80017e4 <main+0x294>
      {
        isTransmit = false;
 8001794:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <main+0x330>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
        ucSendData[INDEX_SEQUENCE_ID] = GATEWAY_ADDRESS;
 800179a:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <main+0x334>)
 800179c:	22ff      	movs	r2, #255	; 0xff
 800179e:	711a      	strb	r2, [r3, #4]
        ucSendData[INDEX_DEST_ID] = THIS_NODE_ADDRESS;
 80017a0:	4b38      	ldr	r3, [pc, #224]	; (8001884 <main+0x334>)
 80017a2:	2213      	movs	r2, #19
 80017a4:	705a      	strb	r2, [r3, #1]
        ucSendData[INDEX_MSG_TYPE] = MSG_TYPE_REQUEST;
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <main+0x334>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	709a      	strb	r2, [r3, #2]
        ucSendData[INDEX_MSG_STATUS] = MSG_STS_NONE;
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <main+0x334>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	70da      	strb	r2, [r3, #3]
        ucSendData[INDEX_DATA_LOCATION] = LOCATION_GIAI_PHONG_1;
 80017b2:	4b34      	ldr	r3, [pc, #208]	; (8001884 <main+0x334>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	715a      	strb	r2, [r3, #5]
        ucSendData[INDEX_DATA_RELAY_STATE] = RELAY_STATE_ON;
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <main+0x334>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	719a      	strb	r2, [r3, #6]
        ucSendData[INDEX_DATA_ERR_CODE] = ERR_CODE_NONE;
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <main+0x334>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	71da      	strb	r2, [r3, #7]
        ucSendData[INDEX_DATA_TIME_ALIVE] = 0;
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <main+0x334>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	721a      	strb	r2, [r3, #8]
        ucSendData[INDEX_UNDEFINED] = 0;
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <main+0x334>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	725a      	strb	r2, [r3, #9]

        vGateWayTransmitRequest(5000);
 80017d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80017d4:	f7ff fdb0 	bl	8001338 <vGateWayTransmitRequest>
        /* Increase Sequence ID*/
        ucSendData[INDEX_SEQUENCE_ID]++;
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <main+0x334>)
 80017da:	791b      	ldrb	r3, [r3, #4]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <main+0x334>)
 80017e2:	711a      	strb	r2, [r3, #4]
      }
    #endif

    /* Receive Data */
    if (mInfo.isRxDone) /* Check data come from Sender */
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <main+0x338>)
 80017e6:	78db      	ldrb	r3, [r3, #3]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80be 	beq.w	800196a <main+0x41a>
    {
      mInfo.isRxDone = false;
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <main+0x338>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	70da      	strb	r2, [r3, #3]
      if ((ucSpi1Read(RegIrqFlags) & RX_DONE_Msk) >> RX_DONE_MskPos)
 80017f4:	2012      	movs	r0, #18
 80017f6:	f7ff f8fb 	bl	80009f0 <ucSpi1Read>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80b2 	beq.w	800196a <main+0x41a>
      {
        /* PAYLOAD_CRC CHECK */
        LORA_GET_REGISTER(RegFifoRxCurrentAddr);  /* Check register */
 8001806:	2010      	movs	r0, #16
 8001808:	f7ff f8f2 	bl	80009f0 <ucSpi1Read>
 800180c:	4603      	mov	r3, r0
 800180e:	737b      	strb	r3, [r7, #13]
 8001810:	f000 ff54 	bl	80026bc <HAL_GetTick>
 8001814:	4686      	mov	lr, r0
 8001816:	7b7b      	ldrb	r3, [r7, #13]
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800181e:	2a00      	cmp	r2, #0
 8001820:	da01      	bge.n	8001826 <main+0x2d6>
 8001822:	2231      	movs	r2, #49	; 0x31
 8001824:	e000      	b.n	8001828 <main+0x2d8>
 8001826:	2230      	movs	r2, #48	; 0x30
 8001828:	7b79      	ldrb	r1, [r7, #13]
 800182a:	f001 0140 	and.w	r1, r1, #64	; 0x40
 800182e:	2900      	cmp	r1, #0
 8001830:	d001      	beq.n	8001836 <main+0x2e6>
 8001832:	2131      	movs	r1, #49	; 0x31
 8001834:	e000      	b.n	8001838 <main+0x2e8>
 8001836:	2130      	movs	r1, #48	; 0x30
 8001838:	7b78      	ldrb	r0, [r7, #13]
 800183a:	f000 0020 	and.w	r0, r0, #32
 800183e:	2800      	cmp	r0, #0
 8001840:	d001      	beq.n	8001846 <main+0x2f6>
 8001842:	2031      	movs	r0, #49	; 0x31
 8001844:	e000      	b.n	8001848 <main+0x2f8>
 8001846:	2030      	movs	r0, #48	; 0x30
 8001848:	7b7c      	ldrb	r4, [r7, #13]
 800184a:	f004 0410 	and.w	r4, r4, #16
 800184e:	2c00      	cmp	r4, #0
 8001850:	d01c      	beq.n	800188c <main+0x33c>
 8001852:	2431      	movs	r4, #49	; 0x31
 8001854:	e01b      	b.n	800188e <main+0x33e>
 8001856:	bf00      	nop
 8001858:	0800772c 	.word	0x0800772c
 800185c:	080071e8 	.word	0x080071e8
 8001860:	080071b0 	.word	0x080071b0
 8001864:	200000f8 	.word	0x200000f8
 8001868:	080071f4 	.word	0x080071f4
 800186c:	0800722c 	.word	0x0800722c
 8001870:	080072b4 	.word	0x080072b4
 8001874:	080072ac 	.word	0x080072ac
 8001878:	08007270 	.word	0x08007270
 800187c:	080072c0 	.word	0x080072c0
 8001880:	200000b6 	.word	0x200000b6
 8001884:	20000000 	.word	0x20000000
 8001888:	2000000c 	.word	0x2000000c
 800188c:	2430      	movs	r4, #48	; 0x30
 800188e:	7b7d      	ldrb	r5, [r7, #13]
 8001890:	f005 0508 	and.w	r5, r5, #8
 8001894:	2d00      	cmp	r5, #0
 8001896:	d001      	beq.n	800189c <main+0x34c>
 8001898:	2531      	movs	r5, #49	; 0x31
 800189a:	e000      	b.n	800189e <main+0x34e>
 800189c:	2530      	movs	r5, #48	; 0x30
 800189e:	7b7e      	ldrb	r6, [r7, #13]
 80018a0:	f006 0604 	and.w	r6, r6, #4
 80018a4:	2e00      	cmp	r6, #0
 80018a6:	d001      	beq.n	80018ac <main+0x35c>
 80018a8:	2631      	movs	r6, #49	; 0x31
 80018aa:	e000      	b.n	80018ae <main+0x35e>
 80018ac:	2630      	movs	r6, #48	; 0x30
 80018ae:	f897 c00d 	ldrb.w	ip, [r7, #13]
 80018b2:	f00c 0c02 	and.w	ip, ip, #2
 80018b6:	f1bc 0f00 	cmp.w	ip, #0
 80018ba:	d002      	beq.n	80018c2 <main+0x372>
 80018bc:	2331      	movs	r3, #49	; 0x31
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	e001      	b.n	80018c6 <main+0x376>
 80018c2:	2330      	movs	r3, #48	; 0x30
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	f897 c00d 	ldrb.w	ip, [r7, #13]
 80018ca:	f00c 0c01 	and.w	ip, ip, #1
 80018ce:	f1bc 0f00 	cmp.w	ip, #0
 80018d2:	d001      	beq.n	80018d8 <main+0x388>
 80018d4:	2331      	movs	r3, #49	; 0x31
 80018d6:	e000      	b.n	80018da <main+0x38a>
 80018d8:	2330      	movs	r3, #48	; 0x30
 80018da:	930c      	str	r3, [sp, #48]	; 0x30
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	930b      	str	r3, [sp, #44]	; 0x2c
 80018e0:	960a      	str	r6, [sp, #40]	; 0x28
 80018e2:	9509      	str	r5, [sp, #36]	; 0x24
 80018e4:	9408      	str	r4, [sp, #32]
 80018e6:	9007      	str	r0, [sp, #28]
 80018e8:	9106      	str	r1, [sp, #24]
 80018ea:	9205      	str	r2, [sp, #20]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	9304      	str	r3, [sp, #16]
 80018f0:	4b20      	ldr	r3, [pc, #128]	; (8001974 <main+0x424>)
 80018f2:	9303      	str	r3, [sp, #12]
 80018f4:	23b7      	movs	r3, #183	; 0xb7
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <main+0x428>)
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <main+0x42c>)
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4673      	mov	r3, lr
 8001902:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <main+0x430>)
 8001904:	491d      	ldr	r1, [pc, #116]	; (800197c <main+0x42c>)
 8001906:	2005      	movs	r0, #5
 8001908:	f000 fc96 	bl	8002238 <stm_log_write>

        u8 temp = ucSpi1Read(RegIrqFlags);
 800190c:	2012      	movs	r0, #18
 800190e:	f7ff f86f 	bl	80009f0 <ucSpi1Read>
 8001912:	4603      	mov	r3, r0
 8001914:	733b      	strb	r3, [r7, #12]
        if ((temp & PAYLOAD_CRC_ERROR_Msk) >> PAYLOAD_CRC_ERROR_MskPos == 1)
 8001916:	7b3b      	ldrb	r3, [r7, #12]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00e      	beq.n	800193e <main+0x3ee>
        {
          STM_LOGE("ReceiveErr", "Payload CRC Failed");
 8001920:	f000 fecc 	bl	80026bc <HAL_GetTick>
 8001924:	4603      	mov	r3, r0
 8001926:	22bc      	movs	r2, #188	; 0xbc
 8001928:	9202      	str	r2, [sp, #8]
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <main+0x428>)
 800192c:	9201      	str	r2, [sp, #4]
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <main+0x434>)
 8001930:	9200      	str	r2, [sp, #0]
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <main+0x438>)
 8001934:	4913      	ldr	r1, [pc, #76]	; (8001984 <main+0x434>)
 8001936:	2001      	movs	r0, #1
 8001938:	f000 fc7e 	bl	8002238 <stm_log_write>
 800193c:	e015      	b.n	800196a <main+0x41a>
        }
        else
        {
          vReceiveFifoData();
 800193e:	f7ff fd4d 	bl	80013dc <vReceiveFifoData>

          #if GATEWAY /* Gateway */
            if(*(mInfo.pRxData + INDEX_DEST_ID) == GATEWAY_ADDRESS)
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <main+0x43c>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	3301      	adds	r3, #1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2bff      	cmp	r3, #255	; 0xff
 800194c:	d10d      	bne.n	800196a <main+0x41a>
            {
              STM_LOGD("Gateway", "Receive request from Node\r\n");
 800194e:	f000 feb5 	bl	80026bc <HAL_GetTick>
 8001952:	4603      	mov	r3, r0
 8001954:	22c5      	movs	r2, #197	; 0xc5
 8001956:	9202      	str	r2, [sp, #8]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <main+0x428>)
 800195a:	9201      	str	r2, [sp, #4]
 800195c:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <main+0x440>)
 800195e:	9200      	str	r2, [sp, #0]
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <main+0x444>)
 8001962:	490b      	ldr	r1, [pc, #44]	; (8001990 <main+0x440>)
 8001964:	2004      	movs	r0, #4
 8001966:	f000 fc67 	bl	8002238 <stm_log_write>
          #endif
        }
      }
    }

    HAL_IWDG_Refresh(&hiwdg);
 800196a:	480b      	ldr	r0, [pc, #44]	; (8001998 <main+0x448>)
 800196c:	f001 fe53 	bl	8003616 <HAL_IWDG_Refresh>
      if(isTransmit == true)  /* Check Button: Pin PA2 */
 8001970:	e70c      	b.n	800178c <main+0x23c>
 8001972:	bf00      	nop
 8001974:	080072d4 	.word	0x080072d4
 8001978:	0800772c 	.word	0x0800772c
 800197c:	080072ac 	.word	0x080072ac
 8001980:	08007270 	.word	0x08007270
 8001984:	08007324 	.word	0x08007324
 8001988:	080072ec 	.word	0x080072ec
 800198c:	2000000c 	.word	0x2000000c
 8001990:	08007370 	.word	0x08007370
 8001994:	08007330 	.word	0x08007330
 8001998:	200000f8 	.word	0x200000f8

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b094      	sub	sp, #80	; 0x50
 80019a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a6:	2228      	movs	r2, #40	; 0x28
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 f976 	bl	8005c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019cc:	2309      	movs	r3, #9
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019da:	2301      	movs	r3, #1
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019de:	2301      	movs	r3, #1
 80019e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e2:	2302      	movs	r3, #2
 80019e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fe1c 	bl	8003634 <HAL_RCC_OscConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001a02:	f000 f849 	bl	8001a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a06:	230f      	movs	r3, #15
 8001a08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 f887 	bl	8003b34 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a2c:	f000 f834 	bl	8001a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a30:	2302      	movs	r3, #2
 8001a32:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001a34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a38:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 fa13 	bl	8003e68 <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001a48:	f000 f826 	bl	8001a98 <Error_Handler>
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3750      	adds	r7, #80	; 0x50
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_Error_Handler>:

/* USER CODE BEGIN 4 */
void _Error_Handler(char *file, int line)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af06      	add	r7, sp, #24
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5e:	b672      	cpsid	i
}
 8001a60:	bf00      	nop
  __disable_irq();

  while (1)
  {
    STM_LOGE("ERROR", "Error file %s line %d", file, line);
 8001a62:	f000 fe2b 	bl	80026bc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	9304      	str	r3, [sp, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	9303      	str	r3, [sp, #12]
 8001a70:	f240 130b 	movw	r3, #267	; 0x10b
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <_Error_Handler+0x38>)
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <_Error_Handler+0x3c>)
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <_Error_Handler+0x40>)
 8001a82:	4903      	ldr	r1, [pc, #12]	; (8001a90 <_Error_Handler+0x3c>)
 8001a84:	2001      	movs	r0, #1
 8001a86:	f000 fbd7 	bl	8002238 <stm_log_write>
 8001a8a:	e7ea      	b.n	8001a62 <_Error_Handler+0xe>
 8001a8c:	08007734 	.word	0x08007734
 8001a90:	080073b4 	.word	0x080073b4
 8001a94:	08007378 	.word	0x08007378

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af04      	add	r7, sp, #16
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9e:	b672      	cpsid	i
}
 8001aa0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    STM_LOGE("ERROR", "");
 8001aa2:	f000 fe0b 	bl	80026bc <HAL_GetTick>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f240 121b 	movw	r2, #283	; 0x11b
 8001aac:	9202      	str	r2, [sp, #8]
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <Error_Handler+0x2c>)
 8001ab0:	9201      	str	r2, [sp, #4]
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <Error_Handler+0x30>)
 8001ab4:	9200      	str	r2, [sp, #0]
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <Error_Handler+0x34>)
 8001ab8:	4903      	ldr	r1, [pc, #12]	; (8001ac8 <Error_Handler+0x30>)
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 fbbc 	bl	8002238 <stm_log_write>
 8001ac0:	e7ef      	b.n	8001aa2 <Error_Handler+0xa>
 8001ac2:	bf00      	nop
 8001ac4:	08007744 	.word	0x08007744
 8001ac8:	080073b4 	.word	0x080073b4
 8001acc:	080073bc 	.word	0x080073bc

08001ad0 <resetCauseGet>:
#include "misc.h"

reset_cause_t resetCauseGet(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
		RCC_FLAG_WWDGRST: Window watchdog reset flag
		RCC_FLAG_LPWRRST: Low power reset flag 
	*/
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <resetCauseGet+0x84>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da02      	bge.n	8001ae4 <resetCauseGet+0x14>
    {
        reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	71fb      	strb	r3, [r7, #7]
 8001ae2:	e02e      	b.n	8001b42 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <resetCauseGet+0x84>)
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <resetCauseGet+0x26>
    {
        reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8001af0:	2302      	movs	r3, #2
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	e025      	b.n	8001b42 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <resetCauseGet+0x84>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <resetCauseGet+0x38>
    {
        reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8001b02:	2303      	movs	r3, #3
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	e01c      	b.n	8001b42 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <resetCauseGet+0x84>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <resetCauseGet+0x4a>
    {
        reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8001b14:	2304      	movs	r3, #4
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	e013      	b.n	8001b42 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <resetCauseGet+0x84>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <resetCauseGet+0x5c>
    {
        reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8001b26:	2305      	movs	r3, #5
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	e00a      	b.n	8001b42 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <resetCauseGet+0x84>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <resetCauseGet+0x6e>
    {
        reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8001b38:	2306      	movs	r3, #6
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	e001      	b.n	8001b42 <resetCauseGet+0x72>
    }
    else
    {
        reset_cause = eRESET_CAUSE_UNKNOWN;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <resetCauseGet+0x88>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

    return reset_cause;
 8001b48:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	424204e0 	.word	0x424204e0

08001b5c <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
    const char *reset_cause_name = "";
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <resetCauseGetName+0x78>)
 8001b68:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b07      	cmp	r3, #7
 8001b6e:	d82b      	bhi.n	8001bc8 <resetCauseGetName+0x6c>
 8001b70:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <resetCauseGetName+0x1c>)
 8001b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b76:	bf00      	nop
 8001b78:	08001b99 	.word	0x08001b99
 8001b7c:	08001b9f 	.word	0x08001b9f
 8001b80:	08001ba5 	.word	0x08001ba5
 8001b84:	08001bab 	.word	0x08001bab
 8001b88:	08001bb1 	.word	0x08001bb1
 8001b8c:	08001bb7 	.word	0x08001bb7
 8001b90:	08001bbd 	.word	0x08001bbd
 8001b94:	08001bc3 	.word	0x08001bc3
    {
    case eRESET_CAUSE_UNKNOWN:
        reset_cause_name = "UNKNOWN";
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <resetCauseGetName+0x7c>)
 8001b9a:	60fb      	str	r3, [r7, #12]
        break;
 8001b9c:	e014      	b.n	8001bc8 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_LOW_POWER_RESET:
        reset_cause_name = "LOW_POWER_RESET";
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <resetCauseGetName+0x80>)
 8001ba0:	60fb      	str	r3, [r7, #12]
        break;
 8001ba2:	e011      	b.n	8001bc8 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
        reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <resetCauseGetName+0x84>)
 8001ba6:	60fb      	str	r3, [r7, #12]
        break;
 8001ba8:	e00e      	b.n	8001bc8 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
        reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <resetCauseGetName+0x88>)
 8001bac:	60fb      	str	r3, [r7, #12]
        break;
 8001bae:	e00b      	b.n	8001bc8 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_SOFTWARE_RESET:
        reset_cause_name = "SOFTWARE_RESET";
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <resetCauseGetName+0x8c>)
 8001bb2:	60fb      	str	r3, [r7, #12]
        break;
 8001bb4:	e008      	b.n	8001bc8 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
        reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <resetCauseGetName+0x90>)
 8001bb8:	60fb      	str	r3, [r7, #12]
        break;
 8001bba:	e005      	b.n	8001bc8 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
        reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <resetCauseGetName+0x94>)
 8001bbe:	60fb      	str	r3, [r7, #12]
        break;
 8001bc0:	e002      	b.n	8001bc8 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_BROWNOUT_RESET:
        reset_cause_name = "BROWNOUT_RESET (BOR)";
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <resetCauseGetName+0x98>)
 8001bc4:	60fb      	str	r3, [r7, #12]
        break;
 8001bc6:	bf00      	nop
    }
    return reset_cause_name;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	080073e0 	.word	0x080073e0
 8001bd8:	080073e4 	.word	0x080073e4
 8001bdc:	080073ec 	.word	0x080073ec
 8001be0:	080073fc 	.word	0x080073fc
 8001be4:	08007414 	.word	0x08007414
 8001be8:	08007430 	.word	0x08007430
 8001bec:	08007440 	.word	0x08007440
 8001bf0:	08007470 	.word	0x08007470
 8001bf4:	0800748c 	.word	0x0800748c

08001bf8 <iwdgInit>:

uint32_t iwdgInit(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    uint32_t configTime = millis;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
    if (configTime > PRESCALER_256_UPPER_LIMIT)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f246 6266 	movw	r2, #26214	; 0x6666
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d902      	bls.n	8001c16 <iwdgInit+0x1e>
    {
        configTime = PRESCALER_256_UPPER_LIMIT;
 8001c10:	f246 6366 	movw	r3, #26214	; 0x6666
 8001c14:	60fb      	str	r3, [r7, #12]
    }
    /* Select INDEPENDENT_WATCHDOG */
    hiwdg->Instance = IWDG;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <iwdgInit+0x74>)
 8001c1a:	601a      	str	r2, [r3, #0]
    /* Use prescaler LSI/128 */
    hiwdg->Init.Prescaler = IWDG_PRESCALER_128;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2205      	movs	r2, #5
 8001c20:	605a      	str	r2, [r3, #4]
    hiwdg->Init.Reload = (int)(IWDG_RESOLUTION * ((float)configTime / PRESCALER_128_UPPER_LIMIT));
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7fe fb48 	bl	80002b8 <__aeabi_ui2f>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4911      	ldr	r1, [pc, #68]	; (8001c70 <iwdgInit+0x78>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc4f 	bl	80004d0 <__aeabi_fdiv>
 8001c32:	4603      	mov	r3, r0
 8001c34:	490f      	ldr	r1, [pc, #60]	; (8001c74 <iwdgInit+0x7c>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fb96 	bl	8000368 <__aeabi_fmul>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fce2 	bl	8000608 <__aeabi_f2iz>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f001 fca9 	bl	80035a4 <HAL_IWDG_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <iwdgInit+0x68>
    {
        _Error_Handler(__FILE__, __LINE__);
 8001c58:	2162      	movs	r1, #98	; 0x62
 8001c5a:	4807      	ldr	r0, [pc, #28]	; (8001c78 <iwdgInit+0x80>)
 8001c5c:	f7ff fefa 	bl	8001a54 <_Error_Handler>
    }
    return configTime;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40003000 	.word	0x40003000
 8001c70:	464ccc00 	.word	0x464ccc00
 8001c74:	457ff000 	.word	0x457ff000
 8001c78:	080074a4 	.word	0x080074a4

08001c7c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <RetargetInit+0x28>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <RetargetInit+0x2c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6898      	ldr	r0, [r3, #8]
 8001c90:	2300      	movs	r3, #0
 8001c92:	2202      	movs	r2, #2
 8001c94:	2100      	movs	r1, #0
 8001c96:	f004 f897 	bl	8005dc8 <setvbuf>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000128 	.word	0x20000128
 8001ca8:	20000028 	.word	0x20000028

08001cac <_isatty>:

int _isatty(int fd) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db04      	blt.n	8001cc4 <_isatty+0x18>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	dc01      	bgt.n	8001cc4 <_isatty+0x18>
    return 1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e005      	b.n	8001cd0 <_isatty+0x24>

  errno = EBADF;
 8001cc4:	f003 ffc0 	bl	8005c48 <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2209      	movs	r2, #9
 8001ccc:	601a      	str	r2, [r3, #0]
  return 0;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_write>:

int _write(int fd, char* ptr, int len) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d002      	beq.n	8001cf0 <_write+0x18>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d111      	bne.n	8001d14 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <_write+0x54>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	f003 fb1c 	bl	800533a <HAL_UART_Transmit>
 8001d02:	4603      	mov	r3, r0
 8001d04:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <_write+0x38>
      return len;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	e008      	b.n	8001d22 <_write+0x4a>
    else
      return EIO;
 8001d10:	2305      	movs	r3, #5
 8001d12:	e006      	b.n	8001d22 <_write+0x4a>
  }
  errno = EBADF;
 8001d14:	f003 ff98 	bl	8005c48 <__errno>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2209      	movs	r2, #9
 8001d1c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000128 	.word	0x20000128

08001d30 <_close>:

int _close(int fd) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db04      	blt.n	8001d48 <_close+0x18>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	dc01      	bgt.n	8001d48 <_close+0x18>
    return 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e006      	b.n	8001d56 <_close+0x26>

  errno = EBADF;
 8001d48:	f003 ff7e 	bl	8005c48 <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2209      	movs	r2, #9
 8001d50:	601a      	str	r2, [r3, #0]
  return -1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001d6a:	f003 ff6d 	bl	8005c48 <__errno>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2209      	movs	r2, #9
 8001d72:	601a      	str	r2, [r3, #0]
  return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_read>:

int _read(int fd, char* ptr, int len) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d110      	bne.n	8001db4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <_read+0x4c>)
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	f003 fb5e 	bl	800545e <HAL_UART_Receive>
 8001da2:	4603      	mov	r3, r0
 8001da4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <_read+0x30>
      return 1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e008      	b.n	8001dc2 <_read+0x42>
    else
      return EIO;
 8001db0:	2305      	movs	r3, #5
 8001db2:	e006      	b.n	8001dc2 <_read+0x42>
  }
  errno = EBADF;
 8001db4:	f003 ff48 	bl	8005c48 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2209      	movs	r2, #9
 8001dbc:	601a      	str	r2, [r3, #0]
  return -1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000128 	.word	0x20000128

08001dd0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db08      	blt.n	8001df2 <_fstat+0x22>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	dc05      	bgt.n	8001df2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dec:	605a      	str	r2, [r3, #4]
    return 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e005      	b.n	8001dfe <_fstat+0x2e>
  }

  errno = EBADF;
 8001df2:	f003 ff29 	bl	8005c48 <__errno>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2209      	movs	r2, #9
 8001dfa:	601a      	str	r2, [r3, #0]
  return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e0e:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <MX_SPI1_Init+0x68>)
 8001e10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e54:	220a      	movs	r2, #10
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_SPI1_Init+0x64>)
 8001e5a:	f002 f8bb 	bl	8003fd4 <HAL_SPI_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e64:	f7ff fe18 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000012c 	.word	0x2000012c
 8001e70:	40013000 	.word	0x40013000

08001e74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d12f      	bne.n	8001ef4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_SPI_MspInit+0x8c>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_SPI_MspInit+0x8c>)
 8001e9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_SPI_MspInit+0x8c>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_SPI_MspInit+0x8c>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <HAL_SPI_MspInit+0x8c>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_SPI_MspInit+0x8c>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ec4:	23a0      	movs	r3, #160	; 0xa0
 8001ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480b      	ldr	r0, [pc, #44]	; (8001f04 <HAL_SPI_MspInit+0x90>)
 8001ed8:	f001 f996 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001edc:	2340      	movs	r3, #64	; 0x40
 8001ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4619      	mov	r1, r3
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_SPI_MspInit+0x90>)
 8001ef0:	f001 f98a 	bl	8003208 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013000 	.word	0x40013000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010800 	.word	0x40010800

08001f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6193      	str	r3, [r2, #24]
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_MspInit+0x60>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_MspInit+0x60>)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000

08001f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <NMI_Handler+0x4>
	...

08001f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    printf("HardFault_Handler\r\n");
 8001f78:	4801      	ldr	r0, [pc, #4]	; (8001f80 <HardFault_Handler+0xc>)
 8001f7a:	f003 ff1d 	bl	8005db8 <puts>
 8001f7e:	e7fb      	b.n	8001f78 <HardFault_Handler+0x4>
 8001f80:	080074c8 	.word	0x080074c8

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    printf("MemManage_Handler\r\n");
 8001f88:	4801      	ldr	r0, [pc, #4]	; (8001f90 <MemManage_Handler+0xc>)
 8001f8a:	f003 ff15 	bl	8005db8 <puts>
 8001f8e:	e7fb      	b.n	8001f88 <MemManage_Handler+0x4>
 8001f90:	080074dc 	.word	0x080074dc

08001f94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    printf("BusFault_Handler\r\n");
 8001f98:	4801      	ldr	r0, [pc, #4]	; (8001fa0 <BusFault_Handler+0xc>)
 8001f9a:	f003 ff0d 	bl	8005db8 <puts>
 8001f9e:	e7fb      	b.n	8001f98 <BusFault_Handler+0x4>
 8001fa0:	080074f0 	.word	0x080074f0

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    printf("UsageFault_Handler\r\n");
 8001fa8:	4801      	ldr	r0, [pc, #4]	; (8001fb0 <UsageFault_Handler+0xc>)
 8001faa:	f003 ff05 	bl	8005db8 <puts>
 8001fae:	e7fb      	b.n	8001fa8 <UsageFault_Handler+0x4>
 8001fb0:	08007504 	.word	0x08007504

08001fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  printf("SVC_Handler\r\n");
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <SVC_Handler+0x10>)
 8001fba:	f003 fefd 	bl	8005db8 <puts>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	08007518 	.word	0x08007518

08001fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe4:	f000 fb58 	bl	8002698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ff0:	2004      	movs	r0, #4
 8001ff2:	f001 fabf 	bl	8003574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ffe:	2008      	movs	r0, #8
 8002000:	f001 fab8 	bl	8003574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <ADC1_2_IRQHandler+0x10>)
 800200e:	f000 fd1d 	bl	8002a4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200000c8 	.word	0x200000c8

0800201c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM4_IRQHandler+0x10>)
 8002022:	f002 fde5 	bl	8004bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000184 	.word	0x20000184

08002030 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <USART1_IRQHandler+0x10>)
 8002036:	f003 fb05 	bl	8005644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200001cc 	.word	0x200001cc

08002044 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af04      	add	r7, sp, #16
 800204a:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_ADC_ConvCpltCallback+0x50>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d118      	bne.n	800208a <HAL_ADC_ConvCpltCallback+0x46>
  {
    mInfo.adcLightSensor = HAL_ADC_GetValue(hadc);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fceb 	bl	8002a34 <HAL_ADC_GetValue>
 800205e:	4603      	mov	r3, r0
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_ADC_ConvCpltCallback+0x54>)
 8002064:	801a      	strh	r2, [r3, #0]
    STM_LOGI("ADC_READ", "lightSensor: %d", mInfo.adcLightSensor);
 8002066:	f000 fb29 	bl	80026bc <HAL_GetTick>
 800206a:	4603      	mov	r3, r0
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_ADC_ConvCpltCallback+0x54>)
 800206e:	8812      	ldrh	r2, [r2, #0]
 8002070:	9203      	str	r2, [sp, #12]
 8002072:	f240 1221 	movw	r2, #289	; 0x121
 8002076:	9202      	str	r2, [sp, #8]
 8002078:	4a08      	ldr	r2, [pc, #32]	; (800209c <HAL_ADC_ConvCpltCallback+0x58>)
 800207a:	9201      	str	r2, [sp, #4]
 800207c:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800207e:	9200      	str	r2, [sp, #0]
 8002080:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002082:	4907      	ldr	r1, [pc, #28]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002084:	2003      	movs	r0, #3
 8002086:	f000 f8d7 	bl	8002238 <stm_log_write>
  }
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200000c8 	.word	0x200000c8
 8002098:	2000000c 	.word	0x2000000c
 800209c:	08007754 	.word	0x08007754
 80020a0:	0800755c 	.word	0x0800755c
 80020a4:	08007528 	.word	0x08007528

080020a8 <HAL_UART_RxCpltCallback>:

__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Process USART2 Receive_Cplt_IT */
  if (huart->Instance == huart1.Instance)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_UART_RxCpltCallback+0x80>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d131      	bne.n	8002120 <HAL_UART_RxCpltCallback+0x78>
  {
    /* Reset Receive Buffer whenever index_value = 0 */
    if (uartCliHandle._rxIndex == 0)
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_UART_RxCpltCallback+0x84>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_UART_RxCpltCallback+0x38>
    {
      for (uint8_t i = 0; i < USART_BUFFER_SIZE; i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e007      	b.n	80020da <HAL_UART_RxCpltCallback+0x32>
      {
        uartCliHandle._rxBuffer[i] = 0;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_UART_RxCpltCallback+0x84>)
 80020ce:	4413      	add	r3, r2
 80020d0:	2200      	movs	r2, #0
 80020d2:	705a      	strb	r2, [r3, #1]
      for (uint8_t i = 0; i < USART_BUFFER_SIZE; i++)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	3301      	adds	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b1d      	cmp	r3, #29
 80020de:	d9f4      	bls.n	80020ca <HAL_UART_RxCpltCallback+0x22>
      }
    }
    /* If user input data not equal to "\r" */
    if (uartCliHandle._rxData[0] != '\r')
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_UART_RxCpltCallback+0x84>)
 80020e2:	7fdb      	ldrb	r3, [r3, #31]
 80020e4:	2b0d      	cmp	r3, #13
 80020e6:	d00c      	beq.n	8002102 <HAL_UART_RxCpltCallback+0x5a>
    {
      uartCliHandle._rxBuffer[uartCliHandle._rxIndex++] = uartCliHandle._rxData[0];
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_UART_RxCpltCallback+0x84>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	b2d1      	uxtb	r1, r2
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_UART_RxCpltCallback+0x84>)
 80020f2:	7011      	strb	r1, [r2, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_UART_RxCpltCallback+0x84>)
 80020f8:	7fda      	ldrb	r2, [r3, #31]
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_UART_RxCpltCallback+0x84>)
 80020fc:	440b      	add	r3, r1
 80020fe:	705a      	strb	r2, [r3, #1]
 8002100:	e009      	b.n	8002116 <HAL_UART_RxCpltCallback+0x6e>
    }
    /* If user input data = "\r" */
    else
    {
      uartCliHandle._rxIndex = 0;
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_UART_RxCpltCallback+0x84>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
      uartCliHandle._rxCpltFlag = 1;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_UART_RxCpltCallback+0x84>)
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      printf("received");
 8002110:	4807      	ldr	r0, [pc, #28]	; (8002130 <HAL_UART_RxCpltCallback+0x88>)
 8002112:	f003 fdcb 	bl	8005cac <iprintf>
    }
    /* Trigger to Receive and jump into ISR on each ISR process is necessary */
    HAL_UART_Receive_IT(huart, (uint8_t *)(&uartCliHandle._rxData), 1);
 8002116:	2201      	movs	r2, #1
 8002118:	4906      	ldr	r1, [pc, #24]	; (8002134 <HAL_UART_RxCpltCallback+0x8c>)
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f003 fa3e 	bl	800559c <HAL_UART_Receive_IT>
  }
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200001cc 	.word	0x200001cc
 800212c:	20000104 	.word	0x20000104
 8002130:	08007568 	.word	0x08007568
 8002134:	20000123 	.word	0x20000123

08002138 <HAL_TIM_PeriodElapsedCallback>:

__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == htim4.Instance)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d126      	bne.n	800219a <HAL_TIM_PeriodElapsedCallback+0x62>
  {
    static uint16_t millisSecond;
    static uint16_t blinkLedDelay;

    if (++millisSecond == 70)
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002156:	801a      	strh	r2, [r3, #0]
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	2b46      	cmp	r3, #70	; 0x46
 800215e:	d10a      	bne.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      millisSecond = 0;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002162:	2200      	movs	r2, #0
 8002164:	801a      	strh	r2, [r3, #0]
      if (uartCliHandle._rxCpltFlag == 1)
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002168:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800216c:	2b01      	cmp	r3, #1
 800216e:	d102      	bne.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x3e>
      {
        // STM_LOGI(ISR_TAG, "receive uart cmd: %s", (uint8_t *)uartCliHandle._rxBuffer);
        runUserCmd(&uartCliHandle);
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002172:	f000 fa17 	bl	80025a4 <runUserCmd>
      }
    }

    if (++blinkLedDelay == 500)
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002180:	801a      	strh	r2, [r3, #0]
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800218a:	d106      	bne.n	800219a <HAL_TIM_PeriodElapsedCallback+0x62>
    {
      blinkLedDelay = 0;
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800218e:	2200      	movs	r2, #0
 8002190:	801a      	strh	r2, [r3, #0]
      TOGGLE_LED();
 8002192:	2101      	movs	r1, #1
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002196:	f001 f9d3 	bl	8003540 <HAL_GPIO_TogglePin>
    }
  }
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000184 	.word	0x20000184
 80021a8:	200000b8 	.word	0x200000b8
 80021ac:	20000104 	.word	0x20000104
 80021b0:	200000ba 	.word	0x200000ba
 80021b4:	40010c00 	.word	0x40010c00

080021b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af04      	add	r7, sp, #16
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == INTERRUPT_LORA_Pin)
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d111      	bne.n	80021ec <HAL_GPIO_EXTI_Callback+0x34>
  {
    STM_LOGD("ISR", "INTERRUPT_LORA_Pin");
 80021c8:	f000 fa78 	bl	80026bc <HAL_GetTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f240 1261 	movw	r2, #353	; 0x161
 80021d2:	9202      	str	r2, [sp, #8]
 80021d4:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_GPIO_EXTI_Callback+0x68>)
 80021d6:	9201      	str	r2, [sp, #4]
 80021d8:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_GPIO_EXTI_Callback+0x6c>)
 80021da:	9200      	str	r2, [sp, #0]
 80021dc:	4a12      	ldr	r2, [pc, #72]	; (8002228 <HAL_GPIO_EXTI_Callback+0x70>)
 80021de:	4911      	ldr	r1, [pc, #68]	; (8002224 <HAL_GPIO_EXTI_Callback+0x6c>)
 80021e0:	2004      	movs	r0, #4
 80021e2:	f000 f829 	bl	8002238 <stm_log_write>
    mInfo.isRxDone = true;
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_GPIO_EXTI_Callback+0x74>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	70da      	strb	r2, [r3, #3]
  }

  if(GPIO_Pin == BUTTON_INPUT_Pin)
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d111      	bne.n	8002216 <HAL_GPIO_EXTI_Callback+0x5e>
  {
    STM_LOGD("ISR", "BUTTON_INPUT_Pin");
 80021f2:	f000 fa63 	bl	80026bc <HAL_GetTick>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f240 1267 	movw	r2, #359	; 0x167
 80021fc:	9202      	str	r2, [sp, #8]
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_GPIO_EXTI_Callback+0x68>)
 8002200:	9201      	str	r2, [sp, #4]
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002204:	9200      	str	r2, [sp, #0]
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_GPIO_EXTI_Callback+0x78>)
 8002208:	4906      	ldr	r1, [pc, #24]	; (8002224 <HAL_GPIO_EXTI_Callback+0x6c>)
 800220a:	2004      	movs	r0, #4
 800220c:	f000 f814 	bl	8002238 <stm_log_write>
    isTransmit = true;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
  }
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	08007770 	.word	0x08007770
 8002224:	080075ac 	.word	0x080075ac
 8002228:	08007574 	.word	0x08007574
 800222c:	2000000c 	.word	0x2000000c
 8002230:	080075b0 	.word	0x080075b0
 8002234:	200000b6 	.word	0x200000b6

08002238 <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 8002238:	b40c      	push	{r2, r3}
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	6039      	str	r1, [r7, #0]
 8002244:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	69b8      	ldr	r0, [r7, #24]
 8002250:	f003 fe80 	bl	8005f54 <viprintf>
    va_end(arg);
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800225e:	b002      	add	sp, #8
 8002260:	4770      	bx	lr
	...

08002264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <_sbrk+0x5c>)
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <_sbrk+0x60>)
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <_sbrk+0x64>)
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <_sbrk+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <_sbrk+0x64>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	d207      	bcs.n	80022a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002294:	f003 fcd8 	bl	8005c48 <__errno>
 8002298:	4603      	mov	r3, r0
 800229a:	220c      	movs	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	e009      	b.n	80022b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <_sbrk+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <_sbrk+0x64>)
 80022b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20005000 	.word	0x20005000
 80022c4:	00000400 	.word	0x00000400
 80022c8:	200000bc 	.word	0x200000bc
 80022cc:	20000220 	.word	0x20000220

080022d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b08b      	sub	sp, #44	; 0x2c
 80022e0:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f0:	463b      	mov	r3, r7
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <MX_TIM4_Init+0xe0>)
 80022fa:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <MX_TIM4_Init+0xe4>)
 80022fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <MX_TIM4_Init+0xe0>)
 8002300:	2223      	movs	r2, #35	; 0x23
 8002302:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <MX_TIM4_Init+0xe0>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800230a:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <MX_TIM4_Init+0xe0>)
 800230c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002310:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <MX_TIM4_Init+0xe0>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <MX_TIM4_Init+0xe0>)
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800231e:	4827      	ldr	r0, [pc, #156]	; (80023bc <MX_TIM4_Init+0xe0>)
 8002320:	f002 fbc4 	bl	8004aac <HAL_TIM_Base_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800232a:	f7ff fbb5 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002332:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	4619      	mov	r1, r3
 800233a:	4820      	ldr	r0, [pc, #128]	; (80023bc <MX_TIM4_Init+0xe0>)
 800233c:	f002 fd60 	bl	8004e00 <HAL_TIM_ConfigClockSource>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002346:	f7ff fba7 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002352:	463b      	mov	r3, r7
 8002354:	4619      	mov	r1, r3
 8002356:	4819      	ldr	r0, [pc, #100]	; (80023bc <MX_TIM4_Init+0xe0>)
 8002358:	f002 ff32 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002362:	f7ff fb99 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  ERROR_CHECK(HAL_TIM_Base_Start_IT(&htim4));
 8002366:	4815      	ldr	r0, [pc, #84]	; (80023bc <MX_TIM4_Init+0xe0>)
 8002368:	f002 fbf0 	bl	8004b4c <HAL_TIM_Base_Start_IT>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d020      	beq.n	80023b4 <MX_TIM4_Init+0xd8>
 8002372:	f000 f9a3 	bl	80026bc <HAL_GetTick>
 8002376:	4604      	mov	r4, r0
 8002378:	4810      	ldr	r0, [pc, #64]	; (80023bc <MX_TIM4_Init+0xe0>)
 800237a:	f002 fbe7 	bl	8004b4c <HAL_TIM_Base_Start_IT>
 800237e:	4603      	mov	r3, r0
 8002380:	2b01      	cmp	r3, #1
 8002382:	d009      	beq.n	8002398 <MX_TIM4_Init+0xbc>
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <MX_TIM4_Init+0xe0>)
 8002386:	f002 fbe1 	bl	8004b4c <HAL_TIM_Base_Start_IT>
 800238a:	4603      	mov	r3, r0
 800238c:	2b02      	cmp	r3, #2
 800238e:	d101      	bne.n	8002394 <MX_TIM4_Init+0xb8>
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_TIM4_Init+0xe8>)
 8002392:	e002      	b.n	800239a <MX_TIM4_Init+0xbe>
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_TIM4_Init+0xec>)
 8002396:	e000      	b.n	800239a <MX_TIM4_Init+0xbe>
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_TIM4_Init+0xf0>)
 800239a:	9303      	str	r3, [sp, #12]
 800239c:	2341      	movs	r3, #65	; 0x41
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <MX_TIM4_Init+0xf4>)
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_TIM4_Init+0xf8>)
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4623      	mov	r3, r4
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <MX_TIM4_Init+0xfc>)
 80023ac:	4909      	ldr	r1, [pc, #36]	; (80023d4 <MX_TIM4_Init+0xf8>)
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7ff ff42 	bl	8002238 <stm_log_write>
  /* USER CODE END TIM4_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd90      	pop	{r4, r7, pc}
 80023bc:	20000184 	.word	0x20000184
 80023c0:	40000800 	.word	0x40000800
 80023c4:	080075e4 	.word	0x080075e4
 80023c8:	080075f0 	.word	0x080075f0
 80023cc:	080075fc 	.word	0x080075fc
 80023d0:	080077a0 	.word	0x080077a0
 80023d4:	08007638 	.word	0x08007638
 80023d8:	08007608 	.word	0x08007608

080023dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <HAL_TIM_Base_MspInit+0x44>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d113      	bne.n	8002416 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_TIM_Base_MspInit+0x48>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <HAL_TIM_Base_MspInit+0x48>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	61d3      	str	r3, [r2, #28]
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_TIM_Base_MspInit+0x48>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2101      	movs	r1, #1
 800240a:	201e      	movs	r0, #30
 800240c:	f000 fe4f 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002410:	201e      	movs	r0, #30
 8002412:	f000 fe68 	bl	80030e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40000800 	.word	0x40000800
 8002424:	40021000 	.word	0x40021000

08002428 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af04      	add	r7, sp, #16
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 8002430:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <MX_USART1_UART_Init+0xb4>)
 8002432:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 8002436:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800243a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 8002450:	220c      	movs	r2, #12
 8002452:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 800245c:	2200      	movs	r2, #0
 800245e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002460:	481d      	ldr	r0, [pc, #116]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 8002462:	f002 ff1d 	bl	80052a0 <HAL_UART_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800246c:	f7ff fb14 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  RetargetInit(&huart1);
 8002470:	4819      	ldr	r0, [pc, #100]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 8002472:	f7ff fc03 	bl	8001c7c <RetargetInit>
  ERROR_CHECK(HAL_UART_Receive_IT(&huart1, (uint8_t *)(&(uartCliHandle._rxData)), 1));
 8002476:	2201      	movs	r2, #1
 8002478:	4919      	ldr	r1, [pc, #100]	; (80024e0 <MX_USART1_UART_Init+0xb8>)
 800247a:	4817      	ldr	r0, [pc, #92]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 800247c:	f003 f88e 	bl	800559c <HAL_UART_Receive_IT>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d024      	beq.n	80024d0 <MX_USART1_UART_Init+0xa8>
 8002486:	f000 f919 	bl	80026bc <HAL_GetTick>
 800248a:	4604      	mov	r4, r0
 800248c:	2201      	movs	r2, #1
 800248e:	4914      	ldr	r1, [pc, #80]	; (80024e0 <MX_USART1_UART_Init+0xb8>)
 8002490:	4811      	ldr	r0, [pc, #68]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 8002492:	f003 f883 	bl	800559c <HAL_UART_Receive_IT>
 8002496:	4603      	mov	r3, r0
 8002498:	2b01      	cmp	r3, #1
 800249a:	d00b      	beq.n	80024b4 <MX_USART1_UART_Init+0x8c>
 800249c:	2201      	movs	r2, #1
 800249e:	4910      	ldr	r1, [pc, #64]	; (80024e0 <MX_USART1_UART_Init+0xb8>)
 80024a0:	480d      	ldr	r0, [pc, #52]	; (80024d8 <MX_USART1_UART_Init+0xb0>)
 80024a2:	f003 f87b 	bl	800559c <HAL_UART_Receive_IT>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d101      	bne.n	80024b0 <MX_USART1_UART_Init+0x88>
 80024ac:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <MX_USART1_UART_Init+0xbc>)
 80024ae:	e002      	b.n	80024b6 <MX_USART1_UART_Init+0x8e>
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <MX_USART1_UART_Init+0xc0>)
 80024b2:	e000      	b.n	80024b6 <MX_USART1_UART_Init+0x8e>
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <MX_USART1_UART_Init+0xc4>)
 80024b6:	9303      	str	r3, [sp, #12]
 80024b8:	2338      	movs	r3, #56	; 0x38
 80024ba:	9302      	str	r3, [sp, #8]
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_USART1_UART_Init+0xc8>)
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_USART1_UART_Init+0xcc>)
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	4623      	mov	r3, r4
 80024c6:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <MX_USART1_UART_Init+0xd0>)
 80024c8:	490a      	ldr	r1, [pc, #40]	; (80024f4 <MX_USART1_UART_Init+0xcc>)
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7ff feb4 	bl	8002238 <stm_log_write>
  /* USER CODE END USART1_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	3704      	adds	r7, #4
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	200001cc 	.word	0x200001cc
 80024dc:	40013800 	.word	0x40013800
 80024e0:	20000123 	.word	0x20000123
 80024e4:	08007648 	.word	0x08007648
 80024e8:	08007654 	.word	0x08007654
 80024ec:	08007660 	.word	0x08007660
 80024f0:	080077b0 	.word	0x080077b0
 80024f4:	0800769c 	.word	0x0800769c
 80024f8:	0800766c 	.word	0x0800766c

080024fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a20      	ldr	r2, [pc, #128]	; (8002598 <HAL_UART_MspInit+0x9c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d139      	bne.n	8002590 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_UART_MspInit+0xa0>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a1e      	ldr	r2, [pc, #120]	; (800259c <HAL_UART_MspInit+0xa0>)
 8002522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <HAL_UART_MspInit+0xa0>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_UART_MspInit+0xa0>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a18      	ldr	r2, [pc, #96]	; (800259c <HAL_UART_MspInit+0xa0>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_UART_MspInit+0xa0>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800254c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002550:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	4619      	mov	r1, r3
 8002560:	480f      	ldr	r0, [pc, #60]	; (80025a0 <HAL_UART_MspInit+0xa4>)
 8002562:	f000 fe51 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4619      	mov	r1, r3
 800257a:	4809      	ldr	r0, [pc, #36]	; (80025a0 <HAL_UART_MspInit+0xa4>)
 800257c:	f000 fe44 	bl	8003208 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	2025      	movs	r0, #37	; 0x25
 8002586:	f000 fd92 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800258a:	2025      	movs	r0, #37	; 0x25
 800258c:	f000 fdab 	bl	80030e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40013800 	.word	0x40013800
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010800 	.word	0x40010800

080025a4 <runUserCmd>:
  }
}

/* USER CODE BEGIN 1 */
void runUserCmd(USART_CLI_HandleTypedef_t *uartCliHandle)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

//  char *input_string = (char *)&uartCliHandle->_rxBuffer;
  /* Clear receive complete flag */
  uartCliHandle->_rxCpltFlag = 0;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  // else
  // {
  //   printf("Unknown Command: \"%s\"\r\n", input_string);
  //   printf("\r\n\r\n>>> ");
  // }
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025c2:	e003      	b.n	80025cc <LoopCopyDataInit>

080025c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025ca:	3104      	adds	r1, #4

080025cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025cc:	480a      	ldr	r0, [pc, #40]	; (80025f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025d4:	d3f6      	bcc.n	80025c4 <CopyDataInit>
  ldr r2, =_sbss
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025d8:	e002      	b.n	80025e0 <LoopFillZerobss>

080025da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025dc:	f842 3b04 	str.w	r3, [r2], #4

080025e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025e4:	d3f9      	bcc.n	80025da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025e6:	f7ff fe73 	bl	80022d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f003 fb33 	bl	8005c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ee:	f7fe ffaf 	bl	8001550 <main>
  bx lr
 80025f2:	4770      	bx	lr
  ldr r3, =_sidata
 80025f4:	08007864 	.word	0x08007864
  ldr r0, =_sdata
 80025f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80025fc:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8002600:	2000008c 	.word	0x2000008c
  ldr r3, = _ebss
 8002604:	20000220 	.word	0x20000220

08002608 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002608:	e7fe      	b.n	8002608 <CAN1_RX1_IRQHandler>
	...

0800260c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_Init+0x28>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a07      	ldr	r2, [pc, #28]	; (8002634 <HAL_Init+0x28>)
 8002616:	f043 0310 	orr.w	r3, r3, #16
 800261a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800261c:	2003      	movs	r0, #3
 800261e:	f000 fd3b 	bl	8003098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002622:	2000      	movs	r0, #0
 8002624:	f000 f808 	bl	8002638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002628:	f7ff fc6e 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40022000 	.word	0x40022000

08002638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_InitTick+0x54>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_InitTick+0x58>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fd53 	bl	8003102 <HAL_SYSTICK_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00e      	b.n	8002684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0f      	cmp	r3, #15
 800266a:	d80a      	bhi.n	8002682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800266c:	2200      	movs	r2, #0
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f000 fd1b 	bl	80030ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002678:	4a06      	ldr	r2, [pc, #24]	; (8002694 <HAL_InitTick+0x5c>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	2000001c 	.word	0x2000001c
 8002690:	20000024 	.word	0x20000024
 8002694:	20000020 	.word	0x20000020

08002698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_IncTick+0x1c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_IncTick+0x20>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	4a03      	ldr	r2, [pc, #12]	; (80026b8 <HAL_IncTick+0x20>)
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	20000024 	.word	0x20000024
 80026b8:	2000020c 	.word	0x2000020c

080026bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_GetTick+0x10>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	2000020c 	.word	0x2000020c

080026d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff fff0 	bl	80026bc <HAL_GetTick>
 80026dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d005      	beq.n	80026f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_Delay+0x44>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026f6:	bf00      	nop
 80026f8:	f7ff ffe0 	bl	80026bc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	429a      	cmp	r2, r3
 8002706:	d8f7      	bhi.n	80026f8 <HAL_Delay+0x28>
  {
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000024 	.word	0x20000024

08002718 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0be      	b.n	80028b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fd ffee 	bl	8000738 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fb8b 	bl	8002e78 <ADC_ConversionStop_Disable>
 8002762:	4603      	mov	r3, r0
 8002764:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 8099 	bne.w	80028a6 <HAL_ADC_Init+0x18e>
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 8095 	bne.w	80028a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002784:	f023 0302 	bic.w	r3, r3, #2
 8002788:	f043 0202 	orr.w	r2, r3, #2
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002798:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7b1b      	ldrb	r3, [r3, #12]
 800279e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b0:	d003      	beq.n	80027ba <HAL_ADC_Init+0xa2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d102      	bne.n	80027c0 <HAL_ADC_Init+0xa8>
 80027ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027be:	e000      	b.n	80027c2 <HAL_ADC_Init+0xaa>
 80027c0:	2300      	movs	r3, #0
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7d1b      	ldrb	r3, [r3, #20]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d119      	bne.n	8002804 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7b1b      	ldrb	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	3b01      	subs	r3, #1
 80027de:	035a      	lsls	r2, r3, #13
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e00b      	b.n	8002804 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	430a      	orrs	r2, r1
 8002816:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <HAL_ADC_Init+0x1a8>)
 8002820:	4013      	ands	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	430b      	orrs	r3, r1
 800282a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002834:	d003      	beq.n	800283e <HAL_ADC_Init+0x126>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d104      	bne.n	8002848 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	3b01      	subs	r3, #1
 8002844:	051b      	lsls	r3, r3, #20
 8002846:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	430a      	orrs	r2, r1
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_ADC_Init+0x1ac>)
 8002864:	4013      	ands	r3, r2
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	429a      	cmp	r2, r3
 800286a:	d10b      	bne.n	8002884 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002882:	e018      	b.n	80028b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	f023 0312 	bic.w	r3, r3, #18
 800288c:	f043 0210 	orr.w	r2, r3, #16
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028a4:	e007      	b.n	80028b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	ffe1f7fd 	.word	0xffe1f7fd
 80028c4:	ff1f0efe 	.word	0xff1f0efe

080028c8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_Start_IT+0x1a>
 80028de:	2302      	movs	r3, #2
 80028e0:	e0a0      	b.n	8002a24 <HAL_ADC_Start_IT+0x15c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fa72 	bl	8002dd4 <ADC_Enable>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 808f 	bne.w	8002a1a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a45      	ldr	r2, [pc, #276]	; (8002a2c <HAL_ADC_Start_IT+0x164>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d105      	bne.n	8002926 <HAL_ADC_Start_IT+0x5e>
 800291a:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <HAL_ADC_Start_IT+0x168>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d115      	bne.n	8002952 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d026      	beq.n	800298e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002948:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002950:	e01d      	b.n	800298e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a33      	ldr	r2, [pc, #204]	; (8002a30 <HAL_ADC_Start_IT+0x168>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_ADC_Start_IT+0xaa>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <HAL_ADC_Start_IT+0x164>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10d      	bne.n	800298e <HAL_ADC_Start_IT+0xc6>
 8002972:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_ADC_Start_IT+0x168>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002986:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	f023 0206 	bic.w	r2, r3, #6
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029a6:	e002      	b.n	80029ae <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f06f 0202 	mvn.w	r2, #2
 80029be:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0220 	orr.w	r2, r2, #32
 80029ce:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029de:	d113      	bne.n	8002a08 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_ADC_Start_IT+0x164>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_ADC_Start_IT+0x168>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	e00c      	b.n	8002a22 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e003      	b.n	8002a22 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40012800 	.word	0x40012800
 8002a30:	40012400 	.word	0x40012400

08002a34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d140      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d139      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a96:	d11d      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d119      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0220 	bic.w	r2, r2, #32
 8002aae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fab5 	bl	8002044 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0212 	mvn.w	r2, #18
 8002ae2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	2b80      	cmp	r3, #128	; 0x80
 8002af0:	d14f      	bne.n	8002b92 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d148      	bne.n	8002b92 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002b22:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002b26:	d012      	beq.n	8002b4e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d125      	bne.n	8002b82 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002b40:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b44:	d11d      	bne.n	8002b82 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d119      	bne.n	8002b82 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b5c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9b2 	bl	8002eec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 020c 	mvn.w	r2, #12
 8002b90:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b40      	cmp	r3, #64	; 0x40
 8002b9e:	d114      	bne.n	8002bca <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10d      	bne.n	8002bca <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f809 	bl	8002bd2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0201 	mvn.w	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x20>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0dc      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x1da>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b06      	cmp	r3, #6
 8002c12:	d81c      	bhi.n	8002c4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b05      	subs	r3, #5
 8002c26:	221f      	movs	r2, #31
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	4019      	ands	r1, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b05      	subs	r3, #5
 8002c40:	fa00 f203 	lsl.w	r2, r0, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34
 8002c4c:	e03c      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d81c      	bhi.n	8002c90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	3b23      	subs	r3, #35	; 0x23
 8002c68:	221f      	movs	r2, #31
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	4019      	ands	r1, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b23      	subs	r3, #35	; 0x23
 8002c82:	fa00 f203 	lsl.w	r2, r0, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c8e:	e01b      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3b41      	subs	r3, #65	; 0x41
 8002ca2:	221f      	movs	r2, #31
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	4019      	ands	r1, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	3b41      	subs	r3, #65	; 0x41
 8002cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d91c      	bls.n	8002d0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68d9      	ldr	r1, [r3, #12]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b1e      	subs	r3, #30
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	4019      	ands	r1, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6898      	ldr	r0, [r3, #8]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b1e      	subs	r3, #30
 8002cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	e019      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6919      	ldr	r1, [r3, #16]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	4019      	ands	r1, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6898      	ldr	r0, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	fa00 f203 	lsl.w	r2, r0, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d003      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d4a:	2b11      	cmp	r3, #17
 8002d4c:	d132      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d125      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d126      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d74:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d11a      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_ADC_ConfigChannel+0x1e8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	0c9a      	lsrs	r2, r3, #18
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d94:	e002      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f9      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x1b2>
 8002da2:	e007      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40012400 	.word	0x40012400
 8002dcc:	2000001c 	.word	0x2000001c
 8002dd0:	431bde83 	.word	0x431bde83

08002dd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d039      	beq.n	8002e66 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <ADC_Enable+0x9c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <ADC_Enable+0xa0>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	0c9b      	lsrs	r3, r3, #18
 8002e0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e10:	e002      	b.n	8002e18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f9      	bne.n	8002e12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e1e:	f7ff fc4d 	bl	80026bc <HAL_GetTick>
 8002e22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e24:	e018      	b.n	8002e58 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e26:	f7ff fc49 	bl	80026bc <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d911      	bls.n	8002e58 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f043 0210 	orr.w	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e007      	b.n	8002e68 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d1df      	bne.n	8002e26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	2000001c 	.word	0x2000001c
 8002e74:	431bde83 	.word	0x431bde83

08002e78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d127      	bne.n	8002ee2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ea2:	f7ff fc0b 	bl	80026bc <HAL_GetTick>
 8002ea6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ea8:	e014      	b.n	8002ed4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eaa:	f7ff fc07 	bl	80026bc <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d90d      	bls.n	8002ed4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f043 0210 	orr.w	r2, r3, #16
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e007      	b.n	8002ee4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d0e3      	beq.n	8002eaa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
	...

08002f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f32:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	60d3      	str	r3, [r2, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <__NVIC_GetPriorityGrouping+0x18>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f003 0307 	and.w	r3, r3, #7
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0b      	blt.n	8002f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4906      	ldr	r1, [pc, #24]	; (8002f98 <__NVIC_EnableIRQ+0x34>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2001      	movs	r0, #1
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	e000e100 	.word	0xe000e100

08002f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	db0a      	blt.n	8002fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <__NVIC_SetPriority+0x4c>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc4:	e00a      	b.n	8002fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4908      	ldr	r1, [pc, #32]	; (8002fec <__NVIC_SetPriority+0x50>)
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	3b04      	subs	r3, #4
 8002fd4:	0112      	lsls	r2, r2, #4
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	440b      	add	r3, r1
 8002fda:	761a      	strb	r2, [r3, #24]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000e100 	.word	0xe000e100
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f1c3 0307 	rsb	r3, r3, #7
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf28      	it	cs
 800300e:	2304      	movcs	r3, #4
 8003010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3304      	adds	r3, #4
 8003016:	2b06      	cmp	r3, #6
 8003018:	d902      	bls.n	8003020 <NVIC_EncodePriority+0x30>
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3b03      	subs	r3, #3
 800301e:	e000      	b.n	8003022 <NVIC_EncodePriority+0x32>
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	401a      	ands	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003038:	f04f 31ff 	mov.w	r1, #4294967295
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	43d9      	mvns	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	4313      	orrs	r3, r2
         );
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003064:	d301      	bcc.n	800306a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003066:	2301      	movs	r3, #1
 8003068:	e00f      	b.n	800308a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <SysTick_Config+0x40>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3b01      	subs	r3, #1
 8003070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003072:	210f      	movs	r1, #15
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	f7ff ff90 	bl	8002f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <SysTick_Config+0x40>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003082:	4b04      	ldr	r3, [pc, #16]	; (8003094 <SysTick_Config+0x40>)
 8003084:	2207      	movs	r2, #7
 8003086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	e000e010 	.word	0xe000e010

08003098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff2d 	bl	8002f00 <__NVIC_SetPriorityGrouping>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030c0:	f7ff ff42 	bl	8002f48 <__NVIC_GetPriorityGrouping>
 80030c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	6978      	ldr	r0, [r7, #20]
 80030cc:	f7ff ff90 	bl	8002ff0 <NVIC_EncodePriority>
 80030d0:	4602      	mov	r2, r0
 80030d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff5f 	bl	8002f9c <__NVIC_SetPriority>
}
 80030de:	bf00      	nop
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff35 	bl	8002f64 <__NVIC_EnableIRQ>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ffa2 	bl	8003054 <SysTick_Config>
 8003110:	4603      	mov	r3, r0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800312e:	2b02      	cmp	r3, #2
 8003130:	d005      	beq.n	800313e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2204      	movs	r2, #4
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e051      	b.n	80031e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 020e 	bic.w	r2, r2, #14
 800314c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a22      	ldr	r2, [pc, #136]	; (80031ec <HAL_DMA_Abort_IT+0xd0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d029      	beq.n	80031bc <HAL_DMA_Abort_IT+0xa0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a20      	ldr	r2, [pc, #128]	; (80031f0 <HAL_DMA_Abort_IT+0xd4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d022      	beq.n	80031b8 <HAL_DMA_Abort_IT+0x9c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <HAL_DMA_Abort_IT+0xd8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d01a      	beq.n	80031b2 <HAL_DMA_Abort_IT+0x96>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_DMA_Abort_IT+0xdc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d012      	beq.n	80031ac <HAL_DMA_Abort_IT+0x90>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_DMA_Abort_IT+0xe0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00a      	beq.n	80031a6 <HAL_DMA_Abort_IT+0x8a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_DMA_Abort_IT+0xe4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d102      	bne.n	80031a0 <HAL_DMA_Abort_IT+0x84>
 800319a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800319e:	e00e      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a4:	e00b      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031aa:	e008      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b0:	e005      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b6:	e002      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031b8:	2310      	movs	r3, #16
 80031ba:	e000      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031bc:	2301      	movs	r3, #1
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_DMA_Abort_IT+0xe8>)
 80031c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
    } 
  }
  return status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40020008 	.word	0x40020008
 80031f0:	4002001c 	.word	0x4002001c
 80031f4:	40020030 	.word	0x40020030
 80031f8:	40020044 	.word	0x40020044
 80031fc:	40020058 	.word	0x40020058
 8003200:	4002006c 	.word	0x4002006c
 8003204:	40020000 	.word	0x40020000

08003208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b08b      	sub	sp, #44	; 0x2c
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321a:	e169      	b.n	80034f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800321c:	2201      	movs	r2, #1
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8158 	bne.w	80034ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a9a      	ldr	r2, [pc, #616]	; (80034a8 <HAL_GPIO_Init+0x2a0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d05e      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003244:	4a98      	ldr	r2, [pc, #608]	; (80034a8 <HAL_GPIO_Init+0x2a0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d875      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800324a:	4a98      	ldr	r2, [pc, #608]	; (80034ac <HAL_GPIO_Init+0x2a4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d058      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003250:	4a96      	ldr	r2, [pc, #600]	; (80034ac <HAL_GPIO_Init+0x2a4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d86f      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003256:	4a96      	ldr	r2, [pc, #600]	; (80034b0 <HAL_GPIO_Init+0x2a8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d052      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 800325c:	4a94      	ldr	r2, [pc, #592]	; (80034b0 <HAL_GPIO_Init+0x2a8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d869      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003262:	4a94      	ldr	r2, [pc, #592]	; (80034b4 <HAL_GPIO_Init+0x2ac>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d04c      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003268:	4a92      	ldr	r2, [pc, #584]	; (80034b4 <HAL_GPIO_Init+0x2ac>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d863      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800326e:	4a92      	ldr	r2, [pc, #584]	; (80034b8 <HAL_GPIO_Init+0x2b0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d046      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003274:	4a90      	ldr	r2, [pc, #576]	; (80034b8 <HAL_GPIO_Init+0x2b0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d85d      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800327a:	2b12      	cmp	r3, #18
 800327c:	d82a      	bhi.n	80032d4 <HAL_GPIO_Init+0xcc>
 800327e:	2b12      	cmp	r3, #18
 8003280:	d859      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_GPIO_Init+0x80>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	08003303 	.word	0x08003303
 800328c:	080032dd 	.word	0x080032dd
 8003290:	080032ef 	.word	0x080032ef
 8003294:	08003331 	.word	0x08003331
 8003298:	08003337 	.word	0x08003337
 800329c:	08003337 	.word	0x08003337
 80032a0:	08003337 	.word	0x08003337
 80032a4:	08003337 	.word	0x08003337
 80032a8:	08003337 	.word	0x08003337
 80032ac:	08003337 	.word	0x08003337
 80032b0:	08003337 	.word	0x08003337
 80032b4:	08003337 	.word	0x08003337
 80032b8:	08003337 	.word	0x08003337
 80032bc:	08003337 	.word	0x08003337
 80032c0:	08003337 	.word	0x08003337
 80032c4:	08003337 	.word	0x08003337
 80032c8:	08003337 	.word	0x08003337
 80032cc:	080032e5 	.word	0x080032e5
 80032d0:	080032f9 	.word	0x080032f9
 80032d4:	4a79      	ldr	r2, [pc, #484]	; (80034bc <HAL_GPIO_Init+0x2b4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032da:	e02c      	b.n	8003336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	623b      	str	r3, [r7, #32]
          break;
 80032e2:	e029      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	3304      	adds	r3, #4
 80032ea:	623b      	str	r3, [r7, #32]
          break;
 80032ec:	e024      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	3308      	adds	r3, #8
 80032f4:	623b      	str	r3, [r7, #32]
          break;
 80032f6:	e01f      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	330c      	adds	r3, #12
 80032fe:	623b      	str	r3, [r7, #32]
          break;
 8003300:	e01a      	b.n	8003338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800330a:	2304      	movs	r3, #4
 800330c:	623b      	str	r3, [r7, #32]
          break;
 800330e:	e013      	b.n	8003338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003318:	2308      	movs	r3, #8
 800331a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	611a      	str	r2, [r3, #16]
          break;
 8003322:	e009      	b.n	8003338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003324:	2308      	movs	r3, #8
 8003326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	615a      	str	r2, [r3, #20]
          break;
 800332e:	e003      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003330:	2300      	movs	r3, #0
 8003332:	623b      	str	r3, [r7, #32]
          break;
 8003334:	e000      	b.n	8003338 <HAL_GPIO_Init+0x130>
          break;
 8003336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2bff      	cmp	r3, #255	; 0xff
 800333c:	d801      	bhi.n	8003342 <HAL_GPIO_Init+0x13a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	e001      	b.n	8003346 <HAL_GPIO_Init+0x13e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2bff      	cmp	r3, #255	; 0xff
 800334c:	d802      	bhi.n	8003354 <HAL_GPIO_Init+0x14c>
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	e002      	b.n	800335a <HAL_GPIO_Init+0x152>
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	3b08      	subs	r3, #8
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	210f      	movs	r1, #15
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	6a39      	ldr	r1, [r7, #32]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	431a      	orrs	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80b1 	beq.w	80034ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003388:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <HAL_GPIO_Init+0x2b8>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	4a4c      	ldr	r2, [pc, #304]	; (80034c0 <HAL_GPIO_Init+0x2b8>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6193      	str	r3, [r2, #24]
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_GPIO_Init+0x2b8>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033a0:	4a48      	ldr	r2, [pc, #288]	; (80034c4 <HAL_GPIO_Init+0x2bc>)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <HAL_GPIO_Init+0x2c0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_GPIO_Init+0x1ec>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_GPIO_Init+0x2c4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00d      	beq.n	80033f0 <HAL_GPIO_Init+0x1e8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3e      	ldr	r2, [pc, #248]	; (80034d0 <HAL_GPIO_Init+0x2c8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <HAL_GPIO_Init+0x1e4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3d      	ldr	r2, [pc, #244]	; (80034d4 <HAL_GPIO_Init+0x2cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_GPIO_Init+0x1e0>
 80033e4:	2303      	movs	r3, #3
 80033e6:	e006      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033e8:	2304      	movs	r3, #4
 80033ea:	e004      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e002      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033f4:	2300      	movs	r3, #0
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	f002 0203 	and.w	r2, r2, #3
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	4093      	lsls	r3, r2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003406:	492f      	ldr	r1, [pc, #188]	; (80034c4 <HAL_GPIO_Init+0x2bc>)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	492c      	ldr	r1, [pc, #176]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800342e:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	43db      	mvns	r3, r3
 8003436:	4928      	ldr	r1, [pc, #160]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003438:	4013      	ands	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d006      	beq.n	8003456 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	4922      	ldr	r1, [pc, #136]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003456:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	43db      	mvns	r3, r3
 800345e:	491e      	ldr	r1, [pc, #120]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003460:	4013      	ands	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d006      	beq.n	800347e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4918      	ldr	r1, [pc, #96]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	43db      	mvns	r3, r3
 8003486:	4914      	ldr	r1, [pc, #80]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003488:	4013      	ands	r3, r2
 800348a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d021      	beq.n	80034dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	490e      	ldr	r1, [pc, #56]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60cb      	str	r3, [r1, #12]
 80034a4:	e021      	b.n	80034ea <HAL_GPIO_Init+0x2e2>
 80034a6:	bf00      	nop
 80034a8:	10320000 	.word	0x10320000
 80034ac:	10310000 	.word	0x10310000
 80034b0:	10220000 	.word	0x10220000
 80034b4:	10210000 	.word	0x10210000
 80034b8:	10120000 	.word	0x10120000
 80034bc:	10110000 	.word	0x10110000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40010800 	.word	0x40010800
 80034cc:	40010c00 	.word	0x40010c00
 80034d0:	40011000 	.word	0x40011000
 80034d4:	40011400 	.word	0x40011400
 80034d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_GPIO_Init+0x304>)
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	4909      	ldr	r1, [pc, #36]	; (800350c <HAL_GPIO_Init+0x304>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f47f ae8e 	bne.w	800321c <HAL_GPIO_Init+0x14>
  }
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	372c      	adds	r7, #44	; 0x2c
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40010400 	.word	0x40010400

08003510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
 800351c:	4613      	mov	r3, r2
 800351e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003520:	787b      	ldrb	r3, [r7, #1]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800352c:	e003      	b.n	8003536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	041a      	lsls	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4013      	ands	r3, r2
 8003558:	041a      	lsls	r2, r3, #16
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43d9      	mvns	r1, r3
 800355e:	887b      	ldrh	r3, [r7, #2]
 8003560:	400b      	ands	r3, r1
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	611a      	str	r2, [r3, #16]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
	...

08003574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe fe10 	bl	80021b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40010400 	.word	0x40010400

080035a4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e02b      	b.n	800360e <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80035be:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f245 5255 	movw	r2, #21845	; 0x5555
 80035c8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6852      	ldr	r2, [r2, #4]
 80035d2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6892      	ldr	r2, [r2, #8]
 80035dc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80035de:	f7ff f86d 	bl	80026bc <HAL_GetTick>
 80035e2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80035e4:	e008      	b.n	80035f8 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80035e6:	f7ff f869 	bl	80026bc <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b26      	cmp	r3, #38	; 0x26
 80035f2:	d901      	bls.n	80035f8 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e00a      	b.n	800360e <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f1      	bne.n	80035e6 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800360a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003626:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e26c      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8087 	beq.w	8003762 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003654:	4b92      	ldr	r3, [pc, #584]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b04      	cmp	r3, #4
 800365e:	d00c      	beq.n	800367a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003660:	4b8f      	ldr	r3, [pc, #572]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b08      	cmp	r3, #8
 800366a:	d112      	bne.n	8003692 <HAL_RCC_OscConfig+0x5e>
 800366c:	4b8c      	ldr	r3, [pc, #560]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d10b      	bne.n	8003692 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367a:	4b89      	ldr	r3, [pc, #548]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d06c      	beq.n	8003760 <HAL_RCC_OscConfig+0x12c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d168      	bne.n	8003760 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e246      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369a:	d106      	bne.n	80036aa <HAL_RCC_OscConfig+0x76>
 800369c:	4b80      	ldr	r3, [pc, #512]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7f      	ldr	r2, [pc, #508]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	e02e      	b.n	8003708 <HAL_RCC_OscConfig+0xd4>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0x98>
 80036b2:	4b7b      	ldr	r3, [pc, #492]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a7a      	ldr	r2, [pc, #488]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b78      	ldr	r3, [pc, #480]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a77      	ldr	r2, [pc, #476]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e01d      	b.n	8003708 <HAL_RCC_OscConfig+0xd4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0xbc>
 80036d6:	4b72      	ldr	r3, [pc, #456]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a71      	ldr	r2, [pc, #452]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b6f      	ldr	r3, [pc, #444]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6e      	ldr	r2, [pc, #440]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e00b      	b.n	8003708 <HAL_RCC_OscConfig+0xd4>
 80036f0:	4b6b      	ldr	r3, [pc, #428]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a6a      	ldr	r2, [pc, #424]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b68      	ldr	r3, [pc, #416]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a67      	ldr	r2, [pc, #412]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 8003702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003706:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7fe ffd4 	bl	80026bc <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003718:	f7fe ffd0 	bl	80026bc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e1fa      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b5d      	ldr	r3, [pc, #372]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0xe4>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fe ffc0 	bl	80026bc <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7fe ffbc 	bl	80026bc <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e1e6      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	4b53      	ldr	r3, [pc, #332]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x10c>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d063      	beq.n	8003836 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800376e:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800377a:	4b49      	ldr	r3, [pc, #292]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b08      	cmp	r3, #8
 8003784:	d11c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x18c>
 8003786:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d116      	bne.n	80037c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_RCC_OscConfig+0x176>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e1ba      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	4b3d      	ldr	r3, [pc, #244]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4939      	ldr	r1, [pc, #228]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	e03a      	b.n	8003836 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d020      	beq.n	800380a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c8:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <HAL_RCC_OscConfig+0x270>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe ff75 	bl	80026bc <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d6:	f7fe ff71 	bl	80026bc <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e19b      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e8:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f4:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4927      	ldr	r1, [pc, #156]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]
 8003808:	e015      	b.n	8003836 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380a:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <HAL_RCC_OscConfig+0x270>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe ff54 	bl	80026bc <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003818:	f7fe ff50 	bl	80026bc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e17a      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d03a      	beq.n	80038b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d019      	beq.n	800387e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 800384c:	2201      	movs	r2, #1
 800384e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fe ff34 	bl	80026bc <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003858:	f7fe ff30 	bl	80026bc <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e15a      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <HAL_RCC_OscConfig+0x26c>)
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003876:	2001      	movs	r0, #1
 8003878:	f000 fad8 	bl	8003e2c <RCC_Delay>
 800387c:	e01c      	b.n	80038b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fe ff1a 	bl	80026bc <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388a:	e00f      	b.n	80038ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388c:	f7fe ff16 	bl	80026bc <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d908      	bls.n	80038ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e140      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	42420000 	.word	0x42420000
 80038a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b9e      	ldr	r3, [pc, #632]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e9      	bne.n	800388c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a6 	beq.w	8003a12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ca:	4b97      	ldr	r3, [pc, #604]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10d      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	4b94      	ldr	r3, [pc, #592]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	4a93      	ldr	r2, [pc, #588]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	61d3      	str	r3, [r2, #28]
 80038e2:	4b91      	ldr	r3, [pc, #580]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	4b8e      	ldr	r3, [pc, #568]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d118      	bne.n	8003930 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038fe:	4b8b      	ldr	r3, [pc, #556]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a8a      	ldr	r2, [pc, #552]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390a:	f7fe fed7 	bl	80026bc <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003912:	f7fe fed3 	bl	80026bc <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b64      	cmp	r3, #100	; 0x64
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0fd      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	4b81      	ldr	r3, [pc, #516]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d106      	bne.n	8003946 <HAL_RCC_OscConfig+0x312>
 8003938:	4b7b      	ldr	r3, [pc, #492]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	4a7a      	ldr	r2, [pc, #488]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6213      	str	r3, [r2, #32]
 8003944:	e02d      	b.n	80039a2 <HAL_RCC_OscConfig+0x36e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x334>
 800394e:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4a75      	ldr	r2, [pc, #468]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	6213      	str	r3, [r2, #32]
 800395a:	4b73      	ldr	r3, [pc, #460]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	4a72      	ldr	r2, [pc, #456]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	6213      	str	r3, [r2, #32]
 8003966:	e01c      	b.n	80039a2 <HAL_RCC_OscConfig+0x36e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b05      	cmp	r3, #5
 800396e:	d10c      	bne.n	800398a <HAL_RCC_OscConfig+0x356>
 8003970:	4b6d      	ldr	r3, [pc, #436]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4a6c      	ldr	r2, [pc, #432]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	6213      	str	r3, [r2, #32]
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4a69      	ldr	r2, [pc, #420]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6213      	str	r3, [r2, #32]
 8003988:	e00b      	b.n	80039a2 <HAL_RCC_OscConfig+0x36e>
 800398a:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4a66      	ldr	r2, [pc, #408]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	6213      	str	r3, [r2, #32]
 8003996:	4b64      	ldr	r3, [pc, #400]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4a63      	ldr	r2, [pc, #396]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d015      	beq.n	80039d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039aa:	f7fe fe87 	bl	80026bc <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b0:	e00a      	b.n	80039c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fe fe83 	bl	80026bc <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e0ab      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c8:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ee      	beq.n	80039b2 <HAL_RCC_OscConfig+0x37e>
 80039d4:	e014      	b.n	8003a00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d6:	f7fe fe71 	bl	80026bc <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fe fe6d 	bl	80026bc <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e095      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f4:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ee      	bne.n	80039de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d105      	bne.n	8003a12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a06:	4b48      	ldr	r3, [pc, #288]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4a47      	ldr	r2, [pc, #284]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8081 	beq.w	8003b1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a1c:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d061      	beq.n	8003aec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d146      	bne.n	8003abe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a30:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <HAL_RCC_OscConfig+0x4fc>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7fe fe41 	bl	80026bc <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fe fe3d 	bl	80026bc <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e067      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d108      	bne.n	8003a78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	492d      	ldr	r1, [pc, #180]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a19      	ldr	r1, [r3, #32]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	4927      	ldr	r1, [pc, #156]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a90:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <HAL_RCC_OscConfig+0x4fc>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7fe fe11 	bl	80026bc <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7fe fe0d 	bl	80026bc <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e037      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x46a>
 8003abc:	e02f      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <HAL_RCC_OscConfig+0x4fc>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fdfa 	bl	80026bc <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fe fdf6 	bl	80026bc <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e020      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x498>
 8003aea:	e018      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e013      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	42420060 	.word	0x42420060

08003b34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0d0      	b.n	8003cea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d910      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 0207 	bic.w	r2, r3, #7
 8003b5e:	4965      	ldr	r1, [pc, #404]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0b8      	b.n	8003cea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d020      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b90:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba8:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb4:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	494d      	ldr	r1, [pc, #308]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d040      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d115      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e07f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e073      	b.n	8003cea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	4b3d      	ldr	r3, [pc, #244]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e06b      	b.n	8003cea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4936      	ldr	r1, [pc, #216]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c24:	f7fe fd4a 	bl	80026bc <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fe fd46 	bl	80026bc <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e053      	b.n	8003cea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d210      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 0207 	bic.w	r2, r3, #7
 8003c6a:	4922      	ldr	r1, [pc, #136]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e032      	b.n	8003cea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4916      	ldr	r1, [pc, #88]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cc2:	f000 f821 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	490a      	ldr	r1, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd4:	5ccb      	ldrb	r3, [r1, r3]
 8003cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1cc>)
 8003cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_ClockConfig+0x1d0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe fca8 	bl	8002638 <HAL_InitTick>

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40022000 	.word	0x40022000
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	08007788 	.word	0x08007788
 8003d00:	2000001c 	.word	0x2000001c
 8003d04:	20000020 	.word	0x20000020

08003d08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	b490      	push	{r4, r7}
 8003d0a:	b08a      	sub	sp, #40	; 0x28
 8003d0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d0e:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d10:	1d3c      	adds	r4, r7, #4
 8003d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d18:	f240 2301 	movw	r3, #513	; 0x201
 8003d1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	2300      	movs	r3, #0
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d32:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d002      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x40>
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d003      	beq.n	8003d4e <HAL_RCC_GetSysClockFreq+0x46>
 8003d46:	e02d      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4a:	623b      	str	r3, [r7, #32]
      break;
 8003d4c:	e02d      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	0c9b      	lsrs	r3, r3, #18
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0c5b      	lsrs	r3, r3, #17
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d86:	fb02 f203 	mul.w	r2, r2, r3
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
 8003d92:	e004      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	4a0b      	ldr	r2, [pc, #44]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	623b      	str	r3, [r7, #32]
      break;
 8003da2:	e002      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da6:	623b      	str	r3, [r7, #32]
      break;
 8003da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003daa:	6a3b      	ldr	r3, [r7, #32]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc90      	pop	{r4, r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	080076ac 	.word	0x080076ac
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	007a1200 	.word	0x007a1200
 8003dc4:	003d0900 	.word	0x003d0900

08003dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dcc:	4b02      	ldr	r3, [pc, #8]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	2000001c 	.word	0x2000001c

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003de0:	f7ff fff2 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08007798 	.word	0x08007798

08003e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e08:	f7ff ffde 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	0adb      	lsrs	r3, r3, #11
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	4903      	ldr	r1, [pc, #12]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	08007798 	.word	0x08007798

08003e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <RCC_Delay+0x34>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <RCC_Delay+0x38>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	0a5b      	lsrs	r3, r3, #9
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e48:	bf00      	nop
  }
  while (Delay --);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	60fa      	str	r2, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f9      	bne.n	8003e48 <RCC_Delay+0x1c>
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	2000001c 	.word	0x2000001c
 8003e64:	10624dd3 	.word	0x10624dd3

08003e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d07d      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e84:	2300      	movs	r3, #0
 8003e86:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e88:	4b4f      	ldr	r3, [pc, #316]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e94:	4b4c      	ldr	r3, [pc, #304]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	4a4b      	ldr	r2, [pc, #300]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	61d3      	str	r3, [r2, #28]
 8003ea0:	4b49      	ldr	r3, [pc, #292]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb0:	4b46      	ldr	r3, [pc, #280]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d118      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ebc:	4b43      	ldr	r3, [pc, #268]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a42      	ldr	r2, [pc, #264]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec8:	f7fe fbf8 	bl	80026bc <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ece:	e008      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed0:	f7fe fbf4 	bl	80026bc <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e06d      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eee:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d02e      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d027      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f0c:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f16:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1c:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d014      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fe fbc3 	bl	80026bc <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fe fbbf 	bl	80026bc <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e036      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ee      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f5c:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4917      	ldr	r1, [pc, #92]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d105      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f74:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	490b      	ldr	r1, [pc, #44]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40007000 	.word	0x40007000
 8003fd0:	42420440 	.word	0x42420440

08003fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e076      	b.n	80040d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d108      	bne.n	8004000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff6:	d009      	beq.n	800400c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61da      	str	r2, [r3, #28]
 8003ffe:	e005      	b.n	800400c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd ff24 	bl	8001e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	ea42 0103 	orr.w	r1, r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	0c1a      	lsrs	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f002 0204 	and.w	r2, r2, #4
 80040b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_SPI_Transmit+0x22>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e126      	b.n	800434c <HAL_SPI_Transmit+0x270>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004106:	f7fe fad9 	bl	80026bc <HAL_GetTick>
 800410a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d002      	beq.n	8004122 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800411c:	2302      	movs	r3, #2
 800411e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004120:	e10b      	b.n	800433a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_SPI_Transmit+0x52>
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004132:	e102      	b.n	800433a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2203      	movs	r2, #3
 8004138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417a:	d10f      	bne.n	800419c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800419a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b40      	cmp	r3, #64	; 0x40
 80041a8:	d007      	beq.n	80041ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c2:	d14b      	bne.n	800425c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_Transmit+0xf6>
 80041cc:	8afb      	ldrh	r3, [r7, #22]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d13e      	bne.n	8004250 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	881a      	ldrh	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	1c9a      	adds	r2, r3, #2
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041f6:	e02b      	b.n	8004250 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d112      	bne.n	800422c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	1c9a      	adds	r2, r3, #2
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	86da      	strh	r2, [r3, #54]	; 0x36
 800422a:	e011      	b.n	8004250 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800422c:	f7fe fa46 	bl	80026bc <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d803      	bhi.n	8004244 <HAL_SPI_Transmit+0x168>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d102      	bne.n	800424a <HAL_SPI_Transmit+0x16e>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800424e:	e074      	b.n	800433a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ce      	bne.n	80041f8 <HAL_SPI_Transmit+0x11c>
 800425a:	e04c      	b.n	80042f6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_SPI_Transmit+0x18e>
 8004264:	8afb      	ldrh	r3, [r7, #22]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d140      	bne.n	80042ec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004290:	e02c      	b.n	80042ec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d113      	bne.n	80042c8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80042c6:	e011      	b.n	80042ec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c8:	f7fe f9f8 	bl	80026bc <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d803      	bhi.n	80042e0 <HAL_SPI_Transmit+0x204>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d102      	bne.n	80042e6 <HAL_SPI_Transmit+0x20a>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042ea:	e026      	b.n	800433a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1cd      	bne.n	8004292 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fbb8 	bl	8004a70 <SPI_EndRxTxTransaction>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e000      	b.n	800433a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004338:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800434a:	7ffb      	ldrb	r3, [r7, #31]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af02      	add	r7, sp, #8
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004370:	d112      	bne.n	8004398 <HAL_SPI_Receive+0x44>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10e      	bne.n	8004398 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2204      	movs	r2, #4
 800437e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f8f1 	bl	8004576 <HAL_SPI_TransmitReceive>
 8004394:	4603      	mov	r3, r0
 8004396:	e0ea      	b.n	800456e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_SPI_Receive+0x52>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e0e3      	b.n	800456e <HAL_SPI_Receive+0x21a>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ae:	f7fe f985 	bl	80026bc <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d002      	beq.n	80043c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
 80043c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043c4:	e0ca      	b.n	800455c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_SPI_Receive+0x7e>
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043d6:	e0c1      	b.n	800455c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2204      	movs	r2, #4
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441e:	d10f      	bne.n	8004440 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b40      	cmp	r3, #64	; 0x40
 800444c:	d007      	beq.n	800445e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800445c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d162      	bne.n	800452c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004466:	e02e      	b.n	80044c6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d115      	bne.n	80044a2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f103 020c 	add.w	r2, r3, #12
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044a0:	e011      	b.n	80044c6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a2:	f7fe f90b 	bl	80026bc <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d803      	bhi.n	80044ba <HAL_SPI_Receive+0x166>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d102      	bne.n	80044c0 <HAL_SPI_Receive+0x16c>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044c4:	e04a      	b.n	800455c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1cb      	bne.n	8004468 <HAL_SPI_Receive+0x114>
 80044d0:	e031      	b.n	8004536 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d113      	bne.n	8004508 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	b292      	uxth	r2, r2
 80044ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	1c9a      	adds	r2, r3, #2
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004506:	e011      	b.n	800452c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004508:	f7fe f8d8 	bl	80026bc <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d803      	bhi.n	8004520 <HAL_SPI_Receive+0x1cc>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d102      	bne.n	8004526 <HAL_SPI_Receive+0x1d2>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	75fb      	strb	r3, [r7, #23]
          goto error;
 800452a:	e017      	b.n	800455c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1cd      	bne.n	80044d2 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	6839      	ldr	r1, [r7, #0]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fa46 	bl	80049cc <SPI_EndRxTransaction>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
 8004558:	e000      	b.n	800455c <HAL_SPI_Receive+0x208>
  }

error :
 800455a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08c      	sub	sp, #48	; 0x30
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004584:	2301      	movs	r3, #1
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_SPI_TransmitReceive+0x26>
 8004598:	2302      	movs	r3, #2
 800459a:	e18a      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x33c>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a4:	f7fe f88a 	bl	80026bc <HAL_GetTick>
 80045a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045ba:	887b      	ldrh	r3, [r7, #2]
 80045bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d00f      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0x70>
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045cc:	d107      	bne.n	80045de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <HAL_SPI_TransmitReceive+0x68>
 80045d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d003      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045de:	2302      	movs	r3, #2
 80045e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045e4:	e15b      	b.n	800489e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_SPI_TransmitReceive+0x82>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_SPI_TransmitReceive+0x82>
 80045f2:	887b      	ldrh	r3, [r7, #2]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045fe:	e14e      	b.n	800489e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b04      	cmp	r3, #4
 800460a:	d003      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2205      	movs	r2, #5
 8004610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	887a      	ldrh	r2, [r7, #2]
 800462a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	887a      	ldrh	r2, [r7, #2]
 8004636:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d007      	beq.n	8004668 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d178      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x10a>
 800467a:	8b7b      	ldrh	r3, [r7, #26]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d166      	bne.n	800474e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	881a      	ldrh	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	1c9a      	adds	r2, r3, #2
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a4:	e053      	b.n	800474e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d11b      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x176>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x176>
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d113      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	881a      	ldrh	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	1c9a      	adds	r2, r3, #2
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d119      	bne.n	800472e <HAL_SPI_TransmitReceive+0x1b8>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d014      	beq.n	800472e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	b292      	uxth	r2, r2
 8004710:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	1c9a      	adds	r2, r3, #2
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800472a:	2301      	movs	r3, #1
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800472e:	f7fd ffc5 	bl	80026bc <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800473a:	429a      	cmp	r2, r3
 800473c:	d807      	bhi.n	800474e <HAL_SPI_TransmitReceive+0x1d8>
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d003      	beq.n	800474e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800474c:	e0a7      	b.n	800489e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1a6      	bne.n	80046a6 <HAL_SPI_TransmitReceive+0x130>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1a1      	bne.n	80046a6 <HAL_SPI_TransmitReceive+0x130>
 8004762:	e07c      	b.n	800485e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SPI_TransmitReceive+0x1fc>
 800476c:	8b7b      	ldrh	r3, [r7, #26]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d16b      	bne.n	800484a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004798:	e057      	b.n	800484a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d11c      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x26c>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d017      	beq.n	80047e2 <HAL_SPI_TransmitReceive+0x26c>
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d114      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d119      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x2ae>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d014      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004820:	2301      	movs	r3, #1
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004824:	f7fd ff4a 	bl	80026bc <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004830:	429a      	cmp	r2, r3
 8004832:	d803      	bhi.n	800483c <HAL_SPI_TransmitReceive+0x2c6>
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d102      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x2cc>
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	2b00      	cmp	r3, #0
 8004840:	d103      	bne.n	800484a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004848:	e029      	b.n	800489e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1a2      	bne.n	800479a <HAL_SPI_TransmitReceive+0x224>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d19d      	bne.n	800479a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800485e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004860:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f904 	bl	8004a70 <SPI_EndRxTxTransaction>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d006      	beq.n	800487c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800487a:	e010      	b.n	800489e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10b      	bne.n	800489c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	e000      	b.n	800489e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800489c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3730      	adds	r7, #48	; 0x30
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048cc:	f7fd fef6 	bl	80026bc <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	4413      	add	r3, r2
 80048da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048dc:	f7fd feee 	bl	80026bc <HAL_GetTick>
 80048e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048e2:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	015b      	lsls	r3, r3, #5
 80048e8:	0d1b      	lsrs	r3, r3, #20
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048f2:	e054      	b.n	800499e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d050      	beq.n	800499e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048fc:	f7fd fede 	bl	80026bc <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	429a      	cmp	r2, r3
 800490a:	d902      	bls.n	8004912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d13d      	bne.n	800498e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492a:	d111      	bne.n	8004950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004934:	d004      	beq.n	8004940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493e:	d107      	bne.n	8004950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800494e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004958:	d10f      	bne.n	800497a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e017      	b.n	80049be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3b01      	subs	r3, #1
 800499c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d19b      	bne.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	2000001c 	.word	0x2000001c

080049cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e0:	d111      	bne.n	8004a06 <SPI_EndRxTransaction+0x3a>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ea:	d004      	beq.n	80049f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f4:	d107      	bne.n	8004a06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a04:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0e:	d117      	bne.n	8004a40 <SPI_EndRxTransaction+0x74>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a18:	d112      	bne.n	8004a40 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2101      	movs	r1, #1
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff ff49 	bl	80048bc <SPI_WaitFlagStateUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01a      	beq.n	8004a66 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e013      	b.n	8004a68 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2200      	movs	r2, #0
 8004a48:	2180      	movs	r1, #128	; 0x80
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f7ff ff36 	bl	80048bc <SPI_WaitFlagStateUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	f043 0220 	orr.w	r2, r3, #32
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e000      	b.n	8004a68 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2200      	movs	r2, #0
 8004a84:	2180      	movs	r1, #128	; 0x80
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff ff18 	bl	80048bc <SPI_WaitFlagStateUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e000      	b.n	8004aa4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e041      	b.n	8004b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fd fc82 	bl	80023dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f000 fa70 	bl	8004fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e03a      	b.n	8004bda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_TIM_Base_Start_IT+0x98>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x58>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8e:	d009      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x58>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x58>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a13      	ldr	r2, [pc, #76]	; (8004bec <HAL_TIM_Base_Start_IT+0xa0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d111      	bne.n	8004bc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d010      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc6:	e007      	b.n	8004bd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800

08004bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0202 	mvn.w	r2, #2
 8004c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9b1 	bl	8004f9a <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f9a4 	bl	8004f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f9b3 	bl	8004fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0204 	mvn.w	r2, #4
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f987 	bl	8004f9a <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f97a 	bl	8004f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f989 	bl	8004fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d122      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0208 	mvn.w	r2, #8
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f95d 	bl	8004f9a <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f950 	bl	8004f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f95f 	bl	8004fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d122      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d11b      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0210 	mvn.w	r2, #16
 8004d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f933 	bl	8004f9a <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f926 	bl	8004f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f935 	bl	8004fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d10e      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d107      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0201 	mvn.w	r2, #1
 8004d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fd f9e2 	bl	8002138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b80      	cmp	r3, #128	; 0x80
 8004d80:	d10e      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8c:	2b80      	cmp	r3, #128	; 0x80
 8004d8e:	d107      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa77 	bl	800528e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8f9 	bl	8004fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d10e      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d107      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0220 	mvn.w	r2, #32
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa42 	bl	800527c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_ConfigClockSource+0x18>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e0b3      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x180>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e50:	d03e      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0xd0>
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e56:	f200 8087 	bhi.w	8004f68 <HAL_TIM_ConfigClockSource+0x168>
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5e:	f000 8085 	beq.w	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e66:	d87f      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x168>
 8004e68:	2b70      	cmp	r3, #112	; 0x70
 8004e6a:	d01a      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0xa2>
 8004e6c:	2b70      	cmp	r3, #112	; 0x70
 8004e6e:	d87b      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x168>
 8004e70:	2b60      	cmp	r3, #96	; 0x60
 8004e72:	d050      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x116>
 8004e74:	2b60      	cmp	r3, #96	; 0x60
 8004e76:	d877      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x168>
 8004e78:	2b50      	cmp	r3, #80	; 0x50
 8004e7a:	d03c      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0xf6>
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d873      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x168>
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d058      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x136>
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d86f      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x168>
 8004e88:	2b30      	cmp	r3, #48	; 0x30
 8004e8a:	d064      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x156>
 8004e8c:	2b30      	cmp	r3, #48	; 0x30
 8004e8e:	d86b      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x168>
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d060      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x156>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d867      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x168>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d05c      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x156>
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d05a      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ea0:	e062      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6899      	ldr	r1, [r3, #8]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f000 f966 	bl	8005182 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ec4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	609a      	str	r2, [r3, #8]
      break;
 8004ece:	e04e      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6899      	ldr	r1, [r3, #8]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f000 f94f 	bl	8005182 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ef2:	609a      	str	r2, [r3, #8]
      break;
 8004ef4:	e03b      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f000 f8c6 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2150      	movs	r1, #80	; 0x50
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f91d 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 8004f14:	e02b      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 f8e4 	bl	80050f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2160      	movs	r1, #96	; 0x60
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f90d 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 8004f34:	e01b      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 f8a6 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2140      	movs	r1, #64	; 0x40
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f8fd 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 8004f54:	e00b      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f000 f8f4 	bl	800514e <TIM_ITRx_SetConfig>
        break;
 8004f66:	e002      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr

08004fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a29      	ldr	r2, [pc, #164]	; (8005088 <TIM_Base_SetConfig+0xb8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00b      	beq.n	8005000 <TIM_Base_SetConfig+0x30>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d007      	beq.n	8005000 <TIM_Base_SetConfig+0x30>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a26      	ldr	r2, [pc, #152]	; (800508c <TIM_Base_SetConfig+0xbc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0x30>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a25      	ldr	r2, [pc, #148]	; (8005090 <TIM_Base_SetConfig+0xc0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d108      	bne.n	8005012 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <TIM_Base_SetConfig+0xb8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00b      	beq.n	8005032 <TIM_Base_SetConfig+0x62>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d007      	beq.n	8005032 <TIM_Base_SetConfig+0x62>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a19      	ldr	r2, [pc, #100]	; (800508c <TIM_Base_SetConfig+0xbc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_Base_SetConfig+0x62>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <TIM_Base_SetConfig+0xc0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d108      	bne.n	8005044 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a07      	ldr	r2, [pc, #28]	; (8005088 <TIM_Base_SetConfig+0xb8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d103      	bne.n	8005078 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	615a      	str	r2, [r3, #20]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800

08005094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0201 	bic.w	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 030a 	bic.w	r3, r3, #10
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f023 0210 	bic.w	r2, r3, #16
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800511a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	031b      	lsls	r3, r3, #12
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800512c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	621a      	str	r2, [r3, #32]
}
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005164:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	f043 0307 	orr.w	r3, r3, #7
 8005170:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005182:	b480      	push	{r7}
 8005184:	b087      	sub	sp, #28
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	021a      	lsls	r2, r3, #8
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	609a      	str	r2, [r3, #8]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e046      	b.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a16      	ldr	r2, [pc, #88]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005224:	d009      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a12      	ldr	r2, [pc, #72]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a10      	ldr	r2, [pc, #64]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10c      	bne.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4313      	orrs	r3, r2
 800524a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40000400 	.word	0x40000400
 8005278:	40000800 	.word	0x40000800

0800527c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e03f      	b.n	8005332 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fd f918 	bl	80024fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fc21 	bl	8005b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695a      	ldr	r2, [r3, #20]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b08a      	sub	sp, #40	; 0x28
 800533e:	af02      	add	r7, sp, #8
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b20      	cmp	r3, #32
 8005358:	d17c      	bne.n	8005454 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_UART_Transmit+0x2c>
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e075      	b.n	8005456 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_UART_Transmit+0x3e>
 8005374:	2302      	movs	r3, #2
 8005376:	e06e      	b.n	8005456 <HAL_UART_Transmit+0x11c>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2221      	movs	r2, #33	; 0x21
 800538a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800538e:	f7fd f995 	bl	80026bc <HAL_GetTick>
 8005392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	88fa      	ldrh	r2, [r7, #6]
 800539e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a8:	d108      	bne.n	80053bc <HAL_UART_Transmit+0x82>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	e003      	b.n	80053c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80053cc:	e02a      	b.n	8005424 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2200      	movs	r2, #0
 80053d6:	2180      	movs	r1, #128	; 0x80
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 fa45 	bl	8005868 <UART_WaitOnFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e036      	b.n	8005456 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10b      	bne.n	8005406 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	3302      	adds	r3, #2
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	e007      	b.n	8005416 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	3301      	adds	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1cf      	bne.n	80053ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2200      	movs	r2, #0
 8005436:	2140      	movs	r1, #64	; 0x40
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fa15 	bl	8005868 <UART_WaitOnFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e006      	b.n	8005456 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b08a      	sub	sp, #40	; 0x28
 8005462:	af02      	add	r7, sp, #8
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	603b      	str	r3, [r7, #0]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b20      	cmp	r3, #32
 800547c:	f040 8089 	bne.w	8005592 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_UART_Receive+0x2e>
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e081      	b.n	8005594 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_UART_Receive+0x40>
 800549a:	2302      	movs	r3, #2
 800549c:	e07a      	b.n	8005594 <HAL_UART_Receive+0x136>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2222      	movs	r2, #34	; 0x22
 80054b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80054b4:	f7fd f902 	bl	80026bc <HAL_GetTick>
 80054b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d108      	bne.n	80054e2 <HAL_UART_Receive+0x84>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	e003      	b.n	80054ea <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80054f2:	e043      	b.n	800557c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2200      	movs	r2, #0
 80054fc:	2120      	movs	r1, #32
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f9b2 	bl	8005868 <UART_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e042      	b.n	8005594 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10c      	bne.n	800552e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005520:	b29a      	uxth	r2, r3
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	3302      	adds	r3, #2
 800552a:	61bb      	str	r3, [r7, #24]
 800552c:	e01f      	b.n	800556e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005536:	d007      	beq.n	8005548 <HAL_UART_Receive+0xea>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <HAL_UART_Receive+0xf8>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	b2da      	uxtb	r2, r3
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	e008      	b.n	8005568 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005562:	b2da      	uxtb	r2, r3
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	3301      	adds	r3, #1
 800556c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1b6      	bne.n	80054f4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d140      	bne.n	8005638 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_UART_Receive_IT+0x26>
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e039      	b.n	800563a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Receive_IT+0x38>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e032      	b.n	800563a <HAL_UART_Receive_IT+0x9e>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	88fa      	ldrh	r2, [r7, #6]
 80055ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2222      	movs	r2, #34	; 0x22
 80055f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005612:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0220 	orr.w	r2, r2, #32
 8005632:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005638:	2302      	movs	r3, #2
  }
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr

08005644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005664:	2300      	movs	r3, #0
 8005666:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10d      	bne.n	8005696 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_UART_IRQHandler+0x52>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9cc 	bl	8005a2c <UART_Receive_IT>
      return;
 8005694:	e0d0      	b.n	8005838 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80b0 	beq.w	80057fe <HAL_UART_IRQHandler+0x1ba>
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <HAL_UART_IRQHandler+0x70>
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80a5 	beq.w	80057fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_UART_IRQHandler+0x90>
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_UART_IRQHandler+0xb0>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ec:	f043 0202 	orr.w	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_UART_IRQHandler+0xd0>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570c:	f043 0204 	orr.w	r2, r3, #4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00f      	beq.n	800573e <HAL_UART_IRQHandler+0xfa>
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <HAL_UART_IRQHandler+0xee>
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	f043 0208 	orr.w	r2, r3, #8
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	2b00      	cmp	r3, #0
 8005744:	d077      	beq.n	8005836 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <HAL_UART_IRQHandler+0x11c>
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f966 	bl	8005a2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	bf14      	ite	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2300      	moveq	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <HAL_UART_IRQHandler+0x144>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d031      	beq.n	80057ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f8b7 	bl	80058fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d023      	beq.n	80057e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d013      	beq.n	80057dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b8:	4a21      	ldr	r2, [pc, #132]	; (8005840 <HAL_UART_IRQHandler+0x1fc>)
 80057ba:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fd fcab 	bl	800311c <HAL_DMA_Abort_IT>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d016      	beq.n	80057fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057d6:	4610      	mov	r0, r2
 80057d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057da:	e00e      	b.n	80057fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f83a 	bl	8005856 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e2:	e00a      	b.n	80057fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f836 	bl	8005856 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ea:	e006      	b.n	80057fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f832 	bl	8005856 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80057f8:	e01d      	b.n	8005836 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fa:	bf00      	nop
    return;
 80057fc:	e01b      	b.n	8005836 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <HAL_UART_IRQHandler+0x1d6>
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8a3 	bl	800595e <UART_Transmit_IT>
    return;
 8005818:	e00e      	b.n	8005838 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <HAL_UART_IRQHandler+0x1f4>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8e4 	bl	80059fc <UART_EndTransmit_IT>
    return;
 8005834:	e000      	b.n	8005838 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005836:	bf00      	nop
  }
}
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	08005937 	.word	0x08005937

08005844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr

08005856 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	4613      	mov	r3, r2
 8005876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005878:	e02c      	b.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d028      	beq.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <UART_WaitOnFlagUntilTimeout+0x30>
 8005888:	f7fc ff18 	bl	80026bc <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	429a      	cmp	r2, r3
 8005896:	d21d      	bcs.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e00f      	b.n	80058f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4013      	ands	r3, r2
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d0c3      	beq.n	800587a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005912:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr

08005936 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff ff80 	bl	8005856 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800595e:	b480      	push	{r7}
 8005960:	b085      	sub	sp, #20
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b21      	cmp	r3, #33	; 0x21
 8005970:	d13e      	bne.n	80059f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597a:	d114      	bne.n	80059a6 <UART_Transmit_IT+0x48>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d110      	bne.n	80059a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	1c9a      	adds	r2, r3, #2
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	621a      	str	r2, [r3, #32]
 80059a4:	e008      	b.n	80059b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	1c59      	adds	r1, r3, #1
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6211      	str	r1, [r2, #32]
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4619      	mov	r1, r3
 80059c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10f      	bne.n	80059ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff11 	bl	8005844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b22      	cmp	r3, #34	; 0x22
 8005a3e:	d170      	bne.n	8005b22 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a48:	d117      	bne.n	8005a7a <UART_Receive_IT+0x4e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d113      	bne.n	8005a7a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	1c9a      	adds	r2, r3, #2
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28
 8005a78:	e026      	b.n	8005ac8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8c:	d007      	beq.n	8005a9e <UART_Receive_IT+0x72>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <UART_Receive_IT+0x80>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	e008      	b.n	8005abe <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d120      	bne.n	8005b1e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0220 	bic.w	r2, r2, #32
 8005aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fc fac7 	bl	80020a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e002      	b.n	8005b24 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e000      	b.n	8005b24 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
  }
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b66:	f023 030c 	bic.w	r3, r3, #12
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	430b      	orrs	r3, r1
 8005b72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2c      	ldr	r2, [pc, #176]	; (8005c40 <UART_SetConfig+0x114>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d103      	bne.n	8005b9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b94:	f7fe f936 	bl	8003e04 <HAL_RCC_GetPCLK2Freq>
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	e002      	b.n	8005ba2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f7fe f91e 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8005ba0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009a      	lsls	r2, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <UART_SetConfig+0x118>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	0119      	lsls	r1, r3, #4
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009a      	lsls	r2, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <UART_SetConfig+0x118>)
 8005bda:	fba3 0302 	umull	r0, r3, r3, r2
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	2064      	movs	r0, #100	; 0x64
 8005be2:	fb00 f303 	mul.w	r3, r0, r3
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	3332      	adds	r3, #50	; 0x32
 8005bec:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <UART_SetConfig+0x118>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf8:	4419      	add	r1, r3
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009a      	lsls	r2, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <UART_SetConfig+0x118>)
 8005c12:	fba3 0302 	umull	r0, r3, r3, r2
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	2064      	movs	r0, #100	; 0x64
 8005c1a:	fb00 f303 	mul.w	r3, r0, r3
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	3332      	adds	r3, #50	; 0x32
 8005c24:	4a07      	ldr	r2, [pc, #28]	; (8005c44 <UART_SetConfig+0x118>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	f003 020f 	and.w	r2, r3, #15
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	440a      	add	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40013800 	.word	0x40013800
 8005c44:	51eb851f 	.word	0x51eb851f

08005c48 <__errno>:
 8005c48:	4b01      	ldr	r3, [pc, #4]	; (8005c50 <__errno+0x8>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000028 	.word	0x20000028

08005c54 <__libc_init_array>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	2600      	movs	r6, #0
 8005c58:	4d0c      	ldr	r5, [pc, #48]	; (8005c8c <__libc_init_array+0x38>)
 8005c5a:	4c0d      	ldr	r4, [pc, #52]	; (8005c90 <__libc_init_array+0x3c>)
 8005c5c:	1b64      	subs	r4, r4, r5
 8005c5e:	10a4      	asrs	r4, r4, #2
 8005c60:	42a6      	cmp	r6, r4
 8005c62:	d109      	bne.n	8005c78 <__libc_init_array+0x24>
 8005c64:	f001 f8dc 	bl	8006e20 <_init>
 8005c68:	2600      	movs	r6, #0
 8005c6a:	4d0a      	ldr	r5, [pc, #40]	; (8005c94 <__libc_init_array+0x40>)
 8005c6c:	4c0a      	ldr	r4, [pc, #40]	; (8005c98 <__libc_init_array+0x44>)
 8005c6e:	1b64      	subs	r4, r4, r5
 8005c70:	10a4      	asrs	r4, r4, #2
 8005c72:	42a6      	cmp	r6, r4
 8005c74:	d105      	bne.n	8005c82 <__libc_init_array+0x2e>
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7c:	4798      	blx	r3
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7ee      	b.n	8005c60 <__libc_init_array+0xc>
 8005c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c86:	4798      	blx	r3
 8005c88:	3601      	adds	r6, #1
 8005c8a:	e7f2      	b.n	8005c72 <__libc_init_array+0x1e>
 8005c8c:	0800785c 	.word	0x0800785c
 8005c90:	0800785c 	.word	0x0800785c
 8005c94:	0800785c 	.word	0x0800785c
 8005c98:	08007860 	.word	0x08007860

08005c9c <memset>:
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4402      	add	r2, r0
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d100      	bne.n	8005ca6 <memset+0xa>
 8005ca4:	4770      	bx	lr
 8005ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8005caa:	e7f9      	b.n	8005ca0 <memset+0x4>

08005cac <iprintf>:
 8005cac:	b40f      	push	{r0, r1, r2, r3}
 8005cae:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <iprintf+0x2c>)
 8005cb0:	b513      	push	{r0, r1, r4, lr}
 8005cb2:	681c      	ldr	r4, [r3, #0]
 8005cb4:	b124      	cbz	r4, 8005cc0 <iprintf+0x14>
 8005cb6:	69a3      	ldr	r3, [r4, #24]
 8005cb8:	b913      	cbnz	r3, 8005cc0 <iprintf+0x14>
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fb3a 	bl	8006334 <__sinit>
 8005cc0:	ab05      	add	r3, sp, #20
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	9a04      	ldr	r2, [sp, #16]
 8005cc6:	68a1      	ldr	r1, [r4, #8]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	f000 fd0d 	bl	80066e8 <_vfiprintf_r>
 8005cce:	b002      	add	sp, #8
 8005cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cd4:	b004      	add	sp, #16
 8005cd6:	4770      	bx	lr
 8005cd8:	20000028 	.word	0x20000028

08005cdc <_puts_r>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	460e      	mov	r6, r1
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	b118      	cbz	r0, 8005cec <_puts_r+0x10>
 8005ce4:	6983      	ldr	r3, [r0, #24]
 8005ce6:	b90b      	cbnz	r3, 8005cec <_puts_r+0x10>
 8005ce8:	f000 fb24 	bl	8006334 <__sinit>
 8005cec:	69ab      	ldr	r3, [r5, #24]
 8005cee:	68ac      	ldr	r4, [r5, #8]
 8005cf0:	b913      	cbnz	r3, 8005cf8 <_puts_r+0x1c>
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 fb1e 	bl	8006334 <__sinit>
 8005cf8:	4b2c      	ldr	r3, [pc, #176]	; (8005dac <_puts_r+0xd0>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d120      	bne.n	8005d40 <_puts_r+0x64>
 8005cfe:	686c      	ldr	r4, [r5, #4]
 8005d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d02:	07db      	lsls	r3, r3, #31
 8005d04:	d405      	bmi.n	8005d12 <_puts_r+0x36>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	0598      	lsls	r0, r3, #22
 8005d0a:	d402      	bmi.n	8005d12 <_puts_r+0x36>
 8005d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d0e:	f000 fbaf 	bl	8006470 <__retarget_lock_acquire_recursive>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	0719      	lsls	r1, r3, #28
 8005d16:	d51d      	bpl.n	8005d54 <_puts_r+0x78>
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	b1db      	cbz	r3, 8005d54 <_puts_r+0x78>
 8005d1c:	3e01      	subs	r6, #1
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d24:	3b01      	subs	r3, #1
 8005d26:	60a3      	str	r3, [r4, #8]
 8005d28:	bb39      	cbnz	r1, 8005d7a <_puts_r+0x9e>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	da38      	bge.n	8005da0 <_puts_r+0xc4>
 8005d2e:	4622      	mov	r2, r4
 8005d30:	210a      	movs	r1, #10
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 f924 	bl	8005f80 <__swbuf_r>
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d011      	beq.n	8005d60 <_puts_r+0x84>
 8005d3c:	250a      	movs	r5, #10
 8005d3e:	e011      	b.n	8005d64 <_puts_r+0x88>
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <_puts_r+0xd4>)
 8005d42:	429c      	cmp	r4, r3
 8005d44:	d101      	bne.n	8005d4a <_puts_r+0x6e>
 8005d46:	68ac      	ldr	r4, [r5, #8]
 8005d48:	e7da      	b.n	8005d00 <_puts_r+0x24>
 8005d4a:	4b1a      	ldr	r3, [pc, #104]	; (8005db4 <_puts_r+0xd8>)
 8005d4c:	429c      	cmp	r4, r3
 8005d4e:	bf08      	it	eq
 8005d50:	68ec      	ldreq	r4, [r5, #12]
 8005d52:	e7d5      	b.n	8005d00 <_puts_r+0x24>
 8005d54:	4621      	mov	r1, r4
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 f964 	bl	8006024 <__swsetup_r>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d0dd      	beq.n	8005d1c <_puts_r+0x40>
 8005d60:	f04f 35ff 	mov.w	r5, #4294967295
 8005d64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d66:	07da      	lsls	r2, r3, #31
 8005d68:	d405      	bmi.n	8005d76 <_puts_r+0x9a>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	059b      	lsls	r3, r3, #22
 8005d6e:	d402      	bmi.n	8005d76 <_puts_r+0x9a>
 8005d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d72:	f000 fb7e 	bl	8006472 <__retarget_lock_release_recursive>
 8005d76:	4628      	mov	r0, r5
 8005d78:	bd70      	pop	{r4, r5, r6, pc}
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da04      	bge.n	8005d88 <_puts_r+0xac>
 8005d7e:	69a2      	ldr	r2, [r4, #24]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	dc06      	bgt.n	8005d92 <_puts_r+0xb6>
 8005d84:	290a      	cmp	r1, #10
 8005d86:	d004      	beq.n	8005d92 <_puts_r+0xb6>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	6022      	str	r2, [r4, #0]
 8005d8e:	7019      	strb	r1, [r3, #0]
 8005d90:	e7c5      	b.n	8005d1e <_puts_r+0x42>
 8005d92:	4622      	mov	r2, r4
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f8f3 	bl	8005f80 <__swbuf_r>
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d1bf      	bne.n	8005d1e <_puts_r+0x42>
 8005d9e:	e7df      	b.n	8005d60 <_puts_r+0x84>
 8005da0:	250a      	movs	r5, #10
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	701d      	strb	r5, [r3, #0]
 8005daa:	e7db      	b.n	8005d64 <_puts_r+0x88>
 8005dac:	080077e8 	.word	0x080077e8
 8005db0:	08007808 	.word	0x08007808
 8005db4:	080077c8 	.word	0x080077c8

08005db8 <puts>:
 8005db8:	4b02      	ldr	r3, [pc, #8]	; (8005dc4 <puts+0xc>)
 8005dba:	4601      	mov	r1, r0
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	f7ff bf8d 	b.w	8005cdc <_puts_r>
 8005dc2:	bf00      	nop
 8005dc4:	20000028 	.word	0x20000028

08005dc8 <setvbuf>:
 8005dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dcc:	461d      	mov	r5, r3
 8005dce:	4b5d      	ldr	r3, [pc, #372]	; (8005f44 <setvbuf+0x17c>)
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	681f      	ldr	r7, [r3, #0]
 8005dd4:	460e      	mov	r6, r1
 8005dd6:	4690      	mov	r8, r2
 8005dd8:	b127      	cbz	r7, 8005de4 <setvbuf+0x1c>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	b913      	cbnz	r3, 8005de4 <setvbuf+0x1c>
 8005dde:	4638      	mov	r0, r7
 8005de0:	f000 faa8 	bl	8006334 <__sinit>
 8005de4:	4b58      	ldr	r3, [pc, #352]	; (8005f48 <setvbuf+0x180>)
 8005de6:	429c      	cmp	r4, r3
 8005de8:	d167      	bne.n	8005eba <setvbuf+0xf2>
 8005dea:	687c      	ldr	r4, [r7, #4]
 8005dec:	f1b8 0f02 	cmp.w	r8, #2
 8005df0:	d006      	beq.n	8005e00 <setvbuf+0x38>
 8005df2:	f1b8 0f01 	cmp.w	r8, #1
 8005df6:	f200 809f 	bhi.w	8005f38 <setvbuf+0x170>
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	f2c0 809c 	blt.w	8005f38 <setvbuf+0x170>
 8005e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e02:	07db      	lsls	r3, r3, #31
 8005e04:	d405      	bmi.n	8005e12 <setvbuf+0x4a>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	0598      	lsls	r0, r3, #22
 8005e0a:	d402      	bmi.n	8005e12 <setvbuf+0x4a>
 8005e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0e:	f000 fb2f 	bl	8006470 <__retarget_lock_acquire_recursive>
 8005e12:	4621      	mov	r1, r4
 8005e14:	4638      	mov	r0, r7
 8005e16:	f000 f9f9 	bl	800620c <_fflush_r>
 8005e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e1c:	b141      	cbz	r1, 8005e30 <setvbuf+0x68>
 8005e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e22:	4299      	cmp	r1, r3
 8005e24:	d002      	beq.n	8005e2c <setvbuf+0x64>
 8005e26:	4638      	mov	r0, r7
 8005e28:	f000 fb90 	bl	800654c <_free_r>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6363      	str	r3, [r4, #52]	; 0x34
 8005e30:	2300      	movs	r3, #0
 8005e32:	61a3      	str	r3, [r4, #24]
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	0619      	lsls	r1, r3, #24
 8005e3a:	d503      	bpl.n	8005e44 <setvbuf+0x7c>
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	6921      	ldr	r1, [r4, #16]
 8005e40:	f000 fb84 	bl	800654c <_free_r>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f1b8 0f02 	cmp.w	r8, #2
 8005e4a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	d06c      	beq.n	8005f30 <setvbuf+0x168>
 8005e56:	ab01      	add	r3, sp, #4
 8005e58:	466a      	mov	r2, sp
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f000 fb09 	bl	8006474 <__swhatbuf_r>
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	4318      	orrs	r0, r3
 8005e66:	81a0      	strh	r0, [r4, #12]
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	d130      	bne.n	8005ece <setvbuf+0x106>
 8005e6c:	9d00      	ldr	r5, [sp, #0]
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 fb64 	bl	800653c <malloc>
 8005e74:	4606      	mov	r6, r0
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d155      	bne.n	8005f26 <setvbuf+0x15e>
 8005e7a:	f8dd 9000 	ldr.w	r9, [sp]
 8005e7e:	45a9      	cmp	r9, r5
 8005e80:	d14a      	bne.n	8005f18 <setvbuf+0x150>
 8005e82:	f04f 35ff 	mov.w	r5, #4294967295
 8005e86:	2200      	movs	r2, #0
 8005e88:	60a2      	str	r2, [r4, #8]
 8005e8a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005e8e:	6022      	str	r2, [r4, #0]
 8005e90:	6122      	str	r2, [r4, #16]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e98:	6162      	str	r2, [r4, #20]
 8005e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	07d2      	lsls	r2, r2, #31
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	d405      	bmi.n	8005eb2 <setvbuf+0xea>
 8005ea6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005eaa:	d102      	bne.n	8005eb2 <setvbuf+0xea>
 8005eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eae:	f000 fae0 	bl	8006472 <__retarget_lock_release_recursive>
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	b003      	add	sp, #12
 8005eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eba:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <setvbuf+0x184>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d101      	bne.n	8005ec4 <setvbuf+0xfc>
 8005ec0:	68bc      	ldr	r4, [r7, #8]
 8005ec2:	e793      	b.n	8005dec <setvbuf+0x24>
 8005ec4:	4b22      	ldr	r3, [pc, #136]	; (8005f50 <setvbuf+0x188>)
 8005ec6:	429c      	cmp	r4, r3
 8005ec8:	bf08      	it	eq
 8005eca:	68fc      	ldreq	r4, [r7, #12]
 8005ecc:	e78e      	b.n	8005dec <setvbuf+0x24>
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d0cd      	beq.n	8005e6e <setvbuf+0xa6>
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	b913      	cbnz	r3, 8005edc <setvbuf+0x114>
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	f000 fa2c 	bl	8006334 <__sinit>
 8005edc:	f1b8 0f01 	cmp.w	r8, #1
 8005ee0:	bf08      	it	eq
 8005ee2:	89a3      	ldrheq	r3, [r4, #12]
 8005ee4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005ee8:	bf04      	itt	eq
 8005eea:	f043 0301 	orreq.w	r3, r3, #1
 8005eee:	81a3      	strheq	r3, [r4, #12]
 8005ef0:	89a2      	ldrh	r2, [r4, #12]
 8005ef2:	6026      	str	r6, [r4, #0]
 8005ef4:	f012 0308 	ands.w	r3, r2, #8
 8005ef8:	d01c      	beq.n	8005f34 <setvbuf+0x16c>
 8005efa:	07d3      	lsls	r3, r2, #31
 8005efc:	bf41      	itttt	mi
 8005efe:	2300      	movmi	r3, #0
 8005f00:	426d      	negmi	r5, r5
 8005f02:	60a3      	strmi	r3, [r4, #8]
 8005f04:	61a5      	strmi	r5, [r4, #24]
 8005f06:	bf58      	it	pl
 8005f08:	60a5      	strpl	r5, [r4, #8]
 8005f0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005f0c:	f015 0501 	ands.w	r5, r5, #1
 8005f10:	d115      	bne.n	8005f3e <setvbuf+0x176>
 8005f12:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005f16:	e7c8      	b.n	8005eaa <setvbuf+0xe2>
 8005f18:	4648      	mov	r0, r9
 8005f1a:	f000 fb0f 	bl	800653c <malloc>
 8005f1e:	4606      	mov	r6, r0
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d0ae      	beq.n	8005e82 <setvbuf+0xba>
 8005f24:	464d      	mov	r5, r9
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2c:	81a3      	strh	r3, [r4, #12]
 8005f2e:	e7d0      	b.n	8005ed2 <setvbuf+0x10a>
 8005f30:	2500      	movs	r5, #0
 8005f32:	e7a8      	b.n	8005e86 <setvbuf+0xbe>
 8005f34:	60a3      	str	r3, [r4, #8]
 8005f36:	e7e8      	b.n	8005f0a <setvbuf+0x142>
 8005f38:	f04f 35ff 	mov.w	r5, #4294967295
 8005f3c:	e7b9      	b.n	8005eb2 <setvbuf+0xea>
 8005f3e:	2500      	movs	r5, #0
 8005f40:	e7b7      	b.n	8005eb2 <setvbuf+0xea>
 8005f42:	bf00      	nop
 8005f44:	20000028 	.word	0x20000028
 8005f48:	080077e8 	.word	0x080077e8
 8005f4c:	08007808 	.word	0x08007808
 8005f50:	080077c8 	.word	0x080077c8

08005f54 <viprintf>:
 8005f54:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <viprintf+0x28>)
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	681c      	ldr	r4, [r3, #0]
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	460e      	mov	r6, r1
 8005f5e:	b124      	cbz	r4, 8005f6a <viprintf+0x16>
 8005f60:	69a3      	ldr	r3, [r4, #24]
 8005f62:	b913      	cbnz	r3, 8005f6a <viprintf+0x16>
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 f9e5 	bl	8006334 <__sinit>
 8005f6a:	4633      	mov	r3, r6
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4620      	mov	r0, r4
 8005f70:	68a1      	ldr	r1, [r4, #8]
 8005f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f76:	f000 bbb7 	b.w	80066e8 <_vfiprintf_r>
 8005f7a:	bf00      	nop
 8005f7c:	20000028 	.word	0x20000028

08005f80 <__swbuf_r>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	460e      	mov	r6, r1
 8005f84:	4614      	mov	r4, r2
 8005f86:	4605      	mov	r5, r0
 8005f88:	b118      	cbz	r0, 8005f92 <__swbuf_r+0x12>
 8005f8a:	6983      	ldr	r3, [r0, #24]
 8005f8c:	b90b      	cbnz	r3, 8005f92 <__swbuf_r+0x12>
 8005f8e:	f000 f9d1 	bl	8006334 <__sinit>
 8005f92:	4b21      	ldr	r3, [pc, #132]	; (8006018 <__swbuf_r+0x98>)
 8005f94:	429c      	cmp	r4, r3
 8005f96:	d12b      	bne.n	8005ff0 <__swbuf_r+0x70>
 8005f98:	686c      	ldr	r4, [r5, #4]
 8005f9a:	69a3      	ldr	r3, [r4, #24]
 8005f9c:	60a3      	str	r3, [r4, #8]
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	071a      	lsls	r2, r3, #28
 8005fa2:	d52f      	bpl.n	8006004 <__swbuf_r+0x84>
 8005fa4:	6923      	ldr	r3, [r4, #16]
 8005fa6:	b36b      	cbz	r3, 8006004 <__swbuf_r+0x84>
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	b2f6      	uxtb	r6, r6
 8005fae:	1ac0      	subs	r0, r0, r3
 8005fb0:	6963      	ldr	r3, [r4, #20]
 8005fb2:	4637      	mov	r7, r6
 8005fb4:	4283      	cmp	r3, r0
 8005fb6:	dc04      	bgt.n	8005fc2 <__swbuf_r+0x42>
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f926 	bl	800620c <_fflush_r>
 8005fc0:	bb30      	cbnz	r0, 8006010 <__swbuf_r+0x90>
 8005fc2:	68a3      	ldr	r3, [r4, #8]
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	60a3      	str	r3, [r4, #8]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	6022      	str	r2, [r4, #0]
 8005fd0:	701e      	strb	r6, [r3, #0]
 8005fd2:	6963      	ldr	r3, [r4, #20]
 8005fd4:	4283      	cmp	r3, r0
 8005fd6:	d004      	beq.n	8005fe2 <__swbuf_r+0x62>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	07db      	lsls	r3, r3, #31
 8005fdc:	d506      	bpl.n	8005fec <__swbuf_r+0x6c>
 8005fde:	2e0a      	cmp	r6, #10
 8005fe0:	d104      	bne.n	8005fec <__swbuf_r+0x6c>
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	f000 f911 	bl	800620c <_fflush_r>
 8005fea:	b988      	cbnz	r0, 8006010 <__swbuf_r+0x90>
 8005fec:	4638      	mov	r0, r7
 8005fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <__swbuf_r+0x9c>)
 8005ff2:	429c      	cmp	r4, r3
 8005ff4:	d101      	bne.n	8005ffa <__swbuf_r+0x7a>
 8005ff6:	68ac      	ldr	r4, [r5, #8]
 8005ff8:	e7cf      	b.n	8005f9a <__swbuf_r+0x1a>
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <__swbuf_r+0xa0>)
 8005ffc:	429c      	cmp	r4, r3
 8005ffe:	bf08      	it	eq
 8006000:	68ec      	ldreq	r4, [r5, #12]
 8006002:	e7ca      	b.n	8005f9a <__swbuf_r+0x1a>
 8006004:	4621      	mov	r1, r4
 8006006:	4628      	mov	r0, r5
 8006008:	f000 f80c 	bl	8006024 <__swsetup_r>
 800600c:	2800      	cmp	r0, #0
 800600e:	d0cb      	beq.n	8005fa8 <__swbuf_r+0x28>
 8006010:	f04f 37ff 	mov.w	r7, #4294967295
 8006014:	e7ea      	b.n	8005fec <__swbuf_r+0x6c>
 8006016:	bf00      	nop
 8006018:	080077e8 	.word	0x080077e8
 800601c:	08007808 	.word	0x08007808
 8006020:	080077c8 	.word	0x080077c8

08006024 <__swsetup_r>:
 8006024:	4b32      	ldr	r3, [pc, #200]	; (80060f0 <__swsetup_r+0xcc>)
 8006026:	b570      	push	{r4, r5, r6, lr}
 8006028:	681d      	ldr	r5, [r3, #0]
 800602a:	4606      	mov	r6, r0
 800602c:	460c      	mov	r4, r1
 800602e:	b125      	cbz	r5, 800603a <__swsetup_r+0x16>
 8006030:	69ab      	ldr	r3, [r5, #24]
 8006032:	b913      	cbnz	r3, 800603a <__swsetup_r+0x16>
 8006034:	4628      	mov	r0, r5
 8006036:	f000 f97d 	bl	8006334 <__sinit>
 800603a:	4b2e      	ldr	r3, [pc, #184]	; (80060f4 <__swsetup_r+0xd0>)
 800603c:	429c      	cmp	r4, r3
 800603e:	d10f      	bne.n	8006060 <__swsetup_r+0x3c>
 8006040:	686c      	ldr	r4, [r5, #4]
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006048:	0719      	lsls	r1, r3, #28
 800604a:	d42c      	bmi.n	80060a6 <__swsetup_r+0x82>
 800604c:	06dd      	lsls	r5, r3, #27
 800604e:	d411      	bmi.n	8006074 <__swsetup_r+0x50>
 8006050:	2309      	movs	r3, #9
 8006052:	6033      	str	r3, [r6, #0]
 8006054:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	e03e      	b.n	80060de <__swsetup_r+0xba>
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <__swsetup_r+0xd4>)
 8006062:	429c      	cmp	r4, r3
 8006064:	d101      	bne.n	800606a <__swsetup_r+0x46>
 8006066:	68ac      	ldr	r4, [r5, #8]
 8006068:	e7eb      	b.n	8006042 <__swsetup_r+0x1e>
 800606a:	4b24      	ldr	r3, [pc, #144]	; (80060fc <__swsetup_r+0xd8>)
 800606c:	429c      	cmp	r4, r3
 800606e:	bf08      	it	eq
 8006070:	68ec      	ldreq	r4, [r5, #12]
 8006072:	e7e6      	b.n	8006042 <__swsetup_r+0x1e>
 8006074:	0758      	lsls	r0, r3, #29
 8006076:	d512      	bpl.n	800609e <__swsetup_r+0x7a>
 8006078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800607a:	b141      	cbz	r1, 800608e <__swsetup_r+0x6a>
 800607c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006080:	4299      	cmp	r1, r3
 8006082:	d002      	beq.n	800608a <__swsetup_r+0x66>
 8006084:	4630      	mov	r0, r6
 8006086:	f000 fa61 	bl	800654c <_free_r>
 800608a:	2300      	movs	r3, #0
 800608c:	6363      	str	r3, [r4, #52]	; 0x34
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	2300      	movs	r3, #0
 8006098:	6063      	str	r3, [r4, #4]
 800609a:	6923      	ldr	r3, [r4, #16]
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	f043 0308 	orr.w	r3, r3, #8
 80060a4:	81a3      	strh	r3, [r4, #12]
 80060a6:	6923      	ldr	r3, [r4, #16]
 80060a8:	b94b      	cbnz	r3, 80060be <__swsetup_r+0x9a>
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b4:	d003      	beq.n	80060be <__swsetup_r+0x9a>
 80060b6:	4621      	mov	r1, r4
 80060b8:	4630      	mov	r0, r6
 80060ba:	f000 f9ff 	bl	80064bc <__smakebuf_r>
 80060be:	89a0      	ldrh	r0, [r4, #12]
 80060c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060c4:	f010 0301 	ands.w	r3, r0, #1
 80060c8:	d00a      	beq.n	80060e0 <__swsetup_r+0xbc>
 80060ca:	2300      	movs	r3, #0
 80060cc:	60a3      	str	r3, [r4, #8]
 80060ce:	6963      	ldr	r3, [r4, #20]
 80060d0:	425b      	negs	r3, r3
 80060d2:	61a3      	str	r3, [r4, #24]
 80060d4:	6923      	ldr	r3, [r4, #16]
 80060d6:	b943      	cbnz	r3, 80060ea <__swsetup_r+0xc6>
 80060d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060dc:	d1ba      	bne.n	8006054 <__swsetup_r+0x30>
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	0781      	lsls	r1, r0, #30
 80060e2:	bf58      	it	pl
 80060e4:	6963      	ldrpl	r3, [r4, #20]
 80060e6:	60a3      	str	r3, [r4, #8]
 80060e8:	e7f4      	b.n	80060d4 <__swsetup_r+0xb0>
 80060ea:	2000      	movs	r0, #0
 80060ec:	e7f7      	b.n	80060de <__swsetup_r+0xba>
 80060ee:	bf00      	nop
 80060f0:	20000028 	.word	0x20000028
 80060f4:	080077e8 	.word	0x080077e8
 80060f8:	08007808 	.word	0x08007808
 80060fc:	080077c8 	.word	0x080077c8

08006100 <__sflush_r>:
 8006100:	898a      	ldrh	r2, [r1, #12]
 8006102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006106:	4605      	mov	r5, r0
 8006108:	0710      	lsls	r0, r2, #28
 800610a:	460c      	mov	r4, r1
 800610c:	d458      	bmi.n	80061c0 <__sflush_r+0xc0>
 800610e:	684b      	ldr	r3, [r1, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	dc05      	bgt.n	8006120 <__sflush_r+0x20>
 8006114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	dc02      	bgt.n	8006120 <__sflush_r+0x20>
 800611a:	2000      	movs	r0, #0
 800611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006122:	2e00      	cmp	r6, #0
 8006124:	d0f9      	beq.n	800611a <__sflush_r+0x1a>
 8006126:	2300      	movs	r3, #0
 8006128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800612c:	682f      	ldr	r7, [r5, #0]
 800612e:	602b      	str	r3, [r5, #0]
 8006130:	d032      	beq.n	8006198 <__sflush_r+0x98>
 8006132:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	075a      	lsls	r2, r3, #29
 8006138:	d505      	bpl.n	8006146 <__sflush_r+0x46>
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	1ac0      	subs	r0, r0, r3
 800613e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006140:	b10b      	cbz	r3, 8006146 <__sflush_r+0x46>
 8006142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006144:	1ac0      	subs	r0, r0, r3
 8006146:	2300      	movs	r3, #0
 8006148:	4602      	mov	r2, r0
 800614a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800614c:	4628      	mov	r0, r5
 800614e:	6a21      	ldr	r1, [r4, #32]
 8006150:	47b0      	blx	r6
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	d106      	bne.n	8006166 <__sflush_r+0x66>
 8006158:	6829      	ldr	r1, [r5, #0]
 800615a:	291d      	cmp	r1, #29
 800615c:	d82c      	bhi.n	80061b8 <__sflush_r+0xb8>
 800615e:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <__sflush_r+0x108>)
 8006160:	40ca      	lsrs	r2, r1
 8006162:	07d6      	lsls	r6, r2, #31
 8006164:	d528      	bpl.n	80061b8 <__sflush_r+0xb8>
 8006166:	2200      	movs	r2, #0
 8006168:	6062      	str	r2, [r4, #4]
 800616a:	6922      	ldr	r2, [r4, #16]
 800616c:	04d9      	lsls	r1, r3, #19
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	d504      	bpl.n	800617c <__sflush_r+0x7c>
 8006172:	1c42      	adds	r2, r0, #1
 8006174:	d101      	bne.n	800617a <__sflush_r+0x7a>
 8006176:	682b      	ldr	r3, [r5, #0]
 8006178:	b903      	cbnz	r3, 800617c <__sflush_r+0x7c>
 800617a:	6560      	str	r0, [r4, #84]	; 0x54
 800617c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800617e:	602f      	str	r7, [r5, #0]
 8006180:	2900      	cmp	r1, #0
 8006182:	d0ca      	beq.n	800611a <__sflush_r+0x1a>
 8006184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006188:	4299      	cmp	r1, r3
 800618a:	d002      	beq.n	8006192 <__sflush_r+0x92>
 800618c:	4628      	mov	r0, r5
 800618e:	f000 f9dd 	bl	800654c <_free_r>
 8006192:	2000      	movs	r0, #0
 8006194:	6360      	str	r0, [r4, #52]	; 0x34
 8006196:	e7c1      	b.n	800611c <__sflush_r+0x1c>
 8006198:	6a21      	ldr	r1, [r4, #32]
 800619a:	2301      	movs	r3, #1
 800619c:	4628      	mov	r0, r5
 800619e:	47b0      	blx	r6
 80061a0:	1c41      	adds	r1, r0, #1
 80061a2:	d1c7      	bne.n	8006134 <__sflush_r+0x34>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0c4      	beq.n	8006134 <__sflush_r+0x34>
 80061aa:	2b1d      	cmp	r3, #29
 80061ac:	d001      	beq.n	80061b2 <__sflush_r+0xb2>
 80061ae:	2b16      	cmp	r3, #22
 80061b0:	d101      	bne.n	80061b6 <__sflush_r+0xb6>
 80061b2:	602f      	str	r7, [r5, #0]
 80061b4:	e7b1      	b.n	800611a <__sflush_r+0x1a>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	e7ad      	b.n	800611c <__sflush_r+0x1c>
 80061c0:	690f      	ldr	r7, [r1, #16]
 80061c2:	2f00      	cmp	r7, #0
 80061c4:	d0a9      	beq.n	800611a <__sflush_r+0x1a>
 80061c6:	0793      	lsls	r3, r2, #30
 80061c8:	bf18      	it	ne
 80061ca:	2300      	movne	r3, #0
 80061cc:	680e      	ldr	r6, [r1, #0]
 80061ce:	bf08      	it	eq
 80061d0:	694b      	ldreq	r3, [r1, #20]
 80061d2:	eba6 0807 	sub.w	r8, r6, r7
 80061d6:	600f      	str	r7, [r1, #0]
 80061d8:	608b      	str	r3, [r1, #8]
 80061da:	f1b8 0f00 	cmp.w	r8, #0
 80061de:	dd9c      	ble.n	800611a <__sflush_r+0x1a>
 80061e0:	4643      	mov	r3, r8
 80061e2:	463a      	mov	r2, r7
 80061e4:	4628      	mov	r0, r5
 80061e6:	6a21      	ldr	r1, [r4, #32]
 80061e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061ea:	47b0      	blx	r6
 80061ec:	2800      	cmp	r0, #0
 80061ee:	dc06      	bgt.n	80061fe <__sflush_r+0xfe>
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295
 80061f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061fa:	81a3      	strh	r3, [r4, #12]
 80061fc:	e78e      	b.n	800611c <__sflush_r+0x1c>
 80061fe:	4407      	add	r7, r0
 8006200:	eba8 0800 	sub.w	r8, r8, r0
 8006204:	e7e9      	b.n	80061da <__sflush_r+0xda>
 8006206:	bf00      	nop
 8006208:	20400001 	.word	0x20400001

0800620c <_fflush_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	690b      	ldr	r3, [r1, #16]
 8006210:	4605      	mov	r5, r0
 8006212:	460c      	mov	r4, r1
 8006214:	b913      	cbnz	r3, 800621c <_fflush_r+0x10>
 8006216:	2500      	movs	r5, #0
 8006218:	4628      	mov	r0, r5
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	b118      	cbz	r0, 8006226 <_fflush_r+0x1a>
 800621e:	6983      	ldr	r3, [r0, #24]
 8006220:	b90b      	cbnz	r3, 8006226 <_fflush_r+0x1a>
 8006222:	f000 f887 	bl	8006334 <__sinit>
 8006226:	4b14      	ldr	r3, [pc, #80]	; (8006278 <_fflush_r+0x6c>)
 8006228:	429c      	cmp	r4, r3
 800622a:	d11b      	bne.n	8006264 <_fflush_r+0x58>
 800622c:	686c      	ldr	r4, [r5, #4]
 800622e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0ef      	beq.n	8006216 <_fflush_r+0xa>
 8006236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006238:	07d0      	lsls	r0, r2, #31
 800623a:	d404      	bmi.n	8006246 <_fflush_r+0x3a>
 800623c:	0599      	lsls	r1, r3, #22
 800623e:	d402      	bmi.n	8006246 <_fflush_r+0x3a>
 8006240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006242:	f000 f915 	bl	8006470 <__retarget_lock_acquire_recursive>
 8006246:	4628      	mov	r0, r5
 8006248:	4621      	mov	r1, r4
 800624a:	f7ff ff59 	bl	8006100 <__sflush_r>
 800624e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006250:	4605      	mov	r5, r0
 8006252:	07da      	lsls	r2, r3, #31
 8006254:	d4e0      	bmi.n	8006218 <_fflush_r+0xc>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	059b      	lsls	r3, r3, #22
 800625a:	d4dd      	bmi.n	8006218 <_fflush_r+0xc>
 800625c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800625e:	f000 f908 	bl	8006472 <__retarget_lock_release_recursive>
 8006262:	e7d9      	b.n	8006218 <_fflush_r+0xc>
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <_fflush_r+0x70>)
 8006266:	429c      	cmp	r4, r3
 8006268:	d101      	bne.n	800626e <_fflush_r+0x62>
 800626a:	68ac      	ldr	r4, [r5, #8]
 800626c:	e7df      	b.n	800622e <_fflush_r+0x22>
 800626e:	4b04      	ldr	r3, [pc, #16]	; (8006280 <_fflush_r+0x74>)
 8006270:	429c      	cmp	r4, r3
 8006272:	bf08      	it	eq
 8006274:	68ec      	ldreq	r4, [r5, #12]
 8006276:	e7da      	b.n	800622e <_fflush_r+0x22>
 8006278:	080077e8 	.word	0x080077e8
 800627c:	08007808 	.word	0x08007808
 8006280:	080077c8 	.word	0x080077c8

08006284 <std>:
 8006284:	2300      	movs	r3, #0
 8006286:	b510      	push	{r4, lr}
 8006288:	4604      	mov	r4, r0
 800628a:	e9c0 3300 	strd	r3, r3, [r0]
 800628e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006292:	6083      	str	r3, [r0, #8]
 8006294:	8181      	strh	r1, [r0, #12]
 8006296:	6643      	str	r3, [r0, #100]	; 0x64
 8006298:	81c2      	strh	r2, [r0, #14]
 800629a:	6183      	str	r3, [r0, #24]
 800629c:	4619      	mov	r1, r3
 800629e:	2208      	movs	r2, #8
 80062a0:	305c      	adds	r0, #92	; 0x5c
 80062a2:	f7ff fcfb 	bl	8005c9c <memset>
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <std+0x38>)
 80062a8:	6224      	str	r4, [r4, #32]
 80062aa:	6263      	str	r3, [r4, #36]	; 0x24
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <std+0x3c>)
 80062ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <std+0x40>)
 80062b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062b4:	4b04      	ldr	r3, [pc, #16]	; (80062c8 <std+0x44>)
 80062b6:	6323      	str	r3, [r4, #48]	; 0x30
 80062b8:	bd10      	pop	{r4, pc}
 80062ba:	bf00      	nop
 80062bc:	08006c95 	.word	0x08006c95
 80062c0:	08006cb7 	.word	0x08006cb7
 80062c4:	08006cef 	.word	0x08006cef
 80062c8:	08006d13 	.word	0x08006d13

080062cc <_cleanup_r>:
 80062cc:	4901      	ldr	r1, [pc, #4]	; (80062d4 <_cleanup_r+0x8>)
 80062ce:	f000 b8af 	b.w	8006430 <_fwalk_reent>
 80062d2:	bf00      	nop
 80062d4:	0800620d 	.word	0x0800620d

080062d8 <__sfmoreglue>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	2568      	movs	r5, #104	; 0x68
 80062dc:	1e4a      	subs	r2, r1, #1
 80062de:	4355      	muls	r5, r2
 80062e0:	460e      	mov	r6, r1
 80062e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062e6:	f000 f97d 	bl	80065e4 <_malloc_r>
 80062ea:	4604      	mov	r4, r0
 80062ec:	b140      	cbz	r0, 8006300 <__sfmoreglue+0x28>
 80062ee:	2100      	movs	r1, #0
 80062f0:	e9c0 1600 	strd	r1, r6, [r0]
 80062f4:	300c      	adds	r0, #12
 80062f6:	60a0      	str	r0, [r4, #8]
 80062f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062fc:	f7ff fcce 	bl	8005c9c <memset>
 8006300:	4620      	mov	r0, r4
 8006302:	bd70      	pop	{r4, r5, r6, pc}

08006304 <__sfp_lock_acquire>:
 8006304:	4801      	ldr	r0, [pc, #4]	; (800630c <__sfp_lock_acquire+0x8>)
 8006306:	f000 b8b3 	b.w	8006470 <__retarget_lock_acquire_recursive>
 800630a:	bf00      	nop
 800630c:	20000218 	.word	0x20000218

08006310 <__sfp_lock_release>:
 8006310:	4801      	ldr	r0, [pc, #4]	; (8006318 <__sfp_lock_release+0x8>)
 8006312:	f000 b8ae 	b.w	8006472 <__retarget_lock_release_recursive>
 8006316:	bf00      	nop
 8006318:	20000218 	.word	0x20000218

0800631c <__sinit_lock_acquire>:
 800631c:	4801      	ldr	r0, [pc, #4]	; (8006324 <__sinit_lock_acquire+0x8>)
 800631e:	f000 b8a7 	b.w	8006470 <__retarget_lock_acquire_recursive>
 8006322:	bf00      	nop
 8006324:	20000213 	.word	0x20000213

08006328 <__sinit_lock_release>:
 8006328:	4801      	ldr	r0, [pc, #4]	; (8006330 <__sinit_lock_release+0x8>)
 800632a:	f000 b8a2 	b.w	8006472 <__retarget_lock_release_recursive>
 800632e:	bf00      	nop
 8006330:	20000213 	.word	0x20000213

08006334 <__sinit>:
 8006334:	b510      	push	{r4, lr}
 8006336:	4604      	mov	r4, r0
 8006338:	f7ff fff0 	bl	800631c <__sinit_lock_acquire>
 800633c:	69a3      	ldr	r3, [r4, #24]
 800633e:	b11b      	cbz	r3, 8006348 <__sinit+0x14>
 8006340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006344:	f7ff bff0 	b.w	8006328 <__sinit_lock_release>
 8006348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800634c:	6523      	str	r3, [r4, #80]	; 0x50
 800634e:	4b13      	ldr	r3, [pc, #76]	; (800639c <__sinit+0x68>)
 8006350:	4a13      	ldr	r2, [pc, #76]	; (80063a0 <__sinit+0x6c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	62a2      	str	r2, [r4, #40]	; 0x28
 8006356:	42a3      	cmp	r3, r4
 8006358:	bf08      	it	eq
 800635a:	2301      	moveq	r3, #1
 800635c:	4620      	mov	r0, r4
 800635e:	bf08      	it	eq
 8006360:	61a3      	streq	r3, [r4, #24]
 8006362:	f000 f81f 	bl	80063a4 <__sfp>
 8006366:	6060      	str	r0, [r4, #4]
 8006368:	4620      	mov	r0, r4
 800636a:	f000 f81b 	bl	80063a4 <__sfp>
 800636e:	60a0      	str	r0, [r4, #8]
 8006370:	4620      	mov	r0, r4
 8006372:	f000 f817 	bl	80063a4 <__sfp>
 8006376:	2200      	movs	r2, #0
 8006378:	2104      	movs	r1, #4
 800637a:	60e0      	str	r0, [r4, #12]
 800637c:	6860      	ldr	r0, [r4, #4]
 800637e:	f7ff ff81 	bl	8006284 <std>
 8006382:	2201      	movs	r2, #1
 8006384:	2109      	movs	r1, #9
 8006386:	68a0      	ldr	r0, [r4, #8]
 8006388:	f7ff ff7c 	bl	8006284 <std>
 800638c:	2202      	movs	r2, #2
 800638e:	2112      	movs	r1, #18
 8006390:	68e0      	ldr	r0, [r4, #12]
 8006392:	f7ff ff77 	bl	8006284 <std>
 8006396:	2301      	movs	r3, #1
 8006398:	61a3      	str	r3, [r4, #24]
 800639a:	e7d1      	b.n	8006340 <__sinit+0xc>
 800639c:	080077c4 	.word	0x080077c4
 80063a0:	080062cd 	.word	0x080062cd

080063a4 <__sfp>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	4607      	mov	r7, r0
 80063a8:	f7ff ffac 	bl	8006304 <__sfp_lock_acquire>
 80063ac:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <__sfp+0x84>)
 80063ae:	681e      	ldr	r6, [r3, #0]
 80063b0:	69b3      	ldr	r3, [r6, #24]
 80063b2:	b913      	cbnz	r3, 80063ba <__sfp+0x16>
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff ffbd 	bl	8006334 <__sinit>
 80063ba:	3648      	adds	r6, #72	; 0x48
 80063bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	d503      	bpl.n	80063cc <__sfp+0x28>
 80063c4:	6833      	ldr	r3, [r6, #0]
 80063c6:	b30b      	cbz	r3, 800640c <__sfp+0x68>
 80063c8:	6836      	ldr	r6, [r6, #0]
 80063ca:	e7f7      	b.n	80063bc <__sfp+0x18>
 80063cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063d0:	b9d5      	cbnz	r5, 8006408 <__sfp+0x64>
 80063d2:	4b16      	ldr	r3, [pc, #88]	; (800642c <__sfp+0x88>)
 80063d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063d8:	60e3      	str	r3, [r4, #12]
 80063da:	6665      	str	r5, [r4, #100]	; 0x64
 80063dc:	f000 f847 	bl	800646e <__retarget_lock_init_recursive>
 80063e0:	f7ff ff96 	bl	8006310 <__sfp_lock_release>
 80063e4:	2208      	movs	r2, #8
 80063e6:	4629      	mov	r1, r5
 80063e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80063ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80063f0:	6025      	str	r5, [r4, #0]
 80063f2:	61a5      	str	r5, [r4, #24]
 80063f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063f8:	f7ff fc50 	bl	8005c9c <memset>
 80063fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006404:	4620      	mov	r0, r4
 8006406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006408:	3468      	adds	r4, #104	; 0x68
 800640a:	e7d9      	b.n	80063c0 <__sfp+0x1c>
 800640c:	2104      	movs	r1, #4
 800640e:	4638      	mov	r0, r7
 8006410:	f7ff ff62 	bl	80062d8 <__sfmoreglue>
 8006414:	4604      	mov	r4, r0
 8006416:	6030      	str	r0, [r6, #0]
 8006418:	2800      	cmp	r0, #0
 800641a:	d1d5      	bne.n	80063c8 <__sfp+0x24>
 800641c:	f7ff ff78 	bl	8006310 <__sfp_lock_release>
 8006420:	230c      	movs	r3, #12
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	e7ee      	b.n	8006404 <__sfp+0x60>
 8006426:	bf00      	nop
 8006428:	080077c4 	.word	0x080077c4
 800642c:	ffff0001 	.word	0xffff0001

08006430 <_fwalk_reent>:
 8006430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006434:	4606      	mov	r6, r0
 8006436:	4688      	mov	r8, r1
 8006438:	2700      	movs	r7, #0
 800643a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800643e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006442:	f1b9 0901 	subs.w	r9, r9, #1
 8006446:	d505      	bpl.n	8006454 <_fwalk_reent+0x24>
 8006448:	6824      	ldr	r4, [r4, #0]
 800644a:	2c00      	cmp	r4, #0
 800644c:	d1f7      	bne.n	800643e <_fwalk_reent+0xe>
 800644e:	4638      	mov	r0, r7
 8006450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006454:	89ab      	ldrh	r3, [r5, #12]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d907      	bls.n	800646a <_fwalk_reent+0x3a>
 800645a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800645e:	3301      	adds	r3, #1
 8006460:	d003      	beq.n	800646a <_fwalk_reent+0x3a>
 8006462:	4629      	mov	r1, r5
 8006464:	4630      	mov	r0, r6
 8006466:	47c0      	blx	r8
 8006468:	4307      	orrs	r7, r0
 800646a:	3568      	adds	r5, #104	; 0x68
 800646c:	e7e9      	b.n	8006442 <_fwalk_reent+0x12>

0800646e <__retarget_lock_init_recursive>:
 800646e:	4770      	bx	lr

08006470 <__retarget_lock_acquire_recursive>:
 8006470:	4770      	bx	lr

08006472 <__retarget_lock_release_recursive>:
 8006472:	4770      	bx	lr

08006474 <__swhatbuf_r>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	460e      	mov	r6, r1
 8006478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647c:	4614      	mov	r4, r2
 800647e:	2900      	cmp	r1, #0
 8006480:	461d      	mov	r5, r3
 8006482:	b096      	sub	sp, #88	; 0x58
 8006484:	da07      	bge.n	8006496 <__swhatbuf_r+0x22>
 8006486:	2300      	movs	r3, #0
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	89b3      	ldrh	r3, [r6, #12]
 800648c:	061a      	lsls	r2, r3, #24
 800648e:	d410      	bmi.n	80064b2 <__swhatbuf_r+0x3e>
 8006490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006494:	e00e      	b.n	80064b4 <__swhatbuf_r+0x40>
 8006496:	466a      	mov	r2, sp
 8006498:	f000 fc62 	bl	8006d60 <_fstat_r>
 800649c:	2800      	cmp	r0, #0
 800649e:	dbf2      	blt.n	8006486 <__swhatbuf_r+0x12>
 80064a0:	9a01      	ldr	r2, [sp, #4]
 80064a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064aa:	425a      	negs	r2, r3
 80064ac:	415a      	adcs	r2, r3
 80064ae:	602a      	str	r2, [r5, #0]
 80064b0:	e7ee      	b.n	8006490 <__swhatbuf_r+0x1c>
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	2000      	movs	r0, #0
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	b016      	add	sp, #88	; 0x58
 80064ba:	bd70      	pop	{r4, r5, r6, pc}

080064bc <__smakebuf_r>:
 80064bc:	898b      	ldrh	r3, [r1, #12]
 80064be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064c0:	079d      	lsls	r5, r3, #30
 80064c2:	4606      	mov	r6, r0
 80064c4:	460c      	mov	r4, r1
 80064c6:	d507      	bpl.n	80064d8 <__smakebuf_r+0x1c>
 80064c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	2301      	movs	r3, #1
 80064d2:	6163      	str	r3, [r4, #20]
 80064d4:	b002      	add	sp, #8
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	466a      	mov	r2, sp
 80064da:	ab01      	add	r3, sp, #4
 80064dc:	f7ff ffca 	bl	8006474 <__swhatbuf_r>
 80064e0:	9900      	ldr	r1, [sp, #0]
 80064e2:	4605      	mov	r5, r0
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 f87d 	bl	80065e4 <_malloc_r>
 80064ea:	b948      	cbnz	r0, 8006500 <__smakebuf_r+0x44>
 80064ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f0:	059a      	lsls	r2, r3, #22
 80064f2:	d4ef      	bmi.n	80064d4 <__smakebuf_r+0x18>
 80064f4:	f023 0303 	bic.w	r3, r3, #3
 80064f8:	f043 0302 	orr.w	r3, r3, #2
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	e7e3      	b.n	80064c8 <__smakebuf_r+0xc>
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <__smakebuf_r+0x7c>)
 8006502:	62b3      	str	r3, [r6, #40]	; 0x28
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	6020      	str	r0, [r4, #0]
 8006508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	9b00      	ldr	r3, [sp, #0]
 8006510:	6120      	str	r0, [r4, #16]
 8006512:	6163      	str	r3, [r4, #20]
 8006514:	9b01      	ldr	r3, [sp, #4]
 8006516:	b15b      	cbz	r3, 8006530 <__smakebuf_r+0x74>
 8006518:	4630      	mov	r0, r6
 800651a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800651e:	f000 fc31 	bl	8006d84 <_isatty_r>
 8006522:	b128      	cbz	r0, 8006530 <__smakebuf_r+0x74>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	89a0      	ldrh	r0, [r4, #12]
 8006532:	4305      	orrs	r5, r0
 8006534:	81a5      	strh	r5, [r4, #12]
 8006536:	e7cd      	b.n	80064d4 <__smakebuf_r+0x18>
 8006538:	080062cd 	.word	0x080062cd

0800653c <malloc>:
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <malloc+0xc>)
 800653e:	4601      	mov	r1, r0
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	f000 b84f 	b.w	80065e4 <_malloc_r>
 8006546:	bf00      	nop
 8006548:	20000028 	.word	0x20000028

0800654c <_free_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4605      	mov	r5, r0
 8006550:	2900      	cmp	r1, #0
 8006552:	d043      	beq.n	80065dc <_free_r+0x90>
 8006554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006558:	1f0c      	subs	r4, r1, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	bfb8      	it	lt
 800655e:	18e4      	addlt	r4, r4, r3
 8006560:	f000 fc40 	bl	8006de4 <__malloc_lock>
 8006564:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <_free_r+0x94>)
 8006566:	6813      	ldr	r3, [r2, #0]
 8006568:	4610      	mov	r0, r2
 800656a:	b933      	cbnz	r3, 800657a <_free_r+0x2e>
 800656c:	6063      	str	r3, [r4, #4]
 800656e:	6014      	str	r4, [r2, #0]
 8006570:	4628      	mov	r0, r5
 8006572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006576:	f000 bc3b 	b.w	8006df0 <__malloc_unlock>
 800657a:	42a3      	cmp	r3, r4
 800657c:	d90a      	bls.n	8006594 <_free_r+0x48>
 800657e:	6821      	ldr	r1, [r4, #0]
 8006580:	1862      	adds	r2, r4, r1
 8006582:	4293      	cmp	r3, r2
 8006584:	bf01      	itttt	eq
 8006586:	681a      	ldreq	r2, [r3, #0]
 8006588:	685b      	ldreq	r3, [r3, #4]
 800658a:	1852      	addeq	r2, r2, r1
 800658c:	6022      	streq	r2, [r4, #0]
 800658e:	6063      	str	r3, [r4, #4]
 8006590:	6004      	str	r4, [r0, #0]
 8006592:	e7ed      	b.n	8006570 <_free_r+0x24>
 8006594:	461a      	mov	r2, r3
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	b10b      	cbz	r3, 800659e <_free_r+0x52>
 800659a:	42a3      	cmp	r3, r4
 800659c:	d9fa      	bls.n	8006594 <_free_r+0x48>
 800659e:	6811      	ldr	r1, [r2, #0]
 80065a0:	1850      	adds	r0, r2, r1
 80065a2:	42a0      	cmp	r0, r4
 80065a4:	d10b      	bne.n	80065be <_free_r+0x72>
 80065a6:	6820      	ldr	r0, [r4, #0]
 80065a8:	4401      	add	r1, r0
 80065aa:	1850      	adds	r0, r2, r1
 80065ac:	4283      	cmp	r3, r0
 80065ae:	6011      	str	r1, [r2, #0]
 80065b0:	d1de      	bne.n	8006570 <_free_r+0x24>
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	4401      	add	r1, r0
 80065b8:	6011      	str	r1, [r2, #0]
 80065ba:	6053      	str	r3, [r2, #4]
 80065bc:	e7d8      	b.n	8006570 <_free_r+0x24>
 80065be:	d902      	bls.n	80065c6 <_free_r+0x7a>
 80065c0:	230c      	movs	r3, #12
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	e7d4      	b.n	8006570 <_free_r+0x24>
 80065c6:	6820      	ldr	r0, [r4, #0]
 80065c8:	1821      	adds	r1, r4, r0
 80065ca:	428b      	cmp	r3, r1
 80065cc:	bf01      	itttt	eq
 80065ce:	6819      	ldreq	r1, [r3, #0]
 80065d0:	685b      	ldreq	r3, [r3, #4]
 80065d2:	1809      	addeq	r1, r1, r0
 80065d4:	6021      	streq	r1, [r4, #0]
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	6054      	str	r4, [r2, #4]
 80065da:	e7c9      	b.n	8006570 <_free_r+0x24>
 80065dc:	bd38      	pop	{r3, r4, r5, pc}
 80065de:	bf00      	nop
 80065e0:	200000c0 	.word	0x200000c0

080065e4 <_malloc_r>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	1ccd      	adds	r5, r1, #3
 80065e8:	f025 0503 	bic.w	r5, r5, #3
 80065ec:	3508      	adds	r5, #8
 80065ee:	2d0c      	cmp	r5, #12
 80065f0:	bf38      	it	cc
 80065f2:	250c      	movcc	r5, #12
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	4606      	mov	r6, r0
 80065f8:	db01      	blt.n	80065fe <_malloc_r+0x1a>
 80065fa:	42a9      	cmp	r1, r5
 80065fc:	d903      	bls.n	8006606 <_malloc_r+0x22>
 80065fe:	230c      	movs	r3, #12
 8006600:	6033      	str	r3, [r6, #0]
 8006602:	2000      	movs	r0, #0
 8006604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006606:	f000 fbed 	bl	8006de4 <__malloc_lock>
 800660a:	4921      	ldr	r1, [pc, #132]	; (8006690 <_malloc_r+0xac>)
 800660c:	680a      	ldr	r2, [r1, #0]
 800660e:	4614      	mov	r4, r2
 8006610:	b99c      	cbnz	r4, 800663a <_malloc_r+0x56>
 8006612:	4f20      	ldr	r7, [pc, #128]	; (8006694 <_malloc_r+0xb0>)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	b923      	cbnz	r3, 8006622 <_malloc_r+0x3e>
 8006618:	4621      	mov	r1, r4
 800661a:	4630      	mov	r0, r6
 800661c:	f000 fb2a 	bl	8006c74 <_sbrk_r>
 8006620:	6038      	str	r0, [r7, #0]
 8006622:	4629      	mov	r1, r5
 8006624:	4630      	mov	r0, r6
 8006626:	f000 fb25 	bl	8006c74 <_sbrk_r>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	d123      	bne.n	8006676 <_malloc_r+0x92>
 800662e:	230c      	movs	r3, #12
 8006630:	4630      	mov	r0, r6
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	f000 fbdc 	bl	8006df0 <__malloc_unlock>
 8006638:	e7e3      	b.n	8006602 <_malloc_r+0x1e>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	1b5b      	subs	r3, r3, r5
 800663e:	d417      	bmi.n	8006670 <_malloc_r+0x8c>
 8006640:	2b0b      	cmp	r3, #11
 8006642:	d903      	bls.n	800664c <_malloc_r+0x68>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	441c      	add	r4, r3
 8006648:	6025      	str	r5, [r4, #0]
 800664a:	e004      	b.n	8006656 <_malloc_r+0x72>
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	42a2      	cmp	r2, r4
 8006650:	bf0c      	ite	eq
 8006652:	600b      	streq	r3, [r1, #0]
 8006654:	6053      	strne	r3, [r2, #4]
 8006656:	4630      	mov	r0, r6
 8006658:	f000 fbca 	bl	8006df0 <__malloc_unlock>
 800665c:	f104 000b 	add.w	r0, r4, #11
 8006660:	1d23      	adds	r3, r4, #4
 8006662:	f020 0007 	bic.w	r0, r0, #7
 8006666:	1ac2      	subs	r2, r0, r3
 8006668:	d0cc      	beq.n	8006604 <_malloc_r+0x20>
 800666a:	1a1b      	subs	r3, r3, r0
 800666c:	50a3      	str	r3, [r4, r2]
 800666e:	e7c9      	b.n	8006604 <_malloc_r+0x20>
 8006670:	4622      	mov	r2, r4
 8006672:	6864      	ldr	r4, [r4, #4]
 8006674:	e7cc      	b.n	8006610 <_malloc_r+0x2c>
 8006676:	1cc4      	adds	r4, r0, #3
 8006678:	f024 0403 	bic.w	r4, r4, #3
 800667c:	42a0      	cmp	r0, r4
 800667e:	d0e3      	beq.n	8006648 <_malloc_r+0x64>
 8006680:	1a21      	subs	r1, r4, r0
 8006682:	4630      	mov	r0, r6
 8006684:	f000 faf6 	bl	8006c74 <_sbrk_r>
 8006688:	3001      	adds	r0, #1
 800668a:	d1dd      	bne.n	8006648 <_malloc_r+0x64>
 800668c:	e7cf      	b.n	800662e <_malloc_r+0x4a>
 800668e:	bf00      	nop
 8006690:	200000c0 	.word	0x200000c0
 8006694:	200000c4 	.word	0x200000c4

08006698 <__sfputc_r>:
 8006698:	6893      	ldr	r3, [r2, #8]
 800669a:	b410      	push	{r4}
 800669c:	3b01      	subs	r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	6093      	str	r3, [r2, #8]
 80066a2:	da07      	bge.n	80066b4 <__sfputc_r+0x1c>
 80066a4:	6994      	ldr	r4, [r2, #24]
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	db01      	blt.n	80066ae <__sfputc_r+0x16>
 80066aa:	290a      	cmp	r1, #10
 80066ac:	d102      	bne.n	80066b4 <__sfputc_r+0x1c>
 80066ae:	bc10      	pop	{r4}
 80066b0:	f7ff bc66 	b.w	8005f80 <__swbuf_r>
 80066b4:	6813      	ldr	r3, [r2, #0]
 80066b6:	1c58      	adds	r0, r3, #1
 80066b8:	6010      	str	r0, [r2, #0]
 80066ba:	7019      	strb	r1, [r3, #0]
 80066bc:	4608      	mov	r0, r1
 80066be:	bc10      	pop	{r4}
 80066c0:	4770      	bx	lr

080066c2 <__sfputs_r>:
 80066c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c4:	4606      	mov	r6, r0
 80066c6:	460f      	mov	r7, r1
 80066c8:	4614      	mov	r4, r2
 80066ca:	18d5      	adds	r5, r2, r3
 80066cc:	42ac      	cmp	r4, r5
 80066ce:	d101      	bne.n	80066d4 <__sfputs_r+0x12>
 80066d0:	2000      	movs	r0, #0
 80066d2:	e007      	b.n	80066e4 <__sfputs_r+0x22>
 80066d4:	463a      	mov	r2, r7
 80066d6:	4630      	mov	r0, r6
 80066d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066dc:	f7ff ffdc 	bl	8006698 <__sfputc_r>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d1f3      	bne.n	80066cc <__sfputs_r+0xa>
 80066e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066e8 <_vfiprintf_r>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	460d      	mov	r5, r1
 80066ee:	4614      	mov	r4, r2
 80066f0:	4698      	mov	r8, r3
 80066f2:	4606      	mov	r6, r0
 80066f4:	b09d      	sub	sp, #116	; 0x74
 80066f6:	b118      	cbz	r0, 8006700 <_vfiprintf_r+0x18>
 80066f8:	6983      	ldr	r3, [r0, #24]
 80066fa:	b90b      	cbnz	r3, 8006700 <_vfiprintf_r+0x18>
 80066fc:	f7ff fe1a 	bl	8006334 <__sinit>
 8006700:	4b89      	ldr	r3, [pc, #548]	; (8006928 <_vfiprintf_r+0x240>)
 8006702:	429d      	cmp	r5, r3
 8006704:	d11b      	bne.n	800673e <_vfiprintf_r+0x56>
 8006706:	6875      	ldr	r5, [r6, #4]
 8006708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800670a:	07d9      	lsls	r1, r3, #31
 800670c:	d405      	bmi.n	800671a <_vfiprintf_r+0x32>
 800670e:	89ab      	ldrh	r3, [r5, #12]
 8006710:	059a      	lsls	r2, r3, #22
 8006712:	d402      	bmi.n	800671a <_vfiprintf_r+0x32>
 8006714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006716:	f7ff feab 	bl	8006470 <__retarget_lock_acquire_recursive>
 800671a:	89ab      	ldrh	r3, [r5, #12]
 800671c:	071b      	lsls	r3, r3, #28
 800671e:	d501      	bpl.n	8006724 <_vfiprintf_r+0x3c>
 8006720:	692b      	ldr	r3, [r5, #16]
 8006722:	b9eb      	cbnz	r3, 8006760 <_vfiprintf_r+0x78>
 8006724:	4629      	mov	r1, r5
 8006726:	4630      	mov	r0, r6
 8006728:	f7ff fc7c 	bl	8006024 <__swsetup_r>
 800672c:	b1c0      	cbz	r0, 8006760 <_vfiprintf_r+0x78>
 800672e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006730:	07dc      	lsls	r4, r3, #31
 8006732:	d50e      	bpl.n	8006752 <_vfiprintf_r+0x6a>
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	b01d      	add	sp, #116	; 0x74
 800673a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673e:	4b7b      	ldr	r3, [pc, #492]	; (800692c <_vfiprintf_r+0x244>)
 8006740:	429d      	cmp	r5, r3
 8006742:	d101      	bne.n	8006748 <_vfiprintf_r+0x60>
 8006744:	68b5      	ldr	r5, [r6, #8]
 8006746:	e7df      	b.n	8006708 <_vfiprintf_r+0x20>
 8006748:	4b79      	ldr	r3, [pc, #484]	; (8006930 <_vfiprintf_r+0x248>)
 800674a:	429d      	cmp	r5, r3
 800674c:	bf08      	it	eq
 800674e:	68f5      	ldreq	r5, [r6, #12]
 8006750:	e7da      	b.n	8006708 <_vfiprintf_r+0x20>
 8006752:	89ab      	ldrh	r3, [r5, #12]
 8006754:	0598      	lsls	r0, r3, #22
 8006756:	d4ed      	bmi.n	8006734 <_vfiprintf_r+0x4c>
 8006758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800675a:	f7ff fe8a 	bl	8006472 <__retarget_lock_release_recursive>
 800675e:	e7e9      	b.n	8006734 <_vfiprintf_r+0x4c>
 8006760:	2300      	movs	r3, #0
 8006762:	9309      	str	r3, [sp, #36]	; 0x24
 8006764:	2320      	movs	r3, #32
 8006766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800676a:	2330      	movs	r3, #48	; 0x30
 800676c:	f04f 0901 	mov.w	r9, #1
 8006770:	f8cd 800c 	str.w	r8, [sp, #12]
 8006774:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006934 <_vfiprintf_r+0x24c>
 8006778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800677c:	4623      	mov	r3, r4
 800677e:	469a      	mov	sl, r3
 8006780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006784:	b10a      	cbz	r2, 800678a <_vfiprintf_r+0xa2>
 8006786:	2a25      	cmp	r2, #37	; 0x25
 8006788:	d1f9      	bne.n	800677e <_vfiprintf_r+0x96>
 800678a:	ebba 0b04 	subs.w	fp, sl, r4
 800678e:	d00b      	beq.n	80067a8 <_vfiprintf_r+0xc0>
 8006790:	465b      	mov	r3, fp
 8006792:	4622      	mov	r2, r4
 8006794:	4629      	mov	r1, r5
 8006796:	4630      	mov	r0, r6
 8006798:	f7ff ff93 	bl	80066c2 <__sfputs_r>
 800679c:	3001      	adds	r0, #1
 800679e:	f000 80aa 	beq.w	80068f6 <_vfiprintf_r+0x20e>
 80067a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a4:	445a      	add	r2, fp
 80067a6:	9209      	str	r2, [sp, #36]	; 0x24
 80067a8:	f89a 3000 	ldrb.w	r3, [sl]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80a2 	beq.w	80068f6 <_vfiprintf_r+0x20e>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f04f 32ff 	mov.w	r2, #4294967295
 80067b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067bc:	f10a 0a01 	add.w	sl, sl, #1
 80067c0:	9304      	str	r3, [sp, #16]
 80067c2:	9307      	str	r3, [sp, #28]
 80067c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067c8:	931a      	str	r3, [sp, #104]	; 0x68
 80067ca:	4654      	mov	r4, sl
 80067cc:	2205      	movs	r2, #5
 80067ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d2:	4858      	ldr	r0, [pc, #352]	; (8006934 <_vfiprintf_r+0x24c>)
 80067d4:	f000 faf8 	bl	8006dc8 <memchr>
 80067d8:	9a04      	ldr	r2, [sp, #16]
 80067da:	b9d8      	cbnz	r0, 8006814 <_vfiprintf_r+0x12c>
 80067dc:	06d1      	lsls	r1, r2, #27
 80067de:	bf44      	itt	mi
 80067e0:	2320      	movmi	r3, #32
 80067e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e6:	0713      	lsls	r3, r2, #28
 80067e8:	bf44      	itt	mi
 80067ea:	232b      	movmi	r3, #43	; 0x2b
 80067ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f0:	f89a 3000 	ldrb.w	r3, [sl]
 80067f4:	2b2a      	cmp	r3, #42	; 0x2a
 80067f6:	d015      	beq.n	8006824 <_vfiprintf_r+0x13c>
 80067f8:	4654      	mov	r4, sl
 80067fa:	2000      	movs	r0, #0
 80067fc:	f04f 0c0a 	mov.w	ip, #10
 8006800:	9a07      	ldr	r2, [sp, #28]
 8006802:	4621      	mov	r1, r4
 8006804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006808:	3b30      	subs	r3, #48	; 0x30
 800680a:	2b09      	cmp	r3, #9
 800680c:	d94e      	bls.n	80068ac <_vfiprintf_r+0x1c4>
 800680e:	b1b0      	cbz	r0, 800683e <_vfiprintf_r+0x156>
 8006810:	9207      	str	r2, [sp, #28]
 8006812:	e014      	b.n	800683e <_vfiprintf_r+0x156>
 8006814:	eba0 0308 	sub.w	r3, r0, r8
 8006818:	fa09 f303 	lsl.w	r3, r9, r3
 800681c:	4313      	orrs	r3, r2
 800681e:	46a2      	mov	sl, r4
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	e7d2      	b.n	80067ca <_vfiprintf_r+0xe2>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	1d19      	adds	r1, r3, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	9103      	str	r1, [sp, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	bfbb      	ittet	lt
 8006830:	425b      	neglt	r3, r3
 8006832:	f042 0202 	orrlt.w	r2, r2, #2
 8006836:	9307      	strge	r3, [sp, #28]
 8006838:	9307      	strlt	r3, [sp, #28]
 800683a:	bfb8      	it	lt
 800683c:	9204      	strlt	r2, [sp, #16]
 800683e:	7823      	ldrb	r3, [r4, #0]
 8006840:	2b2e      	cmp	r3, #46	; 0x2e
 8006842:	d10c      	bne.n	800685e <_vfiprintf_r+0x176>
 8006844:	7863      	ldrb	r3, [r4, #1]
 8006846:	2b2a      	cmp	r3, #42	; 0x2a
 8006848:	d135      	bne.n	80068b6 <_vfiprintf_r+0x1ce>
 800684a:	9b03      	ldr	r3, [sp, #12]
 800684c:	3402      	adds	r4, #2
 800684e:	1d1a      	adds	r2, r3, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	9203      	str	r2, [sp, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	bfb8      	it	lt
 8006858:	f04f 33ff 	movlt.w	r3, #4294967295
 800685c:	9305      	str	r3, [sp, #20]
 800685e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006944 <_vfiprintf_r+0x25c>
 8006862:	2203      	movs	r2, #3
 8006864:	4650      	mov	r0, sl
 8006866:	7821      	ldrb	r1, [r4, #0]
 8006868:	f000 faae 	bl	8006dc8 <memchr>
 800686c:	b140      	cbz	r0, 8006880 <_vfiprintf_r+0x198>
 800686e:	2340      	movs	r3, #64	; 0x40
 8006870:	eba0 000a 	sub.w	r0, r0, sl
 8006874:	fa03 f000 	lsl.w	r0, r3, r0
 8006878:	9b04      	ldr	r3, [sp, #16]
 800687a:	3401      	adds	r4, #1
 800687c:	4303      	orrs	r3, r0
 800687e:	9304      	str	r3, [sp, #16]
 8006880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006884:	2206      	movs	r2, #6
 8006886:	482c      	ldr	r0, [pc, #176]	; (8006938 <_vfiprintf_r+0x250>)
 8006888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800688c:	f000 fa9c 	bl	8006dc8 <memchr>
 8006890:	2800      	cmp	r0, #0
 8006892:	d03f      	beq.n	8006914 <_vfiprintf_r+0x22c>
 8006894:	4b29      	ldr	r3, [pc, #164]	; (800693c <_vfiprintf_r+0x254>)
 8006896:	bb1b      	cbnz	r3, 80068e0 <_vfiprintf_r+0x1f8>
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	3307      	adds	r3, #7
 800689c:	f023 0307 	bic.w	r3, r3, #7
 80068a0:	3308      	adds	r3, #8
 80068a2:	9303      	str	r3, [sp, #12]
 80068a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a6:	443b      	add	r3, r7
 80068a8:	9309      	str	r3, [sp, #36]	; 0x24
 80068aa:	e767      	b.n	800677c <_vfiprintf_r+0x94>
 80068ac:	460c      	mov	r4, r1
 80068ae:	2001      	movs	r0, #1
 80068b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068b4:	e7a5      	b.n	8006802 <_vfiprintf_r+0x11a>
 80068b6:	2300      	movs	r3, #0
 80068b8:	f04f 0c0a 	mov.w	ip, #10
 80068bc:	4619      	mov	r1, r3
 80068be:	3401      	adds	r4, #1
 80068c0:	9305      	str	r3, [sp, #20]
 80068c2:	4620      	mov	r0, r4
 80068c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c8:	3a30      	subs	r2, #48	; 0x30
 80068ca:	2a09      	cmp	r2, #9
 80068cc:	d903      	bls.n	80068d6 <_vfiprintf_r+0x1ee>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0c5      	beq.n	800685e <_vfiprintf_r+0x176>
 80068d2:	9105      	str	r1, [sp, #20]
 80068d4:	e7c3      	b.n	800685e <_vfiprintf_r+0x176>
 80068d6:	4604      	mov	r4, r0
 80068d8:	2301      	movs	r3, #1
 80068da:	fb0c 2101 	mla	r1, ip, r1, r2
 80068de:	e7f0      	b.n	80068c2 <_vfiprintf_r+0x1da>
 80068e0:	ab03      	add	r3, sp, #12
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	462a      	mov	r2, r5
 80068e6:	4630      	mov	r0, r6
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <_vfiprintf_r+0x258>)
 80068ea:	a904      	add	r1, sp, #16
 80068ec:	f3af 8000 	nop.w
 80068f0:	4607      	mov	r7, r0
 80068f2:	1c78      	adds	r0, r7, #1
 80068f4:	d1d6      	bne.n	80068a4 <_vfiprintf_r+0x1bc>
 80068f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068f8:	07d9      	lsls	r1, r3, #31
 80068fa:	d405      	bmi.n	8006908 <_vfiprintf_r+0x220>
 80068fc:	89ab      	ldrh	r3, [r5, #12]
 80068fe:	059a      	lsls	r2, r3, #22
 8006900:	d402      	bmi.n	8006908 <_vfiprintf_r+0x220>
 8006902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006904:	f7ff fdb5 	bl	8006472 <__retarget_lock_release_recursive>
 8006908:	89ab      	ldrh	r3, [r5, #12]
 800690a:	065b      	lsls	r3, r3, #25
 800690c:	f53f af12 	bmi.w	8006734 <_vfiprintf_r+0x4c>
 8006910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006912:	e711      	b.n	8006738 <_vfiprintf_r+0x50>
 8006914:	ab03      	add	r3, sp, #12
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	462a      	mov	r2, r5
 800691a:	4630      	mov	r0, r6
 800691c:	4b08      	ldr	r3, [pc, #32]	; (8006940 <_vfiprintf_r+0x258>)
 800691e:	a904      	add	r1, sp, #16
 8006920:	f000 f882 	bl	8006a28 <_printf_i>
 8006924:	e7e4      	b.n	80068f0 <_vfiprintf_r+0x208>
 8006926:	bf00      	nop
 8006928:	080077e8 	.word	0x080077e8
 800692c:	08007808 	.word	0x08007808
 8006930:	080077c8 	.word	0x080077c8
 8006934:	08007828 	.word	0x08007828
 8006938:	08007832 	.word	0x08007832
 800693c:	00000000 	.word	0x00000000
 8006940:	080066c3 	.word	0x080066c3
 8006944:	0800782e 	.word	0x0800782e

08006948 <_printf_common>:
 8006948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800694c:	4616      	mov	r6, r2
 800694e:	4699      	mov	r9, r3
 8006950:	688a      	ldr	r2, [r1, #8]
 8006952:	690b      	ldr	r3, [r1, #16]
 8006954:	4607      	mov	r7, r0
 8006956:	4293      	cmp	r3, r2
 8006958:	bfb8      	it	lt
 800695a:	4613      	movlt	r3, r2
 800695c:	6033      	str	r3, [r6, #0]
 800695e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006962:	460c      	mov	r4, r1
 8006964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006968:	b10a      	cbz	r2, 800696e <_printf_common+0x26>
 800696a:	3301      	adds	r3, #1
 800696c:	6033      	str	r3, [r6, #0]
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	0699      	lsls	r1, r3, #26
 8006972:	bf42      	ittt	mi
 8006974:	6833      	ldrmi	r3, [r6, #0]
 8006976:	3302      	addmi	r3, #2
 8006978:	6033      	strmi	r3, [r6, #0]
 800697a:	6825      	ldr	r5, [r4, #0]
 800697c:	f015 0506 	ands.w	r5, r5, #6
 8006980:	d106      	bne.n	8006990 <_printf_common+0x48>
 8006982:	f104 0a19 	add.w	sl, r4, #25
 8006986:	68e3      	ldr	r3, [r4, #12]
 8006988:	6832      	ldr	r2, [r6, #0]
 800698a:	1a9b      	subs	r3, r3, r2
 800698c:	42ab      	cmp	r3, r5
 800698e:	dc28      	bgt.n	80069e2 <_printf_common+0x9a>
 8006990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006994:	1e13      	subs	r3, r2, #0
 8006996:	6822      	ldr	r2, [r4, #0]
 8006998:	bf18      	it	ne
 800699a:	2301      	movne	r3, #1
 800699c:	0692      	lsls	r2, r2, #26
 800699e:	d42d      	bmi.n	80069fc <_printf_common+0xb4>
 80069a0:	4649      	mov	r1, r9
 80069a2:	4638      	mov	r0, r7
 80069a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069a8:	47c0      	blx	r8
 80069aa:	3001      	adds	r0, #1
 80069ac:	d020      	beq.n	80069f0 <_printf_common+0xa8>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	68e5      	ldr	r5, [r4, #12]
 80069b2:	f003 0306 	and.w	r3, r3, #6
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	bf18      	it	ne
 80069ba:	2500      	movne	r5, #0
 80069bc:	6832      	ldr	r2, [r6, #0]
 80069be:	f04f 0600 	mov.w	r6, #0
 80069c2:	68a3      	ldr	r3, [r4, #8]
 80069c4:	bf08      	it	eq
 80069c6:	1aad      	subeq	r5, r5, r2
 80069c8:	6922      	ldr	r2, [r4, #16]
 80069ca:	bf08      	it	eq
 80069cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069d0:	4293      	cmp	r3, r2
 80069d2:	bfc4      	itt	gt
 80069d4:	1a9b      	subgt	r3, r3, r2
 80069d6:	18ed      	addgt	r5, r5, r3
 80069d8:	341a      	adds	r4, #26
 80069da:	42b5      	cmp	r5, r6
 80069dc:	d11a      	bne.n	8006a14 <_printf_common+0xcc>
 80069de:	2000      	movs	r0, #0
 80069e0:	e008      	b.n	80069f4 <_printf_common+0xac>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4652      	mov	r2, sl
 80069e6:	4649      	mov	r1, r9
 80069e8:	4638      	mov	r0, r7
 80069ea:	47c0      	blx	r8
 80069ec:	3001      	adds	r0, #1
 80069ee:	d103      	bne.n	80069f8 <_printf_common+0xb0>
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f8:	3501      	adds	r5, #1
 80069fa:	e7c4      	b.n	8006986 <_printf_common+0x3e>
 80069fc:	2030      	movs	r0, #48	; 0x30
 80069fe:	18e1      	adds	r1, r4, r3
 8006a00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a0a:	4422      	add	r2, r4
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a12:	e7c5      	b.n	80069a0 <_printf_common+0x58>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4622      	mov	r2, r4
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c0      	blx	r8
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0e6      	beq.n	80069f0 <_printf_common+0xa8>
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7d9      	b.n	80069da <_printf_common+0x92>
	...

08006a28 <_printf_i>:
 8006a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	7e27      	ldrb	r7, [r4, #24]
 8006a30:	4691      	mov	r9, r2
 8006a32:	2f78      	cmp	r7, #120	; 0x78
 8006a34:	4680      	mov	r8, r0
 8006a36:	469a      	mov	sl, r3
 8006a38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a3e:	d807      	bhi.n	8006a50 <_printf_i+0x28>
 8006a40:	2f62      	cmp	r7, #98	; 0x62
 8006a42:	d80a      	bhi.n	8006a5a <_printf_i+0x32>
 8006a44:	2f00      	cmp	r7, #0
 8006a46:	f000 80d9 	beq.w	8006bfc <_printf_i+0x1d4>
 8006a4a:	2f58      	cmp	r7, #88	; 0x58
 8006a4c:	f000 80a4 	beq.w	8006b98 <_printf_i+0x170>
 8006a50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a58:	e03a      	b.n	8006ad0 <_printf_i+0xa8>
 8006a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a5e:	2b15      	cmp	r3, #21
 8006a60:	d8f6      	bhi.n	8006a50 <_printf_i+0x28>
 8006a62:	a001      	add	r0, pc, #4	; (adr r0, 8006a68 <_printf_i+0x40>)
 8006a64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006a51 	.word	0x08006a51
 8006a74:	08006a51 	.word	0x08006a51
 8006a78:	08006a51 	.word	0x08006a51
 8006a7c:	08006a51 	.word	0x08006a51
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006a51 	.word	0x08006a51
 8006a88:	08006a51 	.word	0x08006a51
 8006a8c:	08006a51 	.word	0x08006a51
 8006a90:	08006a51 	.word	0x08006a51
 8006a94:	08006be3 	.word	0x08006be3
 8006a98:	08006b05 	.word	0x08006b05
 8006a9c:	08006bc5 	.word	0x08006bc5
 8006aa0:	08006a51 	.word	0x08006a51
 8006aa4:	08006a51 	.word	0x08006a51
 8006aa8:	08006c05 	.word	0x08006c05
 8006aac:	08006a51 	.word	0x08006a51
 8006ab0:	08006b05 	.word	0x08006b05
 8006ab4:	08006a51 	.word	0x08006a51
 8006ab8:	08006a51 	.word	0x08006a51
 8006abc:	08006bcd 	.word	0x08006bcd
 8006ac0:	680b      	ldr	r3, [r1, #0]
 8006ac2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ac6:	1d1a      	adds	r2, r3, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	600a      	str	r2, [r1, #0]
 8006acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0a4      	b.n	8006c1e <_printf_i+0x1f6>
 8006ad4:	6825      	ldr	r5, [r4, #0]
 8006ad6:	6808      	ldr	r0, [r1, #0]
 8006ad8:	062e      	lsls	r6, r5, #24
 8006ada:	f100 0304 	add.w	r3, r0, #4
 8006ade:	d50a      	bpl.n	8006af6 <_printf_i+0xce>
 8006ae0:	6805      	ldr	r5, [r0, #0]
 8006ae2:	600b      	str	r3, [r1, #0]
 8006ae4:	2d00      	cmp	r5, #0
 8006ae6:	da03      	bge.n	8006af0 <_printf_i+0xc8>
 8006ae8:	232d      	movs	r3, #45	; 0x2d
 8006aea:	426d      	negs	r5, r5
 8006aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af0:	230a      	movs	r3, #10
 8006af2:	485e      	ldr	r0, [pc, #376]	; (8006c6c <_printf_i+0x244>)
 8006af4:	e019      	b.n	8006b2a <_printf_i+0x102>
 8006af6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006afa:	6805      	ldr	r5, [r0, #0]
 8006afc:	600b      	str	r3, [r1, #0]
 8006afe:	bf18      	it	ne
 8006b00:	b22d      	sxthne	r5, r5
 8006b02:	e7ef      	b.n	8006ae4 <_printf_i+0xbc>
 8006b04:	680b      	ldr	r3, [r1, #0]
 8006b06:	6825      	ldr	r5, [r4, #0]
 8006b08:	1d18      	adds	r0, r3, #4
 8006b0a:	6008      	str	r0, [r1, #0]
 8006b0c:	0628      	lsls	r0, r5, #24
 8006b0e:	d501      	bpl.n	8006b14 <_printf_i+0xec>
 8006b10:	681d      	ldr	r5, [r3, #0]
 8006b12:	e002      	b.n	8006b1a <_printf_i+0xf2>
 8006b14:	0669      	lsls	r1, r5, #25
 8006b16:	d5fb      	bpl.n	8006b10 <_printf_i+0xe8>
 8006b18:	881d      	ldrh	r5, [r3, #0]
 8006b1a:	2f6f      	cmp	r7, #111	; 0x6f
 8006b1c:	bf0c      	ite	eq
 8006b1e:	2308      	moveq	r3, #8
 8006b20:	230a      	movne	r3, #10
 8006b22:	4852      	ldr	r0, [pc, #328]	; (8006c6c <_printf_i+0x244>)
 8006b24:	2100      	movs	r1, #0
 8006b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b2a:	6866      	ldr	r6, [r4, #4]
 8006b2c:	2e00      	cmp	r6, #0
 8006b2e:	bfa8      	it	ge
 8006b30:	6821      	ldrge	r1, [r4, #0]
 8006b32:	60a6      	str	r6, [r4, #8]
 8006b34:	bfa4      	itt	ge
 8006b36:	f021 0104 	bicge.w	r1, r1, #4
 8006b3a:	6021      	strge	r1, [r4, #0]
 8006b3c:	b90d      	cbnz	r5, 8006b42 <_printf_i+0x11a>
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	d04d      	beq.n	8006bde <_printf_i+0x1b6>
 8006b42:	4616      	mov	r6, r2
 8006b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b48:	fb03 5711 	mls	r7, r3, r1, r5
 8006b4c:	5dc7      	ldrb	r7, [r0, r7]
 8006b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b52:	462f      	mov	r7, r5
 8006b54:	42bb      	cmp	r3, r7
 8006b56:	460d      	mov	r5, r1
 8006b58:	d9f4      	bls.n	8006b44 <_printf_i+0x11c>
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d10b      	bne.n	8006b76 <_printf_i+0x14e>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	07df      	lsls	r7, r3, #31
 8006b62:	d508      	bpl.n	8006b76 <_printf_i+0x14e>
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	6861      	ldr	r1, [r4, #4]
 8006b68:	4299      	cmp	r1, r3
 8006b6a:	bfde      	ittt	le
 8006b6c:	2330      	movle	r3, #48	; 0x30
 8006b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b76:	1b92      	subs	r2, r2, r6
 8006b78:	6122      	str	r2, [r4, #16]
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f8cd a000 	str.w	sl, [sp]
 8006b84:	aa03      	add	r2, sp, #12
 8006b86:	f7ff fedf 	bl	8006948 <_printf_common>
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d14c      	bne.n	8006c28 <_printf_i+0x200>
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b92:	b004      	add	sp, #16
 8006b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b98:	4834      	ldr	r0, [pc, #208]	; (8006c6c <_printf_i+0x244>)
 8006b9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b9e:	680e      	ldr	r6, [r1, #0]
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ba6:	061f      	lsls	r7, r3, #24
 8006ba8:	600e      	str	r6, [r1, #0]
 8006baa:	d514      	bpl.n	8006bd6 <_printf_i+0x1ae>
 8006bac:	07d9      	lsls	r1, r3, #31
 8006bae:	bf44      	itt	mi
 8006bb0:	f043 0320 	orrmi.w	r3, r3, #32
 8006bb4:	6023      	strmi	r3, [r4, #0]
 8006bb6:	b91d      	cbnz	r5, 8006bc0 <_printf_i+0x198>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	f023 0320 	bic.w	r3, r3, #32
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	e7af      	b.n	8006b24 <_printf_i+0xfc>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	f043 0320 	orr.w	r3, r3, #32
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	2378      	movs	r3, #120	; 0x78
 8006bce:	4828      	ldr	r0, [pc, #160]	; (8006c70 <_printf_i+0x248>)
 8006bd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bd4:	e7e3      	b.n	8006b9e <_printf_i+0x176>
 8006bd6:	065e      	lsls	r6, r3, #25
 8006bd8:	bf48      	it	mi
 8006bda:	b2ad      	uxthmi	r5, r5
 8006bdc:	e7e6      	b.n	8006bac <_printf_i+0x184>
 8006bde:	4616      	mov	r6, r2
 8006be0:	e7bb      	b.n	8006b5a <_printf_i+0x132>
 8006be2:	680b      	ldr	r3, [r1, #0]
 8006be4:	6826      	ldr	r6, [r4, #0]
 8006be6:	1d1d      	adds	r5, r3, #4
 8006be8:	6960      	ldr	r0, [r4, #20]
 8006bea:	600d      	str	r5, [r1, #0]
 8006bec:	0635      	lsls	r5, r6, #24
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	d501      	bpl.n	8006bf6 <_printf_i+0x1ce>
 8006bf2:	6018      	str	r0, [r3, #0]
 8006bf4:	e002      	b.n	8006bfc <_printf_i+0x1d4>
 8006bf6:	0671      	lsls	r1, r6, #25
 8006bf8:	d5fb      	bpl.n	8006bf2 <_printf_i+0x1ca>
 8006bfa:	8018      	strh	r0, [r3, #0]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4616      	mov	r6, r2
 8006c00:	6123      	str	r3, [r4, #16]
 8006c02:	e7ba      	b.n	8006b7a <_printf_i+0x152>
 8006c04:	680b      	ldr	r3, [r1, #0]
 8006c06:	1d1a      	adds	r2, r3, #4
 8006c08:	600a      	str	r2, [r1, #0]
 8006c0a:	681e      	ldr	r6, [r3, #0]
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4630      	mov	r0, r6
 8006c10:	6862      	ldr	r2, [r4, #4]
 8006c12:	f000 f8d9 	bl	8006dc8 <memchr>
 8006c16:	b108      	cbz	r0, 8006c1c <_printf_i+0x1f4>
 8006c18:	1b80      	subs	r0, r0, r6
 8006c1a:	6060      	str	r0, [r4, #4]
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	2300      	movs	r3, #0
 8006c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c26:	e7a8      	b.n	8006b7a <_printf_i+0x152>
 8006c28:	4632      	mov	r2, r6
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	6923      	ldr	r3, [r4, #16]
 8006c30:	47d0      	blx	sl
 8006c32:	3001      	adds	r0, #1
 8006c34:	d0ab      	beq.n	8006b8e <_printf_i+0x166>
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	079b      	lsls	r3, r3, #30
 8006c3a:	d413      	bmi.n	8006c64 <_printf_i+0x23c>
 8006c3c:	68e0      	ldr	r0, [r4, #12]
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	4298      	cmp	r0, r3
 8006c42:	bfb8      	it	lt
 8006c44:	4618      	movlt	r0, r3
 8006c46:	e7a4      	b.n	8006b92 <_printf_i+0x16a>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4632      	mov	r2, r6
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	4640      	mov	r0, r8
 8006c50:	47d0      	blx	sl
 8006c52:	3001      	adds	r0, #1
 8006c54:	d09b      	beq.n	8006b8e <_printf_i+0x166>
 8006c56:	3501      	adds	r5, #1
 8006c58:	68e3      	ldr	r3, [r4, #12]
 8006c5a:	9903      	ldr	r1, [sp, #12]
 8006c5c:	1a5b      	subs	r3, r3, r1
 8006c5e:	42ab      	cmp	r3, r5
 8006c60:	dcf2      	bgt.n	8006c48 <_printf_i+0x220>
 8006c62:	e7eb      	b.n	8006c3c <_printf_i+0x214>
 8006c64:	2500      	movs	r5, #0
 8006c66:	f104 0619 	add.w	r6, r4, #25
 8006c6a:	e7f5      	b.n	8006c58 <_printf_i+0x230>
 8006c6c:	08007839 	.word	0x08007839
 8006c70:	0800784a 	.word	0x0800784a

08006c74 <_sbrk_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	2300      	movs	r3, #0
 8006c78:	4d05      	ldr	r5, [pc, #20]	; (8006c90 <_sbrk_r+0x1c>)
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	602b      	str	r3, [r5, #0]
 8006c80:	f7fb faf0 	bl	8002264 <_sbrk>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_sbrk_r+0x1a>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_sbrk_r+0x1a>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	2000021c 	.word	0x2000021c

08006c94 <__sread>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	460c      	mov	r4, r1
 8006c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9c:	f000 f8ae 	bl	8006dfc <_read_r>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	bfab      	itete	ge
 8006ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ca8:	181b      	addge	r3, r3, r0
 8006caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cae:	bfac      	ite	ge
 8006cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cb2:	81a3      	strhlt	r3, [r4, #12]
 8006cb4:	bd10      	pop	{r4, pc}

08006cb6 <__swrite>:
 8006cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cba:	461f      	mov	r7, r3
 8006cbc:	898b      	ldrh	r3, [r1, #12]
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	05db      	lsls	r3, r3, #23
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	d505      	bpl.n	8006cd4 <__swrite+0x1e>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd0:	f000 f868 	bl	8006da4 <_lseek_r>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	4628      	mov	r0, r5
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cea:	f000 b817 	b.w	8006d1c <_write_r>

08006cee <__sseek>:
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf6:	f000 f855 	bl	8006da4 <_lseek_r>
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	bf15      	itete	ne
 8006d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d0a:	81a3      	strheq	r3, [r4, #12]
 8006d0c:	bf18      	it	ne
 8006d0e:	81a3      	strhne	r3, [r4, #12]
 8006d10:	bd10      	pop	{r4, pc}

08006d12 <__sclose>:
 8006d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d16:	f000 b813 	b.w	8006d40 <_close_r>
	...

08006d1c <_write_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4604      	mov	r4, r0
 8006d20:	4608      	mov	r0, r1
 8006d22:	4611      	mov	r1, r2
 8006d24:	2200      	movs	r2, #0
 8006d26:	4d05      	ldr	r5, [pc, #20]	; (8006d3c <_write_r+0x20>)
 8006d28:	602a      	str	r2, [r5, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f7fa ffd4 	bl	8001cd8 <_write>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_write_r+0x1e>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_write_r+0x1e>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	2000021c 	.word	0x2000021c

08006d40 <_close_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	2300      	movs	r3, #0
 8006d44:	4d05      	ldr	r5, [pc, #20]	; (8006d5c <_close_r+0x1c>)
 8006d46:	4604      	mov	r4, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	602b      	str	r3, [r5, #0]
 8006d4c:	f7fa fff0 	bl	8001d30 <_close>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_close_r+0x1a>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_close_r+0x1a>
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	2000021c 	.word	0x2000021c

08006d60 <_fstat_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	2300      	movs	r3, #0
 8006d64:	4d06      	ldr	r5, [pc, #24]	; (8006d80 <_fstat_r+0x20>)
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	f7fb f82f 	bl	8001dd0 <_fstat>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	d102      	bne.n	8006d7c <_fstat_r+0x1c>
 8006d76:	682b      	ldr	r3, [r5, #0]
 8006d78:	b103      	cbz	r3, 8006d7c <_fstat_r+0x1c>
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	bd38      	pop	{r3, r4, r5, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000021c 	.word	0x2000021c

08006d84 <_isatty_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	2300      	movs	r3, #0
 8006d88:	4d05      	ldr	r5, [pc, #20]	; (8006da0 <_isatty_r+0x1c>)
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7fa ff8c 	bl	8001cac <_isatty>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_isatty_r+0x1a>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_isatty_r+0x1a>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	2000021c 	.word	0x2000021c

08006da4 <_lseek_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	2200      	movs	r2, #0
 8006dae:	4d05      	ldr	r5, [pc, #20]	; (8006dc4 <_lseek_r+0x20>)
 8006db0:	602a      	str	r2, [r5, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f7fa ffd3 	bl	8001d5e <_lseek>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d102      	bne.n	8006dc2 <_lseek_r+0x1e>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	b103      	cbz	r3, 8006dc2 <_lseek_r+0x1e>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	2000021c 	.word	0x2000021c

08006dc8 <memchr>:
 8006dc8:	4603      	mov	r3, r0
 8006dca:	b510      	push	{r4, lr}
 8006dcc:	b2c9      	uxtb	r1, r1
 8006dce:	4402      	add	r2, r0
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	d101      	bne.n	8006dda <memchr+0x12>
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	e003      	b.n	8006de2 <memchr+0x1a>
 8006dda:	7804      	ldrb	r4, [r0, #0]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	428c      	cmp	r4, r1
 8006de0:	d1f6      	bne.n	8006dd0 <memchr+0x8>
 8006de2:	bd10      	pop	{r4, pc}

08006de4 <__malloc_lock>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__malloc_lock+0x8>)
 8006de6:	f7ff bb43 	b.w	8006470 <__retarget_lock_acquire_recursive>
 8006dea:	bf00      	nop
 8006dec:	20000214 	.word	0x20000214

08006df0 <__malloc_unlock>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__malloc_unlock+0x8>)
 8006df2:	f7ff bb3e 	b.w	8006472 <__retarget_lock_release_recursive>
 8006df6:	bf00      	nop
 8006df8:	20000214 	.word	0x20000214

08006dfc <_read_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	2200      	movs	r2, #0
 8006e06:	4d05      	ldr	r5, [pc, #20]	; (8006e1c <_read_r+0x20>)
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f7fa ffb8 	bl	8001d80 <_read>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_read_r+0x1e>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_read_r+0x1e>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	2000021c 	.word	0x2000021c

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr


Do_An.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007480  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001128  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080086b4  080086b4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086b4  080086b4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080086bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000078  08008734  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08008734  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1f0  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d8  00000000  00000000  0003a291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0003dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc76  00000000  00000000  00040138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d15  00000000  00000000  0005cdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009500c  00000000  00000000  00074ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109acf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f8  00000000  00000000  00109b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08007574 	.word	0x08007574

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08007574 	.word	0x08007574

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b089      	sub	sp, #36	; 0x24
 8000658:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <MX_ADC1_Init+0xc8>)
 8000668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_ADC1_Init+0xc4>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000672:	2200      	movs	r2, #0
 8000674:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000678:	2200      	movs	r2, #0
 800067a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MX_ADC1_Init+0xc4>)
 800067e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <MX_ADC1_Init+0xc4>)
 800068c:	2201      	movs	r2, #1
 800068e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	4821      	ldr	r0, [pc, #132]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000692:	f002 fbeb 	bl	8002e6c <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f001 fe28 	bl	80022f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80006a8:	2307      	movs	r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4819      	ldr	r0, [pc, #100]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006b2:	f002 fe41 	bl	8003338 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006bc:	f001 fe18 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ERROR_CHECK(HAL_ADC_Start_IT(&hadc1));
 80006c0:	4815      	ldr	r0, [pc, #84]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006c2:	f002 fcab 	bl	800301c <HAL_ADC_Start_IT>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d020      	beq.n	800070e <MX_ADC1_Init+0xba>
 80006cc:	f002 fba0 	bl	8002e10 <HAL_GetTick>
 80006d0:	4604      	mov	r4, r0
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006d4:	f002 fca2 	bl	800301c <HAL_ADC_Start_IT>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d009      	beq.n	80006f2 <MX_ADC1_Init+0x9e>
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006e0:	f002 fc9c 	bl	800301c <HAL_ADC_Start_IT>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d101      	bne.n	80006ee <MX_ADC1_Init+0x9a>
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_ADC1_Init+0xcc>)
 80006ec:	e002      	b.n	80006f4 <MX_ADC1_Init+0xa0>
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_ADC1_Init+0xd0>)
 80006f0:	e000      	b.n	80006f4 <MX_ADC1_Init+0xa0>
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_ADC1_Init+0xd4>)
 80006f4:	9303      	str	r3, [sp, #12]
 80006f6:	2341      	movs	r3, #65	; 0x41
 80006f8:	9302      	str	r3, [sp, #8]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_ADC1_Init+0xd8>)
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_ADC1_Init+0xdc>)
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4623      	mov	r3, r4
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <MX_ADC1_Init+0xe0>)
 8000706:	490a      	ldr	r1, [pc, #40]	; (8000730 <MX_ADC1_Init+0xdc>)
 8000708:	2001      	movs	r0, #1
 800070a:	f002 f97d 	bl	8002a08 <stm_log_write>
  /* USER CODE END ADC1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bd90      	pop	{r4, r7, pc}
 8000716:	bf00      	nop
 8000718:	200000a8 	.word	0x200000a8
 800071c:	40012400 	.word	0x40012400
 8000720:	0800758c 	.word	0x0800758c
 8000724:	08007598 	.word	0x08007598
 8000728:	080075a4 	.word	0x080075a4
 800072c:	0800857c 	.word	0x0800857c
 8000730:	080075e0 	.word	0x080075e0
 8000734:	080075b0 	.word	0x080075b0

08000738 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <HAL_ADC_MspInit+0x7c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d129      	bne.n	80007ac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 800075e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_OUTPUT_Pin;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078c:	2303      	movs	r3, #3
 800078e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LIGHT_SENSOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <HAL_ADC_MspInit+0x84>)
 8000798:	f003 f8e0 	bl	800395c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	2012      	movs	r0, #18
 80007a2:	f003 f82e 	bl	8003802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007a6:	2012      	movs	r0, #18
 80007a8:	f003 f847 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40012400 	.word	0x40012400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <MX_GPIO_Init+0x154>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a4e      	ldr	r2, [pc, #312]	; (8000914 <MX_GPIO_Init+0x154>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <MX_GPIO_Init+0x154>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ec:	4b49      	ldr	r3, [pc, #292]	; (8000914 <MX_GPIO_Init+0x154>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a48      	ldr	r2, [pc, #288]	; (8000914 <MX_GPIO_Init+0x154>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b46      	ldr	r3, [pc, #280]	; (8000914 <MX_GPIO_Init+0x154>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b43      	ldr	r3, [pc, #268]	; (8000914 <MX_GPIO_Init+0x154>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a42      	ldr	r2, [pc, #264]	; (8000914 <MX_GPIO_Init+0x154>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b40      	ldr	r3, [pc, #256]	; (8000914 <MX_GPIO_Init+0x154>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <MX_GPIO_Init+0x154>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a3c      	ldr	r2, [pc, #240]	; (8000914 <MX_GPIO_Init+0x154>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <MX_GPIO_Init+0x154>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2102      	movs	r1, #2
 8000838:	4837      	ldr	r0, [pc, #220]	; (8000918 <MX_GPIO_Init+0x158>)
 800083a:	f003 fa13 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2110      	movs	r1, #16
 8000842:	4835      	ldr	r0, [pc, #212]	; (8000918 <MX_GPIO_Init+0x158>)
 8000844:	f003 fa0e 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2101      	movs	r1, #1
 800084c:	4833      	ldr	r0, [pc, #204]	; (800091c <MX_GPIO_Init+0x15c>)
 800084e:	f003 fa09 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000852:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000858:	2303      	movs	r3, #3
 800085a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	482f      	ldr	r0, [pc, #188]	; (8000920 <MX_GPIO_Init+0x160>)
 8000864:	f003 f87a 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin|SPI1_NSS_Pin;
 8000868:	2312      	movs	r3, #18
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2302      	movs	r3, #2
 8000876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x158>)
 8000880:	f003 f86c 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000884:	2304      	movs	r3, #4
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	4820      	ldr	r0, [pc, #128]	; (8000918 <MX_GPIO_Init+0x158>)
 8000898:	f003 f860 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_LORA_Pin;
 800089c:	2308      	movs	r3, #8
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_GPIO_Init+0x164>)
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERRUPT_LORA_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	481a      	ldr	r0, [pc, #104]	; (8000918 <MX_GPIO_Init+0x158>)
 80008b0:	f003 f854 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4814      	ldr	r0, [pc, #80]	; (800091c <MX_GPIO_Init+0x15c>)
 80008cc:	f003 f846 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80008d0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80008d4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d6:	2303      	movs	r3, #3
 80008d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_GPIO_Init+0x15c>)
 80008e2:	f003 f83b 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80008e6:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ec:	2303      	movs	r3, #3
 80008ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_GPIO_Init+0x158>)
 80008f8:	f003 f830 	bl	800395c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2009      	movs	r0, #9
 8000902:	f002 ff7e 	bl	8003802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000906:	2009      	movs	r0, #9
 8000908:	f002 ff97 	bl	800383a <HAL_NVIC_EnableIRQ>

}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800
 800091c:	40010c00 	.word	0x40010c00
 8000920:	40011000 	.word	0x40011000
 8000924:	10110000 	.word	0x10110000

08000928 <vSpi1Write>:
  * @param ucData: Data need write into registers or fifo of Lora
  * @retval None
  */

void vSpi1Write(uint8_t ucAddress, uint8_t ucData)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af04      	add	r7, sp, #16
 800092e:	4603      	mov	r3, r0
 8000930:	460a      	mov	r2, r1
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	71bb      	strb	r3, [r7, #6]
    uint8_t ucDataMatrix[2];
    ucAddress |= SPI1_WRITE; /* A wnr bit, which is 1 for write access and 0 for read access */
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800093e:	71fb      	strb	r3, [r7, #7]
    ucDataMatrix[0] = ucAddress;
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	733b      	strb	r3, [r7, #12]
    ucDataMatrix[1] = ucData;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2110      	movs	r1, #16
 800094c:	4822      	ldr	r0, [pc, #136]	; (80009d8 <vSpi1Write+0xb0>)
 800094e:	f003 f989 	bl	8003c64 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000952:	2005      	movs	r0, #5
 8000954:	f002 fa66 	bl	8002e24 <HAL_Delay>
    ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t *)ucDataMatrix, sizeof(ucDataMatrix), 100));
 8000958:	f107 010c 	add.w	r1, r7, #12
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	2202      	movs	r2, #2
 8000960:	481e      	ldr	r0, [pc, #120]	; (80009dc <vSpi1Write+0xb4>)
 8000962:	f003 ff65 	bl	8004830 <HAL_SPI_Transmit>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d028      	beq.n	80009be <vSpi1Write+0x96>
 800096c:	f002 fa50 	bl	8002e10 <HAL_GetTick>
 8000970:	4604      	mov	r4, r0
 8000972:	f107 010c 	add.w	r1, r7, #12
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	2202      	movs	r2, #2
 800097a:	4818      	ldr	r0, [pc, #96]	; (80009dc <vSpi1Write+0xb4>)
 800097c:	f003 ff58 	bl	8004830 <HAL_SPI_Transmit>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d00d      	beq.n	80009a2 <vSpi1Write+0x7a>
 8000986:	f107 010c 	add.w	r1, r7, #12
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	2202      	movs	r2, #2
 800098e:	4813      	ldr	r0, [pc, #76]	; (80009dc <vSpi1Write+0xb4>)
 8000990:	f003 ff4e 	bl	8004830 <HAL_SPI_Transmit>
 8000994:	4603      	mov	r3, r0
 8000996:	2b02      	cmp	r3, #2
 8000998:	d101      	bne.n	800099e <vSpi1Write+0x76>
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <vSpi1Write+0xb8>)
 800099c:	e002      	b.n	80009a4 <vSpi1Write+0x7c>
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <vSpi1Write+0xbc>)
 80009a0:	e000      	b.n	80009a4 <vSpi1Write+0x7c>
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <vSpi1Write+0xc0>)
 80009a4:	9303      	str	r3, [sp, #12]
 80009a6:	2320      	movs	r3, #32
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <vSpi1Write+0xc4>)
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <vSpi1Write+0xc8>)
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	4623      	mov	r3, r4
 80009b4:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <vSpi1Write+0xcc>)
 80009b6:	490e      	ldr	r1, [pc, #56]	; (80009f0 <vSpi1Write+0xc8>)
 80009b8:	2001      	movs	r0, #1
 80009ba:	f002 f825 	bl	8002a08 <stm_log_write>
    HAL_Delay(5);
 80009be:	2005      	movs	r0, #5
 80009c0:	f002 fa30 	bl	8002e24 <HAL_Delay>
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <vSpi1Write+0xb0>)
 80009ca:	f003 f94b 	bl	8003c64 <HAL_GPIO_WritePin>
}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40010800 	.word	0x40010800
 80009dc:	20000110 	.word	0x20000110
 80009e0:	080075fc 	.word	0x080075fc
 80009e4:	08007608 	.word	0x08007608
 80009e8:	08007614 	.word	0x08007614
 80009ec:	0800858c 	.word	0x0800858c
 80009f0:	08007650 	.word	0x08007650
 80009f4:	08007620 	.word	0x08007620

080009f8 <ucSpi1Read>:
  * @brief Read Data Function from Lora Module
  * @param ucAddress: Address registers or fifo of Lora Module
  * @retval ucData: Data contained in registers or fifo of Lora Module  
  */
uint8_t ucSpi1Read(uint8_t ucAddress)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af04      	add	r7, sp, #16
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
    ucAddress &= SPI1_READ; /* A wnr bit, which is 1 for write access and 0 for read access */
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2110      	movs	r1, #16
 8000a14:	483a      	ldr	r0, [pc, #232]	; (8000b00 <ucSpi1Read+0x108>)
 8000a16:	f003 f925 	bl	8003c64 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f002 fa02 	bl	8002e24 <HAL_Delay>
    ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t *)&ucAddress, sizeof(ucAddress), 100));
 8000a20:	1df9      	adds	r1, r7, #7
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	2201      	movs	r2, #1
 8000a26:	4837      	ldr	r0, [pc, #220]	; (8000b04 <ucSpi1Read+0x10c>)
 8000a28:	f003 ff02 	bl	8004830 <HAL_SPI_Transmit>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d026      	beq.n	8000a80 <ucSpi1Read+0x88>
 8000a32:	f002 f9ed 	bl	8002e10 <HAL_GetTick>
 8000a36:	4604      	mov	r4, r0
 8000a38:	1df9      	adds	r1, r7, #7
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4831      	ldr	r0, [pc, #196]	; (8000b04 <ucSpi1Read+0x10c>)
 8000a40:	f003 fef6 	bl	8004830 <HAL_SPI_Transmit>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d00c      	beq.n	8000a64 <ucSpi1Read+0x6c>
 8000a4a:	1df9      	adds	r1, r7, #7
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	2201      	movs	r2, #1
 8000a50:	482c      	ldr	r0, [pc, #176]	; (8000b04 <ucSpi1Read+0x10c>)
 8000a52:	f003 feed 	bl	8004830 <HAL_SPI_Transmit>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d101      	bne.n	8000a60 <ucSpi1Read+0x68>
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <ucSpi1Read+0x110>)
 8000a5e:	e002      	b.n	8000a66 <ucSpi1Read+0x6e>
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <ucSpi1Read+0x114>)
 8000a62:	e000      	b.n	8000a66 <ucSpi1Read+0x6e>
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <ucSpi1Read+0x118>)
 8000a66:	9303      	str	r3, [sp, #12]
 8000a68:	2330      	movs	r3, #48	; 0x30
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <ucSpi1Read+0x11c>)
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <ucSpi1Read+0x120>)
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	4623      	mov	r3, r4
 8000a76:	4a29      	ldr	r2, [pc, #164]	; (8000b1c <ucSpi1Read+0x124>)
 8000a78:	4927      	ldr	r1, [pc, #156]	; (8000b18 <ucSpi1Read+0x120>)
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f001 ffc4 	bl	8002a08 <stm_log_write>
    ERROR_CHECK(HAL_SPI_Receive(&hspi1, (uint8_t *)&ucData, sizeof(ucData), 100));
 8000a80:	f107 010f 	add.w	r1, r7, #15
 8000a84:	2364      	movs	r3, #100	; 0x64
 8000a86:	2201      	movs	r2, #1
 8000a88:	481e      	ldr	r0, [pc, #120]	; (8000b04 <ucSpi1Read+0x10c>)
 8000a8a:	f004 f80d 	bl	8004aa8 <HAL_SPI_Receive>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d028      	beq.n	8000ae6 <ucSpi1Read+0xee>
 8000a94:	f002 f9bc 	bl	8002e10 <HAL_GetTick>
 8000a98:	4604      	mov	r4, r0
 8000a9a:	f107 010f 	add.w	r1, r7, #15
 8000a9e:	2364      	movs	r3, #100	; 0x64
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4818      	ldr	r0, [pc, #96]	; (8000b04 <ucSpi1Read+0x10c>)
 8000aa4:	f004 f800 	bl	8004aa8 <HAL_SPI_Receive>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d00d      	beq.n	8000aca <ucSpi1Read+0xd2>
 8000aae:	f107 010f 	add.w	r1, r7, #15
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4813      	ldr	r0, [pc, #76]	; (8000b04 <ucSpi1Read+0x10c>)
 8000ab8:	f003 fff6 	bl	8004aa8 <HAL_SPI_Receive>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d101      	bne.n	8000ac6 <ucSpi1Read+0xce>
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <ucSpi1Read+0x110>)
 8000ac4:	e002      	b.n	8000acc <ucSpi1Read+0xd4>
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <ucSpi1Read+0x114>)
 8000ac8:	e000      	b.n	8000acc <ucSpi1Read+0xd4>
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <ucSpi1Read+0x118>)
 8000acc:	9303      	str	r3, [sp, #12]
 8000ace:	2331      	movs	r3, #49	; 0x31
 8000ad0:	9302      	str	r3, [sp, #8]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <ucSpi1Read+0x11c>)
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <ucSpi1Read+0x120>)
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	4623      	mov	r3, r4
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <ucSpi1Read+0x124>)
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <ucSpi1Read+0x120>)
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f001 ff91 	bl	8002a08 <stm_log_write>
    HAL_Delay(5);
 8000ae6:	2005      	movs	r0, #5
 8000ae8:	f002 f99c 	bl	8002e24 <HAL_Delay>
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2110      	movs	r1, #16
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <ucSpi1Read+0x108>)
 8000af2:	f003 f8b7 	bl	8003c64 <HAL_GPIO_WritePin>
    return ucData;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	40010800 	.word	0x40010800
 8000b04:	20000110 	.word	0x20000110
 8000b08:	080075fc 	.word	0x080075fc
 8000b0c:	08007608 	.word	0x08007608
 8000b10:	08007614 	.word	0x08007614
 8000b14:	08008598 	.word	0x08008598
 8000b18:	08007650 	.word	0x08007650
 8000b1c:	08007620 	.word	0x08007620

08000b20 <vLongRangeModeInit>:
  * @brief Mode Initialization LoraTM or FSK/OOK 
  * @param ucMode: Value of mode: LoraTM if 1, FSK/OOK if 0
  * @retval None
  */
void vLongRangeModeInit(uint8_t ucLongRangeMode)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegOpMode);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff ff62 	bl	80009f8 <ucSpi1Read>
 8000b34:	4603      	mov	r3, r0
 8000b36:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x7F;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b3e:	73fb      	strb	r3, [r7, #15]
    if (ucLongRangeMode == 0u || ucLongRangeMode == 1u)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <vLongRangeModeInit+0x2c>
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10c      	bne.n	8000b66 <vLongRangeModeInit+0x46>
    {
        ucData |= (ucLongRangeMode << 7);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	01db      	lsls	r3, r3, #7
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegOpMode, ucData);
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fee1 	bl	8000928 <vSpi1Write>
    }
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <vAccessSharedRegInit>:
  * @brief Access Low Frequency Mode Initialization  
  * @param ucAccessSharedReg: Value of mode
  * @retval None
  */
void vAccessSharedRegInit(uint8_t ucAccessSharedReg)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegOpMode);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff ff3b 	bl	80009f8 <ucSpi1Read>
 8000b82:	4603      	mov	r3, r0
 8000b84:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xBF;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b8c:	73fb      	strb	r3, [r7, #15]
    if (ucAccessSharedReg == 0u || ucAccessSharedReg == 1u)
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <vAccessSharedRegInit+0x2c>
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d10c      	bne.n	8000bb4 <vAccessSharedRegInit+0x46>
    {
        ucData |= (ucAccessSharedReg << 6);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	019b      	lsls	r3, r3, #6
 8000b9e:	b25a      	sxtb	r2, r3
 8000ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegOpMode, ucData);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	4619      	mov	r1, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff feba 	bl	8000928 <vSpi1Write>
    }
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <vLowFrequencyModeOnInit>:
  * @brief Access Low Frequency Mode Initialization  
  * @param ucLowFrequencyModeOn: Value of mode
  * @retval None
  */
void vLowFrequencyModeOnInit(uint8_t ucLowFrequencyModeOn)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegOpMode);    
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff ff14 	bl	80009f8 <ucSpi1Read>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF7;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	f023 0308 	bic.w	r3, r3, #8
 8000bda:	73fb      	strb	r3, [r7, #15]
    if (ucLowFrequencyModeOn == 0u || ucLowFrequencyModeOn == 1u)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <vLowFrequencyModeOnInit+0x2c>
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d10c      	bne.n	8000c02 <vLowFrequencyModeOnInit+0x46>
    {
        ucData |= (ucLowFrequencyModeOn << 3);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	b25a      	sxtb	r2, r3
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegOpMode, ucData);
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fe93 	bl	8000928 <vSpi1Write>
    }
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <vModeInit>:
  * @brief Device Modes Initialization  
  * @param ucDeviceMode: Value of mode
  * @retval None
  */
void vModeInit(uint8_t ucMode)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegOpMode);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff feed 	bl	80009f8 <ucSpi1Read>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF8;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f023 0307 	bic.w	r3, r3, #7
 8000c28:	73fb      	strb	r3, [r7, #15]
    if (ucMode >= 0u && ucMode <= 7u)
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b07      	cmp	r3, #7
 8000c2e:	d808      	bhi.n	8000c42 <vModeInit+0x38>
    {
        ucData |= ucMode;
 8000c30:	7bfa      	ldrb	r2, [r7, #15]
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegOpMode, ucData);
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fe73 	bl	8000928 <vSpi1Write>
    }
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <vFrfInit>:
  * @brief RF carrier frequency Initialization  
  * @param uiFrf: Value of RF carrier frequency
  * @retval None
  */
void vFrfInit(unsigned int uiFrf)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
    vSpi1Write(RegFrfMsb, (uint8_t)(uiFrf >> 16));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	0c1b      	lsrs	r3, r3, #16
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4619      	mov	r1, r3
 8000c5a:	2006      	movs	r0, #6
 8000c5c:	f7ff fe64 	bl	8000928 <vSpi1Write>
    vSpi1Write(RegFrfMid, (uint8_t)(uiFrf >> 8));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	4619      	mov	r1, r3
 8000c68:	2007      	movs	r0, #7
 8000c6a:	f7ff fe5d 	bl	8000928 <vSpi1Write>
    vSpi1Write(RegFrfLsb, (uint8_t)uiFrf);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4619      	mov	r1, r3
 8000c74:	2008      	movs	r0, #8
 8000c76:	f7ff fe57 	bl	8000928 <vSpi1Write>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <vPaSelectInit>:
  * @brief Power Amplifier Initialization
  * @param ucPaSelect: Power Amplifier Value 
  * @retval None
  */
void vPaSelectInit(uint8_t ucPaSelect)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegPaConfig);
 8000c90:	2009      	movs	r0, #9
 8000c92:	f7ff feb1 	bl	80009f8 <ucSpi1Read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x7F;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ca0:	73fb      	strb	r3, [r7, #15]
    if (ucPaSelect == 0u || ucPaSelect == 1u)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <vPaSelectInit+0x2c>
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d10c      	bne.n	8000cc8 <vPaSelectInit+0x46>
    {
        ucData |= (ucPaSelect << 7);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	01db      	lsls	r3, r3, #7
 8000cb2:	b25a      	sxtb	r2, r3
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegPaConfig, ucData);
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	2009      	movs	r0, #9
 8000cc4:	f7ff fe30 	bl	8000928 <vSpi1Write>
    }
}
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <vMaxPowerInit>:
  * @brief Max Output Power Initialization
  * @param ucMaxPower: Max Output Power Value 
  * @retval None
  */
void vMaxPowerInit(uint8_t ucMaxPower)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegPaConfig);
 8000cde:	2009      	movs	r0, #9
 8000ce0:	f7ff fe8a 	bl	80009f8 <ucSpi1Read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x8F;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cee:	73fb      	strb	r3, [r7, #15]
    if (ucMaxPower >= 0u && ucMaxPower <= 7u)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d80c      	bhi.n	8000d10 <vMaxPowerInit+0x40>
    {
        ucData |= (ucMaxPower << 4);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	b25a      	sxtb	r2, r3
 8000cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegPaConfig, ucData);
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2009      	movs	r0, #9
 8000d0c:	f7ff fe0c 	bl	8000928 <vSpi1Write>
    }
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <vOutputPowerInit>:
  * @brief Output Power Initialization
  * @param ucOutputPower: Output Power Value 
  * @retval None
  */
void vOutputPowerInit(uint8_t ucOutputPower)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegPaConfig);
 8000d26:	2009      	movs	r0, #9
 8000d28:	f7ff fe66 	bl	80009f8 <ucSpi1Read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF0;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	f023 030f 	bic.w	r3, r3, #15
 8000d36:	73fb      	strb	r3, [r7, #15]
    if (ucOutputPower >= 0u && ucOutputPower <= 15u)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2b0f      	cmp	r3, #15
 8000d3c:	d808      	bhi.n	8000d50 <vOutputPowerInit+0x38>
    {
        ucData |= ucOutputPower;
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegPaConfig, ucData);
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	2009      	movs	r0, #9
 8000d4c:	f7ff fdec 	bl	8000928 <vSpi1Write>
    }
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <vPaRampInit>:
  * @brief Rise/Fall time of ramp up/down in FSK Initialization
  * @param ucPaRamp: Ramp Value 
  * @retval None
  */
void vPaRampInit(uint8_t ucPaRamp)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegPaRamp);
 8000d66:	200a      	movs	r0, #10
 8000d68:	f7ff fe46 	bl	80009f8 <ucSpi1Read>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF0;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	f023 030f 	bic.w	r3, r3, #15
 8000d76:	73fb      	strb	r3, [r7, #15]
    if (ucPaRamp >= 0u && ucPaRamp <= 15u)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b0f      	cmp	r3, #15
 8000d7c:	d808      	bhi.n	8000d90 <vPaRampInit+0x38>
    {
        ucData |= ucPaRamp;
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegPaRamp, ucData);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	200a      	movs	r0, #10
 8000d8c:	f7ff fdcc 	bl	8000928 <vSpi1Write>
    }
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <vOcpOnInit>:
  * @brief Enable or Disable Overload Current Protection Initialization
  * @param ucOcpOn: OcpOn Value 
  * @retval None
  */
void vOcpOnInit(uint8_t ucOcpOn)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegOcp);
 8000da6:	200b      	movs	r0, #11
 8000da8:	f7ff fe26 	bl	80009f8 <ucSpi1Read>
 8000dac:	4603      	mov	r3, r0
 8000dae:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xDF;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	f023 0320 	bic.w	r3, r3, #32
 8000db6:	73fb      	strb	r3, [r7, #15]
    if (ucOcpOn == 0u || ucOcpOn == 1u)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <vOcpOnInit+0x2c>
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10c      	bne.n	8000dde <vOcpOnInit+0x46>
    {
        ucData |= (ucOcpOn << 5);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	015b      	lsls	r3, r3, #5
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegOcp, ucData);
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	200b      	movs	r0, #11
 8000dda:	f7ff fda5 	bl	8000928 <vSpi1Write>
    }
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <vOcpTrimInit>:
  * @brief  Overload Current Protection Initialization
  * @param ucOcpTrim: OcpTrim Value
  * @retval None
  */
void vOcpTrimInit(uint8_t ucOcpTrim)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegOcp);
 8000df4:	200b      	movs	r0, #11
 8000df6:	f7ff fdff 	bl	80009f8 <ucSpi1Read>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xE0;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	f023 031f 	bic.w	r3, r3, #31
 8000e04:	73fb      	strb	r3, [r7, #15]
    if (ucOcpTrim >= 0u && ucOcpTrim <= 31u)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b1f      	cmp	r3, #31
 8000e0a:	d808      	bhi.n	8000e1e <vOcpTrimInit+0x38>
    {
        ucData |= ucOcpTrim;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegOcp, ucData);
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	4619      	mov	r1, r3
 8000e18:	200b      	movs	r0, #11
 8000e1a:	f7ff fd85 	bl	8000928 <vSpi1Write>
    }
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <vLnaGainInit>:
  * @brief  LNA Gain Initialization
  * @param ucLnaGain: Lna Gain Value
  * @retval None
  */
void vLnaGainInit(uint8_t ucLnaGain)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegLna);
 8000e34:	200c      	movs	r0, #12
 8000e36:	f7ff fddf 	bl	80009f8 <ucSpi1Read>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x1F;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	f003 031f 	and.w	r3, r3, #31
 8000e44:	73fb      	strb	r3, [r7, #15]
    if (ucLnaGain >= 1u && ucLnaGain <= 6u)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00f      	beq.n	8000e6c <vLnaGainInit+0x46>
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d80c      	bhi.n	8000e6c <vLnaGainInit+0x46>
    {
        ucData |= (ucLnaGain << 5);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	b25a      	sxtb	r2, r3
 8000e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegLna, ucData);
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	4619      	mov	r1, r3
 8000e66:	200c      	movs	r0, #12
 8000e68:	f7ff fd5e 	bl	8000928 <vSpi1Write>
    }
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <vLnaBoostLfInit>:
  * @brief  Low Frequency (RFI_LF) LNA Current Adjustment Initialization
  * @param ucLnaBoostLf:  LNA Current Value
  * @retval None
  */
void vLnaBoostLfInit(uint8_t ucLnaBoostLf)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegLna);
 8000e82:	200c      	movs	r0, #12
 8000e84:	f7ff fdb8 	bl	80009f8 <ucSpi1Read>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xE7;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	f023 0318 	bic.w	r3, r3, #24
 8000e92:	73fb      	strb	r3, [r7, #15]
    if (ucLnaBoostLf == 0u)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <vLnaBoostLfInit+0x40>
    {
        ucData |= (ucLnaBoostLf << 3);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	b25a      	sxtb	r2, r3
 8000ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegLna, ucData);
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	4619      	mov	r1, r3
 8000eae:	200c      	movs	r0, #12
 8000eb0:	f7ff fd3a 	bl	8000928 <vSpi1Write>
    }
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <vLnaBoostHfInit>:
  * @brief  High Frequency (RFI_LF) LNA Current Adjustment Initialization
  * @param ucLnaBoostHf:  LNA Current Value
  * @retval None
  */
void vLnaBoostHfInit(uint8_t ucLnaBoostHf)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegLna);
 8000eca:	200c      	movs	r0, #12
 8000ecc:	f7ff fd94 	bl	80009f8 <ucSpi1Read>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xFC;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f023 0303 	bic.w	r3, r3, #3
 8000eda:	73fb      	strb	r3, [r7, #15]
    if (ucLnaBoostHf == 0u || ucLnaBoostHf == 3u)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <vLnaBoostHfInit+0x2c>
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d108      	bne.n	8000efa <vLnaBoostHfInit+0x3e>
    {
        ucData |= ucLnaBoostHf;
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegLna, ucData);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	200c      	movs	r0, #12
 8000ef6:	f7ff fd17 	bl	8000928 <vSpi1Write>
    }
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <vFifoTxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for TX modulator Initialization
  * @param ucFifoTxBaseAddr: Base Address Value for Tx
  * @retval None
  */
void vFifoTxBaseAddrInit(uint8_t ucFifoTxBaseAddr)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
    vSpi1Write(RegFifoTxBaseAddr, ucFifoTxBaseAddr);
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	200e      	movs	r0, #14
 8000f12:	f7ff fd09 	bl	8000928 <vSpi1Write>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <vFifoRxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for RX modulator Initialization
  * @param ucFifoRxBaseAddr: Base Address Value for Rx
  * @retval None
  */
void vFifoRxBaseAddrInit(uint8_t ucFifoRxBaseAddr)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
    vSpi1Write(RegFifoRxBaseAddr, ucFifoRxBaseAddr);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	200f      	movs	r0, #15
 8000f2e:	f7ff fcfb 	bl	8000928 <vSpi1Write>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <vIrqFlagsMaskInit>:
  * @brief Interrupt Mask Initialization
  * @param ucIrqFlagsMask: Flag Mask Value
  * @retval None
  */
void vIrqFlagsMaskInit(uint8_t ucIrqFlagsMask)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegIrqFlagsMask);
 8000f48:	2011      	movs	r0, #17
 8000f4a:	f7ff fd55 	bl	80009f8 <ucSpi1Read>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
    ucData |= ucIrqFlagsMask;
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegIrqFlagsMask, ucData);
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	2011      	movs	r0, #17
 8000f60:	f7ff fce2 	bl	8000928 <vSpi1Write>
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <vBandWidthInit>:
  * @brief Signal bandwidth Initialization
  * @param ucBandWidth: BandWidth Value
  * @retval None 
  */
void vBandWidthInit(uint8_t ucBandWidth)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegModemConfig1);
 8000f7a:	201d      	movs	r0, #29
 8000f7c:	f7ff fd3c 	bl	80009f8 <ucSpi1Read>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x0F;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	73fb      	strb	r3, [r7, #15]
    if (ucBandWidth >= 0u && ucBandWidth <= 9u)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b09      	cmp	r3, #9
 8000f90:	d80c      	bhi.n	8000fac <vBandWidthInit+0x40>
    {
        ucData |= (ucBandWidth << 4);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	b25a      	sxtb	r2, r3
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegModemConfig1, ucData);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	201d      	movs	r0, #29
 8000fa8:	f7ff fcbe 	bl	8000928 <vSpi1Write>
    }
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <vCodingRateInit>:
  * @brief Error coding rate Initialization
  * @param ucCodingRate: Error coding rate Value
  * @retval None 
  */
void vCodingRateInit(uint8_t ucCodingRate)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegModemConfig1);
 8000fc2:	201d      	movs	r0, #29
 8000fc4:	f7ff fd18 	bl	80009f8 <ucSpi1Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF1;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f023 030e 	bic.w	r3, r3, #14
 8000fd2:	73fb      	strb	r3, [r7, #15]
    if (ucCodingRate >= 1u && ucCodingRate <= 4u)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00f      	beq.n	8000ffa <vCodingRateInit+0x46>
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d80c      	bhi.n	8000ffa <vCodingRateInit+0x46>
    {
        ucData |= (ucCodingRate << 1);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	b25a      	sxtb	r2, r3
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegModemConfig1, ucData);
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	201d      	movs	r0, #29
 8000ff6:	f7ff fc97 	bl	8000928 <vSpi1Write>
    }
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <vImplicitHeaderModeOnInit>:
  * @brief Explicit or Implicit Header mode Initialization
  * @param ucHeaderMode: Error coding rate Value
  * @retval None 
  */
void vImplicitHeaderModeOnInit(uint8_t ucHeaderMode)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegModemConfig1);
 8001010:	201d      	movs	r0, #29
 8001012:	f7ff fcf1 	bl	80009f8 <ucSpi1Read>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xFE;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
    if (ucHeaderMode == 0u || ucHeaderMode == 1u)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <vImplicitHeaderModeOnInit+0x2c>
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <vImplicitHeaderModeOnInit+0x3e>
    {
        ucData |= ucHeaderMode;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4313      	orrs	r3, r2
 8001034:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegModemConfig1, ucData);
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	201d      	movs	r0, #29
 800103c:	f7ff fc74 	bl	8000928 <vSpi1Write>
    }
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <vSpreadingFactorInit>:
  * @brief Spreading Factor rate Initialization
  * @param ucSpreadingFactor: Spreading Factor Value
  * @retval None 
  */
void vSpreadingFactorInit(uint8_t ucSpreadingFactor)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegModemConfig2);
 8001056:	201e      	movs	r0, #30
 8001058:	f7ff fcce 	bl	80009f8 <ucSpi1Read>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x0F;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	73fb      	strb	r3, [r7, #15]
    if (ucSpreadingFactor >= 6u && ucSpreadingFactor <= 12u)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d90f      	bls.n	800108e <vSpreadingFactorInit+0x46>
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b0c      	cmp	r3, #12
 8001072:	d80c      	bhi.n	800108e <vSpreadingFactorInit+0x46>
    {
        ucData |= (ucSpreadingFactor << 4);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	b25a      	sxtb	r2, r3
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4313      	orrs	r3, r2
 8001080:	b25b      	sxtb	r3, r3
 8001082:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegModemConfig2, ucData);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	4619      	mov	r1, r3
 8001088:	201e      	movs	r0, #30
 800108a:	f7ff fc4d 	bl	8000928 <vSpi1Write>
    }
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <vTxContinuousModeInit>:
  * @brief Continuous Mode Initialization
  * @param ucTxContinuousMode: Mode Value
  * @retval None 
  */
void vTxContinuousModeInit(uint8_t ucTxContinuousMode)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegModemConfig2);
 80010a4:	201e      	movs	r0, #30
 80010a6:	f7ff fca7 	bl	80009f8 <ucSpi1Read>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF7;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	f023 0308 	bic.w	r3, r3, #8
 80010b4:	73fb      	strb	r3, [r7, #15]
    if (ucTxContinuousMode == 0u || ucTxContinuousMode == 1u)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <vTxContinuousModeInit+0x2c>
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10c      	bne.n	80010dc <vTxContinuousModeInit+0x46>
    {
        ucData |= (ucTxContinuousMode << 3);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegModemConfig2, ucData);
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	4619      	mov	r1, r3
 80010d6:	201e      	movs	r0, #30
 80010d8:	f7ff fc26 	bl	8000928 <vSpi1Write>
    }
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <vRxPayloadCrcOnInit>:
  * @brief CRC generation and check on payload Initialization
  * @param ucRxPayloadCrcOn: CRCON Value
  * @retval None 
  */
void vRxPayloadCrcOnInit(uint8_t ucRxPayloadCrcOn)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegModemConfig2);
 80010f2:	201e      	movs	r0, #30
 80010f4:	f7ff fc80 	bl	80009f8 <ucSpi1Read>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xFB;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	f023 0304 	bic.w	r3, r3, #4
 8001102:	73fb      	strb	r3, [r7, #15]
    if (ucRxPayloadCrcOn == 0u || ucRxPayloadCrcOn == 1u)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <vRxPayloadCrcOnInit+0x2c>
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d10c      	bne.n	800112a <vRxPayloadCrcOnInit+0x46>
    {
        ucData |= (ucRxPayloadCrcOn << 2);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	b25a      	sxtb	r2, r3
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4313      	orrs	r3, r2
 800111c:	b25b      	sxtb	r3, r3
 800111e:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegModemConfig2, ucData);
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	4619      	mov	r1, r3
 8001124:	201e      	movs	r0, #30
 8001126:	f7ff fbff 	bl	8000928 <vSpi1Write>
    }
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <vSymbTimeoutInit>:
  * @brief RX Time-Out MSB Initialization
  * @param ucSymbTimeout: Symbols Time Value
  * @retval None 
  */
void vSymbTimeoutInit(uint16_t ucSymbTimeout)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	80fb      	strh	r3, [r7, #6]
    uint8_t ucData = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegModemConfig2);
 8001140:	201e      	movs	r0, #30
 8001142:	f7ff fc59 	bl	80009f8 <ucSpi1Read>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xFC;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	f023 0303 	bic.w	r3, r3, #3
 8001150:	73fb      	strb	r3, [r7, #15]
    ucData |= ((0x03) & (uint8_t)(ucSymbTimeout >> 8));
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	b29b      	uxth	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	b2da      	uxtb	r2, r3
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	4313      	orrs	r3, r2
 8001164:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	4619      	mov	r1, r3
 800116a:	201e      	movs	r0, #30
 800116c:	f7ff fbdc 	bl	8000928 <vSpi1Write>
    vSpi1Write(RegSymbTimeoutLsb, (uint8_t)ucSymbTimeout);
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	201f      	movs	r0, #31
 8001178:	f7ff fbd6 	bl	8000928 <vSpi1Write>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <vPreambleLengthInit>:
  * @brief Preamble Length Initialization
  * @param ucPreambleLength: Preamble Length Value
  * @retval None
  */
void vPreambleLengthInit(uint16_t ucPreambleLength)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
    vSpi1Write(RegPreambleMsb, (uint8_t)(ucPreambleLength >> 8));
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	b29b      	uxth	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4619      	mov	r1, r3
 8001198:	2020      	movs	r0, #32
 800119a:	f7ff fbc5 	bl	8000928 <vSpi1Write>
    vSpi1Write(RegPreambleLsb, (uint8_t)(ucPreambleLength));
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4619      	mov	r1, r3
 80011a4:	2021      	movs	r0, #33	; 0x21
 80011a6:	f7ff fbbf 	bl	8000928 <vSpi1Write>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <vPayloadLengthInit>:
  * @brief Payload Length Initialization
  * @param ucPayloadLength: Payload Length Value
  * @retval None
  */
void vPayloadLengthInit(uint8_t ucPayloadLength)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
    vSpi1Write(RegPayloadLength, ucPayloadLength);
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4619      	mov	r1, r3
 80011c0:	2022      	movs	r0, #34	; 0x22
 80011c2:	f7ff fbb1 	bl	8000928 <vSpi1Write>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <vPayloadMaxLengthInit>:
  * @brief Payload Max Length Initialization
  * @param ucPayloadMaxLength: Payload Max Length Value
  * @retval None
  */
void vPayloadMaxLengthInit(uint8_t ucPayloadMaxLength)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
    vSpi1Write(RegMaxPayloadLength, ucPayloadMaxLength);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4619      	mov	r1, r3
 80011dc:	2023      	movs	r0, #35	; 0x23
 80011de:	f7ff fba3 	bl	8000928 <vSpi1Write>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <vFreqHoppingPeriodInit>:
  * @brief Symbol periods between frequency hops Initialization
  * @param ucFreqHoppingPeriod: Payload Max Length Value
  * @retval None
  */
void vFreqHoppingPeriodInit(uint8_t ucFreqHoppingPeriod)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
    vSpi1Write(RegHopPeriod, ucFreqHoppingPeriod);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4619      	mov	r1, r3
 80011f8:	2024      	movs	r0, #36	; 0x24
 80011fa:	f7ff fb95 	bl	8000928 <vSpi1Write>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <vLowDataRateOptimizeInit>:
  * @brief Low Data Rate Optimize Initialization
  * @param ucLowDataRateOptimize: Low Data Rate Optimize Value to Disable or Enable 
  * @retval None
  */
void vLowDataRateOptimizeInit(uint8_t ucLowDataRateOptimize)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegModemConfig3);
 8001214:	2026      	movs	r0, #38	; 0x26
 8001216:	f7ff fbef 	bl	80009f8 <ucSpi1Read>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF7;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	f023 0308 	bic.w	r3, r3, #8
 8001224:	73fb      	strb	r3, [r7, #15]
    if (ucLowDataRateOptimize == 0u || ucLowDataRateOptimize == 1u)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <vLowDataRateOptimizeInit+0x2c>
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d10c      	bne.n	800124c <vLowDataRateOptimizeInit+0x46>
    {
        ucData |= (ucLowDataRateOptimize << 3);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	b25a      	sxtb	r2, r3
 8001238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123c:	4313      	orrs	r3, r2
 800123e:	b25b      	sxtb	r3, r3
 8001240:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegModemConfig3, ucData);
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	4619      	mov	r1, r3
 8001246:	2026      	movs	r0, #38	; 0x26
 8001248:	f7ff fb6e 	bl	8000928 <vSpi1Write>
    }
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <vAgcAutoOnInit>:
  * @brief  Internal AGC Loop Initialization
  * @param ucAgcAutoOn: Value to Disable or Enable 
  * @retval None
  */
void vAgcAutoOnInit(uint8_t ucAgcAutoOn)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegModemConfig3);
 8001262:	2026      	movs	r0, #38	; 0x26
 8001264:	f7ff fbc8 	bl	80009f8 <ucSpi1Read>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xFB;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	f023 0304 	bic.w	r3, r3, #4
 8001272:	73fb      	strb	r3, [r7, #15]
    if (ucAgcAutoOn == 0u || ucAgcAutoOn == 1u)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <vAgcAutoOnInit+0x2c>
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d10c      	bne.n	800129a <vAgcAutoOnInit+0x46>
    {
        ucData |= (ucAgcAutoOn << 2);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	b25a      	sxtb	r2, r3
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	4313      	orrs	r3, r2
 800128c:	b25b      	sxtb	r3, r3
 800128e:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegModemConfig3, ucData);
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	4619      	mov	r1, r3
 8001294:	2026      	movs	r0, #38	; 0x26
 8001296:	f7ff fb47 	bl	8000928 <vSpi1Write>
    }
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <vDetectionOptimizeInit>:
  * @brief  LoRa Detection Optimize Initialization
  * @param ucDetectionOptimize: Detection Optimize Value 
  * @retval None
  */
void vDetectionOptimizeInit(uint8_t ucDetectionOptimize)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegDetectOptimize);
 80012b0:	2031      	movs	r0, #49	; 0x31
 80012b2:	f7ff fba1 	bl	80009f8 <ucSpi1Read>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF8;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	f023 0307 	bic.w	r3, r3, #7
 80012c0:	73fb      	strb	r3, [r7, #15]
    if (ucDetectionOptimize == 3u || ucDetectionOptimize == 5u)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d002      	beq.n	80012ce <vDetectionOptimizeInit+0x2c>
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d108      	bne.n	80012e0 <vDetectionOptimizeInit+0x3e>
    {
        ucData |= ucDetectionOptimize;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegDetectOptimize, ucData);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	4619      	mov	r1, r3
 80012da:	2031      	movs	r0, #49	; 0x31
 80012dc:	f7ff fb24 	bl	8000928 <vSpi1Write>
    }
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <vInvertIQInit>:
  * @brief  Invert the LoRa I and Q signals Initialization
  * @param ucInvertIQ: Invert I and Q signals Value 
  * @retval None
  */
void vInvertIQInit(uint8_t ucInvertIQ)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegInvertIQ);
 80012f6:	2033      	movs	r0, #51	; 0x33
 80012f8:	f7ff fb7e 	bl	80009f8 <ucSpi1Read>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xBF;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001306:	73fb      	strb	r3, [r7, #15]
    if (ucInvertIQ == 0u || ucInvertIQ == 1u)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <vInvertIQInit+0x2c>
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10c      	bne.n	800132e <vInvertIQInit+0x46>
    {
        ucData |= (ucInvertIQ << 6);
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	019b      	lsls	r3, r3, #6
 8001318:	b25a      	sxtb	r2, r3
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4313      	orrs	r3, r2
 8001320:	b25b      	sxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegInvertIQ, ucData);
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	4619      	mov	r1, r3
 8001328:	2033      	movs	r0, #51	; 0x33
 800132a:	f7ff fafd 	bl	8000928 <vSpi1Write>
    }
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <vDetectionThresholdInit>:
  * @brief LoRa detection threshold Initialization
  * @param ucDetectionThreshold: LoRa detection threshold Value 
  * @retval None
  */
void vDetectionThresholdInit(uint8_t ucDetectionThreshold)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
    if (ucDetectionThreshold == 0x0A || ucDetectionThreshold == 0x0C)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b0a      	cmp	r3, #10
 8001344:	d002      	beq.n	800134c <vDetectionThresholdInit+0x16>
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b0c      	cmp	r3, #12
 800134a:	d104      	bne.n	8001356 <vDetectionThresholdInit+0x20>
    {
        vSpi1Write(RegDetectionThreshold, ucDetectionThreshold);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4619      	mov	r1, r3
 8001350:	2037      	movs	r0, #55	; 0x37
 8001352:	f7ff fae9 	bl	8000928 <vSpi1Write>
    }
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <vSyncWordInit>:
  * @brief LoRa Sync Word Initialization
  * @param ucSyncWord: Sync Word Value, Value 0x34 is reserved for LoRaWAN networks 
  * @retval None
  */
void vSyncWordInit(uint8_t ucSyncWord)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
    vSpi1Write(RegSyncWord, ucSyncWord);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	4619      	mov	r1, r3
 800136c:	2039      	movs	r0, #57	; 0x39
 800136e:	f7ff fadb 	bl	8000928 <vSpi1Write>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <vDio0MappingInit>:
  * @brief Mapping of pins DIO0 Initialization
  * @param ucDio0Mapping: Dio0 Mapping Value
  * @retval None
  */
void vDio0MappingInit(uint8_t ucDio0Mapping)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegDioMapping1);
 8001388:	2040      	movs	r0, #64	; 0x40
 800138a:	f7ff fb35 	bl	80009f8 <ucSpi1Read>
 800138e:	4603      	mov	r3, r0
 8001390:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x3F;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001398:	73fb      	strb	r3, [r7, #15]
    if (ucDio0Mapping >= 0u && ucDio0Mapping <= 3u)
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d80c      	bhi.n	80013ba <vDio0MappingInit+0x40>
    {
        ucData |= (ucDio0Mapping << 6);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	019b      	lsls	r3, r3, #6
 80013a4:	b25a      	sxtb	r2, r3
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegDioMapping1, ucData);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2040      	movs	r0, #64	; 0x40
 80013b6:	f7ff fab7 	bl	8000928 <vSpi1Write>
    }
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <ucVersionRead>:
  * @brief Read Version code of the chip
  * @param None
  * @retval  Version code of the chip Value
  */
uint8_t ucVersionRead(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
    uint8_t ucData = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	71fb      	strb	r3, [r7, #7]
    ucData = ucSpi1Read(RegVersion);
 80013cc:	2042      	movs	r0, #66	; 0x42
 80013ce:	f7ff fb13 	bl	80009f8 <ucSpi1Read>
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
    return ucData;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <vTcxoInputOnInit>:
  * @brief Controls the crystal oscillator Initialization
  * @param ucTcxoInputOn: Tcxo Input On Value
  * @retval None
  */
void vTcxoInputOnInit(uint8_t ucTcxoInputOn)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegTcxo);
 80013ee:	204b      	movs	r0, #75	; 0x4b
 80013f0:	f7ff fb02 	bl	80009f8 <ucSpi1Read>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xEF;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	f023 0310 	bic.w	r3, r3, #16
 80013fe:	73fb      	strb	r3, [r7, #15]
    if (ucTcxoInputOn == 0u || ucTcxoInputOn == 1u)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <vTcxoInputOnInit+0x2c>
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d10c      	bne.n	8001426 <vTcxoInputOnInit+0x46>
    {
        ucData |= (ucTcxoInputOn << 4);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	b25a      	sxtb	r2, r3
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4313      	orrs	r3, r2
 8001418:	b25b      	sxtb	r3, r3
 800141a:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegTcxo, ucData);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4619      	mov	r1, r3
 8001420:	204b      	movs	r0, #75	; 0x4b
 8001422:	f7ff fa81 	bl	8000928 <vSpi1Write>
    }
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <vPaDacInit>:
  * @brief Enables the +20dBm option on PA_BOOST pin Initialization
  * @param ucPaDac: Pa Dac Value
  * @retval None
  */
void vPaDacInit(uint8_t ucPaDac)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegPaDac);
 800143c:	204d      	movs	r0, #77	; 0x4d
 800143e:	f7ff fadb 	bl	80009f8 <ucSpi1Read>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF8;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	f023 0307 	bic.w	r3, r3, #7
 800144c:	73fb      	strb	r3, [r7, #15]
    if (ucPaDac == 4u || ucPaDac == 7u)
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b04      	cmp	r3, #4
 8001452:	d002      	beq.n	800145a <vPaDacInit+0x2c>
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b07      	cmp	r3, #7
 8001458:	d108      	bne.n	800146c <vPaDacInit+0x3e>
    {
        ucData |= ucPaDac;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4313      	orrs	r3, r2
 8001460:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegPaDac, ucData);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	4619      	mov	r1, r3
 8001466:	204d      	movs	r0, #77	; 0x4d
 8001468:	f7ff fa5e 	bl	8000928 <vSpi1Write>
    }
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <vAgcReferenceLevelInit>:
  * @brief Sets the floor reference for all AGC thresholds Initialization
  * @param ucAgcReferenceLevel: Agc Reference Level Value
  * @retval None
  */
void vAgcReferenceLevelInit(uint8_t ucAgcReferenceLevel)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegAgcRef);
 8001482:	2061      	movs	r0, #97	; 0x61
 8001484:	f7ff fab8 	bl	80009f8 <ucSpi1Read>
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xC0;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001492:	73fb      	strb	r3, [r7, #15]
    if (ucAgcReferenceLevel >= 0x00 && ucAgcReferenceLevel <= 0x3F)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b3f      	cmp	r3, #63	; 0x3f
 8001498:	d808      	bhi.n	80014ac <vAgcReferenceLevelInit+0x38>
    {
        ucData |= ucAgcReferenceLevel;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	4313      	orrs	r3, r2
 80014a0:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegAgcRef, ucData);
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	4619      	mov	r1, r3
 80014a6:	2061      	movs	r0, #97	; 0x61
 80014a8:	f7ff fa3e 	bl	8000928 <vSpi1Write>
    }
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <vAgcStep1Init>:
  * @brief Defines the 1st AGC Threshold Initialization
  * @param ucAgcStep1: Agc Step1 Value
  * @retval None
  */
void vAgcStep1Init(uint8_t ucAgcStep1)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegAgcThresh1);
 80014c2:	2062      	movs	r0, #98	; 0x62
 80014c4:	f7ff fa98 	bl	80009f8 <ucSpi1Read>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xE0;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	f023 031f 	bic.w	r3, r3, #31
 80014d2:	73fb      	strb	r3, [r7, #15]
    if (ucAgcStep1 >= 0x00 && ucAgcStep1 <= 0x1F)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b1f      	cmp	r3, #31
 80014d8:	d808      	bhi.n	80014ec <vAgcStep1Init+0x38>
    {
        ucData |= ucAgcStep1;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4313      	orrs	r3, r2
 80014e0:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegAgcThresh1, ucData);
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	4619      	mov	r1, r3
 80014e6:	2062      	movs	r0, #98	; 0x62
 80014e8:	f7ff fa1e 	bl	8000928 <vSpi1Write>
    }
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <vAgcStep2Init>:
  * @brief Defines the 2st AGC Threshold Initialization
  * @param ucAgcStep2: Agc Step2 Value
  * @retval None
  */
void vAgcStep2Init(uint8_t ucAgcStep2)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegAgcThresh2);
 8001502:	2063      	movs	r0, #99	; 0x63
 8001504:	f7ff fa78 	bl	80009f8 <ucSpi1Read>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x0F;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	73fb      	strb	r3, [r7, #15]
    if (ucAgcStep2 >= 0x00 && ucAgcStep2 <= 0x0F)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	d80c      	bhi.n	8001534 <vAgcStep2Init+0x40>
    {
        ucData |= (ucAgcStep2 << 4);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	b25a      	sxtb	r2, r3
 8001520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001524:	4313      	orrs	r3, r2
 8001526:	b25b      	sxtb	r3, r3
 8001528:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegAgcThresh2, ucData);
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	4619      	mov	r1, r3
 800152e:	2063      	movs	r0, #99	; 0x63
 8001530:	f7ff f9fa 	bl	8000928 <vSpi1Write>
    }
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <vAgcStep3Init>:
  * @brief Defines the 3st AGC Threshold Initialization
  * @param ucAgcStep3: Agc Step3 Value
  * @retval None
  */
void vAgcStep3Init(uint8_t ucAgcStep3)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegAgcThresh2);
 800154a:	2063      	movs	r0, #99	; 0x63
 800154c:	f7ff fa54 	bl	80009f8 <ucSpi1Read>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF0;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	f023 030f 	bic.w	r3, r3, #15
 800155a:	73fb      	strb	r3, [r7, #15]
    if (ucAgcStep3 >= 0x00 && ucAgcStep3 <= 0x0F)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	d808      	bhi.n	8001574 <vAgcStep3Init+0x38>
    {
        ucData |= ucAgcStep3;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4313      	orrs	r3, r2
 8001568:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegAgcThresh2, ucData);
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	4619      	mov	r1, r3
 800156e:	2063      	movs	r0, #99	; 0x63
 8001570:	f7ff f9da 	bl	8000928 <vSpi1Write>
    }
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <vAgcStep4Init>:
  * @brief Defines the 4st AGC Threshold Initialization
  * @param ucAgcStep4: Agc Step4 Value
  * @retval None
  */
void vAgcStep4Init(uint8_t ucAgcStep4)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegAgcThresh3);
 800158a:	2064      	movs	r0, #100	; 0x64
 800158c:	f7ff fa34 	bl	80009f8 <ucSpi1Read>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x0F;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	73fb      	strb	r3, [r7, #15]
    if (ucAgcStep4 >= 0x00 && ucAgcStep4 <= 0x0F)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	d80c      	bhi.n	80015bc <vAgcStep4Init+0x40>
    {
        ucData |= (ucAgcStep4 << 4);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	b25a      	sxtb	r2, r3
 80015a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegAgcThresh3, ucData);
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	4619      	mov	r1, r3
 80015b6:	2064      	movs	r0, #100	; 0x64
 80015b8:	f7ff f9b6 	bl	8000928 <vSpi1Write>
    }
}
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <vAgcStep5Init>:
  * @brief Defines the 5st AGC Threshold Initialization
  * @param ucAgcStep5: Agc Step5 Value
  * @retval None
  */
void vAgcStep5Init(uint8_t ucAgcStep5)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegAgcThresh3);
 80015d2:	2064      	movs	r0, #100	; 0x64
 80015d4:	f7ff fa10 	bl	80009f8 <ucSpi1Read>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
    ucData &= 0xF0;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	f023 030f 	bic.w	r3, r3, #15
 80015e2:	73fb      	strb	r3, [r7, #15]
    if (ucAgcStep5 >= 0x00 && ucAgcStep5 <= 0x0F)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	d808      	bhi.n	80015fc <vAgcStep5Init+0x38>
    {
        ucData |= ucAgcStep5;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegAgcThresh3, ucData);
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	4619      	mov	r1, r3
 80015f6:	2064      	movs	r0, #100	; 0x64
 80015f8:	f7ff f996 	bl	8000928 <vSpi1Write>
    }
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <vPllBandwidth>:
  * @brief Controls the PLL bandwidth Initialization
  * @param ucPllBandwidth: Pll Bandwidth Value
  * @retval None
  */
void vPllBandwidth(uint8_t ucPllBandwidth)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
    ucData = ucSpi1Read(RegPll);
 8001612:	2070      	movs	r0, #112	; 0x70
 8001614:	f7ff f9f0 	bl	80009f8 <ucSpi1Read>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
    ucData &= 0x3F;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001622:	73fb      	strb	r3, [r7, #15]
    if (ucPllBandwidth >= 0u && ucPllBandwidth <= 3u)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d80c      	bhi.n	8001644 <vPllBandwidth+0x40>
    {
        ucData |= (ucPllBandwidth << 6);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	b25a      	sxtb	r2, r3
 8001630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001634:	4313      	orrs	r3, r2
 8001636:	b25b      	sxtb	r3, r3
 8001638:	73fb      	strb	r3, [r7, #15]
        vSpi1Write(RegPll, ucData);
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	4619      	mov	r1, r3
 800163e:	2070      	movs	r0, #112	; 0x70
 8001640:	f7ff f972 	bl	8000928 <vSpi1Write>
    }
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <vLoraInit>:
  * @brief Lora Module Initialization
  * @param: None
  * @retval: None
  */
void vLoraInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
    uint8_t ucData = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	71fb      	strb	r3, [r7, #7]
    vModeInit(SLEEP_MODE);          /* Init Module Lora into Sleep Mode */
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff fad7 	bl	8000c0a <vModeInit>
    ucData = ucSpi1Read(RegOpMode);
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff f9cb 	bl	80009f8 <ucSpi1Read>
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
    printf("RegOpMode = 0x%XH\r\n", ucData);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4619      	mov	r1, r3
 800166a:	48db      	ldr	r0, [pc, #876]	; (80019d8 <vLoraInit+0x38c>)
 800166c:	f004 fec8 	bl	8006400 <iprintf>

    vLongRangeModeInit(LORA_MODE);  /* Init Module Lora into Lora TM Mode */
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fa55 	bl	8000b20 <vLongRangeModeInit>
    ucData = ucSpi1Read(RegOpMode);
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff f9be 	bl	80009f8 <ucSpi1Read>
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
    printf("RegOpMode = 0x%XH\r\n", ucData);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4619      	mov	r1, r3
 8001684:	48d4      	ldr	r0, [pc, #848]	; (80019d8 <vLoraInit+0x38c>)
 8001686:	f004 febb 	bl	8006400 <iprintf>

    vModeInit(STDBY_MODE);          /* Init Module Lora into Standby Mode */
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff fabd 	bl	8000c0a <vModeInit>
    ucData = ucSpi1Read(RegOpMode);
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff f9b1 	bl	80009f8 <ucSpi1Read>
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
    printf("RegOpMode = 0x%XH\r\n", ucData);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4619      	mov	r1, r3
 800169e:	48ce      	ldr	r0, [pc, #824]	; (80019d8 <vLoraInit+0x38c>)
 80016a0:	f004 feae 	bl	8006400 <iprintf>

    vAccessSharedRegInit(ACCESS_LORA_REGISTERS);    /* Access LoRa registers page 0x0D: 0x3F */
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff fa62 	bl	8000b6e <vAccessSharedRegInit>
    ucData = ucSpi1Read(RegOpMode);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff f9a4 	bl	80009f8 <ucSpi1Read>
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
    printf("RegOpMode = 0x%XH\r\n", ucData);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4619      	mov	r1, r3
 80016b8:	48c7      	ldr	r0, [pc, #796]	; (80019d8 <vLoraInit+0x38c>)
 80016ba:	f004 fea1 	bl	8006400 <iprintf>

    vLowFrequencyModeOnInit(ACCESS_LOW_FREQUENCY_MODE);     /* Access Low Frequency Mode registers */
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff fa7c 	bl	8000bbc <vLowFrequencyModeOnInit>
    ucData = ucSpi1Read(RegOpMode);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f7ff f997 	bl	80009f8 <ucSpi1Read>
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
    printf("RegOpMode = 0x%XH\r\n", ucData);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4619      	mov	r1, r3
 80016d2:	48c1      	ldr	r0, [pc, #772]	; (80019d8 <vLoraInit+0x38c>)
 80016d4:	f004 fe94 	bl	8006400 <iprintf>

    vFrfInit(RF_FREQUENCY);         /* Init RF carrier frequency */
 80016d8:	f44f 00d9 	mov.w	r0, #7110656	; 0x6c8000
 80016dc:	f7ff fab5 	bl	8000c4a <vFrfInit>
    ucData = ucSpi1Read(RegFrfMsb);
 80016e0:	2006      	movs	r0, #6
 80016e2:	f7ff f989 	bl	80009f8 <ucSpi1Read>
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
    printf("RegFrfMsb = 0x%XH\r\n", ucData);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	4619      	mov	r1, r3
 80016ee:	48bb      	ldr	r0, [pc, #748]	; (80019dc <vLoraInit+0x390>)
 80016f0:	f004 fe86 	bl	8006400 <iprintf>

    ucData = ucSpi1Read(RegFrfMid);
 80016f4:	2007      	movs	r0, #7
 80016f6:	f7ff f97f 	bl	80009f8 <ucSpi1Read>
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
    printf("RegFrfMid = 0x%XH\r\n", ucData);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4619      	mov	r1, r3
 8001702:	48b7      	ldr	r0, [pc, #732]	; (80019e0 <vLoraInit+0x394>)
 8001704:	f004 fe7c 	bl	8006400 <iprintf>

    ucData = ucSpi1Read(RegFrfLsb);
 8001708:	2008      	movs	r0, #8
 800170a:	f7ff f975 	bl	80009f8 <ucSpi1Read>
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
    printf("RegFrfLsb = 0x%XH\r\n", ucData);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4619      	mov	r1, r3
 8001716:	48b3      	ldr	r0, [pc, #716]	; (80019e4 <vLoraInit+0x398>)
 8001718:	f004 fe72 	bl	8006400 <iprintf>

    vPaSelectInit(PA_BOOST);        /* Output power is limited to +20 dBm */
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fab0 	bl	8000c82 <vPaSelectInit>
    ucData = ucSpi1Read(RegPaConfig);
 8001722:	2009      	movs	r0, #9
 8001724:	f7ff f968 	bl	80009f8 <ucSpi1Read>
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
    printf("RegPaConfig = 0x%XH\r\n", ucData);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4619      	mov	r1, r3
 8001730:	48ad      	ldr	r0, [pc, #692]	; (80019e8 <vLoraInit+0x39c>)
 8001732:	f004 fe65 	bl	8006400 <iprintf>

    vMaxPowerInit(MAX_POWER);
 8001736:	2007      	movs	r0, #7
 8001738:	f7ff faca 	bl	8000cd0 <vMaxPowerInit>
    ucData = ucSpi1Read(RegPaConfig);
 800173c:	2009      	movs	r0, #9
 800173e:	f7ff f95b 	bl	80009f8 <ucSpi1Read>
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
    printf("RegPaConfig = 0x%XH\r\n", ucData); 
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	4619      	mov	r1, r3
 800174a:	48a7      	ldr	r0, [pc, #668]	; (80019e8 <vLoraInit+0x39c>)
 800174c:	f004 fe58 	bl	8006400 <iprintf>

    vOutputPowerInit(OUTPUT_POWER); /* Pout=17-(15-OutputPower) */
 8001750:	200f      	movs	r0, #15
 8001752:	f7ff fae1 	bl	8000d18 <vOutputPowerInit>
    ucData = ucSpi1Read(RegPaConfig);
 8001756:	2009      	movs	r0, #9
 8001758:	f7ff f94e 	bl	80009f8 <ucSpi1Read>
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
    printf("RegPaConfig = 0x%XH\r\n", ucData);   
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4619      	mov	r1, r3
 8001764:	48a0      	ldr	r0, [pc, #640]	; (80019e8 <vLoraInit+0x39c>)
 8001766:	f004 fe4b 	bl	8006400 <iprintf>

    vPaRampInit(PA_RAMP);
 800176a:	2008      	movs	r0, #8
 800176c:	f7ff faf4 	bl	8000d58 <vPaRampInit>
    ucData = ucSpi1Read(RegPaRamp);
 8001770:	200a      	movs	r0, #10
 8001772:	f7ff f941 	bl	80009f8 <ucSpi1Read>
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
    printf("RegPaRamp = 0x%XH\r\n", ucData);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4619      	mov	r1, r3
 800177e:	489b      	ldr	r0, [pc, #620]	; (80019ec <vLoraInit+0x3a0>)
 8001780:	f004 fe3e 	bl	8006400 <iprintf>

    vOcpOnInit(OCP_ON);             /* OCP enabled */
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fb07 	bl	8000d98 <vOcpOnInit>
    ucData = ucSpi1Read(RegOcp);
 800178a:	200b      	movs	r0, #11
 800178c:	f7ff f934 	bl	80009f8 <ucSpi1Read>
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
    printf("RegOcp = 0x%XH\r\n", ucData);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4619      	mov	r1, r3
 8001798:	4895      	ldr	r0, [pc, #596]	; (80019f0 <vLoraInit+0x3a4>)
 800179a:	f004 fe31 	bl	8006400 <iprintf>

    vOcpTrimInit(OCP_TRIM);         /* Trimming of OCP current: Imax = 240mA */
 800179e:	201b      	movs	r0, #27
 80017a0:	f7ff fb21 	bl	8000de6 <vOcpTrimInit>
    ucData = ucSpi1Read(RegOcp);
 80017a4:	200b      	movs	r0, #11
 80017a6:	f7ff f927 	bl	80009f8 <ucSpi1Read>
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
    printf("RegOcp = 0x%XH\r\n", ucData);
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4619      	mov	r1, r3
 80017b2:	488f      	ldr	r0, [pc, #572]	; (80019f0 <vLoraInit+0x3a4>)
 80017b4:	f004 fe24 	bl	8006400 <iprintf>

    vLnaGainInit(G1);               /* LNA gain setting: G1 = maximum gain */
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff fb34 	bl	8000e26 <vLnaGainInit>
    ucData = ucSpi1Read(RegLna);
 80017be:	200c      	movs	r0, #12
 80017c0:	f7ff f91a 	bl	80009f8 <ucSpi1Read>
 80017c4:	4603      	mov	r3, r0
 80017c6:	71fb      	strb	r3, [r7, #7]
    printf("RegLna = 0x%XH\r\n", ucData);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4619      	mov	r1, r3
 80017cc:	4889      	ldr	r0, [pc, #548]	; (80019f4 <vLoraInit+0x3a8>)
 80017ce:	f004 fe17 	bl	8006400 <iprintf>

    vLnaBoostLfInit(LNA_BOOST_LF);  /* Low Frequency (RFI_LF) LNA current 
 80017d2:	2000      	movs	r0, #0
 80017d4:	f7ff fb4e 	bl	8000e74 <vLnaBoostLfInit>
                                       adjustment Default LNA current */
    ucData = ucSpi1Read(RegLna);
 80017d8:	200c      	movs	r0, #12
 80017da:	f7ff f90d 	bl	80009f8 <ucSpi1Read>
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
    printf("RegLna = 0x%XH\r\n", ucData);
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4883      	ldr	r0, [pc, #524]	; (80019f4 <vLoraInit+0x3a8>)
 80017e8:	f004 fe0a 	bl	8006400 <iprintf>

    vLnaBoostHfInit(LNA_BOOST_HF);  /* High Frequency (RFI_HF) LNA current 
 80017ec:	2003      	movs	r0, #3
 80017ee:	f7ff fb65 	bl	8000ebc <vLnaBoostHfInit>
                                       adjustment Boost on, 150% LNA current */
    ucData = ucSpi1Read(RegLna);
 80017f2:	200c      	movs	r0, #12
 80017f4:	f7ff f900 	bl	80009f8 <ucSpi1Read>
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
    printf("RegLna = 0x%XH\r\n", ucData);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4619      	mov	r1, r3
 8001800:	487c      	ldr	r0, [pc, #496]	; (80019f4 <vLoraInit+0x3a8>)
 8001802:	f004 fdfd 	bl	8006400 <iprintf>

    vFifoTxBaseAddrInit(FIFO_TX_BASE_ADDR); /* Write base address in FIFO data
 8001806:	2080      	movs	r0, #128	; 0x80
 8001808:	f7ff fb7b 	bl	8000f02 <vFifoTxBaseAddrInit>
                                               buffer for TX modulator */
    ucData = ucSpi1Read(RegFifoTxBaseAddr);
 800180c:	200e      	movs	r0, #14
 800180e:	f7ff f8f3 	bl	80009f8 <ucSpi1Read>
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
    printf("RegFifoTxBaseAddr = 0x%XH\r\n", ucData);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	4619      	mov	r1, r3
 800181a:	4877      	ldr	r0, [pc, #476]	; (80019f8 <vLoraInit+0x3ac>)
 800181c:	f004 fdf0 	bl	8006400 <iprintf>

    vFifoRxBaseAddrInit(FIFO_RX_BASE_ADDR); /* Read base address in FIFO data 
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fb7c 	bl	8000f1e <vFifoRxBaseAddrInit>
                                               buffer for RX demodulator */
    ucData = ucSpi1Read(RegFifoRxBaseAddr);
 8001826:	200f      	movs	r0, #15
 8001828:	f7ff f8e6 	bl	80009f8 <ucSpi1Read>
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
    printf("RegFifoRxBaseAddr = 0x%XH\r\n", ucData);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	4619      	mov	r1, r3
 8001834:	4871      	ldr	r0, [pc, #452]	; (80019fc <vLoraInit+0x3b0>)
 8001836:	f004 fde3 	bl	8006400 <iprintf>

    vIrqFlagsMaskInit(IRQ_FLAGS_MASK);  /* Disable all interrupts mask */
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff fb7d 	bl	8000f3a <vIrqFlagsMaskInit>
    ucData = ucSpi1Read(RegIrqFlagsMask);
 8001840:	2011      	movs	r0, #17
 8001842:	f7ff f8d9 	bl	80009f8 <ucSpi1Read>
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
    printf("RegIrqFlagsMask = 0x%XH\r\n", ucData);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	4619      	mov	r1, r3
 800184e:	486c      	ldr	r0, [pc, #432]	; (8001a00 <vLoraInit+0x3b4>)
 8001850:	f004 fdd6 	bl	8006400 <iprintf>

    vBandWidthInit(BANDWIDTH_125K);     /* Signal bandwidth: 62,5kHz */
 8001854:	2007      	movs	r0, #7
 8001856:	f7ff fb89 	bl	8000f6c <vBandWidthInit>
    ucData = ucSpi1Read(RegModemConfig1);
 800185a:	201d      	movs	r0, #29
 800185c:	f7ff f8cc 	bl	80009f8 <ucSpi1Read>
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
    printf("RegModemConfig1 = 0x%XH\r\n", ucData);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	4619      	mov	r1, r3
 8001868:	4866      	ldr	r0, [pc, #408]	; (8001a04 <vLoraInit+0x3b8>)
 800186a:	f004 fdc9 	bl	8006400 <iprintf>

    vCodingRateInit(CODING_RATE_4_5);   /* Error coding rate 4/5 */
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff fba0 	bl	8000fb4 <vCodingRateInit>
    ucData = ucSpi1Read(RegModemConfig1);
 8001874:	201d      	movs	r0, #29
 8001876:	f7ff f8bf 	bl	80009f8 <ucSpi1Read>
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
    printf("RegModemConfig1 = 0x%XH\r\n", ucData);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4619      	mov	r1, r3
 8001882:	4860      	ldr	r0, [pc, #384]	; (8001a04 <vLoraInit+0x3b8>)
 8001884:	f004 fdbc 	bl	8006400 <iprintf>

    vImplicitHeaderModeOnInit(IMPLICIT_HEADER); /* Init Implicit Header mode */
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff fbba 	bl	8001002 <vImplicitHeaderModeOnInit>
    ucData = ucSpi1Read(RegModemConfig1);
 800188e:	201d      	movs	r0, #29
 8001890:	f7ff f8b2 	bl	80009f8 <ucSpi1Read>
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
    printf("RegModemConfig1 = 0x%XH\r\n", ucData);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4619      	mov	r1, r3
 800189c:	4859      	ldr	r0, [pc, #356]	; (8001a04 <vLoraInit+0x3b8>)
 800189e:	f004 fdaf 	bl	8006400 <iprintf>

    vSpreadingFactorInit(SPREADING_FACTOR_64); /* SF rate 64 chips symbol */
 80018a2:	2006      	movs	r0, #6
 80018a4:	f7ff fbd0 	bl	8001048 <vSpreadingFactorInit>
    ucData = ucSpi1Read(RegModemConfig2);
 80018a8:	201e      	movs	r0, #30
 80018aa:	f7ff f8a5 	bl	80009f8 <ucSpi1Read>
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
    printf("RegModemConfig2 = 0x%XH\r\n", ucData);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4854      	ldr	r0, [pc, #336]	; (8001a08 <vLoraInit+0x3bc>)
 80018b8:	f004 fda2 	bl	8006400 <iprintf>

    vTxContinuousModeInit(TX_NORMAL_MODE);  /* Normal mode, a single packet is sent */
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff fbea 	bl	8001096 <vTxContinuousModeInit>
    ucData = ucSpi1Read(RegModemConfig2);
 80018c2:	201e      	movs	r0, #30
 80018c4:	f7ff f898 	bl	80009f8 <ucSpi1Read>
 80018c8:	4603      	mov	r3, r0
 80018ca:	71fb      	strb	r3, [r7, #7]
    printf("RegModemConfig2 = 0x%XH\r\n", ucData);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4619      	mov	r1, r3
 80018d0:	484d      	ldr	r0, [pc, #308]	; (8001a08 <vLoraInit+0x3bc>)
 80018d2:	f004 fd95 	bl	8006400 <iprintf>

    vRxPayloadCrcOnInit(CRC_ENABLE);        /* Enable CRC generation and check on payload */
 80018d6:	2001      	movs	r0, #1
 80018d8:	f7ff fc04 	bl	80010e4 <vRxPayloadCrcOnInit>
    ucData = ucSpi1Read(RegModemConfig2);
 80018dc:	201e      	movs	r0, #30
 80018de:	f7ff f88b 	bl	80009f8 <ucSpi1Read>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
    printf("RegModemConfig2 = 0x%XH\r\n", ucData);
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4847      	ldr	r0, [pc, #284]	; (8001a08 <vLoraInit+0x3bc>)
 80018ec:	f004 fd88 	bl	8006400 <iprintf>

    vSymbTimeoutInit(RX_TIMEOUT);           /* RX operation time-out */
 80018f0:	2064      	movs	r0, #100	; 0x64
 80018f2:	f7ff fc1e 	bl	8001132 <vSymbTimeoutInit>
    ucData = ucSpi1Read(RegModemConfig2);
 80018f6:	201e      	movs	r0, #30
 80018f8:	f7ff f87e 	bl	80009f8 <ucSpi1Read>
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
    printf("RegModemConfig2 = 0x%XH\r\n", ucData);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4619      	mov	r1, r3
 8001904:	4840      	ldr	r0, [pc, #256]	; (8001a08 <vLoraInit+0x3bc>)
 8001906:	f004 fd7b 	bl	8006400 <iprintf>
    ucData = ucSpi1Read(RegSymbTimeoutLsb);
 800190a:	201f      	movs	r0, #31
 800190c:	f7ff f874 	bl	80009f8 <ucSpi1Read>
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
    printf("RegSymbTimeoutLsb = 0x%XH\r\n", ucData);
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4619      	mov	r1, r3
 8001918:	483c      	ldr	r0, [pc, #240]	; (8001a0c <vLoraInit+0x3c0>)
 800191a:	f004 fd71 	bl	8006400 <iprintf>

    vPreambleLengthInit(PREAMBLE_LENGTH);   /* Preamble length  = PreambleLength + 4.25 Symbols */
 800191e:	2008      	movs	r0, #8
 8001920:	f7ff fc30 	bl	8001184 <vPreambleLengthInit>
    ucData = ucSpi1Read(RegPreambleMsb);
 8001924:	2020      	movs	r0, #32
 8001926:	f7ff f867 	bl	80009f8 <ucSpi1Read>
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
    printf("RegPreambleMsb = 0x%XH\r\n", ucData);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	4619      	mov	r1, r3
 8001932:	4837      	ldr	r0, [pc, #220]	; (8001a10 <vLoraInit+0x3c4>)
 8001934:	f004 fd64 	bl	8006400 <iprintf>
    ucData = ucSpi1Read(RegPreambleLsb);
 8001938:	2021      	movs	r0, #33	; 0x21
 800193a:	f7ff f85d 	bl	80009f8 <ucSpi1Read>
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    printf("RegPreambleLsb = 0x%XH\r\n", ucData);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4619      	mov	r1, r3
 8001946:	4833      	ldr	r0, [pc, #204]	; (8001a14 <vLoraInit+0x3c8>)
 8001948:	f004 fd5a 	bl	8006400 <iprintf>

    vPayloadLengthInit(PAYLOAD_LENGHT);     /* Init Payload length */
 800194c:	2003      	movs	r0, #3
 800194e:	f7ff fc30 	bl	80011b2 <vPayloadLengthInit>
    ucData = ucSpi1Read(RegPayloadLength);
 8001952:	2022      	movs	r0, #34	; 0x22
 8001954:	f7ff f850 	bl	80009f8 <ucSpi1Read>
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
    printf("RegPayloadLength = 0x%XH\r\n", ucData);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4619      	mov	r1, r3
 8001960:	482d      	ldr	r0, [pc, #180]	; (8001a18 <vLoraInit+0x3cc>)
 8001962:	f004 fd4d 	bl	8006400 <iprintf>

    vPayloadMaxLengthInit(PAYLOAD_MAX_LENGTH);  /* Maximum payload length */
 8001966:	20ff      	movs	r0, #255	; 0xff
 8001968:	f7ff fc31 	bl	80011ce <vPayloadMaxLengthInit>
    ucData = ucSpi1Read(RegMaxPayloadLength);
 800196c:	2023      	movs	r0, #35	; 0x23
 800196e:	f7ff f843 	bl	80009f8 <ucSpi1Read>
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
    printf("RegMaxPayloadLength = 0x%XH\r\n", ucData);
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	4619      	mov	r1, r3
 800197a:	4828      	ldr	r0, [pc, #160]	; (8001a1c <vLoraInit+0x3d0>)
 800197c:	f004 fd40 	bl	8006400 <iprintf>
    
    vFreqHoppingPeriodInit(FREQ_HOPPING_PERIOD);    /* Symbol periods between frequency hops */
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff fc32 	bl	80011ea <vFreqHoppingPeriodInit>
    ucData = ucSpi1Read(RegHopPeriod);
 8001986:	2024      	movs	r0, #36	; 0x24
 8001988:	f7ff f836 	bl	80009f8 <ucSpi1Read>
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
    printf("RegHopPeriod = 0x%XH\r\n", ucData);
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4619      	mov	r1, r3
 8001994:	4822      	ldr	r0, [pc, #136]	; (8001a20 <vLoraInit+0x3d4>)
 8001996:	f004 fd33 	bl	8006400 <iprintf>
    
    vLowDataRateOptimizeInit(LOW_DATA_RATE_OPTIMIZE); /*  Enabled; mandated for when the
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fc33 	bl	8001206 <vLowDataRateOptimizeInit>
                                                    symbol length exceeds16ms */
    ucData = ucSpi1Read(RegModemConfig3);
 80019a0:	2026      	movs	r0, #38	; 0x26
 80019a2:	f7ff f829 	bl	80009f8 <ucSpi1Read>
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
    printf("RegModemConfig3 = 0x%XH\r\n", ucData);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4619      	mov	r1, r3
 80019ae:	481d      	ldr	r0, [pc, #116]	; (8001a24 <vLoraInit+0x3d8>)
 80019b0:	f004 fd26 	bl	8006400 <iprintf>

    vAgcAutoOnInit(AGC_AUTO) ;   /* 0 -> LNA gain set by register LnaGain
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fc4d 	bl	8001254 <vAgcAutoOnInit>
                                    1 -> LNA gain set by the internal AGC loop*/
    ucData = ucSpi1Read(RegModemConfig3);
 80019ba:	2026      	movs	r0, #38	; 0x26
 80019bc:	f7ff f81c 	bl	80009f8 <ucSpi1Read>
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
    printf("RegModemConfig3 = 0x%XH\r\n", ucData);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4619      	mov	r1, r3
 80019c8:	4816      	ldr	r0, [pc, #88]	; (8001a24 <vLoraInit+0x3d8>)
 80019ca:	f004 fd19 	bl	8006400 <iprintf>

    vDetectionOptimizeInit(LORA_DETECTION_OPTIMIZE);   /* LoRa Detection Optimize 0x03 ->
 80019ce:	2005      	movs	r0, #5
 80019d0:	f7ff fc67 	bl	80012a2 <vDetectionOptimizeInit>
                                                       SF7 to SF12; 0x05 -> SF6 */
    ucData = ucSpi1Read(RegDetectOptimize);
 80019d4:	2031      	movs	r0, #49	; 0x31
 80019d6:	e027      	b.n	8001a28 <vLoraInit+0x3dc>
 80019d8:	08007660 	.word	0x08007660
 80019dc:	08007674 	.word	0x08007674
 80019e0:	08007688 	.word	0x08007688
 80019e4:	0800769c 	.word	0x0800769c
 80019e8:	080076b0 	.word	0x080076b0
 80019ec:	080076c8 	.word	0x080076c8
 80019f0:	080076dc 	.word	0x080076dc
 80019f4:	080076f0 	.word	0x080076f0
 80019f8:	08007704 	.word	0x08007704
 80019fc:	08007720 	.word	0x08007720
 8001a00:	0800773c 	.word	0x0800773c
 8001a04:	08007758 	.word	0x08007758
 8001a08:	08007774 	.word	0x08007774
 8001a0c:	08007790 	.word	0x08007790
 8001a10:	080077ac 	.word	0x080077ac
 8001a14:	080077c8 	.word	0x080077c8
 8001a18:	080077e4 	.word	0x080077e4
 8001a1c:	08007800 	.word	0x08007800
 8001a20:	08007820 	.word	0x08007820
 8001a24:	08007838 	.word	0x08007838
 8001a28:	f7fe ffe6 	bl	80009f8 <ucSpi1Read>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
    printf("RegDetectOptimize = 0x%XH\r\n", ucData);
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	4619      	mov	r1, r3
 8001a34:	4866      	ldr	r0, [pc, #408]	; (8001bd0 <vLoraInit+0x584>)
 8001a36:	f004 fce3 	bl	8006400 <iprintf>

    vInvertIQInit(INVERT_IQ);   /* Invert the LoRa I and Q signals */
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fc54 	bl	80012e8 <vInvertIQInit>
    ucData = ucSpi1Read(RegInvertIQ);
 8001a40:	2033      	movs	r0, #51	; 0x33
 8001a42:	f7fe ffd9 	bl	80009f8 <ucSpi1Read>
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
    printf("RegInvertIQ = 0x%XH\r\n", ucData);
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4861      	ldr	r0, [pc, #388]	; (8001bd4 <vLoraInit+0x588>)
 8001a50:	f004 fcd6 	bl	8006400 <iprintf>

    vDetectionThresholdInit(LORA_DETECTION_THRESHOLD); /* LoRa detection threshold 0x0A 
 8001a54:	200c      	movs	r0, #12
 8001a56:	f7ff fc6e 	bl	8001336 <vDetectionThresholdInit>
                                                            -> SF7 to SF12; 0x0C -> SF6 */
    ucData = ucSpi1Read(RegDetectionThreshold);
 8001a5a:	2037      	movs	r0, #55	; 0x37
 8001a5c:	f7fe ffcc 	bl	80009f8 <ucSpi1Read>
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
    printf("RegDetectionThreshold = 0x%XH\r\n", ucData);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4619      	mov	r1, r3
 8001a68:	485b      	ldr	r0, [pc, #364]	; (8001bd8 <vLoraInit+0x58c>)
 8001a6a:	f004 fcc9 	bl	8006400 <iprintf>

    vSyncWordInit(LORA_SYNC_WORD);          /* Init Sync Word */
 8001a6e:	2020      	movs	r0, #32
 8001a70:	f7ff fc75 	bl	800135e <vSyncWordInit>
    ucData = ucSpi1Read(RegSyncWord);
 8001a74:	2039      	movs	r0, #57	; 0x39
 8001a76:	f7fe ffbf 	bl	80009f8 <ucSpi1Read>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
    printf("RegSyncWord = 0x%XH\r\n", ucData);
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4856      	ldr	r0, [pc, #344]	; (8001bdc <vLoraInit+0x590>)
 8001a84:	f004 fcbc 	bl	8006400 <iprintf>

    vAgcReferenceLevelInit(AGC_REFERENCE);  /* Sets the floor reference for all AGC thresholds */
 8001a88:	2019      	movs	r0, #25
 8001a8a:	f7ff fcf3 	bl	8001474 <vAgcReferenceLevelInit>
    ucData = ucSpi1Read(RegAgcRef);
 8001a8e:	2061      	movs	r0, #97	; 0x61
 8001a90:	f7fe ffb2 	bl	80009f8 <ucSpi1Read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]
    printf("RegAgcRef = 0x%XH\r\n", ucData);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4850      	ldr	r0, [pc, #320]	; (8001be0 <vLoraInit+0x594>)
 8001a9e:	f004 fcaf 	bl	8006400 <iprintf>

    vAgcStep1Init(AGC_STEP1);   /* Defines the 1st AGC Threshold */
 8001aa2:	200c      	movs	r0, #12
 8001aa4:	f7ff fd06 	bl	80014b4 <vAgcStep1Init>
    ucData = ucSpi1Read(RegAgcThresh1);
 8001aa8:	2062      	movs	r0, #98	; 0x62
 8001aaa:	f7fe ffa5 	bl	80009f8 <ucSpi1Read>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    printf("RegAgcThresh1 = 0x%XH\r\n", ucData);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	484b      	ldr	r0, [pc, #300]	; (8001be4 <vLoraInit+0x598>)
 8001ab8:	f004 fca2 	bl	8006400 <iprintf>

    vAgcStep2Init(AGC_STEP2);   /* Defines the 2nd AGC Threshold */
 8001abc:	2004      	movs	r0, #4
 8001abe:	f7ff fd19 	bl	80014f4 <vAgcStep2Init>
    ucData = ucSpi1Read(RegAgcThresh2);
 8001ac2:	2063      	movs	r0, #99	; 0x63
 8001ac4:	f7fe ff98 	bl	80009f8 <ucSpi1Read>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
    printf("RegAgcThresh2 = 0x%XH\r\n", ucData);
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4845      	ldr	r0, [pc, #276]	; (8001be8 <vLoraInit+0x59c>)
 8001ad2:	f004 fc95 	bl	8006400 <iprintf>

    vAgcStep3Init(AGC_STEP3);   /* Defines the 3rd AGC Threshold */
 8001ad6:	200b      	movs	r0, #11
 8001ad8:	f7ff fd30 	bl	800153c <vAgcStep3Init>
    ucData = ucSpi1Read(RegAgcThresh2);
 8001adc:	2063      	movs	r0, #99	; 0x63
 8001ade:	f7fe ff8b 	bl	80009f8 <ucSpi1Read>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
    printf("RegAgcThresh2 = 0x%XH\r\n", ucData);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	483f      	ldr	r0, [pc, #252]	; (8001be8 <vLoraInit+0x59c>)
 8001aec:	f004 fc88 	bl	8006400 <iprintf>

    vAgcStep4Init(AGC_STEP4);   /* Defines the 4th AGC Threshold */
 8001af0:	200c      	movs	r0, #12
 8001af2:	f7ff fd43 	bl	800157c <vAgcStep4Init>
    ucData = ucSpi1Read(RegAgcThresh3);
 8001af6:	2064      	movs	r0, #100	; 0x64
 8001af8:	f7fe ff7e 	bl	80009f8 <ucSpi1Read>
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]
    printf("RegAgcThresh3 = 0x%XH\r\n", ucData);
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4839      	ldr	r0, [pc, #228]	; (8001bec <vLoraInit+0x5a0>)
 8001b06:	f004 fc7b 	bl	8006400 <iprintf>

    vAgcStep5Init(AGC_STEP5);   /* Defines the 5th AGC Threshold */
 8001b0a:	200c      	movs	r0, #12
 8001b0c:	f7ff fd5a 	bl	80015c4 <vAgcStep5Init>
    ucData = ucSpi1Read(RegAgcThresh3);
 8001b10:	2064      	movs	r0, #100	; 0x64
 8001b12:	f7fe ff71 	bl	80009f8 <ucSpi1Read>
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
    printf("RegAgcThresh3 = 0x%XH\r\n", ucData);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4833      	ldr	r0, [pc, #204]	; (8001bec <vLoraInit+0x5a0>)
 8001b20:	f004 fc6e 	bl	8006400 <iprintf>

    vPllBandwidth(PLL_BANDWIDTH);   /* Controls the PLL bandwidth */
 8001b24:	2003      	movs	r0, #3
 8001b26:	f7ff fd6d 	bl	8001604 <vPllBandwidth>
    ucData = ucSpi1Read(RegPll);
 8001b2a:	2070      	movs	r0, #112	; 0x70
 8001b2c:	f7fe ff64 	bl	80009f8 <ucSpi1Read>
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
    printf("RegPll = 0x%XH\r\n", ucData);
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4619      	mov	r1, r3
 8001b38:	482d      	ldr	r0, [pc, #180]	; (8001bf0 <vLoraInit+0x5a4>)
 8001b3a:	f004 fc61 	bl	8006400 <iprintf>

    vDio0MappingInit(RX_DONE);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff fc1b 	bl	800137a <vDio0MappingInit>
    ucData = ucSpi1Read(RegDioMapping1);
 8001b44:	2040      	movs	r0, #64	; 0x40
 8001b46:	f7fe ff57 	bl	80009f8 <ucSpi1Read>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
    printf("RegDioMapping1 = 0x%XH\r\n", ucData);
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4828      	ldr	r0, [pc, #160]	; (8001bf4 <vLoraInit+0x5a8>)
 8001b54:	f004 fc54 	bl	8006400 <iprintf>

    // vMapPreambleDetect(PREAMBBLE_DETECT_INTERRUPT);
    // ucData = ucSpi1Read(RegTcxo);
    // printf("RegTcxo = 0x%XH\r\n", ucData);

    vTcxoInputOnInit(XTAL_INPUT);   /* Controls the crystal oscillator */
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff fc41 	bl	80013e0 <vTcxoInputOnInit>
    ucData = ucSpi1Read(RegTcxo);
 8001b5e:	204b      	movs	r0, #75	; 0x4b
 8001b60:	f7fe ff4a 	bl	80009f8 <ucSpi1Read>
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
    printf("RegTcxo = 0x%XH\r\n", ucData);
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4822      	ldr	r0, [pc, #136]	; (8001bf8 <vLoraInit+0x5ac>)
 8001b6e:	f004 fc47 	bl	8006400 <iprintf>

    vPaDacInit(PA_DAC); /* Enables the +20dBm option on PA_BOOST pin */
 8001b72:	2007      	movs	r0, #7
 8001b74:	f7ff fc5b 	bl	800142e <vPaDacInit>
    ucData = ucSpi1Read(RegPaDac);
 8001b78:	204d      	movs	r0, #77	; 0x4d
 8001b7a:	f7fe ff3d 	bl	80009f8 <ucSpi1Read>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
    printf("RegPaDac = 0x%XH\r\n", ucData);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4619      	mov	r1, r3
 8001b86:	481d      	ldr	r0, [pc, #116]	; (8001bfc <vLoraInit+0x5b0>)
 8001b88:	f004 fc3a 	bl	8006400 <iprintf>
    
    ucData = ucSpi1Read(RegLna);
 8001b8c:	200c      	movs	r0, #12
 8001b8e:	f7fe ff33 	bl	80009f8 <ucSpi1Read>
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
    printf("RegLna = 0x%XH\r\n", ucData);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4819      	ldr	r0, [pc, #100]	; (8001c00 <vLoraInit+0x5b4>)
 8001b9c:	f004 fc30 	bl	8006400 <iprintf>

    ucData = ucVersionRead();
 8001ba0:	f7ff fc0f 	bl	80013c2 <ucVersionRead>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
    printf("RegVersion = 0x%XH\r\n", ucData);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4815      	ldr	r0, [pc, #84]	; (8001c04 <vLoraInit+0x5b8>)
 8001bae:	f004 fc27 	bl	8006400 <iprintf>

    ucData = ucSpi1Read(RegOpMode);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7fe ff20 	bl	80009f8 <ucSpi1Read>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
    printf("RegOpMode = 0x%XH\r\n", ucData);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4811      	ldr	r0, [pc, #68]	; (8001c08 <vLoraInit+0x5bc>)
 8001bc2:	f004 fc1d 	bl	8006400 <iprintf>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	08007854 	.word	0x08007854
 8001bd4:	08007870 	.word	0x08007870
 8001bd8:	08007888 	.word	0x08007888
 8001bdc:	080078a8 	.word	0x080078a8
 8001be0:	080078c0 	.word	0x080078c0
 8001be4:	080078d4 	.word	0x080078d4
 8001be8:	080078ec 	.word	0x080078ec
 8001bec:	08007904 	.word	0x08007904
 8001bf0:	0800791c 	.word	0x0800791c
 8001bf4:	08007930 	.word	0x08007930
 8001bf8:	0800794c 	.word	0x0800794c
 8001bfc:	08007960 	.word	0x08007960
 8001c00:	080076f0 	.word	0x080076f0
 8001c04:	08007974 	.word	0x08007974
 8001c08:	08007660 	.word	0x08007660

08001c0c <vLoraReceive>:
  * @param pcRxBuffer: Data Address Receive
  * @param ucRxMode: Receive Mode: Rx Single or Continuous
  * @retval None
  */
void vLoraReceive(uint8_t* pcRxBuffer, uint8_t ucRxMode)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
    uint8_t ucData = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73bb      	strb	r3, [r7, #14]
    uint8_t i = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
    uint8_t ucIrqStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	737b      	strb	r3, [r7, #13]
    printf("****************** Start Receive ********************\r\n\r\n");
 8001c24:	48d1      	ldr	r0, [pc, #836]	; (8001f6c <vLoraReceive+0x360>)
 8001c26:	f004 fc71 	bl	800650c <puts>

    /* Init Module Lora into Standby Mode */
    vModeInit(STDBY_MODE);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7fe ffed 	bl	8000c0a <vModeInit>
    ucData = ucSpi1Read(RegOpMode);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7fe fee1 	bl	80009f8 <ucSpi1Read>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73bb      	strb	r3, [r7, #14]
    printf("Init Standby Mode: RegOpMode = 0x%XH\r\n", ucData);
 8001c3a:	7bbb      	ldrb	r3, [r7, #14]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	48cc      	ldr	r0, [pc, #816]	; (8001f70 <vLoraReceive+0x364>)
 8001c40:	f004 fbde 	bl	8006400 <iprintf>
    
    /* Set FifoPtrAddr to FifoRxPtrBase */
    vSpi1Write(RegFifoAddrPtr , FIFO_RX_BASE_ADDR);
 8001c44:	2100      	movs	r1, #0
 8001c46:	200d      	movs	r0, #13
 8001c48:	f7fe fe6e 	bl	8000928 <vSpi1Write>
    ucData = ucSpi1Read(RegFifoAddrPtr);
 8001c4c:	200d      	movs	r0, #13
 8001c4e:	f7fe fed3 	bl	80009f8 <ucSpi1Read>
 8001c52:	4603      	mov	r3, r0
 8001c54:	73bb      	strb	r3, [r7, #14]
    printf("Set Read Base Address to FifoAddrPtr: RegFifoAddrPtr = 0x%XH\r\n", ucData);
 8001c56:	7bbb      	ldrb	r3, [r7, #14]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	48c6      	ldr	r0, [pc, #792]	; (8001f74 <vLoraReceive+0x368>)
 8001c5c:	f004 fbd0 	bl	8006400 <iprintf>

    /* If Rx Continuous Mode */
    if(ucRxMode == RX_CONTINUOUS)
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	f040 80a1 	bne.w	8001daa <vLoraReceive+0x19e>
    {
        /* Init Module Lora into RX Coninuous Mode */
        vModeInit(RXCONTINUOUS_MODE); 
 8001c68:	2005      	movs	r0, #5
 8001c6a:	f7fe ffce 	bl	8000c0a <vModeInit>
        ucData = ucSpi1Read(RegOpMode);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7fe fec2 	bl	80009f8 <ucSpi1Read>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73bb      	strb	r3, [r7, #14]
        printf("Init Rx Continuous Mode: RegOpMode = 0x%XH\r\n", ucData);
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	48be      	ldr	r0, [pc, #760]	; (8001f78 <vLoraReceive+0x36c>)
 8001c7e:	f004 fbbf 	bl	8006400 <iprintf>

        while(1)
        {
            ucData = ucSpi1Read(RegIrqFlags);
 8001c82:	2012      	movs	r0, #18
 8001c84:	f7fe feb8 	bl	80009f8 <ucSpi1Read>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73bb      	strb	r3, [r7, #14]
            printf("Check RxDone Flags Before: RegIrqFlags = 0x%XH\r\n", ucData);
 8001c8c:	7bbb      	ldrb	r3, [r7, #14]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	48ba      	ldr	r0, [pc, #744]	; (8001f7c <vLoraReceive+0x370>)
 8001c92:	f004 fbb5 	bl	8006400 <iprintf>

            /* Wait for RxDone set */
            while((ucSpi1Read(RegIrqFlags) & 0x40u) == 0u);
 8001c96:	bf00      	nop
 8001c98:	2012      	movs	r0, #18
 8001c9a:	f7fe fead 	bl	80009f8 <ucSpi1Read>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f7      	beq.n	8001c98 <vLoraReceive+0x8c>

            ucIrqStatus = ucSpi1Read(RegIrqFlags);
 8001ca8:	2012      	movs	r0, #18
 8001caa:	f7fe fea5 	bl	80009f8 <ucSpi1Read>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	737b      	strb	r3, [r7, #13]
            printf("Check PayloadCrcError and RxDone Flags: RegIrqFlags = 0x%XH\r\n", ucIrqStatus);
 8001cb2:	7b7b      	ldrb	r3, [r7, #13]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	48b2      	ldr	r0, [pc, #712]	; (8001f80 <vLoraReceive+0x374>)
 8001cb8:	f004 fba2 	bl	8006400 <iprintf>
            
            /* If PayloadCrcError Flag not set and ValidHeader Flag set */
            if(((ucIrqStatus & 0x20u) == 0u) && ((ucIrqStatus & 0x10u) != 0u))
 8001cbc:	7b7b      	ldrb	r3, [r7, #13]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d14e      	bne.n	8001d64 <vLoraReceive+0x158>
 8001cc6:	7b7b      	ldrb	r3, [r7, #13]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d049      	beq.n	8001d64 <vLoraReceive+0x158>
            {
                ucData = ucSpi1Read(RegFifoRxCurrentAddr);
 8001cd0:	2010      	movs	r0, #16
 8001cd2:	f7fe fe91 	bl	80009f8 <ucSpi1Read>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	73bb      	strb	r3, [r7, #14]
                vSpi1Write(RegFifoAddrPtr, ucData);
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	200d      	movs	r0, #13
 8001ce0:	f7fe fe22 	bl	8000928 <vSpi1Write>

                for(i = 0u; i < PAYLOAD_LENGHT; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e014      	b.n	8001d14 <vLoraReceive+0x108>
                {
                    *(pcRxBuffer + i) = ucSpi1Read(RegFifo);
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	18d4      	adds	r4, r2, r3
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7fe fe81 	bl	80009f8 <ucSpi1Read>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	7023      	strb	r3, [r4, #0]
                    ucData = *(pcRxBuffer + i);
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	73bb      	strb	r3, [r7, #14]
                    printf("Read Data From FIFO: RegFifo = 0x%XH\r\n", ucData);
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	4619      	mov	r1, r3
 8001d08:	489e      	ldr	r0, [pc, #632]	; (8001f84 <vLoraReceive+0x378>)
 8001d0a:	f004 fb79 	bl	8006400 <iprintf>
                for(i = 0u; i < PAYLOAD_LENGHT; i++)
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	3301      	adds	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d9e7      	bls.n	8001cea <vLoraReceive+0xde>
                }

                /* Clear RxDone Flag */
                vSpi1Write(RegIrqFlags, (ucIrqStatus & 0x40u));
 8001d1a:	7b7b      	ldrb	r3, [r7, #13]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	4619      	mov	r1, r3
 8001d24:	2012      	movs	r0, #18
 8001d26:	f7fe fdff 	bl	8000928 <vSpi1Write>
                ucData = ucSpi1Read(RegIrqFlags);
 8001d2a:	2012      	movs	r0, #18
 8001d2c:	f7fe fe64 	bl	80009f8 <ucSpi1Read>
 8001d30:	4603      	mov	r3, r0
 8001d32:	73bb      	strb	r3, [r7, #14]
                printf("Clear RxDone Flag: RegIrqFlags = 0x%XH\r\n", ucData);
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	4619      	mov	r1, r3
 8001d38:	4893      	ldr	r0, [pc, #588]	; (8001f88 <vLoraReceive+0x37c>)
 8001d3a:	f004 fb61 	bl	8006400 <iprintf>

                /* Clear ValidHeader Flag */
                vSpi1Write(RegIrqFlags, (ucIrqStatus & 0x10u));
 8001d3e:	7b7b      	ldrb	r3, [r7, #13]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4619      	mov	r1, r3
 8001d48:	2012      	movs	r0, #18
 8001d4a:	f7fe fded 	bl	8000928 <vSpi1Write>
                ucData = ucSpi1Read(RegIrqFlags);
 8001d4e:	2012      	movs	r0, #18
 8001d50:	f7fe fe52 	bl	80009f8 <ucSpi1Read>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73bb      	strb	r3, [r7, #14]
                printf("Clear ValidHeader Flag: RegIrqFlags = 0x%XH\r\n", ucData);
 8001d58:	7bbb      	ldrb	r3, [r7, #14]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	488b      	ldr	r0, [pc, #556]	; (8001f8c <vLoraReceive+0x380>)
 8001d5e:	f004 fb4f 	bl	8006400 <iprintf>
 8001d62:	e01e      	b.n	8001da2 <vLoraReceive+0x196>
            }

            /* If PayloadCrcError Flag set */
            else
            {
                printf("Data Receive Failed\r\n");
 8001d64:	488a      	ldr	r0, [pc, #552]	; (8001f90 <vLoraReceive+0x384>)
 8001d66:	f004 fbd1 	bl	800650c <puts>

                ucData = ucSpi1Read(RegIrqFlags);
 8001d6a:	2012      	movs	r0, #18
 8001d6c:	f7fe fe44 	bl	80009f8 <ucSpi1Read>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73bb      	strb	r3, [r7, #14]
                printf("Check PayloadCrcError Flag Before Clear: RegIrqFlags = 0x%XH\r\n", ucData);               
 8001d74:	7bbb      	ldrb	r3, [r7, #14]
 8001d76:	4619      	mov	r1, r3
 8001d78:	4886      	ldr	r0, [pc, #536]	; (8001f94 <vLoraReceive+0x388>)
 8001d7a:	f004 fb41 	bl	8006400 <iprintf>

                /* Clear PayloadCrcError Flag */
                vSpi1Write(RegIrqFlags, (ucIrqStatus & 0x20u));
 8001d7e:	7b7b      	ldrb	r3, [r7, #13]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4619      	mov	r1, r3
 8001d88:	2012      	movs	r0, #18
 8001d8a:	f7fe fdcd 	bl	8000928 <vSpi1Write>
                ucData = ucSpi1Read(RegIrqFlags);
 8001d8e:	2012      	movs	r0, #18
 8001d90:	f7fe fe32 	bl	80009f8 <ucSpi1Read>
 8001d94:	4603      	mov	r3, r0
 8001d96:	73bb      	strb	r3, [r7, #14]
                printf("Clear PayloadCrcError Flag: RegIrqFlags = 0x%XH\r\n", ucData);
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	487e      	ldr	r0, [pc, #504]	; (8001f98 <vLoraReceive+0x38c>)
 8001d9e:	f004 fb2f 	bl	8006400 <iprintf>
            }
            printf("****************** Finish Receive ********************\r\n\r\n");
 8001da2:	487e      	ldr	r0, [pc, #504]	; (8001f9c <vLoraReceive+0x390>)
 8001da4:	f004 fbb2 	bl	800650c <puts>
            ucData = ucSpi1Read(RegIrqFlags);
 8001da8:	e76b      	b.n	8001c82 <vLoraReceive+0x76>

    /* If Rx Single Module */
    else
    {
        /* Init Module Lora into RX Single Mode */
        vModeInit(RXSINGLE_MODE);
 8001daa:	2006      	movs	r0, #6
 8001dac:	f7fe ff2d 	bl	8000c0a <vModeInit>
        ucData = ucSpi1Read(RegOpMode);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7fe fe21 	bl	80009f8 <ucSpi1Read>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73bb      	strb	r3, [r7, #14]
        printf("Init Rx Single Mode: RegOpMode = 0x%XH\r\n", ucData);
 8001dba:	7bbb      	ldrb	r3, [r7, #14]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4878      	ldr	r0, [pc, #480]	; (8001fa0 <vLoraReceive+0x394>)
 8001dc0:	f004 fb1e 	bl	8006400 <iprintf>

        ucData = ucSpi1Read(RegIrqFlags);
 8001dc4:	2012      	movs	r0, #18
 8001dc6:	f7fe fe17 	bl	80009f8 <ucSpi1Read>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	73bb      	strb	r3, [r7, #14]
        printf("Check RxTimeout and RxDone Flags: RegIrqFlags = 0x%XH\r\n", ucData);
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4874      	ldr	r0, [pc, #464]	; (8001fa4 <vLoraReceive+0x398>)
 8001dd4:	f004 fb14 	bl	8006400 <iprintf>

        /* Wait for RxTimeout or RxDone Flag set */
        while(((ucSpi1Read(RegIrqFlags) & 0x40u) | (ucSpi1Read(RegIrqFlags) & 0x80)) == 0u);
 8001dd8:	bf00      	nop
 8001dda:	2012      	movs	r0, #18
 8001ddc:	f7fe fe0c 	bl	80009f8 <ucSpi1Read>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 0440 	and.w	r4, r3, #64	; 0x40
 8001de6:	2012      	movs	r0, #18
 8001de8:	f7fe fe06 	bl	80009f8 <ucSpi1Read>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	4323      	orrs	r3, r4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <vLoraReceive+0x1ce>

        ucIrqStatus = ucSpi1Read(RegIrqFlags);
 8001df8:	2012      	movs	r0, #18
 8001dfa:	f7fe fdfd 	bl	80009f8 <ucSpi1Read>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	737b      	strb	r3, [r7, #13]
        printf("Check RxTimeout or RxDone: RegIrqFlags = 0x%XH\r\n", ucIrqStatus);
 8001e02:	7b7b      	ldrb	r3, [r7, #13]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4868      	ldr	r0, [pc, #416]	; (8001fa8 <vLoraReceive+0x39c>)
 8001e08:	f004 fafa 	bl	8006400 <iprintf>

        /* If RxDone Flag set */
        if((ucIrqStatus & 0x40u) != 0u) 
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80d8 	beq.w	8001fc8 <vLoraReceive+0x3bc>
        {
            ucData = ucSpi1Read(RegOpMode);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f7fe fded 	bl	80009f8 <ucSpi1Read>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	73bb      	strb	r3, [r7, #14]
            printf("Check Automatic Mode change STANDBY: RegOpMode = 0x%XH\r\n", ucData);
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	4619      	mov	r1, r3
 8001e26:	4861      	ldr	r0, [pc, #388]	; (8001fac <vLoraReceive+0x3a0>)
 8001e28:	f004 faea 	bl	8006400 <iprintf>

            /* If Automatic Mode change STANDBY */
            if((ucData & 0x01u) != 0u)
 8001e2c:	7bbb      	ldrb	r3, [r7, #14]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80c4 	beq.w	8001fc0 <vLoraReceive+0x3b4>
            {
                printf("Automatic Mode change STANBY from RX Single Mode\r\n");
 8001e38:	485d      	ldr	r0, [pc, #372]	; (8001fb0 <vLoraReceive+0x3a4>)
 8001e3a:	f004 fb67 	bl	800650c <puts>

                ucIrqStatus = ucSpi1Read(RegIrqFlags);
 8001e3e:	2012      	movs	r0, #18
 8001e40:	f7fe fdda 	bl	80009f8 <ucSpi1Read>
 8001e44:	4603      	mov	r3, r0
 8001e46:	737b      	strb	r3, [r7, #13]
                printf("Check PlayloadCrcError Flag: RegIrqFlags = 0x%XH\r\n", ucIrqStatus);
 8001e48:	7b7b      	ldrb	r3, [r7, #13]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4859      	ldr	r0, [pc, #356]	; (8001fb4 <vLoraReceive+0x3a8>)
 8001e4e:	f004 fad7 	bl	8006400 <iprintf>

                /* If PlayloadCrcError Flag not set and ValidHeader Flag set */
                if(((ucIrqStatus & 0x20u) == 0u) && ((ucIrqStatus & 0x10u) != 0u))
 8001e52:	7b7b      	ldrb	r3, [r7, #13]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d15c      	bne.n	8001f16 <vLoraReceive+0x30a>
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d057      	beq.n	8001f16 <vLoraReceive+0x30a>
                {
                    ucData = ucSpi1Read(RegFifoRxCurrentAddr);
 8001e66:	2010      	movs	r0, #16
 8001e68:	f7fe fdc6 	bl	80009f8 <ucSpi1Read>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73bb      	strb	r3, [r7, #14]
                    vSpi1Write(RegFifoAddrPtr, ucData);
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	4619      	mov	r1, r3
 8001e74:	200d      	movs	r0, #13
 8001e76:	f7fe fd57 	bl	8000928 <vSpi1Write>
                    for(i = 0u; i < PAYLOAD_LENGHT; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	e014      	b.n	8001eaa <vLoraReceive+0x29e>
                    {
                        *(pcRxBuffer + i) = ucSpi1Read(RegFifo);
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	18d4      	adds	r4, r2, r3
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7fe fdb6 	bl	80009f8 <ucSpi1Read>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	7023      	strb	r3, [r4, #0]
                        ucData = *(pcRxBuffer + i);
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	73bb      	strb	r3, [r7, #14]
                        printf("Read Data From FIFO: RegFifo = 0x%XH\r\n", ucData);
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4839      	ldr	r0, [pc, #228]	; (8001f84 <vLoraReceive+0x378>)
 8001ea0:	f004 faae 	bl	8006400 <iprintf>
                    for(i = 0u; i < PAYLOAD_LENGHT; i++)
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d9e7      	bls.n	8001e80 <vLoraReceive+0x274>
                    }
                    ucData = ucSpi1Read(RegIrqFlags);
 8001eb0:	2012      	movs	r0, #18
 8001eb2:	f7fe fda1 	bl	80009f8 <ucSpi1Read>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	73bb      	strb	r3, [r7, #14]
                    printf("Check RxDone and ValidHeader Flags Before Clear: RegIrqFlags = 0x%XH\r\n", ucData);
 8001eba:	7bbb      	ldrb	r3, [r7, #14]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	483e      	ldr	r0, [pc, #248]	; (8001fb8 <vLoraReceive+0x3ac>)
 8001ec0:	f004 fa9e 	bl	8006400 <iprintf>

                    vSpi1Write(RegFifoAddrPtr , FIFO_RX_BASE_ADDR);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	200d      	movs	r0, #13
 8001ec8:	f7fe fd2e 	bl	8000928 <vSpi1Write>

                    /* Clear ValidHeader Flag */
                    vSpi1Write(RegIrqFlags, (ucIrqStatus & 0x10u));
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	2012      	movs	r0, #18
 8001ed8:	f7fe fd26 	bl	8000928 <vSpi1Write>
                    ucData = ucSpi1Read(RegIrqFlags);
 8001edc:	2012      	movs	r0, #18
 8001ede:	f7fe fd8b 	bl	80009f8 <ucSpi1Read>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73bb      	strb	r3, [r7, #14]
                    printf("Clear ValidHeader Flag: RegIrqFlags = 0x%XH\r\n", ucData);
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4828      	ldr	r0, [pc, #160]	; (8001f8c <vLoraReceive+0x380>)
 8001eec:	f004 fa88 	bl	8006400 <iprintf>

                    /* Clear RxDone Flag */
                    vSpi1Write(RegIrqFlags, (ucIrqStatus & 0x40u));
 8001ef0:	7b7b      	ldrb	r3, [r7, #13]
 8001ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	4619      	mov	r1, r3
 8001efa:	2012      	movs	r0, #18
 8001efc:	f7fe fd14 	bl	8000928 <vSpi1Write>
                    ucData = ucSpi1Read(RegIrqFlags);
 8001f00:	2012      	movs	r0, #18
 8001f02:	f7fe fd79 	bl	80009f8 <ucSpi1Read>
 8001f06:	4603      	mov	r3, r0
 8001f08:	73bb      	strb	r3, [r7, #14]
                    printf("Clear RxDone Flag: RegIrqFlags = 0x%XH\r\n", ucData);
 8001f0a:	7bbb      	ldrb	r3, [r7, #14]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	481e      	ldr	r0, [pc, #120]	; (8001f88 <vLoraReceive+0x37c>)
 8001f10:	f004 fa76 	bl	8006400 <iprintf>
 8001f14:	e01b      	b.n	8001f4e <vLoraReceive+0x342>

                /* If PlayloadCrcError Flag set  */
                else
                {
                    /* Read Flags Status */
                    ucIrqStatus = ucSpi1Read(RegIrqFlags);
 8001f16:	2012      	movs	r0, #18
 8001f18:	f7fe fd6e 	bl	80009f8 <ucSpi1Read>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	737b      	strb	r3, [r7, #13]
                    printf("Check PayloadCrcError Flag Before Clear: RegIrqFlags = 0x%XH\r\n", ucIrqStatus);
 8001f20:	7b7b      	ldrb	r3, [r7, #13]
 8001f22:	4619      	mov	r1, r3
 8001f24:	481b      	ldr	r0, [pc, #108]	; (8001f94 <vLoraReceive+0x388>)
 8001f26:	f004 fa6b 	bl	8006400 <iprintf>

                    /* Clear PayloadCrcError Flag */
                    vSpi1Write(RegIrqFlags, (ucIrqStatus & 0x20u));
 8001f2a:	7b7b      	ldrb	r3, [r7, #13]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	2012      	movs	r0, #18
 8001f36:	f7fe fcf7 	bl	8000928 <vSpi1Write>
                    ucData = ucSpi1Read(RegIrqFlags);
 8001f3a:	2012      	movs	r0, #18
 8001f3c:	f7fe fd5c 	bl	80009f8 <ucSpi1Read>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73bb      	strb	r3, [r7, #14]
                    printf("Clear PayloadCrcError Flag: RegIrqFlags = 0x%XH\r\n", ucData);
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	4619      	mov	r1, r3
 8001f48:	4813      	ldr	r0, [pc, #76]	; (8001f98 <vLoraReceive+0x38c>)
 8001f4a:	f004 fa59 	bl	8006400 <iprintf>
                }

                /* Init Module Lora into Sleep Mode */
                vModeInit(SLEEP_MODE);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7fe fe5b 	bl	8000c0a <vModeInit>
                ucData = ucSpi1Read(RegOpMode);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7fe fd4f 	bl	80009f8 <ucSpi1Read>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	73bb      	strb	r3, [r7, #14]
                printf("Init Sleep Mode: RegOpMode = 0x%XH\r\n", ucData);
 8001f5e:	7bbb      	ldrb	r3, [r7, #14]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4816      	ldr	r0, [pc, #88]	; (8001fbc <vLoraReceive+0x3b0>)
 8001f64:	f004 fa4c 	bl	8006400 <iprintf>
 8001f68:	e060      	b.n	800202c <vLoraReceive+0x420>
 8001f6a:	bf00      	nop
 8001f6c:	08007d94 	.word	0x08007d94
 8001f70:	080079c8 	.word	0x080079c8
 8001f74:	08007dd0 	.word	0x08007dd0
 8001f78:	08007e10 	.word	0x08007e10
 8001f7c:	08007e40 	.word	0x08007e40
 8001f80:	08007e74 	.word	0x08007e74
 8001f84:	08007eb4 	.word	0x08007eb4
 8001f88:	08007edc 	.word	0x08007edc
 8001f8c:	08007f08 	.word	0x08007f08
 8001f90:	08007f38 	.word	0x08007f38
 8001f94:	08007f50 	.word	0x08007f50
 8001f98:	08007f90 	.word	0x08007f90
 8001f9c:	08007fc4 	.word	0x08007fc4
 8001fa0:	08008000 	.word	0x08008000
 8001fa4:	0800802c 	.word	0x0800802c
 8001fa8:	08008064 	.word	0x08008064
 8001fac:	08007ac0 	.word	0x08007ac0
 8001fb0:	08008098 	.word	0x08008098
 8001fb4:	080080cc 	.word	0x080080cc
 8001fb8:	08008100 	.word	0x08008100
 8001fbc:	08008148 	.word	0x08008148
            }

            /* If Automatic Mode chang STANBY fail */
            else
            {
                printf("Automatic Mode change STANBY fail from RX Single Mode\r\n");
 8001fc0:	481e      	ldr	r0, [pc, #120]	; (800203c <vLoraReceive+0x430>)
 8001fc2:	f004 faa3 	bl	800650c <puts>
 8001fc6:	e031      	b.n	800202c <vLoraReceive+0x420>
        }

        /* If Rxtimeout Flag set */
        else
        {
            ucData = ucSpi1Read(RegOpMode);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7fe fd15 	bl	80009f8 <ucSpi1Read>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73bb      	strb	r3, [r7, #14]
            printf("Check Standby Mode: RegOpMode = 0x%XH\r\n", ucData);
 8001fd2:	7bbb      	ldrb	r3, [r7, #14]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481a      	ldr	r0, [pc, #104]	; (8002040 <vLoraReceive+0x434>)
 8001fd8:	f004 fa12 	bl	8006400 <iprintf>
            if((ucData & 0x01u) != 0u)
 8001fdc:	7bbb      	ldrb	r3, [r7, #14]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01f      	beq.n	8002026 <vLoraReceive+0x41a>
            {
                printf("Automatic Mode change STANBY from RX Single Mode\r\n");
 8001fe6:	4817      	ldr	r0, [pc, #92]	; (8002044 <vLoraReceive+0x438>)
 8001fe8:	f004 fa90 	bl	800650c <puts>

                ucData = ucSpi1Read(RegIrqFlags);
 8001fec:	2012      	movs	r0, #18
 8001fee:	f7fe fd03 	bl	80009f8 <ucSpi1Read>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73bb      	strb	r3, [r7, #14]
                printf("Check Timeout Flag Before Clear: RegIrqFlags = 0x%XH\r\n", ucData);
 8001ff6:	7bbb      	ldrb	r3, [r7, #14]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4813      	ldr	r0, [pc, #76]	; (8002048 <vLoraReceive+0x43c>)
 8001ffc:	f004 fa00 	bl	8006400 <iprintf>

                /* Clear Timeout Flag */
                vSpi1Write(RegIrqFlags, (ucIrqStatus & 0x80u));
 8002000:	7b7b      	ldrb	r3, [r7, #13]
 8002002:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	2012      	movs	r0, #18
 800200c:	f7fe fc8c 	bl	8000928 <vSpi1Write>
                ucData = ucSpi1Read(RegIrqFlags);
 8002010:	2012      	movs	r0, #18
 8002012:	f7fe fcf1 	bl	80009f8 <ucSpi1Read>
 8002016:	4603      	mov	r3, r0
 8002018:	73bb      	strb	r3, [r7, #14]
                printf("Clear Timeout Flag: RegIrqFlags = 0x%XH\r\n", ucData);
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	4619      	mov	r1, r3
 800201e:	480b      	ldr	r0, [pc, #44]	; (800204c <vLoraReceive+0x440>)
 8002020:	f004 f9ee 	bl	8006400 <iprintf>
 8002024:	e002      	b.n	800202c <vLoraReceive+0x420>
            }

            /* If Automatic Mode chang STANBY fail */
            else
            {
                printf("Automatic Mode change STANBY fail from RX Single Mode\r\n");
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <vLoraReceive+0x430>)
 8002028:	f004 fa70 	bl	800650c <puts>
            }
        }
    }
    printf("****************** Finish Receive ********************\r\n\r\n");
 800202c:	4808      	ldr	r0, [pc, #32]	; (8002050 <vLoraReceive+0x444>)
 800202e:	f004 fa6d 	bl	800650c <puts>
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	bf00      	nop
 800203c:	08008170 	.word	0x08008170
 8002040:	080081a8 	.word	0x080081a8
 8002044:	08008098 	.word	0x08008098
 8002048:	080081d0 	.word	0x080081d0
 800204c:	08008208 	.word	0x08008208
 8002050:	08007fc4 	.word	0x08007fc4

08002054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	b085      	sub	sp, #20
 8002058:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800205a:	f000 fe81 	bl	8002d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800205e:	f000 f8ab 	bl	80021b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002062:	f7fe fbad 	bl	80007c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002066:	f7fe faf5 	bl	8000654 <MX_ADC1_Init>
  MX_SPI1_Init();
 800206a:	f000 fafb 	bl	8002664 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800206e:	f000 fdc3 	bl	8002bf8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002072:	f000 fd1b 	bl	8002aac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  STM_LOGD("IWDG", "SET WATCHDOG: {%ums}", iwdgInit(&hiwdg, WATCHDOG_TIME));
 8002076:	f000 fecb 	bl	8002e10 <HAL_GetTick>
 800207a:	4604      	mov	r4, r0
 800207c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002080:	483d      	ldr	r0, [pc, #244]	; (8002178 <main+0x124>)
 8002082:	f000 f9e7 	bl	8002454 <iwdgInit>
 8002086:	4603      	mov	r3, r0
 8002088:	9303      	str	r3, [sp, #12]
 800208a:	236e      	movs	r3, #110	; 0x6e
 800208c:	9302      	str	r3, [sp, #8]
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <main+0x128>)
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <main+0x12c>)
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	4623      	mov	r3, r4
 8002098:	4a3a      	ldr	r2, [pc, #232]	; (8002184 <main+0x130>)
 800209a:	4939      	ldr	r1, [pc, #228]	; (8002180 <main+0x12c>)
 800209c:	2004      	movs	r0, #4
 800209e:	f000 fcb3 	bl	8002a08 <stm_log_write>
  STM_LOGD(MAIN_TAG, "MCU RESET CAUSE: {%s}", resetCauseGetName(resetCauseGet()));
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <main+0x134>)
 80020a4:	681d      	ldr	r5, [r3, #0]
 80020a6:	f000 feb3 	bl	8002e10 <HAL_GetTick>
 80020aa:	4606      	mov	r6, r0
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <main+0x134>)
 80020ae:	681c      	ldr	r4, [r3, #0]
 80020b0:	f000 f93c 	bl	800232c <resetCauseGet>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f97e 	bl	80023b8 <resetCauseGetName>
 80020bc:	4603      	mov	r3, r0
 80020be:	9303      	str	r3, [sp, #12]
 80020c0:	236f      	movs	r3, #111	; 0x6f
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	4b2d      	ldr	r3, [pc, #180]	; (800217c <main+0x128>)
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	9400      	str	r4, [sp, #0]
 80020ca:	4633      	mov	r3, r6
 80020cc:	4a2f      	ldr	r2, [pc, #188]	; (800218c <main+0x138>)
 80020ce:	4629      	mov	r1, r5
 80020d0:	2004      	movs	r0, #4
 80020d2:	f000 fc99 	bl	8002a08 <stm_log_write>
  STM_LOGD(MAIN_TAG, "------START APPLICATION------");
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <main+0x134>)
 80020d8:	681c      	ldr	r4, [r3, #0]
 80020da:	f000 fe99 	bl	8002e10 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <main+0x134>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2170      	movs	r1, #112	; 0x70
 80020e6:	9102      	str	r1, [sp, #8]
 80020e8:	4924      	ldr	r1, [pc, #144]	; (800217c <main+0x128>)
 80020ea:	9101      	str	r1, [sp, #4]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <main+0x13c>)
 80020f2:	4621      	mov	r1, r4
 80020f4:	2004      	movs	r0, #4
 80020f6:	f000 fc87 	bl	8002a08 <stm_log_write>
  ERROR_CHECK(HAL_UART_Receive_IT(&huart1, (uint8_t *)(&(uartCliHandle._rxData)), 1));
 80020fa:	2201      	movs	r2, #1
 80020fc:	4925      	ldr	r1, [pc, #148]	; (8002194 <main+0x140>)
 80020fe:	4826      	ldr	r0, [pc, #152]	; (8002198 <main+0x144>)
 8002100:	f003 fdf6 	bl	8005cf0 <HAL_UART_Receive_IT>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d024      	beq.n	8002154 <main+0x100>
 800210a:	f000 fe81 	bl	8002e10 <HAL_GetTick>
 800210e:	4604      	mov	r4, r0
 8002110:	2201      	movs	r2, #1
 8002112:	4920      	ldr	r1, [pc, #128]	; (8002194 <main+0x140>)
 8002114:	4820      	ldr	r0, [pc, #128]	; (8002198 <main+0x144>)
 8002116:	f003 fdeb 	bl	8005cf0 <HAL_UART_Receive_IT>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d00b      	beq.n	8002138 <main+0xe4>
 8002120:	2201      	movs	r2, #1
 8002122:	491c      	ldr	r1, [pc, #112]	; (8002194 <main+0x140>)
 8002124:	481c      	ldr	r0, [pc, #112]	; (8002198 <main+0x144>)
 8002126:	f003 fde3 	bl	8005cf0 <HAL_UART_Receive_IT>
 800212a:	4603      	mov	r3, r0
 800212c:	2b02      	cmp	r3, #2
 800212e:	d101      	bne.n	8002134 <main+0xe0>
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <main+0x148>)
 8002132:	e002      	b.n	800213a <main+0xe6>
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <main+0x14c>)
 8002136:	e000      	b.n	800213a <main+0xe6>
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <main+0x150>)
 800213a:	9303      	str	r3, [sp, #12]
 800213c:	2371      	movs	r3, #113	; 0x71
 800213e:	9302      	str	r3, [sp, #8]
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <main+0x128>)
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <main+0x154>)
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	4623      	mov	r3, r4
 800214a:	4a18      	ldr	r2, [pc, #96]	; (80021ac <main+0x158>)
 800214c:	4916      	ldr	r1, [pc, #88]	; (80021a8 <main+0x154>)
 800214e:	2001      	movs	r0, #1
 8002150:	f000 fc5a 	bl	8002a08 <stm_log_write>
    vLoraInit();
 8002154:	f7ff fa7a 	bl	800164c <vLoraInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* reset IWDG */

    if(bReceive == true)
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <main+0x15c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <main+0x11a>
    {
        vLoraReceive(ucMatrixReceive, RX_SINGLE);
 8002160:	2100      	movs	r1, #0
 8002162:	4814      	ldr	r0, [pc, #80]	; (80021b4 <main+0x160>)
 8002164:	f7ff fd52 	bl	8001c0c <vLoraReceive>
        bReceive = false;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <main+0x15c>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
    }
    HAL_IWDG_Refresh(&hiwdg);
 800216e:	4802      	ldr	r0, [pc, #8]	; (8002178 <main+0x124>)
 8002170:	f001 fdfb 	bl	8003d6a <HAL_IWDG_Refresh>
    if(bReceive == true)
 8002174:	e7f0      	b.n	8002158 <main+0x104>
 8002176:	bf00      	nop
 8002178:	200000dc 	.word	0x200000dc
 800217c:	080085a4 	.word	0x080085a4
 8002180:	08008278 	.word	0x08008278
 8002184:	08008240 	.word	0x08008240
 8002188:	20000000 	.word	0x20000000
 800218c:	08008280 	.word	0x08008280
 8002190:	080082bc 	.word	0x080082bc
 8002194:	20000107 	.word	0x20000107
 8002198:	200001b0 	.word	0x200001b0
 800219c:	08008300 	.word	0x08008300
 80021a0:	0800830c 	.word	0x0800830c
 80021a4:	08008318 	.word	0x08008318
 80021a8:	08008354 	.word	0x08008354
 80021ac:	08008324 	.word	0x08008324
 80021b0:	20000095 	.word	0x20000095
 80021b4:	200000d8 	.word	0x200000d8

080021b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b094      	sub	sp, #80	; 0x50
 80021bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c2:	2228      	movs	r2, #40	; 0x28
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 f912 	bl	80063f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021e8:	2309      	movs	r3, #9
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f6:	2301      	movs	r3, #1
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021fa:	2301      	movs	r3, #1
 80021fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021fe:	2302      	movs	r3, #2
 8002200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002208:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800220c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002212:	4618      	mov	r0, r3
 8002214:	f001 fdb8 	bl	8003d88 <HAL_RCC_OscConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800221e:	f000 f867 	bl	80022f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002222:	230f      	movs	r3, #15
 8002224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	2102      	movs	r1, #2
 800223c:	4618      	mov	r0, r3
 800223e:	f002 f823 	bl	8004288 <HAL_RCC_ClockConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002248:	f000 f852 	bl	80022f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800224c:	2302      	movs	r3, #2
 800224e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002250:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002254:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	4618      	mov	r0, r3
 800225a:	f002 f9af 	bl	80045bc <HAL_RCCEx_PeriphCLKConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002264:	f000 f844 	bl	80022f0 <Error_Handler>
  }
}
 8002268:	bf00      	nop
 800226a:	3750      	adds	r7, #80	; 0x50
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
    printf("Count Value = %d\r\n", ucCount++);
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_GPIO_EXTI_Callback+0x2c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	b2d1      	uxtb	r1, r2
 8002282:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002284:	7011      	strb	r1, [r2, #0]
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x30>)
 800228a:	f004 f8b9 	bl	8006400 <iprintf>
    bReceive = true;
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x34>)
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000094 	.word	0x20000094
 80022a0:	08008364 	.word	0x08008364
 80022a4:	20000095 	.word	0x20000095

080022a8 <_Error_Handler>:
void _Error_Handler(char *file, int line)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af06      	add	r7, sp, #24
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b2:	b672      	cpsid	i
}
 80022b4:	bf00      	nop
  __disable_irq();

  while (1)
  {
    STM_LOGE(MAIN_TAG, "Error file %s line %d", file, line);
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <_Error_Handler+0x3c>)
 80022b8:	681c      	ldr	r4, [r3, #0]
 80022ba:	f000 fda9 	bl	8002e10 <HAL_GetTick>
 80022be:	4601      	mov	r1, r0
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <_Error_Handler+0x3c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	9204      	str	r2, [sp, #16]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	9203      	str	r2, [sp, #12]
 80022cc:	22cb      	movs	r2, #203	; 0xcb
 80022ce:	9202      	str	r2, [sp, #8]
 80022d0:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <_Error_Handler+0x40>)
 80022d2:	9201      	str	r2, [sp, #4]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	460b      	mov	r3, r1
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <_Error_Handler+0x44>)
 80022da:	4621      	mov	r1, r4
 80022dc:	2001      	movs	r0, #1
 80022de:	f000 fb93 	bl	8002a08 <stm_log_write>
 80022e2:	e7e8      	b.n	80022b6 <_Error_Handler+0xe>
 80022e4:	20000000 	.word	0x20000000
 80022e8:	080085ac 	.word	0x080085ac
 80022ec:	08008378 	.word	0x08008378

080022f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af04      	add	r7, sp, #16
  __ASM volatile ("cpsid i" : : : "memory");
 80022f6:	b672      	cpsid	i
}
 80022f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    STM_LOGE(MAIN_TAG, "");
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <Error_Handler+0x30>)
 80022fc:	681c      	ldr	r4, [r3, #0]
 80022fe:	f000 fd87 	bl	8002e10 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <Error_Handler+0x30>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	21db      	movs	r1, #219	; 0xdb
 800230a:	9102      	str	r1, [sp, #8]
 800230c:	4905      	ldr	r1, [pc, #20]	; (8002324 <Error_Handler+0x34>)
 800230e:	9101      	str	r1, [sp, #4]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	4613      	mov	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <Error_Handler+0x38>)
 8002316:	4621      	mov	r1, r4
 8002318:	2001      	movs	r0, #1
 800231a:	f000 fb75 	bl	8002a08 <stm_log_write>
 800231e:	e7ec      	b.n	80022fa <Error_Handler+0xa>
 8002320:	20000000 	.word	0x20000000
 8002324:	080085bc 	.word	0x080085bc
 8002328:	080083b4 	.word	0x080083b4

0800232c <resetCauseGet>:
#include "misc.h"

reset_cause_t resetCauseGet(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
		RCC_FLAG_WWDGRST: Window watchdog reset flag
		RCC_FLAG_LPWRRST: Low power reset flag 
	*/
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <resetCauseGet+0x84>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	2b00      	cmp	r3, #0
 8002338:	da02      	bge.n	8002340 <resetCauseGet+0x14>
    {
        reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 800233a:	2301      	movs	r3, #1
 800233c:	71fb      	strb	r3, [r7, #7]
 800233e:	e02e      	b.n	800239e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <resetCauseGet+0x84>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <resetCauseGet+0x26>
    {
        reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800234c:	2302      	movs	r3, #2
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	e025      	b.n	800239e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <resetCauseGet+0x84>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <resetCauseGet+0x38>
    {
        reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800235e:	2303      	movs	r3, #3
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	e01c      	b.n	800239e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <resetCauseGet+0x84>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <resetCauseGet+0x4a>
    {
        reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8002370:	2304      	movs	r3, #4
 8002372:	71fb      	strb	r3, [r7, #7]
 8002374:	e013      	b.n	800239e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <resetCauseGet+0x84>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <resetCauseGet+0x5c>
    {
        reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8002382:	2305      	movs	r3, #5
 8002384:	71fb      	strb	r3, [r7, #7]
 8002386:	e00a      	b.n	800239e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <resetCauseGet+0x84>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <resetCauseGet+0x6e>
    {
        reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8002394:	2306      	movs	r3, #6
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	e001      	b.n	800239e <resetCauseGet+0x72>
    }
    else
    {
        reset_cause = eRESET_CAUSE_UNKNOWN;
 800239a:	2300      	movs	r3, #0
 800239c:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <resetCauseGet+0x88>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

    return reset_cause;
 80023a4:	79fb      	ldrb	r3, [r7, #7]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000
 80023b4:	424204e0 	.word	0x424204e0

080023b8 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
    const char *reset_cause_name = "";
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <resetCauseGetName+0x78>)
 80023c4:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b07      	cmp	r3, #7
 80023ca:	d82b      	bhi.n	8002424 <resetCauseGetName+0x6c>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <resetCauseGetName+0x1c>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	080023f5 	.word	0x080023f5
 80023d8:	080023fb 	.word	0x080023fb
 80023dc:	08002401 	.word	0x08002401
 80023e0:	08002407 	.word	0x08002407
 80023e4:	0800240d 	.word	0x0800240d
 80023e8:	08002413 	.word	0x08002413
 80023ec:	08002419 	.word	0x08002419
 80023f0:	0800241f 	.word	0x0800241f
    {
    case eRESET_CAUSE_UNKNOWN:
        reset_cause_name = "UNKNOWN";
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <resetCauseGetName+0x7c>)
 80023f6:	60fb      	str	r3, [r7, #12]
        break;
 80023f8:	e014      	b.n	8002424 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_LOW_POWER_RESET:
        reset_cause_name = "LOW_POWER_RESET";
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <resetCauseGetName+0x80>)
 80023fc:	60fb      	str	r3, [r7, #12]
        break;
 80023fe:	e011      	b.n	8002424 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
        reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <resetCauseGetName+0x84>)
 8002402:	60fb      	str	r3, [r7, #12]
        break;
 8002404:	e00e      	b.n	8002424 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
        reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <resetCauseGetName+0x88>)
 8002408:	60fb      	str	r3, [r7, #12]
        break;
 800240a:	e00b      	b.n	8002424 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_SOFTWARE_RESET:
        reset_cause_name = "SOFTWARE_RESET";
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <resetCauseGetName+0x8c>)
 800240e:	60fb      	str	r3, [r7, #12]
        break;
 8002410:	e008      	b.n	8002424 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
        reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <resetCauseGetName+0x90>)
 8002414:	60fb      	str	r3, [r7, #12]
        break;
 8002416:	e005      	b.n	8002424 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
        reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <resetCauseGetName+0x94>)
 800241a:	60fb      	str	r3, [r7, #12]
        break;
 800241c:	e002      	b.n	8002424 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_BROWNOUT_RESET:
        reset_cause_name = "BROWNOUT_RESET (BOR)";
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <resetCauseGetName+0x98>)
 8002420:	60fb      	str	r3, [r7, #12]
        break;
 8002422:	bf00      	nop
    }
    return reset_cause_name;
 8002424:	68fb      	ldr	r3, [r7, #12]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	080083d8 	.word	0x080083d8
 8002434:	080083dc 	.word	0x080083dc
 8002438:	080083e4 	.word	0x080083e4
 800243c:	080083f4 	.word	0x080083f4
 8002440:	0800840c 	.word	0x0800840c
 8002444:	08008428 	.word	0x08008428
 8002448:	08008438 	.word	0x08008438
 800244c:	08008468 	.word	0x08008468
 8002450:	08008484 	.word	0x08008484

08002454 <iwdgInit>:

uint32_t iwdgInit(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    uint32_t configTime = millis;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	60fb      	str	r3, [r7, #12]
    if (configTime > PRESCALER_256_UPPER_LIMIT)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f246 6266 	movw	r2, #26214	; 0x6666
 8002468:	4293      	cmp	r3, r2
 800246a:	d902      	bls.n	8002472 <iwdgInit+0x1e>
    {
        configTime = PRESCALER_256_UPPER_LIMIT;
 800246c:	f246 6366 	movw	r3, #26214	; 0x6666
 8002470:	60fb      	str	r3, [r7, #12]
    }
    /* Select INDEPENDENT_WATCHDOG */
    hiwdg->Instance = IWDG;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <iwdgInit+0x74>)
 8002476:	601a      	str	r2, [r3, #0]
    /* Use prescaler LSI/128 */
    hiwdg->Init.Prescaler = IWDG_PRESCALER_128;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2205      	movs	r2, #5
 800247c:	605a      	str	r2, [r3, #4]
    hiwdg->Init.Reload = (int)(IWDG_RESOLUTION * ((float)configTime / PRESCALER_128_UPPER_LIMIT));
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7fd ff1a 	bl	80002b8 <__aeabi_ui2f>
 8002484:	4603      	mov	r3, r0
 8002486:	4911      	ldr	r1, [pc, #68]	; (80024cc <iwdgInit+0x78>)
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f821 	bl	80004d0 <__aeabi_fdiv>
 800248e:	4603      	mov	r3, r0
 8002490:	490f      	ldr	r1, [pc, #60]	; (80024d0 <iwdgInit+0x7c>)
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd ff68 	bl	8000368 <__aeabi_fmul>
 8002498:	4603      	mov	r3, r0
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f8b4 	bl	8000608 <__aeabi_f2iz>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f001 fc25 	bl	8003cf8 <HAL_IWDG_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <iwdgInit+0x68>
    {
        _Error_Handler(__FILE__, __LINE__);
 80024b4:	2162      	movs	r1, #98	; 0x62
 80024b6:	4807      	ldr	r0, [pc, #28]	; (80024d4 <iwdgInit+0x80>)
 80024b8:	f7ff fef6 	bl	80022a8 <_Error_Handler>
    }
    return configTime;
 80024bc:	68fb      	ldr	r3, [r7, #12]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40003000 	.word	0x40003000
 80024cc:	464ccc00 	.word	0x464ccc00
 80024d0:	457ff000 	.word	0x457ff000
 80024d4:	0800849c 	.word	0x0800849c

080024d8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <RetargetInit+0x28>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <RetargetInit+0x2c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6898      	ldr	r0, [r3, #8]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2202      	movs	r2, #2
 80024f0:	2100      	movs	r1, #0
 80024f2:	f004 f813 	bl	800651c <setvbuf>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000010c 	.word	0x2000010c
 8002504:	20000014 	.word	0x20000014

08002508 <_isatty>:

int _isatty(int fd) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	db04      	blt.n	8002520 <_isatty+0x18>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b02      	cmp	r3, #2
 800251a:	dc01      	bgt.n	8002520 <_isatty+0x18>
    return 1;
 800251c:	2301      	movs	r3, #1
 800251e:	e005      	b.n	800252c <_isatty+0x24>

  errno = EBADF;
 8002520:	f003 ff3c 	bl	800639c <__errno>
 8002524:	4603      	mov	r3, r0
 8002526:	2209      	movs	r2, #9
 8002528:	601a      	str	r2, [r3, #0]
  return 0;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_write>:

int _write(int fd, char* ptr, int len) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d002      	beq.n	800254c <_write+0x18>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d111      	bne.n	8002570 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <_write+0x54>)
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	b29a      	uxth	r2, r3
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	f003 fa98 	bl	8005a8e <HAL_UART_Transmit>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <_write+0x38>
      return len;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	e008      	b.n	800257e <_write+0x4a>
    else
      return EIO;
 800256c:	2305      	movs	r3, #5
 800256e:	e006      	b.n	800257e <_write+0x4a>
  }
  errno = EBADF;
 8002570:	f003 ff14 	bl	800639c <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	2209      	movs	r2, #9
 8002578:	601a      	str	r2, [r3, #0]
  return -1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000010c 	.word	0x2000010c

0800258c <_close>:

int _close(int fd) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db04      	blt.n	80025a4 <_close+0x18>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b02      	cmp	r3, #2
 800259e:	dc01      	bgt.n	80025a4 <_close+0x18>
    return 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e006      	b.n	80025b2 <_close+0x26>

  errno = EBADF;
 80025a4:	f003 fefa 	bl	800639c <__errno>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2209      	movs	r2, #9
 80025ac:	601a      	str	r2, [r3, #0]
  return -1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80025c6:	f003 fee9 	bl	800639c <__errno>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2209      	movs	r2, #9
 80025ce:	601a      	str	r2, [r3, #0]
  return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_read>:

int _read(int fd, char* ptr, int len) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d110      	bne.n	8002610 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <_read+0x4c>)
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	2201      	movs	r2, #1
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	f003 fada 	bl	8005bb2 <HAL_UART_Receive>
 80025fe:	4603      	mov	r3, r0
 8002600:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002602:	7dfb      	ldrb	r3, [r7, #23]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <_read+0x30>
      return 1;
 8002608:	2301      	movs	r3, #1
 800260a:	e008      	b.n	800261e <_read+0x42>
    else
      return EIO;
 800260c:	2305      	movs	r3, #5
 800260e:	e006      	b.n	800261e <_read+0x42>
  }
  errno = EBADF;
 8002610:	f003 fec4 	bl	800639c <__errno>
 8002614:	4603      	mov	r3, r0
 8002616:	2209      	movs	r2, #9
 8002618:	601a      	str	r2, [r3, #0]
  return -1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000010c 	.word	0x2000010c

0800262c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db08      	blt.n	800264e <_fstat+0x22>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	dc05      	bgt.n	800264e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002648:	605a      	str	r2, [r3, #4]
    return 0;
 800264a:	2300      	movs	r3, #0
 800264c:	e005      	b.n	800265a <_fstat+0x2e>
  }

  errno = EBADF;
 800264e:	f003 fea5 	bl	800639c <__errno>
 8002652:	4603      	mov	r3, r0
 8002654:	2209      	movs	r2, #9
 8002656:	601a      	str	r2, [r3, #0]
  return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <MX_SPI1_Init+0x64>)
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <MX_SPI1_Init+0x68>)
 800266c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <MX_SPI1_Init+0x64>)
 8002670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <MX_SPI1_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <MX_SPI1_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_SPI1_Init+0x64>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <MX_SPI1_Init+0x64>)
 800268a:	2200      	movs	r2, #0
 800268c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_SPI1_Init+0x64>)
 8002690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002694:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_SPI1_Init+0x64>)
 8002698:	2200      	movs	r2, #0
 800269a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <MX_SPI1_Init+0x64>)
 800269e:	2200      	movs	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_SPI1_Init+0x64>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <MX_SPI1_Init+0x64>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_SPI1_Init+0x64>)
 80026b0:	220a      	movs	r2, #10
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026b4:	4804      	ldr	r0, [pc, #16]	; (80026c8 <MX_SPI1_Init+0x64>)
 80026b6:	f002 f837 	bl	8004728 <HAL_SPI_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026c0:	f7ff fe16 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000110 	.word	0x20000110
 80026cc:	40013000 	.word	0x40013000

080026d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_SPI_MspInit+0x88>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d12f      	bne.n	8002750 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_SPI_MspInit+0x8c>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <HAL_SPI_MspInit+0x8c>)
 80026f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_SPI_MspInit+0x8c>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_SPI_MspInit+0x8c>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <HAL_SPI_MspInit+0x8c>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	6193      	str	r3, [r2, #24]
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_SPI_MspInit+0x8c>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002720:	23a0      	movs	r3, #160	; 0xa0
 8002722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0310 	add.w	r3, r7, #16
 8002730:	4619      	mov	r1, r3
 8002732:	480b      	ldr	r0, [pc, #44]	; (8002760 <HAL_SPI_MspInit+0x90>)
 8002734:	f001 f912 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002738:	2340      	movs	r3, #64	; 0x40
 800273a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	4619      	mov	r1, r3
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <HAL_SPI_MspInit+0x90>)
 800274c:	f001 f906 	bl	800395c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002750:	bf00      	nop
 8002752:	3720      	adds	r7, #32
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40013000 	.word	0x40013000
 800275c:	40021000 	.word	0x40021000
 8002760:	40010800 	.word	0x40010800

08002764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_MspInit+0x5c>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_MspInit+0x5c>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6193      	str	r3, [r2, #24]
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_MspInit+0x5c>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_MspInit+0x5c>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <HAL_MspInit+0x5c>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_MspInit+0x5c>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_MspInit+0x60>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_MspInit+0x60>)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010000 	.word	0x40010000

080027c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <NMI_Handler+0x4>
	...

080027d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af04      	add	r7, sp, #16

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    STM_LOGE(ISR_TAG, "");
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HardFault_Handler+0x2c>)
 80027d8:	681c      	ldr	r4, [r3, #0]
 80027da:	f000 fb19 	bl	8002e10 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HardFault_Handler+0x2c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2162      	movs	r1, #98	; 0x62
 80027e6:	9102      	str	r1, [sp, #8]
 80027e8:	4905      	ldr	r1, [pc, #20]	; (8002800 <HardFault_Handler+0x30>)
 80027ea:	9101      	str	r1, [sp, #4]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <HardFault_Handler+0x34>)
 80027f2:	4621      	mov	r1, r4
 80027f4:	2001      	movs	r0, #1
 80027f6:	f000 f907 	bl	8002a08 <stm_log_write>
 80027fa:	e7ec      	b.n	80027d6 <HardFault_Handler+0x6>
 80027fc:	20000004 	.word	0x20000004
 8002800:	080085cc 	.word	0x080085cc
 8002804:	080084c0 	.word	0x080084c0

08002808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800280c:	e7fe      	b.n	800280c <MemManage_Handler+0x4>

0800280e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <BusFault_Handler+0x4>

08002814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <UsageFault_Handler+0x4>

0800281a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002842:	f000 fad3 	bl	8002dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}

0800284a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800284e:	2008      	movs	r0, #8
 8002850:	f001 fa3a 	bl	8003cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <ADC1_2_IRQHandler+0x10>)
 800285e:	f000 fc9f 	bl	80031a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200000a8 	.word	0x200000a8

0800286c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <TIM4_IRQHandler+0x10>)
 8002872:	f002 fd67 	bl	8005344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000168 	.word	0x20000168

08002880 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b085      	sub	sp, #20
 8002884:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN USART1_IRQn 0 */
  STM_LOGD(ISR_TAG, "");
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <USART1_IRQHandler+0x3c>)
 8002888:	681c      	ldr	r4, [r3, #0]
 800288a:	f000 fac1 	bl	8002e10 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <USART1_IRQHandler+0x3c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002898:	9102      	str	r1, [sp, #8]
 800289a:	4909      	ldr	r1, [pc, #36]	; (80028c0 <USART1_IRQHandler+0x40>)
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <USART1_IRQHandler+0x44>)
 80028a4:	4621      	mov	r1, r4
 80028a6:	2004      	movs	r0, #4
 80028a8:	f000 f8ae 	bl	8002a08 <stm_log_write>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028ac:	4806      	ldr	r0, [pc, #24]	; (80028c8 <USART1_IRQHandler+0x48>)
 80028ae:	f003 fa73 	bl	8005d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	3704      	adds	r7, #4
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000004 	.word	0x20000004
 80028c0:	080085e0 	.word	0x080085e0
 80028c4:	080084e4 	.word	0x080084e4
 80028c8:	200001b0 	.word	0x200001b0

080028cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d106      	bne.n	80028ee <HAL_ADC_ConvCpltCallback+0x22>
  {
    lightSensorAdcValue = HAL_ADC_GetValue(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fc51 	bl	8003188 <HAL_ADC_GetValue>
 80028e6:	4603      	mov	r3, r0
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_ADC_ConvCpltCallback+0x30>)
 80028ec:	801a      	strh	r2, [r3, #0]
  }
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200000a8 	.word	0x200000a8
 80028fc:	20000096 	.word	0x20000096

08002900 <HAL_UART_RxCpltCallback>:

__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Process USART2 Receive_Cplt_IT */
  if (huart->Instance == huart1.Instance)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_UART_RxCpltCallback+0x7c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d12e      	bne.n	8002972 <HAL_UART_RxCpltCallback+0x72>
  {
    /* Reset Receive Buffer whenever index_value = 0 */
    if (uartCliHandle._rxIndex == 0)
 8002914:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <HAL_UART_RxCpltCallback+0x80>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10d      	bne.n	8002938 <HAL_UART_RxCpltCallback+0x38>
    {
      for (uint8_t i = 0; i < USART_BUFFER_SIZE; i++)
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e007      	b.n	8002932 <HAL_UART_RxCpltCallback+0x32>
      {
        uartCliHandle._rxBuffer[i] = 0;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	4a16      	ldr	r2, [pc, #88]	; (8002980 <HAL_UART_RxCpltCallback+0x80>)
 8002926:	4413      	add	r3, r2
 8002928:	2200      	movs	r2, #0
 800292a:	705a      	strb	r2, [r3, #1]
      for (uint8_t i = 0; i < USART_BUFFER_SIZE; i++)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	3301      	adds	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b1d      	cmp	r3, #29
 8002936:	d9f4      	bls.n	8002922 <HAL_UART_RxCpltCallback+0x22>
      }
    }
    /* If user input data not equal to "\r" */
    if (uartCliHandle._rxData[0] != '\r')
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_UART_RxCpltCallback+0x80>)
 800293a:	7fdb      	ldrb	r3, [r3, #31]
 800293c:	2b0d      	cmp	r3, #13
 800293e:	d00c      	beq.n	800295a <HAL_UART_RxCpltCallback+0x5a>
    {
      uartCliHandle._rxBuffer[uartCliHandle._rxIndex++] = uartCliHandle._rxData[0];
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_UART_RxCpltCallback+0x80>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	b2d1      	uxtb	r1, r2
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_UART_RxCpltCallback+0x80>)
 800294a:	7011      	strb	r1, [r2, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <HAL_UART_RxCpltCallback+0x80>)
 8002950:	7fda      	ldrb	r2, [r3, #31]
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_UART_RxCpltCallback+0x80>)
 8002954:	440b      	add	r3, r1
 8002956:	705a      	strb	r2, [r3, #1]
 8002958:	e006      	b.n	8002968 <HAL_UART_RxCpltCallback+0x68>
    }
    /* If user input data = "\r" */
    else
    {
      uartCliHandle._rxIndex = 0;
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_UART_RxCpltCallback+0x80>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
      uartCliHandle._rxCpltFlag = 1;
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_UART_RxCpltCallback+0x80>)
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Trigger to Receive and jump into ISR on each ISR process is necessary */
    HAL_UART_Receive_IT(huart, (uint8_t *)(&uartCliHandle._rxData), 1);
 8002968:	2201      	movs	r2, #1
 800296a:	4906      	ldr	r1, [pc, #24]	; (8002984 <HAL_UART_RxCpltCallback+0x84>)
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f003 f9bf 	bl	8005cf0 <HAL_UART_Receive_IT>
  }
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200001b0 	.word	0x200001b0
 8002980:	200000e8 	.word	0x200000e8
 8002984:	20000107 	.word	0x20000107

08002988 <HAL_TIM_PeriodElapsedCallback>:

__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == htim4.Instance)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d126      	bne.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x62>
  {
    static uint16_t millisSecond;
    static uint16_t blinkLedDelay;
    millisSecond++;
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80029a6:	801a      	strh	r2, [r3, #0]
    blinkLedDelay++;
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80029b2:	801a      	strh	r2, [r3, #0]
    if (millisSecond == 70)
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	2b46      	cmp	r3, #70	; 0x46
 80029ba:	d10a      	bne.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      millisSecond = 0;
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80029be:	2200      	movs	r2, #0
 80029c0:	801a      	strh	r2, [r3, #0]
      if (uartCliHandle._rxCpltFlag == 1)
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80029c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0x4a>
      {
        // STM_LOGI(ISR_TAG, "receive uart cmd: %s", (uint8_t *)uartCliHandle._rxBuffer);
        runUserCmd(&uartCliHandle);
 80029cc:	480c      	ldr	r0, [pc, #48]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80029ce:	f000 f993 	bl	8002cf8 <runUserCmd>
      }
    }
    if(blinkLedDelay == 500){
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029da:	d106      	bne.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x62>
      blinkLedDelay = 0;
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80029de:	2200      	movs	r2, #0
 80029e0:	801a      	strh	r2, [r3, #0]
      TOGGLE_LED();
 80029e2:	2101      	movs	r1, #1
 80029e4:	4807      	ldr	r0, [pc, #28]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80029e6:	f001 f955 	bl	8003c94 <HAL_GPIO_TogglePin>
    }
  }
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000168 	.word	0x20000168
 80029f8:	20000098 	.word	0x20000098
 80029fc:	2000009a 	.word	0x2000009a
 8002a00:	200000e8 	.word	0x200000e8
 8002a04:	40010c00 	.word	0x40010c00

08002a08 <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 8002a08:	b40c      	push	{r2, r3}
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	6039      	str	r1, [r7, #0]
 8002a14:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 8002a1c:	68f9      	ldr	r1, [r7, #12]
 8002a1e:	69b8      	ldr	r0, [r7, #24]
 8002a20:	f003 fe42 	bl	80066a8 <viprintf>
    va_end(arg);
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a2e:	b002      	add	sp, #8
 8002a30:	4770      	bx	lr
	...

08002a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <_sbrk+0x5c>)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <_sbrk+0x60>)
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <_sbrk+0x64>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <_sbrk+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d207      	bcs.n	8002a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a64:	f003 fc9a 	bl	800639c <__errno>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e009      	b.n	8002a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <_sbrk+0x64>)
 8002a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20005000 	.word	0x20005000
 8002a94:	00000400 	.word	0x00000400
 8002a98:	2000009c 	.word	0x2000009c
 8002a9c:	20000208 	.word	0x20000208

08002aa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b08b      	sub	sp, #44	; 0x2c
 8002ab0:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab2:	f107 0308 	add.w	r3, r7, #8
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002aca:	4a31      	ldr	r2, [pc, #196]	; (8002b90 <MX_TIM4_Init+0xe4>)
 8002acc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002ad0:	2223      	movs	r2, #35	; 0x23
 8002ad2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ae0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002aee:	4827      	ldr	r0, [pc, #156]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002af0:	f002 fb86 	bl	8005200 <HAL_TIM_Base_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002afa:	f7ff fbf9 	bl	80022f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b04:	f107 0308 	add.w	r3, r7, #8
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4820      	ldr	r0, [pc, #128]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002b0c:	f002 fd22 	bl	8005554 <HAL_TIM_ConfigClockSource>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002b16:	f7ff fbeb 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b22:	463b      	mov	r3, r7
 8002b24:	4619      	mov	r1, r3
 8002b26:	4819      	ldr	r0, [pc, #100]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002b28:	f002 fef4 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002b32:	f7ff fbdd 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  ERROR_CHECK(HAL_TIM_Base_Start_IT(&htim4));
 8002b36:	4815      	ldr	r0, [pc, #84]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002b38:	f002 fbb2 	bl	80052a0 <HAL_TIM_Base_Start_IT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d020      	beq.n	8002b84 <MX_TIM4_Init+0xd8>
 8002b42:	f000 f965 	bl	8002e10 <HAL_GetTick>
 8002b46:	4604      	mov	r4, r0
 8002b48:	4810      	ldr	r0, [pc, #64]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002b4a:	f002 fba9 	bl	80052a0 <HAL_TIM_Base_Start_IT>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d009      	beq.n	8002b68 <MX_TIM4_Init+0xbc>
 8002b54:	480d      	ldr	r0, [pc, #52]	; (8002b8c <MX_TIM4_Init+0xe0>)
 8002b56:	f002 fba3 	bl	80052a0 <HAL_TIM_Base_Start_IT>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d101      	bne.n	8002b64 <MX_TIM4_Init+0xb8>
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MX_TIM4_Init+0xe8>)
 8002b62:	e002      	b.n	8002b6a <MX_TIM4_Init+0xbe>
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <MX_TIM4_Init+0xec>)
 8002b66:	e000      	b.n	8002b6a <MX_TIM4_Init+0xbe>
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <MX_TIM4_Init+0xf0>)
 8002b6a:	9303      	str	r3, [sp, #12]
 8002b6c:	2341      	movs	r3, #65	; 0x41
 8002b6e:	9302      	str	r3, [sp, #8]
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_TIM4_Init+0xf4>)
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <MX_TIM4_Init+0xf8>)
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4623      	mov	r3, r4
 8002b7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <MX_TIM4_Init+0xfc>)
 8002b7c:	4909      	ldr	r1, [pc, #36]	; (8002ba4 <MX_TIM4_Init+0xf8>)
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f7ff ff42 	bl	8002a08 <stm_log_write>
  /* USER CODE END TIM4_Init 2 */

}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	20000168 	.word	0x20000168
 8002b90:	40000800 	.word	0x40000800
 8002b94:	08008508 	.word	0x08008508
 8002b98:	08008514 	.word	0x08008514
 8002b9c:	08008520 	.word	0x08008520
 8002ba0:	0800860c 	.word	0x0800860c
 8002ba4:	0800855c 	.word	0x0800855c
 8002ba8:	0800852c 	.word	0x0800852c

08002bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <HAL_TIM_Base_MspInit+0x44>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d113      	bne.n	8002be6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_TIM_Base_MspInit+0x48>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <HAL_TIM_Base_MspInit+0x48>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	61d3      	str	r3, [r2, #28]
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_TIM_Base_MspInit+0x48>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2101      	movs	r1, #1
 8002bda:	201e      	movs	r0, #30
 8002bdc:	f000 fe11 	bl	8003802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002be0:	201e      	movs	r0, #30
 8002be2:	f000 fe2a 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002bfe:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <MX_USART1_UART_Init+0x54>)
 8002c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c10:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c1e:	220c      	movs	r2, #12
 8002c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c2e:	4806      	ldr	r0, [pc, #24]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c30:	f002 fee0 	bl	80059f4 <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c3a:	f7ff fb59 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  RetargetInit(&huart1);
 8002c3e:	4802      	ldr	r0, [pc, #8]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c40:	f7ff fc4a 	bl	80024d8 <RetargetInit>
  /* USER CODE END USART1_Init 2 */

}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200001b0 	.word	0x200001b0
 8002c4c:	40013800 	.word	0x40013800

08002c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a20      	ldr	r2, [pc, #128]	; (8002cec <HAL_UART_MspInit+0x9c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d139      	bne.n	8002ce4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c70:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <HAL_UART_MspInit+0xa0>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_UART_MspInit+0xa0>)
 8002c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_UART_MspInit+0xa0>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_UART_MspInit+0xa0>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_UART_MspInit+0xa0>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	6193      	str	r3, [r2, #24]
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_UART_MspInit+0xa0>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	480f      	ldr	r0, [pc, #60]	; (8002cf4 <HAL_UART_MspInit+0xa4>)
 8002cb6:	f000 fe51 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	f107 0310 	add.w	r3, r7, #16
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <HAL_UART_MspInit+0xa4>)
 8002cd0:	f000 fe44 	bl	800395c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	2025      	movs	r0, #37	; 0x25
 8002cda:	f000 fd92 	bl	8003802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cde:	2025      	movs	r0, #37	; 0x25
 8002ce0:	f000 fdab 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010800 	.word	0x40010800

08002cf8 <runUserCmd>:
  }
}

/* USER CODE BEGIN 1 */
void runUserCmd(USART_CLI_HandleTypedef_t *uartCliHandle)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

//  char *input_string = (char *)&uartCliHandle->_rxBuffer;
  /* Clear receive complete flag */
  uartCliHandle->_rxCpltFlag = 0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  // else
  // {
  //   printf("Unknown Command: \"%s\"\r\n", input_string);
  //   printf("\r\n\r\n>>> ");
  // }
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
	...

08002d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d16:	e003      	b.n	8002d20 <LoopCopyDataInit>

08002d18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d1e:	3104      	adds	r1, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d20:	480a      	ldr	r0, [pc, #40]	; (8002d4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d28:	d3f6      	bcc.n	8002d18 <CopyDataInit>
  ldr r2, =_sbss
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d2c:	e002      	b.n	8002d34 <LoopFillZerobss>

08002d2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d30:	f842 3b04 	str.w	r3, [r2], #4

08002d34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d38:	d3f9      	bcc.n	8002d2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d3a:	f7ff feb1 	bl	8002aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3e:	f003 fb33 	bl	80063a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d42:	f7ff f987 	bl	8002054 <main>
  bx lr
 8002d46:	4770      	bx	lr
  ldr r3, =_sidata
 8002d48:	080086bc 	.word	0x080086bc
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d50:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002d54:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002d58:	20000204 	.word	0x20000204

08002d5c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <CAN1_RX1_IRQHandler>
	...

08002d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_Init+0x28>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <HAL_Init+0x28>)
 8002d6a:	f043 0310 	orr.w	r3, r3, #16
 8002d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d70:	2003      	movs	r0, #3
 8002d72:	f000 fd3b 	bl	80037ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f000 f808 	bl	8002d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d7c:	f7ff fcf2 	bl	8002764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_InitTick+0x54>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_InitTick+0x58>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fd53 	bl	8003856 <HAL_SYSTICK_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00e      	b.n	8002dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d80a      	bhi.n	8002dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	f000 fd1b 	bl	8003802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <HAL_InitTick+0x5c>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000008 	.word	0x20000008
 8002de4:	20000010 	.word	0x20000010
 8002de8:	2000000c 	.word	0x2000000c

08002dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_IncTick+0x1c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_IncTick+0x20>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <HAL_IncTick+0x20>)
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000010 	.word	0x20000010
 8002e0c:	200001f0 	.word	0x200001f0

08002e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return uwTick;
 8002e14:	4b02      	ldr	r3, [pc, #8]	; (8002e20 <HAL_GetTick+0x10>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	200001f0 	.word	0x200001f0

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff fff0 	bl	8002e10 <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_Delay+0x44>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffe0 	bl	8002e10 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000010 	.word	0x20000010

08002e6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0be      	b.n	800300c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd fc44 	bl	8000738 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fb8b 	bl	80035cc <ADC_ConversionStop_Disable>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 8099 	bne.w	8002ffa <HAL_ADC_Init+0x18e>
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 8095 	bne.w	8002ffa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ed8:	f023 0302 	bic.w	r3, r3, #2
 8002edc:	f043 0202 	orr.w	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7b1b      	ldrb	r3, [r3, #12]
 8002ef2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ef4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f04:	d003      	beq.n	8002f0e <HAL_ADC_Init+0xa2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_ADC_Init+0xa8>
 8002f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f12:	e000      	b.n	8002f16 <HAL_ADC_Init+0xaa>
 8002f14:	2300      	movs	r3, #0
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7d1b      	ldrb	r3, [r3, #20]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d119      	bne.n	8002f58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7b1b      	ldrb	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	035a      	lsls	r2, r3, #13
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e00b      	b.n	8002f58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_ADC_Init+0x1a8>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d003      	beq.n	8002f92 <HAL_ADC_Init+0x126>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d104      	bne.n	8002f9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	051b      	lsls	r3, r3, #20
 8002f9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_ADC_Init+0x1ac>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	f023 0303 	bic.w	r3, r3, #3
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fd6:	e018      	b.n	800300a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	f023 0312 	bic.w	r3, r3, #18
 8002fe0:	f043 0210 	orr.w	r2, r3, #16
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ff8:	e007      	b.n	800300a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800300a:	7dfb      	ldrb	r3, [r7, #23]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	ffe1f7fd 	.word	0xffe1f7fd
 8003018:	ff1f0efe 	.word	0xff1f0efe

0800301c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_ADC_Start_IT+0x1a>
 8003032:	2302      	movs	r3, #2
 8003034:	e0a0      	b.n	8003178 <HAL_ADC_Start_IT+0x15c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fa72 	bl	8003528 <ADC_Enable>
 8003044:	4603      	mov	r3, r0
 8003046:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 808f 	bne.w	800316e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a45      	ldr	r2, [pc, #276]	; (8003180 <HAL_ADC_Start_IT+0x164>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d105      	bne.n	800307a <HAL_ADC_Start_IT+0x5e>
 800306e:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_ADC_Start_IT+0x168>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d115      	bne.n	80030a6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d026      	beq.n	80030e2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800309c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030a4:	e01d      	b.n	80030e2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <HAL_ADC_Start_IT+0x168>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_Start_IT+0xaa>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2f      	ldr	r2, [pc, #188]	; (8003180 <HAL_ADC_Start_IT+0x164>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10d      	bne.n	80030e2 <HAL_ADC_Start_IT+0xc6>
 80030c6:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <HAL_ADC_Start_IT+0x168>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f023 0206 	bic.w	r2, r3, #6
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80030fa:	e002      	b.n	8003102 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0202 	mvn.w	r2, #2
 8003112:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0220 	orr.w	r2, r2, #32
 8003122:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800312e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003132:	d113      	bne.n	800315c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_ADC_Start_IT+0x164>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d105      	bne.n	800314a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_ADC_Start_IT+0x168>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003146:	2b00      	cmp	r3, #0
 8003148:	d108      	bne.n	800315c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	e00c      	b.n	8003176 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	e003      	b.n	8003176 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40012800 	.word	0x40012800
 8003184:	40012400 	.word	0x40012400

08003188 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d140      	bne.n	8003238 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d139      	bne.n	8003238 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031ea:	d11d      	bne.n	8003228 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d119      	bne.n	8003228 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0220 	bic.w	r2, r2, #32
 8003202:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fb4f 	bl	80028cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0212 	mvn.w	r2, #18
 8003236:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d14f      	bne.n	80032e6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d148      	bne.n	80032e6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003276:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800327a:	d012      	beq.n	80032a2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003286:	2b00      	cmp	r3, #0
 8003288:	d125      	bne.n	80032d6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003294:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003298:	d11d      	bne.n	80032d6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	f043 0201 	orr.w	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f9b2 	bl	8003640 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 020c 	mvn.w	r2, #12
 80032e4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d114      	bne.n	800331e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d10d      	bne.n	800331e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f809 	bl	8003326 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0201 	mvn.w	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x20>
 8003354:	2302      	movs	r3, #2
 8003356:	e0dc      	b.n	8003512 <HAL_ADC_ConfigChannel+0x1da>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b06      	cmp	r3, #6
 8003366:	d81c      	bhi.n	80033a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	3b05      	subs	r3, #5
 800337a:	221f      	movs	r2, #31
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	4019      	ands	r1, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	3b05      	subs	r3, #5
 8003394:	fa00 f203 	lsl.w	r2, r0, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	635a      	str	r2, [r3, #52]	; 0x34
 80033a0:	e03c      	b.n	800341c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d81c      	bhi.n	80033e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b23      	subs	r3, #35	; 0x23
 80033bc:	221f      	movs	r2, #31
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	4019      	ands	r1, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b23      	subs	r3, #35	; 0x23
 80033d6:	fa00 f203 	lsl.w	r2, r0, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
 80033e2:	e01b      	b.n	800341c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b41      	subs	r3, #65	; 0x41
 80033f6:	221f      	movs	r2, #31
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	4019      	ands	r1, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b41      	subs	r3, #65	; 0x41
 8003410:	fa00 f203 	lsl.w	r2, r0, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b09      	cmp	r3, #9
 8003422:	d91c      	bls.n	800345e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68d9      	ldr	r1, [r3, #12]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	3b1e      	subs	r3, #30
 8003436:	2207      	movs	r2, #7
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	4019      	ands	r1, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6898      	ldr	r0, [r3, #8]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	3b1e      	subs	r3, #30
 8003450:	fa00 f203 	lsl.w	r2, r0, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	e019      	b.n	8003492 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6919      	ldr	r1, [r3, #16]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	2207      	movs	r2, #7
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	4019      	ands	r1, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6898      	ldr	r0, [r3, #8]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	fa00 f203 	lsl.w	r2, r0, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b10      	cmp	r3, #16
 8003498:	d003      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800349e:	2b11      	cmp	r3, #17
 80034a0:	d132      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1d      	ldr	r2, [pc, #116]	; (800351c <HAL_ADC_ConfigChannel+0x1e4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d125      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d126      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034c8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d11a      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034d2:	4b13      	ldr	r3, [pc, #76]	; (8003520 <HAL_ADC_ConfigChannel+0x1e8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a13      	ldr	r2, [pc, #76]	; (8003524 <HAL_ADC_ConfigChannel+0x1ec>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	0c9a      	lsrs	r2, r3, #18
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034e8:	e002      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f9      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x1b2>
 80034f6:	e007      	b.n	8003508 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	40012400 	.word	0x40012400
 8003520:	20000008 	.word	0x20000008
 8003524:	431bde83 	.word	0x431bde83

08003528 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d039      	beq.n	80035ba <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <ADC_Enable+0x9c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <ADC_Enable+0xa0>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	0c9b      	lsrs	r3, r3, #18
 8003562:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003564:	e002      	b.n	800356c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3b01      	subs	r3, #1
 800356a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f9      	bne.n	8003566 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003572:	f7ff fc4d 	bl	8002e10 <HAL_GetTick>
 8003576:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003578:	e018      	b.n	80035ac <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800357a:	f7ff fc49 	bl	8002e10 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d911      	bls.n	80035ac <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	f043 0210 	orr.w	r2, r3, #16
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e007      	b.n	80035bc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d1df      	bne.n	800357a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000008 	.word	0x20000008
 80035c8:	431bde83 	.word	0x431bde83

080035cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d127      	bne.n	8003636 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035f6:	f7ff fc0b 	bl	8002e10 <HAL_GetTick>
 80035fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035fc:	e014      	b.n	8003628 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035fe:	f7ff fc07 	bl	8002e10 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d90d      	bls.n	8003628 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e007      	b.n	8003638 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d0e3      	beq.n	80035fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003670:	4013      	ands	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800367c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	60d3      	str	r3, [r2, #12]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <__NVIC_GetPriorityGrouping+0x18>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	f003 0307 	and.w	r3, r3, #7
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	db0b      	blt.n	80036e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	f003 021f 	and.w	r2, r3, #31
 80036d0:	4906      	ldr	r1, [pc, #24]	; (80036ec <__NVIC_EnableIRQ+0x34>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2001      	movs	r0, #1
 80036da:	fa00 f202 	lsl.w	r2, r0, r2
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	2b00      	cmp	r3, #0
 8003702:	db0a      	blt.n	800371a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	490c      	ldr	r1, [pc, #48]	; (800373c <__NVIC_SetPriority+0x4c>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	440b      	add	r3, r1
 8003714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003718:	e00a      	b.n	8003730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4908      	ldr	r1, [pc, #32]	; (8003740 <__NVIC_SetPriority+0x50>)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	3b04      	subs	r3, #4
 8003728:	0112      	lsls	r2, r2, #4
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	440b      	add	r3, r1
 800372e:	761a      	strb	r2, [r3, #24]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000e100 	.word	0xe000e100
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f1c3 0307 	rsb	r3, r3, #7
 800375e:	2b04      	cmp	r3, #4
 8003760:	bf28      	it	cs
 8003762:	2304      	movcs	r3, #4
 8003764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3304      	adds	r3, #4
 800376a:	2b06      	cmp	r3, #6
 800376c:	d902      	bls.n	8003774 <NVIC_EncodePriority+0x30>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3b03      	subs	r3, #3
 8003772:	e000      	b.n	8003776 <NVIC_EncodePriority+0x32>
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43da      	mvns	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	401a      	ands	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800378c:	f04f 31ff 	mov.w	r1, #4294967295
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43d9      	mvns	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	4313      	orrs	r3, r2
         );
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3724      	adds	r7, #36	; 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b8:	d301      	bcc.n	80037be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ba:	2301      	movs	r3, #1
 80037bc:	e00f      	b.n	80037de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037be:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <SysTick_Config+0x40>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c6:	210f      	movs	r1, #15
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	f7ff ff90 	bl	80036f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <SysTick_Config+0x40>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <SysTick_Config+0x40>)
 80037d8:	2207      	movs	r2, #7
 80037da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	e000e010 	.word	0xe000e010

080037ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff2d 	bl	8003654 <__NVIC_SetPriorityGrouping>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003814:	f7ff ff42 	bl	800369c <__NVIC_GetPriorityGrouping>
 8003818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f7ff ff90 	bl	8003744 <NVIC_EncodePriority>
 8003824:	4602      	mov	r2, r0
 8003826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff5f 	bl	80036f0 <__NVIC_SetPriority>
}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff35 	bl	80036b8 <__NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffa2 	bl	80037a8 <SysTick_Config>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003882:	2b02      	cmp	r3, #2
 8003884:	d005      	beq.n	8003892 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2204      	movs	r2, #4
 800388a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e051      	b.n	8003936 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 020e 	bic.w	r2, r2, #14
 80038a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a22      	ldr	r2, [pc, #136]	; (8003940 <HAL_DMA_Abort_IT+0xd0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d029      	beq.n	8003910 <HAL_DMA_Abort_IT+0xa0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a20      	ldr	r2, [pc, #128]	; (8003944 <HAL_DMA_Abort_IT+0xd4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <HAL_DMA_Abort_IT+0x9c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <HAL_DMA_Abort_IT+0xd8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01a      	beq.n	8003906 <HAL_DMA_Abort_IT+0x96>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <HAL_DMA_Abort_IT+0xdc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d012      	beq.n	8003900 <HAL_DMA_Abort_IT+0x90>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_DMA_Abort_IT+0xe0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00a      	beq.n	80038fa <HAL_DMA_Abort_IT+0x8a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1a      	ldr	r2, [pc, #104]	; (8003954 <HAL_DMA_Abort_IT+0xe4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d102      	bne.n	80038f4 <HAL_DMA_Abort_IT+0x84>
 80038ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038f2:	e00e      	b.n	8003912 <HAL_DMA_Abort_IT+0xa2>
 80038f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f8:	e00b      	b.n	8003912 <HAL_DMA_Abort_IT+0xa2>
 80038fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038fe:	e008      	b.n	8003912 <HAL_DMA_Abort_IT+0xa2>
 8003900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003904:	e005      	b.n	8003912 <HAL_DMA_Abort_IT+0xa2>
 8003906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800390a:	e002      	b.n	8003912 <HAL_DMA_Abort_IT+0xa2>
 800390c:	2310      	movs	r3, #16
 800390e:	e000      	b.n	8003912 <HAL_DMA_Abort_IT+0xa2>
 8003910:	2301      	movs	r3, #1
 8003912:	4a11      	ldr	r2, [pc, #68]	; (8003958 <HAL_DMA_Abort_IT+0xe8>)
 8003914:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
    } 
  }
  return status;
 8003936:	7bfb      	ldrb	r3, [r7, #15]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40020008 	.word	0x40020008
 8003944:	4002001c 	.word	0x4002001c
 8003948:	40020030 	.word	0x40020030
 800394c:	40020044 	.word	0x40020044
 8003950:	40020058 	.word	0x40020058
 8003954:	4002006c 	.word	0x4002006c
 8003958:	40020000 	.word	0x40020000

0800395c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800395c:	b480      	push	{r7}
 800395e:	b08b      	sub	sp, #44	; 0x2c
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396e:	e169      	b.n	8003c44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003970:	2201      	movs	r2, #1
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	429a      	cmp	r2, r3
 800398a:	f040 8158 	bne.w	8003c3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4a9a      	ldr	r2, [pc, #616]	; (8003bfc <HAL_GPIO_Init+0x2a0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d05e      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 8003998:	4a98      	ldr	r2, [pc, #608]	; (8003bfc <HAL_GPIO_Init+0x2a0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d875      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 800399e:	4a98      	ldr	r2, [pc, #608]	; (8003c00 <HAL_GPIO_Init+0x2a4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d058      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 80039a4:	4a96      	ldr	r2, [pc, #600]	; (8003c00 <HAL_GPIO_Init+0x2a4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d86f      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039aa:	4a96      	ldr	r2, [pc, #600]	; (8003c04 <HAL_GPIO_Init+0x2a8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d052      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 80039b0:	4a94      	ldr	r2, [pc, #592]	; (8003c04 <HAL_GPIO_Init+0x2a8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d869      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039b6:	4a94      	ldr	r2, [pc, #592]	; (8003c08 <HAL_GPIO_Init+0x2ac>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04c      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 80039bc:	4a92      	ldr	r2, [pc, #584]	; (8003c08 <HAL_GPIO_Init+0x2ac>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d863      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039c2:	4a92      	ldr	r2, [pc, #584]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d046      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 80039c8:	4a90      	ldr	r2, [pc, #576]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d85d      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039ce:	2b12      	cmp	r3, #18
 80039d0:	d82a      	bhi.n	8003a28 <HAL_GPIO_Init+0xcc>
 80039d2:	2b12      	cmp	r3, #18
 80039d4:	d859      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_GPIO_Init+0x80>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a57 	.word	0x08003a57
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003a43 	.word	0x08003a43
 80039e8:	08003a85 	.word	0x08003a85
 80039ec:	08003a8b 	.word	0x08003a8b
 80039f0:	08003a8b 	.word	0x08003a8b
 80039f4:	08003a8b 	.word	0x08003a8b
 80039f8:	08003a8b 	.word	0x08003a8b
 80039fc:	08003a8b 	.word	0x08003a8b
 8003a00:	08003a8b 	.word	0x08003a8b
 8003a04:	08003a8b 	.word	0x08003a8b
 8003a08:	08003a8b 	.word	0x08003a8b
 8003a0c:	08003a8b 	.word	0x08003a8b
 8003a10:	08003a8b 	.word	0x08003a8b
 8003a14:	08003a8b 	.word	0x08003a8b
 8003a18:	08003a8b 	.word	0x08003a8b
 8003a1c:	08003a8b 	.word	0x08003a8b
 8003a20:	08003a39 	.word	0x08003a39
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	4a79      	ldr	r2, [pc, #484]	; (8003c10 <HAL_GPIO_Init+0x2b4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a2e:	e02c      	b.n	8003a8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	623b      	str	r3, [r7, #32]
          break;
 8003a36:	e029      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	623b      	str	r3, [r7, #32]
          break;
 8003a40:	e024      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	3308      	adds	r3, #8
 8003a48:	623b      	str	r3, [r7, #32]
          break;
 8003a4a:	e01f      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	330c      	adds	r3, #12
 8003a52:	623b      	str	r3, [r7, #32]
          break;
 8003a54:	e01a      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a5e:	2304      	movs	r3, #4
 8003a60:	623b      	str	r3, [r7, #32]
          break;
 8003a62:	e013      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	611a      	str	r2, [r3, #16]
          break;
 8003a76:	e009      	b.n	8003a8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a78:	2308      	movs	r3, #8
 8003a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	615a      	str	r2, [r3, #20]
          break;
 8003a82:	e003      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a84:	2300      	movs	r3, #0
 8003a86:	623b      	str	r3, [r7, #32]
          break;
 8003a88:	e000      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          break;
 8003a8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2bff      	cmp	r3, #255	; 0xff
 8003a90:	d801      	bhi.n	8003a96 <HAL_GPIO_Init+0x13a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	e001      	b.n	8003a9a <HAL_GPIO_Init+0x13e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2bff      	cmp	r3, #255	; 0xff
 8003aa0:	d802      	bhi.n	8003aa8 <HAL_GPIO_Init+0x14c>
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	e002      	b.n	8003aae <HAL_GPIO_Init+0x152>
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	3b08      	subs	r3, #8
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	210f      	movs	r1, #15
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	401a      	ands	r2, r3
 8003ac0:	6a39      	ldr	r1, [r7, #32]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80b1 	beq.w	8003c3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003adc:	4b4d      	ldr	r3, [pc, #308]	; (8003c14 <HAL_GPIO_Init+0x2b8>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	4a4c      	ldr	r2, [pc, #304]	; (8003c14 <HAL_GPIO_Init+0x2b8>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6193      	str	r3, [r2, #24]
 8003ae8:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_GPIO_Init+0x2b8>)
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003af4:	4a48      	ldr	r2, [pc, #288]	; (8003c18 <HAL_GPIO_Init+0x2bc>)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a40      	ldr	r2, [pc, #256]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d013      	beq.n	8003b48 <HAL_GPIO_Init+0x1ec>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a3f      	ldr	r2, [pc, #252]	; (8003c20 <HAL_GPIO_Init+0x2c4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00d      	beq.n	8003b44 <HAL_GPIO_Init+0x1e8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a3e      	ldr	r2, [pc, #248]	; (8003c24 <HAL_GPIO_Init+0x2c8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d007      	beq.n	8003b40 <HAL_GPIO_Init+0x1e4>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a3d      	ldr	r2, [pc, #244]	; (8003c28 <HAL_GPIO_Init+0x2cc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_GPIO_Init+0x1e0>
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e006      	b.n	8003b4a <HAL_GPIO_Init+0x1ee>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	e004      	b.n	8003b4a <HAL_GPIO_Init+0x1ee>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e002      	b.n	8003b4a <HAL_GPIO_Init+0x1ee>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <HAL_GPIO_Init+0x1ee>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4c:	f002 0203 	and.w	r2, r2, #3
 8003b50:	0092      	lsls	r2, r2, #2
 8003b52:	4093      	lsls	r3, r2
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b5a:	492f      	ldr	r1, [pc, #188]	; (8003c18 <HAL_GPIO_Init+0x2bc>)
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	3302      	adds	r3, #2
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b74:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	492c      	ldr	r1, [pc, #176]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]
 8003b80:	e006      	b.n	8003b90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	4928      	ldr	r1, [pc, #160]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d006      	beq.n	8003baa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	4922      	ldr	r1, [pc, #136]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
 8003ba8:	e006      	b.n	8003bb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	491e      	ldr	r1, [pc, #120]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	4918      	ldr	r1, [pc, #96]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]
 8003bd0:	e006      	b.n	8003be0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bd2:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	4914      	ldr	r1, [pc, #80]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d021      	beq.n	8003c30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_GPIO_Init+0x2d0>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60cb      	str	r3, [r1, #12]
 8003bf8:	e021      	b.n	8003c3e <HAL_GPIO_Init+0x2e2>
 8003bfa:	bf00      	nop
 8003bfc:	10320000 	.word	0x10320000
 8003c00:	10310000 	.word	0x10310000
 8003c04:	10220000 	.word	0x10220000
 8003c08:	10210000 	.word	0x10210000
 8003c0c:	10120000 	.word	0x10120000
 8003c10:	10110000 	.word	0x10110000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40010800 	.word	0x40010800
 8003c20:	40010c00 	.word	0x40010c00
 8003c24:	40011000 	.word	0x40011000
 8003c28:	40011400 	.word	0x40011400
 8003c2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	4909      	ldr	r1, [pc, #36]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	3301      	adds	r3, #1
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f47f ae8e 	bne.w	8003970 <HAL_GPIO_Init+0x14>
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	372c      	adds	r7, #44	; 0x2c
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40010400 	.word	0x40010400

08003c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c74:	787b      	ldrb	r3, [r7, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c80:	e003      	b.n	8003c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	041a      	lsls	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	611a      	str	r2, [r3, #16]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	041a      	lsls	r2, r3, #16
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	43d9      	mvns	r1, r3
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	611a      	str	r2, [r3, #16]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d006      	beq.n	8003cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cde:	4a05      	ldr	r2, [pc, #20]	; (8003cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fac2 	bl	8002270 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e02b      	b.n	8003d62 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003d12:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f245 5255 	movw	r2, #21845	; 0x5555
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6852      	ldr	r2, [r2, #4]
 8003d26:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6892      	ldr	r2, [r2, #8]
 8003d30:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003d32:	f7ff f86d 	bl	8002e10 <HAL_GetTick>
 8003d36:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8003d38:	e008      	b.n	8003d4c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003d3a:	f7ff f869 	bl	8002e10 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b26      	cmp	r3, #38	; 0x26
 8003d46:	d901      	bls.n	8003d4c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e00a      	b.n	8003d62 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f1      	bne.n	8003d3a <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e26c      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8087 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003da8:	4b92      	ldr	r3, [pc, #584]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d00c      	beq.n	8003dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003db4:	4b8f      	ldr	r3, [pc, #572]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d112      	bne.n	8003de6 <HAL_RCC_OscConfig+0x5e>
 8003dc0:	4b8c      	ldr	r3, [pc, #560]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d10b      	bne.n	8003de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dce:	4b89      	ldr	r3, [pc, #548]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d06c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x12c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d168      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e246      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x76>
 8003df0:	4b80      	ldr	r3, [pc, #512]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a7f      	ldr	r2, [pc, #508]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e02e      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x98>
 8003e06:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a7a      	ldr	r2, [pc, #488]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b78      	ldr	r3, [pc, #480]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a77      	ldr	r2, [pc, #476]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e01d      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0xbc>
 8003e2a:	4b72      	ldr	r3, [pc, #456]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a71      	ldr	r2, [pc, #452]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6e      	ldr	r2, [pc, #440]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003e44:	4b6b      	ldr	r3, [pc, #428]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a6a      	ldr	r2, [pc, #424]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b68      	ldr	r3, [pc, #416]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a67      	ldr	r2, [pc, #412]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d013      	beq.n	8003e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e64:	f7fe ffd4 	bl	8002e10 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fe ffd0 	bl	8002e10 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	; 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1fa      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4b5d      	ldr	r3, [pc, #372]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0xe4>
 8003e8a:	e014      	b.n	8003eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe ffc0 	bl	8002e10 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe ffbc 	bl	8002e10 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e1e6      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x10c>
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d063      	beq.n	8003f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec2:	4b4c      	ldr	r3, [pc, #304]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ece:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d11c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x18c>
 8003eda:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d116      	bne.n	8003f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee6:	4b43      	ldr	r3, [pc, #268]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_RCC_OscConfig+0x176>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e1ba      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4939      	ldr	r1, [pc, #228]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f12:	e03a      	b.n	8003f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f1c:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fe ff75 	bl	8002e10 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2a:	f7fe ff71 	bl	8002e10 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e19b      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4927      	ldr	r1, [pc, #156]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
 8003f5c:	e015      	b.n	8003f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5e:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe ff54 	bl	8002e10 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fe ff50 	bl	8002e10 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e17a      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d03a      	beq.n	800400c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d019      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa4:	f7fe ff34 	bl	8002e10 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fac:	f7fe ff30 	bl	8002e10 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e15a      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f000 fad8 	bl	8004580 <RCC_Delay>
 8003fd0:	e01c      	b.n	800400c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd8:	f7fe ff1a 	bl	8002e10 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fde:	e00f      	b.n	8004000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fe ff16 	bl	8002e10 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d908      	bls.n	8004000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e140      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	42420000 	.word	0x42420000
 8003ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b9e      	ldr	r3, [pc, #632]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e9      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a6 	beq.w	8004166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b97      	ldr	r3, [pc, #604]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	4b94      	ldr	r3, [pc, #592]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4a93      	ldr	r2, [pc, #588]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	61d3      	str	r3, [r2, #28]
 8004036:	4b91      	ldr	r3, [pc, #580]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	4b8e      	ldr	r3, [pc, #568]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d118      	bne.n	8004084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004052:	4b8b      	ldr	r3, [pc, #556]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a8a      	ldr	r2, [pc, #552]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405e:	f7fe fed7 	bl	8002e10 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fe fed3 	bl	8002e10 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b64      	cmp	r3, #100	; 0x64
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0fd      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	4b81      	ldr	r3, [pc, #516]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x312>
 800408c:	4b7b      	ldr	r3, [pc, #492]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a7a      	ldr	r2, [pc, #488]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	e02d      	b.n	80040f6 <HAL_RCC_OscConfig+0x36e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x334>
 80040a2:	4b76      	ldr	r3, [pc, #472]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4a75      	ldr	r2, [pc, #468]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	6213      	str	r3, [r2, #32]
 80040ae:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4a72      	ldr	r2, [pc, #456]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	6213      	str	r3, [r2, #32]
 80040ba:	e01c      	b.n	80040f6 <HAL_RCC_OscConfig+0x36e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d10c      	bne.n	80040de <HAL_RCC_OscConfig+0x356>
 80040c4:	4b6d      	ldr	r3, [pc, #436]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4a6c      	ldr	r2, [pc, #432]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040ca:	f043 0304 	orr.w	r3, r3, #4
 80040ce:	6213      	str	r3, [r2, #32]
 80040d0:	4b6a      	ldr	r3, [pc, #424]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	4a69      	ldr	r2, [pc, #420]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6213      	str	r3, [r2, #32]
 80040dc:	e00b      	b.n	80040f6 <HAL_RCC_OscConfig+0x36e>
 80040de:	4b67      	ldr	r3, [pc, #412]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4a66      	ldr	r2, [pc, #408]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	6213      	str	r3, [r2, #32]
 80040ea:	4b64      	ldr	r3, [pc, #400]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d015      	beq.n	800412a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fe:	f7fe fe87 	bl	8002e10 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	e00a      	b.n	800411c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f7fe fe83 	bl	8002e10 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f241 3288 	movw	r2, #5000	; 0x1388
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e0ab      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	4b57      	ldr	r3, [pc, #348]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ee      	beq.n	8004106 <HAL_RCC_OscConfig+0x37e>
 8004128:	e014      	b.n	8004154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412a:	f7fe fe71 	bl	8002e10 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004130:	e00a      	b.n	8004148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fe fe6d 	bl	8002e10 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e095      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004148:	4b4c      	ldr	r3, [pc, #304]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ee      	bne.n	8004132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4b48      	ldr	r3, [pc, #288]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4a47      	ldr	r2, [pc, #284]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8081 	beq.w	8004272 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004170:	4b42      	ldr	r3, [pc, #264]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	2b08      	cmp	r3, #8
 800417a:	d061      	beq.n	8004240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d146      	bne.n	8004212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004184:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x4fc>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7fe fe41 	bl	8002e10 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004192:	f7fe fe3d 	bl	8002e10 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e067      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a4:	4b35      	ldr	r3, [pc, #212]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b8:	d108      	bne.n	80041cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	492d      	ldr	r1, [pc, #180]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041cc:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a19      	ldr	r1, [r3, #32]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	430b      	orrs	r3, r1
 80041de:	4927      	ldr	r1, [pc, #156]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCC_OscConfig+0x4fc>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ea:	f7fe fe11 	bl	8002e10 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f2:	f7fe fe0d 	bl	8002e10 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e037      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x46a>
 8004210:	e02f      	b.n	8004272 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_RCC_OscConfig+0x4fc>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fe fdfa 	bl	8002e10 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fe fdf6 	bl	8002e10 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e020      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x498>
 800423e:	e018      	b.n	8004272 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e013      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	429a      	cmp	r2, r3
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	40007000 	.word	0x40007000
 8004284:	42420060 	.word	0x42420060

08004288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0d0      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b6a      	ldr	r3, [pc, #424]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d910      	bls.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 0207 	bic.w	r2, r3, #7
 80042b2:	4965      	ldr	r1, [pc, #404]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a58      	ldr	r2, [pc, #352]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d040      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d115      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e073      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06b      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f023 0203 	bic.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4936      	ldr	r1, [pc, #216]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004378:	f7fe fd4a 	bl	8002e10 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	e00a      	b.n	8004396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fe fd46 	bl	8002e10 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e053      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 020c 	and.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d1eb      	bne.n	8004380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d210      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 0207 	bic.w	r2, r3, #7
 80043be:	4922      	ldr	r1, [pc, #136]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	; (8004450 <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1cc>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x1d0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fca8 	bl	8002d8c <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40022000 	.word	0x40022000
 800444c:	40021000 	.word	0x40021000
 8004450:	080085f4 	.word	0x080085f4
 8004454:	20000008 	.word	0x20000008
 8004458:	2000000c 	.word	0x2000000c

0800445c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	b490      	push	{r4, r7}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004464:	1d3c      	adds	r4, r7, #4
 8004466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800446c:	f240 2301 	movw	r3, #513	; 0x201
 8004470:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	2300      	movs	r3, #0
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b04      	cmp	r3, #4
 8004494:	d002      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x40>
 8004496:	2b08      	cmp	r3, #8
 8004498:	d003      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x46>
 800449a:	e02d      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb8>)
 800449e:	623b      	str	r3, [r7, #32]
      break;
 80044a0:	e02d      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	0c9b      	lsrs	r3, r3, #18
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044ae:	4413      	add	r3, r2
 80044b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d013      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044c0:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	0c5b      	lsrs	r3, r3, #17
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044ce:	4413      	add	r3, r2
 80044d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044da:	fb02 f203 	mul.w	r2, r2, r3
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	e004      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	623b      	str	r3, [r7, #32]
      break;
 80044f6:	e002      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044fa:	623b      	str	r3, [r7, #32]
      break;
 80044fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bc90      	pop	{r4, r7}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	0800856c 	.word	0x0800856c
 8004510:	40021000 	.word	0x40021000
 8004514:	007a1200 	.word	0x007a1200
 8004518:	003d0900 	.word	0x003d0900

0800451c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004520:	4b02      	ldr	r3, [pc, #8]	; (800452c <HAL_RCC_GetHCLKFreq+0x10>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	20000008 	.word	0x20000008

08004530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004534:	f7ff fff2 	bl	800451c <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4903      	ldr	r1, [pc, #12]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	08008604 	.word	0x08008604

08004558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800455c:	f7ff ffde 	bl	800451c <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	0adb      	lsrs	r3, r3, #11
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4903      	ldr	r1, [pc, #12]	; (800457c <HAL_RCC_GetPCLK2Freq+0x24>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	08008604 	.word	0x08008604

08004580 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <RCC_Delay+0x34>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <RCC_Delay+0x38>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	0a5b      	lsrs	r3, r3, #9
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800459c:	bf00      	nop
  }
  while (Delay --);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1e5a      	subs	r2, r3, #1
 80045a2:	60fa      	str	r2, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f9      	bne.n	800459c <RCC_Delay+0x1c>
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	20000008 	.word	0x20000008
 80045b8:	10624dd3 	.word	0x10624dd3

080045bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d07d      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80045d8:	2300      	movs	r3, #0
 80045da:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045dc:	4b4f      	ldr	r3, [pc, #316]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e8:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4a4b      	ldr	r2, [pc, #300]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	61d3      	str	r3, [r2, #28]
 80045f4:	4b49      	ldr	r3, [pc, #292]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004600:	2301      	movs	r3, #1
 8004602:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	4b46      	ldr	r3, [pc, #280]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d118      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004610:	4b43      	ldr	r3, [pc, #268]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a42      	ldr	r2, [pc, #264]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461c:	f7fe fbf8 	bl	8002e10 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004622:	e008      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004624:	f7fe fbf4 	bl	8002e10 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e06d      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004636:	4b3a      	ldr	r3, [pc, #232]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02e      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	429a      	cmp	r2, r3
 800465e:	d027      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004660:	4b2e      	ldr	r3, [pc, #184]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004668:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800466a:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800466c:	2201      	movs	r2, #1
 800466e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004670:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004676:	4a29      	ldr	r2, [pc, #164]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d014      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7fe fbc3 	bl	8002e10 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fe fbbf 	bl	8002e10 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e036      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	4b1d      	ldr	r3, [pc, #116]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0ee      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4917      	ldr	r1, [pc, #92]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	4a13      	ldr	r2, [pc, #76]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	490b      	ldr	r1, [pc, #44]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	4904      	ldr	r1, [pc, #16]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	40007000 	.word	0x40007000
 8004724:	42420440 	.word	0x42420440

08004728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e076      	b.n	8004828 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474a:	d009      	beq.n	8004760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	61da      	str	r2, [r3, #28]
 8004752:	e005      	b.n	8004760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd ffa8 	bl	80026d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	0c1a      	lsrs	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f002 0204 	and.w	r2, r2, #4
 8004806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_SPI_Transmit+0x22>
 800484e:	2302      	movs	r3, #2
 8004850:	e126      	b.n	8004aa0 <HAL_SPI_Transmit+0x270>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800485a:	f7fe fad9 	bl	8002e10 <HAL_GetTick>
 800485e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d002      	beq.n	8004876 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004870:	2302      	movs	r3, #2
 8004872:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004874:	e10b      	b.n	8004a8e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_Transmit+0x52>
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004886:	e102      	b.n	8004a8e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2203      	movs	r2, #3
 800488c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d10f      	bne.n	80048f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b40      	cmp	r3, #64	; 0x40
 80048fc:	d007      	beq.n	800490e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800490c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004916:	d14b      	bne.n	80049b0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_SPI_Transmit+0xf6>
 8004920:	8afb      	ldrh	r3, [r7, #22]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d13e      	bne.n	80049a4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800494a:	e02b      	b.n	80049a4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d112      	bne.n	8004980 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	86da      	strh	r2, [r3, #54]	; 0x36
 800497e:	e011      	b.n	80049a4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004980:	f7fe fa46 	bl	8002e10 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d803      	bhi.n	8004998 <HAL_SPI_Transmit+0x168>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d102      	bne.n	800499e <HAL_SPI_Transmit+0x16e>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049a2:	e074      	b.n	8004a8e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ce      	bne.n	800494c <HAL_SPI_Transmit+0x11c>
 80049ae:	e04c      	b.n	8004a4a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <HAL_SPI_Transmit+0x18e>
 80049b8:	8afb      	ldrh	r3, [r7, #22]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d140      	bne.n	8004a40 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	7812      	ldrb	r2, [r2, #0]
 80049ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049e4:	e02c      	b.n	8004a40 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d113      	bne.n	8004a1c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	7812      	ldrb	r2, [r2, #0]
 8004a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a1a:	e011      	b.n	8004a40 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a1c:	f7fe f9f8 	bl	8002e10 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d803      	bhi.n	8004a34 <HAL_SPI_Transmit+0x204>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d102      	bne.n	8004a3a <HAL_SPI_Transmit+0x20a>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a3e:	e026      	b.n	8004a8e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1cd      	bne.n	80049e6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fbb8 	bl	80051c4 <SPI_EndRxTxTransaction>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e000      	b.n	8004a8e <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac4:	d112      	bne.n	8004aec <HAL_SPI_Receive+0x44>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10e      	bne.n	8004aec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f8f1 	bl	8004cca <HAL_SPI_TransmitReceive>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	e0ea      	b.n	8004cc2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_SPI_Receive+0x52>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e0e3      	b.n	8004cc2 <HAL_SPI_Receive+0x21a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b02:	f7fe f985 	bl	8002e10 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d002      	beq.n	8004b1a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
 8004b16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b18:	e0ca      	b.n	8004cb0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_SPI_Receive+0x7e>
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b2a:	e0c1      	b.n	8004cb0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b72:	d10f      	bne.n	8004b94 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b92:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d007      	beq.n	8004bb2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d162      	bne.n	8004c80 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bba:	e02e      	b.n	8004c1a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d115      	bne.n	8004bf6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f103 020c 	add.w	r2, r3, #12
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bf4:	e011      	b.n	8004c1a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf6:	f7fe f90b 	bl	8002e10 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d803      	bhi.n	8004c0e <HAL_SPI_Receive+0x166>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d102      	bne.n	8004c14 <HAL_SPI_Receive+0x16c>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c18:	e04a      	b.n	8004cb0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1cb      	bne.n	8004bbc <HAL_SPI_Receive+0x114>
 8004c24:	e031      	b.n	8004c8a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d113      	bne.n	8004c5c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	1c9a      	adds	r2, r3, #2
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c5a:	e011      	b.n	8004c80 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c5c:	f7fe f8d8 	bl	8002e10 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d803      	bhi.n	8004c74 <HAL_SPI_Receive+0x1cc>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d102      	bne.n	8004c7a <HAL_SPI_Receive+0x1d2>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c7e:	e017      	b.n	8004cb0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1cd      	bne.n	8004c26 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fa46 	bl	8005120 <SPI_EndRxTransaction>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	75fb      	strb	r3, [r7, #23]
 8004cac:	e000      	b.n	8004cb0 <HAL_SPI_Receive+0x208>
  }

error :
 8004cae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b08c      	sub	sp, #48	; 0x30
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_SPI_TransmitReceive+0x26>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e18a      	b.n	8005006 <HAL_SPI_TransmitReceive+0x33c>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf8:	f7fe f88a 	bl	8002e10 <HAL_GetTick>
 8004cfc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d0e:	887b      	ldrh	r3, [r7, #2]
 8004d10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d00f      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x70>
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d20:	d107      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d103      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x68>
 8004d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d003      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d32:	2302      	movs	r3, #2
 8004d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d38:	e15b      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x82>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x82>
 8004d46:	887b      	ldrh	r3, [r7, #2]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d52:	e14e      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d003      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2205      	movs	r2, #5
 8004d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	887a      	ldrh	r2, [r7, #2]
 8004d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	887a      	ldrh	r2, [r7, #2]
 8004d8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d007      	beq.n	8004dbc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc4:	d178      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x10a>
 8004dce:	8b7b      	ldrh	r3, [r7, #26]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d166      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	881a      	ldrh	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de4:	1c9a      	adds	r2, r3, #2
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df8:	e053      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d11b      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x176>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d016      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x176>
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d113      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	881a      	ldrh	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	1c9a      	adds	r2, r3, #2
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d119      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x1b8>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d014      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	b292      	uxth	r2, r2
 8004e64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	1c9a      	adds	r2, r3, #2
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e82:	f7fd ffc5 	bl	8002e10 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d807      	bhi.n	8004ea2 <HAL_SPI_TransmitReceive+0x1d8>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d003      	beq.n	8004ea2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ea0:	e0a7      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1a6      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x130>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1a1      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x130>
 8004eb6:	e07c      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x1fc>
 8004ec0:	8b7b      	ldrh	r3, [r7, #26]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d16b      	bne.n	8004f9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eec:	e057      	b.n	8004f9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d11c      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x26c>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d017      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0x26c>
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d114      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	7812      	ldrb	r2, [r2, #0]
 8004f18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d119      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x2ae>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d014      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f74:	2301      	movs	r3, #1
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f78:	f7fd ff4a 	bl	8002e10 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d803      	bhi.n	8004f90 <HAL_SPI_TransmitReceive+0x2c6>
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d102      	bne.n	8004f96 <HAL_SPI_TransmitReceive+0x2cc>
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f9c:	e029      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1a2      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x224>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d19d      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f904 	bl	80051c4 <SPI_EndRxTxTransaction>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fce:	e010      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	e000      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ff0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005006:	4618      	mov	r0, r3
 8005008:	3730      	adds	r7, #48	; 0x30
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005020:	f7fd fef6 	bl	8002e10 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	4413      	add	r3, r2
 800502e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005030:	f7fd feee 	bl	8002e10 <HAL_GetTick>
 8005034:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005036:	4b39      	ldr	r3, [pc, #228]	; (800511c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	015b      	lsls	r3, r3, #5
 800503c:	0d1b      	lsrs	r3, r3, #20
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	fb02 f303 	mul.w	r3, r2, r3
 8005044:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005046:	e054      	b.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d050      	beq.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005050:	f7fd fede 	bl	8002e10 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	429a      	cmp	r2, r3
 800505e:	d902      	bls.n	8005066 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d13d      	bne.n	80050e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005074:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507e:	d111      	bne.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005088:	d004      	beq.n	8005094 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005092:	d107      	bne.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ac:	d10f      	bne.n	80050ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e017      	b.n	8005112 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	429a      	cmp	r2, r3
 800510e:	d19b      	bne.n	8005048 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3720      	adds	r7, #32
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000008 	.word	0x20000008

08005120 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005134:	d111      	bne.n	800515a <SPI_EndRxTransaction+0x3a>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513e:	d004      	beq.n	800514a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005148:	d107      	bne.n	800515a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005158:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005162:	d117      	bne.n	8005194 <SPI_EndRxTransaction+0x74>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516c:	d112      	bne.n	8005194 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2200      	movs	r2, #0
 8005176:	2101      	movs	r1, #1
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff ff49 	bl	8005010 <SPI_WaitFlagStateUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01a      	beq.n	80051ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e013      	b.n	80051bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff ff36 	bl	8005010 <SPI_WaitFlagStateUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e000      	b.n	80051bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	2180      	movs	r1, #128	; 0x80
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff ff18 	bl	8005010 <SPI_WaitFlagStateUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e000      	b.n	80051f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e041      	b.n	8005296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fd fcc0 	bl	8002bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f000 fa70 	bl	8005724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d001      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e03a      	b.n	800532e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a18      	ldr	r2, [pc, #96]	; (8005338 <HAL_TIM_Base_Start_IT+0x98>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x58>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d009      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x58>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a14      	ldr	r2, [pc, #80]	; (800533c <HAL_TIM_Base_Start_IT+0x9c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x58>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_TIM_Base_Start_IT+0xa0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d111      	bne.n	800531c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b06      	cmp	r3, #6
 8005308:	d010      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	e007      	b.n	800532c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40000400 	.word	0x40000400
 8005340:	40000800 	.word	0x40000800

08005344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b02      	cmp	r3, #2
 8005358:	d122      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d11b      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0202 	mvn.w	r2, #2
 8005370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f9b1 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f9a4 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f9b3 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0204 	mvn.w	r2, #4
 80053c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f987 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f97a 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f989 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d122      	bne.n	8005448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b08      	cmp	r3, #8
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0208 	mvn.w	r2, #8
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2204      	movs	r2, #4
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f95d 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f950 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f95f 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b10      	cmp	r3, #16
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b10      	cmp	r3, #16
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0210 	mvn.w	r2, #16
 800546c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2208      	movs	r2, #8
 8005472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f933 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f926 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f935 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d10e      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d107      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0201 	mvn.w	r2, #1
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fd fa60 	bl	8002988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d10e      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e0:	2b80      	cmp	r3, #128	; 0x80
 80054e2:	d107      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa77 	bl	80059e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d10e      	bne.n	8005520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d107      	bne.n	8005520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f8f9 	bl	8005712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b20      	cmp	r3, #32
 800552c:	d10e      	bne.n	800554c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b20      	cmp	r3, #32
 800553a:	d107      	bne.n	800554c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0220 	mvn.w	r2, #32
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa42 	bl	80059d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_TIM_ConfigClockSource+0x18>
 8005568:	2302      	movs	r3, #2
 800556a:	e0b3      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x180>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800558a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005592:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a4:	d03e      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0xd0>
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055aa:	f200 8087 	bhi.w	80056bc <HAL_TIM_ConfigClockSource+0x168>
 80055ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b2:	f000 8085 	beq.w	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ba:	d87f      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x168>
 80055bc:	2b70      	cmp	r3, #112	; 0x70
 80055be:	d01a      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0xa2>
 80055c0:	2b70      	cmp	r3, #112	; 0x70
 80055c2:	d87b      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x168>
 80055c4:	2b60      	cmp	r3, #96	; 0x60
 80055c6:	d050      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x116>
 80055c8:	2b60      	cmp	r3, #96	; 0x60
 80055ca:	d877      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x168>
 80055cc:	2b50      	cmp	r3, #80	; 0x50
 80055ce:	d03c      	beq.n	800564a <HAL_TIM_ConfigClockSource+0xf6>
 80055d0:	2b50      	cmp	r3, #80	; 0x50
 80055d2:	d873      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x168>
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d058      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x136>
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d86f      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x168>
 80055dc:	2b30      	cmp	r3, #48	; 0x30
 80055de:	d064      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x156>
 80055e0:	2b30      	cmp	r3, #48	; 0x30
 80055e2:	d86b      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x168>
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d060      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x156>
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d867      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x168>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d05c      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x156>
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d05a      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80055f4:	e062      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6899      	ldr	r1, [r3, #8]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f000 f966 	bl	80058d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005618:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	609a      	str	r2, [r3, #8]
      break;
 8005622:	e04e      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6899      	ldr	r1, [r3, #8]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f000 f94f 	bl	80058d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005646:	609a      	str	r2, [r3, #8]
      break;
 8005648:	e03b      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6859      	ldr	r1, [r3, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	461a      	mov	r2, r3
 8005658:	f000 f8c6 	bl	80057e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2150      	movs	r1, #80	; 0x50
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f91d 	bl	80058a2 <TIM_ITRx_SetConfig>
      break;
 8005668:	e02b      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	461a      	mov	r2, r3
 8005678:	f000 f8e4 	bl	8005844 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2160      	movs	r1, #96	; 0x60
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f90d 	bl	80058a2 <TIM_ITRx_SetConfig>
      break;
 8005688:	e01b      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6859      	ldr	r1, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	461a      	mov	r2, r3
 8005698:	f000 f8a6 	bl	80057e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2140      	movs	r1, #64	; 0x40
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f8fd 	bl	80058a2 <TIM_ITRx_SetConfig>
      break;
 80056a8:	e00b      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f000 f8f4 	bl	80058a2 <TIM_ITRx_SetConfig>
        break;
 80056ba:	e002      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056bc:	bf00      	nop
 80056be:	e000      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr

080056ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr

08005712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a29      	ldr	r2, [pc, #164]	; (80057dc <TIM_Base_SetConfig+0xb8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00b      	beq.n	8005754 <TIM_Base_SetConfig+0x30>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005742:	d007      	beq.n	8005754 <TIM_Base_SetConfig+0x30>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <TIM_Base_SetConfig+0xbc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0x30>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <TIM_Base_SetConfig+0xc0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <TIM_Base_SetConfig+0xb8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_Base_SetConfig+0x62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d007      	beq.n	8005786 <TIM_Base_SetConfig+0x62>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <TIM_Base_SetConfig+0xbc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_Base_SetConfig+0x62>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <TIM_Base_SetConfig+0xc0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d108      	bne.n	8005798 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a07      	ldr	r2, [pc, #28]	; (80057dc <TIM_Base_SetConfig+0xb8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d103      	bne.n	80057cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	615a      	str	r2, [r3, #20]
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800

080057e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0201 	bic.w	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 030a 	bic.w	r3, r3, #10
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f023 0210 	bic.w	r2, r3, #16
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800586e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	031b      	lsls	r3, r3, #12
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005880:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	621a      	str	r2, [r3, #32]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	f043 0307 	orr.w	r3, r3, #7
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	609a      	str	r2, [r3, #8]
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b087      	sub	sp, #28
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	021a      	lsls	r2, r3, #8
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	609a      	str	r2, [r3, #8]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e046      	b.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00e      	beq.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005978:	d009      	beq.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a12      	ldr	r2, [pc, #72]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d004      	beq.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a10      	ldr	r2, [pc, #64]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d10c      	bne.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4313      	orrs	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800

080059d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e03f      	b.n	8005a86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fd f918 	bl	8002c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2224      	movs	r2, #36	; 0x24
 8005a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fc21 	bl	8006280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b08a      	sub	sp, #40	; 0x28
 8005a92:	af02      	add	r7, sp, #8
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d17c      	bne.n	8005ba8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_UART_Transmit+0x2c>
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e075      	b.n	8005baa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_UART_Transmit+0x3e>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e06e      	b.n	8005baa <HAL_UART_Transmit+0x11c>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2221      	movs	r2, #33	; 0x21
 8005ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ae2:	f7fd f995 	bl	8002e10 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afc:	d108      	bne.n	8005b10 <HAL_UART_Transmit+0x82>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e003      	b.n	8005b18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005b20:	e02a      	b.n	8005b78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fa45 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e036      	b.n	8005baa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	3302      	adds	r3, #2
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e007      	b.n	8005b6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1cf      	bne.n	8005b22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2140      	movs	r1, #64	; 0x40
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fa15 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e006      	b.n	8005baa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3720      	adds	r7, #32
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b08a      	sub	sp, #40	; 0x28
 8005bb6:	af02      	add	r7, sp, #8
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	f040 8089 	bne.w	8005ce6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_UART_Receive+0x2e>
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e081      	b.n	8005ce8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_UART_Receive+0x40>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e07a      	b.n	8005ce8 <HAL_UART_Receive+0x136>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2222      	movs	r2, #34	; 0x22
 8005c04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c08:	f7fd f902 	bl	8002e10 <HAL_GetTick>
 8005c0c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c22:	d108      	bne.n	8005c36 <HAL_UART_Receive+0x84>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	e003      	b.n	8005c3e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c46:	e043      	b.n	8005cd0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2120      	movs	r1, #32
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f9b2 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e042      	b.n	8005ce8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10c      	bne.n	8005c82 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e01f      	b.n	8005cc2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	d007      	beq.n	8005c9c <HAL_UART_Receive+0xea>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <HAL_UART_Receive+0xf8>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	e008      	b.n	8005cbc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1b6      	bne.n	8005c48 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e000      	b.n	8005ce8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005ce6:	2302      	movs	r3, #2
  }
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d140      	bne.n	8005d8c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_UART_Receive_IT+0x26>
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e039      	b.n	8005d8e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_UART_Receive_IT+0x38>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e032      	b.n	8005d8e <HAL_UART_Receive_IT+0x9e>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	88fa      	ldrh	r2, [r7, #6]
 8005d3a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2222      	movs	r2, #34	; 0x22
 8005d4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d66:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695a      	ldr	r2, [r3, #20]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0220 	orr.w	r2, r2, #32
 8005d86:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e000      	b.n	8005d8e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
  }
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10d      	bne.n	8005dea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_UART_IRQHandler+0x52>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f9cc 	bl	8006180 <UART_Receive_IT>
      return;
 8005de8:	e0d0      	b.n	8005f8c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80b0 	beq.w	8005f52 <HAL_UART_IRQHandler+0x1ba>
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d105      	bne.n	8005e08 <HAL_UART_IRQHandler+0x70>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80a5 	beq.w	8005f52 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_UART_IRQHandler+0x90>
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	f043 0201 	orr.w	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_UART_IRQHandler+0xb0>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e40:	f043 0202 	orr.w	r2, r3, #2
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <HAL_UART_IRQHandler+0xd0>
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	f043 0204 	orr.w	r2, r3, #4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00f      	beq.n	8005e92 <HAL_UART_IRQHandler+0xfa>
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d104      	bne.n	8005e86 <HAL_UART_IRQHandler+0xee>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	f043 0208 	orr.w	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d077      	beq.n	8005f8a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x11c>
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f966 	bl	8006180 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bf14      	ite	ne
 8005ec2:	2301      	movne	r3, #1
 8005ec4:	2300      	moveq	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <HAL_UART_IRQHandler+0x144>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d031      	beq.n	8005f40 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f8b7 	bl	8006050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d023      	beq.n	8005f38 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d013      	beq.n	8005f30 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <HAL_UART_IRQHandler+0x1fc>)
 8005f0e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fd fcab 	bl	8003870 <HAL_DMA_Abort_IT>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d016      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2e:	e00e      	b.n	8005f4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f83a 	bl	8005faa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f36:	e00a      	b.n	8005f4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f836 	bl	8005faa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3e:	e006      	b.n	8005f4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f832 	bl	8005faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f4c:	e01d      	b.n	8005f8a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4e:	bf00      	nop
    return;
 8005f50:	e01b      	b.n	8005f8a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_UART_IRQHandler+0x1d6>
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8a3 	bl	80060b2 <UART_Transmit_IT>
    return;
 8005f6c:	e00e      	b.n	8005f8c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <HAL_UART_IRQHandler+0x1f4>
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d004      	beq.n	8005f8c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f8e4 	bl	8006150 <UART_EndTransmit_IT>
    return;
 8005f88:	e000      	b.n	8005f8c <HAL_UART_IRQHandler+0x1f4>
    return;
 8005f8a:	bf00      	nop
  }
}
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	0800608b 	.word	0x0800608b

08005f98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr

08005faa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr

08005fbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fcc:	e02c      	b.n	8006028 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d028      	beq.n	8006028 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <UART_WaitOnFlagUntilTimeout+0x30>
 8005fdc:	f7fc ff18 	bl	8002e10 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d21d      	bcs.n	8006028 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ffa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e00f      	b.n	8006048 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4013      	ands	r3, r2
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	bf0c      	ite	eq
 8006038:	2301      	moveq	r3, #1
 800603a:	2300      	movne	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	429a      	cmp	r2, r3
 8006044:	d0c3      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006066:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff ff80 	bl	8005faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b085      	sub	sp, #20
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b21      	cmp	r3, #33	; 0x21
 80060c4:	d13e      	bne.n	8006144 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ce:	d114      	bne.n	80060fa <UART_Transmit_IT+0x48>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d110      	bne.n	80060fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	621a      	str	r2, [r3, #32]
 80060f8:	e008      	b.n	800610c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	1c59      	adds	r1, r3, #1
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6211      	str	r1, [r2, #32]
 8006104:	781a      	ldrb	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	b29b      	uxth	r3, r3
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4619      	mov	r1, r3
 800611a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10f      	bne.n	8006140 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800612e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800613e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	e000      	b.n	8006146 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006144:	2302      	movs	r3, #2
  }
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr

08006150 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006166:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff ff11 	bl	8005f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b22      	cmp	r3, #34	; 0x22
 8006192:	d170      	bne.n	8006276 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619c:	d117      	bne.n	80061ce <UART_Receive_IT+0x4e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d113      	bne.n	80061ce <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	1c9a      	adds	r2, r3, #2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28
 80061cc:	e026      	b.n	800621c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e0:	d007      	beq.n	80061f2 <UART_Receive_IT+0x72>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <UART_Receive_IT+0x80>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e008      	b.n	8006212 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800620c:	b2da      	uxtb	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	4619      	mov	r1, r3
 800622a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800622c:	2b00      	cmp	r3, #0
 800622e:	d120      	bne.n	8006272 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0220 	bic.w	r2, r2, #32
 800623e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800624e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695a      	ldr	r2, [r3, #20]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7fc fb49 	bl	8002900 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e002      	b.n	8006278 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	e000      	b.n	8006278 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8006276:	2302      	movs	r3, #2
  }
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80062ba:	f023 030c 	bic.w	r3, r3, #12
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	430b      	orrs	r3, r1
 80062c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <UART_SetConfig+0x114>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d103      	bne.n	80062f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062e8:	f7fe f936 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	e002      	b.n	80062f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062f0:	f7fe f91e 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 80062f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009a      	lsls	r2, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	fbb2 f3f3 	udiv	r3, r2, r3
 800630c:	4a22      	ldr	r2, [pc, #136]	; (8006398 <UART_SetConfig+0x118>)
 800630e:	fba2 2303 	umull	r2, r3, r2, r3
 8006312:	095b      	lsrs	r3, r3, #5
 8006314:	0119      	lsls	r1, r3, #4
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	009a      	lsls	r2, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	fbb2 f2f3 	udiv	r2, r2, r3
 800632c:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <UART_SetConfig+0x118>)
 800632e:	fba3 0302 	umull	r0, r3, r3, r2
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	2064      	movs	r0, #100	; 0x64
 8006336:	fb00 f303 	mul.w	r3, r0, r3
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	3332      	adds	r3, #50	; 0x32
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <UART_SetConfig+0x118>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800634c:	4419      	add	r1, r3
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	009a      	lsls	r2, r3, #2
 8006358:	441a      	add	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	fbb2 f2f3 	udiv	r2, r2, r3
 8006364:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <UART_SetConfig+0x118>)
 8006366:	fba3 0302 	umull	r0, r3, r3, r2
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	2064      	movs	r0, #100	; 0x64
 800636e:	fb00 f303 	mul.w	r3, r0, r3
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	3332      	adds	r3, #50	; 0x32
 8006378:	4a07      	ldr	r2, [pc, #28]	; (8006398 <UART_SetConfig+0x118>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	f003 020f 	and.w	r2, r3, #15
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	440a      	add	r2, r1
 800638a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800638c:	bf00      	nop
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40013800 	.word	0x40013800
 8006398:	51eb851f 	.word	0x51eb851f

0800639c <__errno>:
 800639c:	4b01      	ldr	r3, [pc, #4]	; (80063a4 <__errno+0x8>)
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000014 	.word	0x20000014

080063a8 <__libc_init_array>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	2600      	movs	r6, #0
 80063ac:	4d0c      	ldr	r5, [pc, #48]	; (80063e0 <__libc_init_array+0x38>)
 80063ae:	4c0d      	ldr	r4, [pc, #52]	; (80063e4 <__libc_init_array+0x3c>)
 80063b0:	1b64      	subs	r4, r4, r5
 80063b2:	10a4      	asrs	r4, r4, #2
 80063b4:	42a6      	cmp	r6, r4
 80063b6:	d109      	bne.n	80063cc <__libc_init_array+0x24>
 80063b8:	f001 f8dc 	bl	8007574 <_init>
 80063bc:	2600      	movs	r6, #0
 80063be:	4d0a      	ldr	r5, [pc, #40]	; (80063e8 <__libc_init_array+0x40>)
 80063c0:	4c0a      	ldr	r4, [pc, #40]	; (80063ec <__libc_init_array+0x44>)
 80063c2:	1b64      	subs	r4, r4, r5
 80063c4:	10a4      	asrs	r4, r4, #2
 80063c6:	42a6      	cmp	r6, r4
 80063c8:	d105      	bne.n	80063d6 <__libc_init_array+0x2e>
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d0:	4798      	blx	r3
 80063d2:	3601      	adds	r6, #1
 80063d4:	e7ee      	b.n	80063b4 <__libc_init_array+0xc>
 80063d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063da:	4798      	blx	r3
 80063dc:	3601      	adds	r6, #1
 80063de:	e7f2      	b.n	80063c6 <__libc_init_array+0x1e>
 80063e0:	080086b4 	.word	0x080086b4
 80063e4:	080086b4 	.word	0x080086b4
 80063e8:	080086b4 	.word	0x080086b4
 80063ec:	080086b8 	.word	0x080086b8

080063f0 <memset>:
 80063f0:	4603      	mov	r3, r0
 80063f2:	4402      	add	r2, r0
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d100      	bne.n	80063fa <memset+0xa>
 80063f8:	4770      	bx	lr
 80063fa:	f803 1b01 	strb.w	r1, [r3], #1
 80063fe:	e7f9      	b.n	80063f4 <memset+0x4>

08006400 <iprintf>:
 8006400:	b40f      	push	{r0, r1, r2, r3}
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <iprintf+0x2c>)
 8006404:	b513      	push	{r0, r1, r4, lr}
 8006406:	681c      	ldr	r4, [r3, #0]
 8006408:	b124      	cbz	r4, 8006414 <iprintf+0x14>
 800640a:	69a3      	ldr	r3, [r4, #24]
 800640c:	b913      	cbnz	r3, 8006414 <iprintf+0x14>
 800640e:	4620      	mov	r0, r4
 8006410:	f000 fb3a 	bl	8006a88 <__sinit>
 8006414:	ab05      	add	r3, sp, #20
 8006416:	4620      	mov	r0, r4
 8006418:	9a04      	ldr	r2, [sp, #16]
 800641a:	68a1      	ldr	r1, [r4, #8]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	f000 fd0d 	bl	8006e3c <_vfiprintf_r>
 8006422:	b002      	add	sp, #8
 8006424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006428:	b004      	add	sp, #16
 800642a:	4770      	bx	lr
 800642c:	20000014 	.word	0x20000014

08006430 <_puts_r>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	460e      	mov	r6, r1
 8006434:	4605      	mov	r5, r0
 8006436:	b118      	cbz	r0, 8006440 <_puts_r+0x10>
 8006438:	6983      	ldr	r3, [r0, #24]
 800643a:	b90b      	cbnz	r3, 8006440 <_puts_r+0x10>
 800643c:	f000 fb24 	bl	8006a88 <__sinit>
 8006440:	69ab      	ldr	r3, [r5, #24]
 8006442:	68ac      	ldr	r4, [r5, #8]
 8006444:	b913      	cbnz	r3, 800644c <_puts_r+0x1c>
 8006446:	4628      	mov	r0, r5
 8006448:	f000 fb1e 	bl	8006a88 <__sinit>
 800644c:	4b2c      	ldr	r3, [pc, #176]	; (8006500 <_puts_r+0xd0>)
 800644e:	429c      	cmp	r4, r3
 8006450:	d120      	bne.n	8006494 <_puts_r+0x64>
 8006452:	686c      	ldr	r4, [r5, #4]
 8006454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006456:	07db      	lsls	r3, r3, #31
 8006458:	d405      	bmi.n	8006466 <_puts_r+0x36>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	0598      	lsls	r0, r3, #22
 800645e:	d402      	bmi.n	8006466 <_puts_r+0x36>
 8006460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006462:	f000 fbaf 	bl	8006bc4 <__retarget_lock_acquire_recursive>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	0719      	lsls	r1, r3, #28
 800646a:	d51d      	bpl.n	80064a8 <_puts_r+0x78>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	b1db      	cbz	r3, 80064a8 <_puts_r+0x78>
 8006470:	3e01      	subs	r6, #1
 8006472:	68a3      	ldr	r3, [r4, #8]
 8006474:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006478:	3b01      	subs	r3, #1
 800647a:	60a3      	str	r3, [r4, #8]
 800647c:	bb39      	cbnz	r1, 80064ce <_puts_r+0x9e>
 800647e:	2b00      	cmp	r3, #0
 8006480:	da38      	bge.n	80064f4 <_puts_r+0xc4>
 8006482:	4622      	mov	r2, r4
 8006484:	210a      	movs	r1, #10
 8006486:	4628      	mov	r0, r5
 8006488:	f000 f924 	bl	80066d4 <__swbuf_r>
 800648c:	3001      	adds	r0, #1
 800648e:	d011      	beq.n	80064b4 <_puts_r+0x84>
 8006490:	250a      	movs	r5, #10
 8006492:	e011      	b.n	80064b8 <_puts_r+0x88>
 8006494:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <_puts_r+0xd4>)
 8006496:	429c      	cmp	r4, r3
 8006498:	d101      	bne.n	800649e <_puts_r+0x6e>
 800649a:	68ac      	ldr	r4, [r5, #8]
 800649c:	e7da      	b.n	8006454 <_puts_r+0x24>
 800649e:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <_puts_r+0xd8>)
 80064a0:	429c      	cmp	r4, r3
 80064a2:	bf08      	it	eq
 80064a4:	68ec      	ldreq	r4, [r5, #12]
 80064a6:	e7d5      	b.n	8006454 <_puts_r+0x24>
 80064a8:	4621      	mov	r1, r4
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 f964 	bl	8006778 <__swsetup_r>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d0dd      	beq.n	8006470 <_puts_r+0x40>
 80064b4:	f04f 35ff 	mov.w	r5, #4294967295
 80064b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064ba:	07da      	lsls	r2, r3, #31
 80064bc:	d405      	bmi.n	80064ca <_puts_r+0x9a>
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	059b      	lsls	r3, r3, #22
 80064c2:	d402      	bmi.n	80064ca <_puts_r+0x9a>
 80064c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064c6:	f000 fb7e 	bl	8006bc6 <__retarget_lock_release_recursive>
 80064ca:	4628      	mov	r0, r5
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da04      	bge.n	80064dc <_puts_r+0xac>
 80064d2:	69a2      	ldr	r2, [r4, #24]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	dc06      	bgt.n	80064e6 <_puts_r+0xb6>
 80064d8:	290a      	cmp	r1, #10
 80064da:	d004      	beq.n	80064e6 <_puts_r+0xb6>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	6022      	str	r2, [r4, #0]
 80064e2:	7019      	strb	r1, [r3, #0]
 80064e4:	e7c5      	b.n	8006472 <_puts_r+0x42>
 80064e6:	4622      	mov	r2, r4
 80064e8:	4628      	mov	r0, r5
 80064ea:	f000 f8f3 	bl	80066d4 <__swbuf_r>
 80064ee:	3001      	adds	r0, #1
 80064f0:	d1bf      	bne.n	8006472 <_puts_r+0x42>
 80064f2:	e7df      	b.n	80064b4 <_puts_r+0x84>
 80064f4:	250a      	movs	r5, #10
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	6022      	str	r2, [r4, #0]
 80064fc:	701d      	strb	r5, [r3, #0]
 80064fe:	e7db      	b.n	80064b8 <_puts_r+0x88>
 8006500:	08008640 	.word	0x08008640
 8006504:	08008660 	.word	0x08008660
 8006508:	08008620 	.word	0x08008620

0800650c <puts>:
 800650c:	4b02      	ldr	r3, [pc, #8]	; (8006518 <puts+0xc>)
 800650e:	4601      	mov	r1, r0
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	f7ff bf8d 	b.w	8006430 <_puts_r>
 8006516:	bf00      	nop
 8006518:	20000014 	.word	0x20000014

0800651c <setvbuf>:
 800651c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006520:	461d      	mov	r5, r3
 8006522:	4b5d      	ldr	r3, [pc, #372]	; (8006698 <setvbuf+0x17c>)
 8006524:	4604      	mov	r4, r0
 8006526:	681f      	ldr	r7, [r3, #0]
 8006528:	460e      	mov	r6, r1
 800652a:	4690      	mov	r8, r2
 800652c:	b127      	cbz	r7, 8006538 <setvbuf+0x1c>
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	b913      	cbnz	r3, 8006538 <setvbuf+0x1c>
 8006532:	4638      	mov	r0, r7
 8006534:	f000 faa8 	bl	8006a88 <__sinit>
 8006538:	4b58      	ldr	r3, [pc, #352]	; (800669c <setvbuf+0x180>)
 800653a:	429c      	cmp	r4, r3
 800653c:	d167      	bne.n	800660e <setvbuf+0xf2>
 800653e:	687c      	ldr	r4, [r7, #4]
 8006540:	f1b8 0f02 	cmp.w	r8, #2
 8006544:	d006      	beq.n	8006554 <setvbuf+0x38>
 8006546:	f1b8 0f01 	cmp.w	r8, #1
 800654a:	f200 809f 	bhi.w	800668c <setvbuf+0x170>
 800654e:	2d00      	cmp	r5, #0
 8006550:	f2c0 809c 	blt.w	800668c <setvbuf+0x170>
 8006554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006556:	07db      	lsls	r3, r3, #31
 8006558:	d405      	bmi.n	8006566 <setvbuf+0x4a>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	0598      	lsls	r0, r3, #22
 800655e:	d402      	bmi.n	8006566 <setvbuf+0x4a>
 8006560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006562:	f000 fb2f 	bl	8006bc4 <__retarget_lock_acquire_recursive>
 8006566:	4621      	mov	r1, r4
 8006568:	4638      	mov	r0, r7
 800656a:	f000 f9f9 	bl	8006960 <_fflush_r>
 800656e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006570:	b141      	cbz	r1, 8006584 <setvbuf+0x68>
 8006572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006576:	4299      	cmp	r1, r3
 8006578:	d002      	beq.n	8006580 <setvbuf+0x64>
 800657a:	4638      	mov	r0, r7
 800657c:	f000 fb90 	bl	8006ca0 <_free_r>
 8006580:	2300      	movs	r3, #0
 8006582:	6363      	str	r3, [r4, #52]	; 0x34
 8006584:	2300      	movs	r3, #0
 8006586:	61a3      	str	r3, [r4, #24]
 8006588:	6063      	str	r3, [r4, #4]
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	0619      	lsls	r1, r3, #24
 800658e:	d503      	bpl.n	8006598 <setvbuf+0x7c>
 8006590:	4638      	mov	r0, r7
 8006592:	6921      	ldr	r1, [r4, #16]
 8006594:	f000 fb84 	bl	8006ca0 <_free_r>
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	f1b8 0f02 	cmp.w	r8, #2
 800659e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	d06c      	beq.n	8006684 <setvbuf+0x168>
 80065aa:	ab01      	add	r3, sp, #4
 80065ac:	466a      	mov	r2, sp
 80065ae:	4621      	mov	r1, r4
 80065b0:	4638      	mov	r0, r7
 80065b2:	f000 fb09 	bl	8006bc8 <__swhatbuf_r>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	4318      	orrs	r0, r3
 80065ba:	81a0      	strh	r0, [r4, #12]
 80065bc:	2d00      	cmp	r5, #0
 80065be:	d130      	bne.n	8006622 <setvbuf+0x106>
 80065c0:	9d00      	ldr	r5, [sp, #0]
 80065c2:	4628      	mov	r0, r5
 80065c4:	f000 fb64 	bl	8006c90 <malloc>
 80065c8:	4606      	mov	r6, r0
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d155      	bne.n	800667a <setvbuf+0x15e>
 80065ce:	f8dd 9000 	ldr.w	r9, [sp]
 80065d2:	45a9      	cmp	r9, r5
 80065d4:	d14a      	bne.n	800666c <setvbuf+0x150>
 80065d6:	f04f 35ff 	mov.w	r5, #4294967295
 80065da:	2200      	movs	r2, #0
 80065dc:	60a2      	str	r2, [r4, #8]
 80065de:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80065e2:	6022      	str	r2, [r4, #0]
 80065e4:	6122      	str	r2, [r4, #16]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ec:	6162      	str	r2, [r4, #20]
 80065ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065f0:	f043 0302 	orr.w	r3, r3, #2
 80065f4:	07d2      	lsls	r2, r2, #31
 80065f6:	81a3      	strh	r3, [r4, #12]
 80065f8:	d405      	bmi.n	8006606 <setvbuf+0xea>
 80065fa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80065fe:	d102      	bne.n	8006606 <setvbuf+0xea>
 8006600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006602:	f000 fae0 	bl	8006bc6 <__retarget_lock_release_recursive>
 8006606:	4628      	mov	r0, r5
 8006608:	b003      	add	sp, #12
 800660a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800660e:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <setvbuf+0x184>)
 8006610:	429c      	cmp	r4, r3
 8006612:	d101      	bne.n	8006618 <setvbuf+0xfc>
 8006614:	68bc      	ldr	r4, [r7, #8]
 8006616:	e793      	b.n	8006540 <setvbuf+0x24>
 8006618:	4b22      	ldr	r3, [pc, #136]	; (80066a4 <setvbuf+0x188>)
 800661a:	429c      	cmp	r4, r3
 800661c:	bf08      	it	eq
 800661e:	68fc      	ldreq	r4, [r7, #12]
 8006620:	e78e      	b.n	8006540 <setvbuf+0x24>
 8006622:	2e00      	cmp	r6, #0
 8006624:	d0cd      	beq.n	80065c2 <setvbuf+0xa6>
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	b913      	cbnz	r3, 8006630 <setvbuf+0x114>
 800662a:	4638      	mov	r0, r7
 800662c:	f000 fa2c 	bl	8006a88 <__sinit>
 8006630:	f1b8 0f01 	cmp.w	r8, #1
 8006634:	bf08      	it	eq
 8006636:	89a3      	ldrheq	r3, [r4, #12]
 8006638:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800663c:	bf04      	itt	eq
 800663e:	f043 0301 	orreq.w	r3, r3, #1
 8006642:	81a3      	strheq	r3, [r4, #12]
 8006644:	89a2      	ldrh	r2, [r4, #12]
 8006646:	6026      	str	r6, [r4, #0]
 8006648:	f012 0308 	ands.w	r3, r2, #8
 800664c:	d01c      	beq.n	8006688 <setvbuf+0x16c>
 800664e:	07d3      	lsls	r3, r2, #31
 8006650:	bf41      	itttt	mi
 8006652:	2300      	movmi	r3, #0
 8006654:	426d      	negmi	r5, r5
 8006656:	60a3      	strmi	r3, [r4, #8]
 8006658:	61a5      	strmi	r5, [r4, #24]
 800665a:	bf58      	it	pl
 800665c:	60a5      	strpl	r5, [r4, #8]
 800665e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006660:	f015 0501 	ands.w	r5, r5, #1
 8006664:	d115      	bne.n	8006692 <setvbuf+0x176>
 8006666:	f412 7f00 	tst.w	r2, #512	; 0x200
 800666a:	e7c8      	b.n	80065fe <setvbuf+0xe2>
 800666c:	4648      	mov	r0, r9
 800666e:	f000 fb0f 	bl	8006c90 <malloc>
 8006672:	4606      	mov	r6, r0
 8006674:	2800      	cmp	r0, #0
 8006676:	d0ae      	beq.n	80065d6 <setvbuf+0xba>
 8006678:	464d      	mov	r5, r9
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	e7d0      	b.n	8006626 <setvbuf+0x10a>
 8006684:	2500      	movs	r5, #0
 8006686:	e7a8      	b.n	80065da <setvbuf+0xbe>
 8006688:	60a3      	str	r3, [r4, #8]
 800668a:	e7e8      	b.n	800665e <setvbuf+0x142>
 800668c:	f04f 35ff 	mov.w	r5, #4294967295
 8006690:	e7b9      	b.n	8006606 <setvbuf+0xea>
 8006692:	2500      	movs	r5, #0
 8006694:	e7b7      	b.n	8006606 <setvbuf+0xea>
 8006696:	bf00      	nop
 8006698:	20000014 	.word	0x20000014
 800669c:	08008640 	.word	0x08008640
 80066a0:	08008660 	.word	0x08008660
 80066a4:	08008620 	.word	0x08008620

080066a8 <viprintf>:
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <viprintf+0x28>)
 80066aa:	b570      	push	{r4, r5, r6, lr}
 80066ac:	681c      	ldr	r4, [r3, #0]
 80066ae:	4605      	mov	r5, r0
 80066b0:	460e      	mov	r6, r1
 80066b2:	b124      	cbz	r4, 80066be <viprintf+0x16>
 80066b4:	69a3      	ldr	r3, [r4, #24]
 80066b6:	b913      	cbnz	r3, 80066be <viprintf+0x16>
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 f9e5 	bl	8006a88 <__sinit>
 80066be:	4633      	mov	r3, r6
 80066c0:	462a      	mov	r2, r5
 80066c2:	4620      	mov	r0, r4
 80066c4:	68a1      	ldr	r1, [r4, #8]
 80066c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066ca:	f000 bbb7 	b.w	8006e3c <_vfiprintf_r>
 80066ce:	bf00      	nop
 80066d0:	20000014 	.word	0x20000014

080066d4 <__swbuf_r>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	460e      	mov	r6, r1
 80066d8:	4614      	mov	r4, r2
 80066da:	4605      	mov	r5, r0
 80066dc:	b118      	cbz	r0, 80066e6 <__swbuf_r+0x12>
 80066de:	6983      	ldr	r3, [r0, #24]
 80066e0:	b90b      	cbnz	r3, 80066e6 <__swbuf_r+0x12>
 80066e2:	f000 f9d1 	bl	8006a88 <__sinit>
 80066e6:	4b21      	ldr	r3, [pc, #132]	; (800676c <__swbuf_r+0x98>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	d12b      	bne.n	8006744 <__swbuf_r+0x70>
 80066ec:	686c      	ldr	r4, [r5, #4]
 80066ee:	69a3      	ldr	r3, [r4, #24]
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	071a      	lsls	r2, r3, #28
 80066f6:	d52f      	bpl.n	8006758 <__swbuf_r+0x84>
 80066f8:	6923      	ldr	r3, [r4, #16]
 80066fa:	b36b      	cbz	r3, 8006758 <__swbuf_r+0x84>
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	6820      	ldr	r0, [r4, #0]
 8006700:	b2f6      	uxtb	r6, r6
 8006702:	1ac0      	subs	r0, r0, r3
 8006704:	6963      	ldr	r3, [r4, #20]
 8006706:	4637      	mov	r7, r6
 8006708:	4283      	cmp	r3, r0
 800670a:	dc04      	bgt.n	8006716 <__swbuf_r+0x42>
 800670c:	4621      	mov	r1, r4
 800670e:	4628      	mov	r0, r5
 8006710:	f000 f926 	bl	8006960 <_fflush_r>
 8006714:	bb30      	cbnz	r0, 8006764 <__swbuf_r+0x90>
 8006716:	68a3      	ldr	r3, [r4, #8]
 8006718:	3001      	adds	r0, #1
 800671a:	3b01      	subs	r3, #1
 800671c:	60a3      	str	r3, [r4, #8]
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	6022      	str	r2, [r4, #0]
 8006724:	701e      	strb	r6, [r3, #0]
 8006726:	6963      	ldr	r3, [r4, #20]
 8006728:	4283      	cmp	r3, r0
 800672a:	d004      	beq.n	8006736 <__swbuf_r+0x62>
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	07db      	lsls	r3, r3, #31
 8006730:	d506      	bpl.n	8006740 <__swbuf_r+0x6c>
 8006732:	2e0a      	cmp	r6, #10
 8006734:	d104      	bne.n	8006740 <__swbuf_r+0x6c>
 8006736:	4621      	mov	r1, r4
 8006738:	4628      	mov	r0, r5
 800673a:	f000 f911 	bl	8006960 <_fflush_r>
 800673e:	b988      	cbnz	r0, 8006764 <__swbuf_r+0x90>
 8006740:	4638      	mov	r0, r7
 8006742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006744:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <__swbuf_r+0x9c>)
 8006746:	429c      	cmp	r4, r3
 8006748:	d101      	bne.n	800674e <__swbuf_r+0x7a>
 800674a:	68ac      	ldr	r4, [r5, #8]
 800674c:	e7cf      	b.n	80066ee <__swbuf_r+0x1a>
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <__swbuf_r+0xa0>)
 8006750:	429c      	cmp	r4, r3
 8006752:	bf08      	it	eq
 8006754:	68ec      	ldreq	r4, [r5, #12]
 8006756:	e7ca      	b.n	80066ee <__swbuf_r+0x1a>
 8006758:	4621      	mov	r1, r4
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f80c 	bl	8006778 <__swsetup_r>
 8006760:	2800      	cmp	r0, #0
 8006762:	d0cb      	beq.n	80066fc <__swbuf_r+0x28>
 8006764:	f04f 37ff 	mov.w	r7, #4294967295
 8006768:	e7ea      	b.n	8006740 <__swbuf_r+0x6c>
 800676a:	bf00      	nop
 800676c:	08008640 	.word	0x08008640
 8006770:	08008660 	.word	0x08008660
 8006774:	08008620 	.word	0x08008620

08006778 <__swsetup_r>:
 8006778:	4b32      	ldr	r3, [pc, #200]	; (8006844 <__swsetup_r+0xcc>)
 800677a:	b570      	push	{r4, r5, r6, lr}
 800677c:	681d      	ldr	r5, [r3, #0]
 800677e:	4606      	mov	r6, r0
 8006780:	460c      	mov	r4, r1
 8006782:	b125      	cbz	r5, 800678e <__swsetup_r+0x16>
 8006784:	69ab      	ldr	r3, [r5, #24]
 8006786:	b913      	cbnz	r3, 800678e <__swsetup_r+0x16>
 8006788:	4628      	mov	r0, r5
 800678a:	f000 f97d 	bl	8006a88 <__sinit>
 800678e:	4b2e      	ldr	r3, [pc, #184]	; (8006848 <__swsetup_r+0xd0>)
 8006790:	429c      	cmp	r4, r3
 8006792:	d10f      	bne.n	80067b4 <__swsetup_r+0x3c>
 8006794:	686c      	ldr	r4, [r5, #4]
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800679c:	0719      	lsls	r1, r3, #28
 800679e:	d42c      	bmi.n	80067fa <__swsetup_r+0x82>
 80067a0:	06dd      	lsls	r5, r3, #27
 80067a2:	d411      	bmi.n	80067c8 <__swsetup_r+0x50>
 80067a4:	2309      	movs	r3, #9
 80067a6:	6033      	str	r3, [r6, #0]
 80067a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	81a3      	strh	r3, [r4, #12]
 80067b2:	e03e      	b.n	8006832 <__swsetup_r+0xba>
 80067b4:	4b25      	ldr	r3, [pc, #148]	; (800684c <__swsetup_r+0xd4>)
 80067b6:	429c      	cmp	r4, r3
 80067b8:	d101      	bne.n	80067be <__swsetup_r+0x46>
 80067ba:	68ac      	ldr	r4, [r5, #8]
 80067bc:	e7eb      	b.n	8006796 <__swsetup_r+0x1e>
 80067be:	4b24      	ldr	r3, [pc, #144]	; (8006850 <__swsetup_r+0xd8>)
 80067c0:	429c      	cmp	r4, r3
 80067c2:	bf08      	it	eq
 80067c4:	68ec      	ldreq	r4, [r5, #12]
 80067c6:	e7e6      	b.n	8006796 <__swsetup_r+0x1e>
 80067c8:	0758      	lsls	r0, r3, #29
 80067ca:	d512      	bpl.n	80067f2 <__swsetup_r+0x7a>
 80067cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ce:	b141      	cbz	r1, 80067e2 <__swsetup_r+0x6a>
 80067d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d4:	4299      	cmp	r1, r3
 80067d6:	d002      	beq.n	80067de <__swsetup_r+0x66>
 80067d8:	4630      	mov	r0, r6
 80067da:	f000 fa61 	bl	8006ca0 <_free_r>
 80067de:	2300      	movs	r3, #0
 80067e0:	6363      	str	r3, [r4, #52]	; 0x34
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067e8:	81a3      	strh	r3, [r4, #12]
 80067ea:	2300      	movs	r3, #0
 80067ec:	6063      	str	r3, [r4, #4]
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f043 0308 	orr.w	r3, r3, #8
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	b94b      	cbnz	r3, 8006812 <__swsetup_r+0x9a>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006808:	d003      	beq.n	8006812 <__swsetup_r+0x9a>
 800680a:	4621      	mov	r1, r4
 800680c:	4630      	mov	r0, r6
 800680e:	f000 f9ff 	bl	8006c10 <__smakebuf_r>
 8006812:	89a0      	ldrh	r0, [r4, #12]
 8006814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006818:	f010 0301 	ands.w	r3, r0, #1
 800681c:	d00a      	beq.n	8006834 <__swsetup_r+0xbc>
 800681e:	2300      	movs	r3, #0
 8006820:	60a3      	str	r3, [r4, #8]
 8006822:	6963      	ldr	r3, [r4, #20]
 8006824:	425b      	negs	r3, r3
 8006826:	61a3      	str	r3, [r4, #24]
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	b943      	cbnz	r3, 800683e <__swsetup_r+0xc6>
 800682c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006830:	d1ba      	bne.n	80067a8 <__swsetup_r+0x30>
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	0781      	lsls	r1, r0, #30
 8006836:	bf58      	it	pl
 8006838:	6963      	ldrpl	r3, [r4, #20]
 800683a:	60a3      	str	r3, [r4, #8]
 800683c:	e7f4      	b.n	8006828 <__swsetup_r+0xb0>
 800683e:	2000      	movs	r0, #0
 8006840:	e7f7      	b.n	8006832 <__swsetup_r+0xba>
 8006842:	bf00      	nop
 8006844:	20000014 	.word	0x20000014
 8006848:	08008640 	.word	0x08008640
 800684c:	08008660 	.word	0x08008660
 8006850:	08008620 	.word	0x08008620

08006854 <__sflush_r>:
 8006854:	898a      	ldrh	r2, [r1, #12]
 8006856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800685a:	4605      	mov	r5, r0
 800685c:	0710      	lsls	r0, r2, #28
 800685e:	460c      	mov	r4, r1
 8006860:	d458      	bmi.n	8006914 <__sflush_r+0xc0>
 8006862:	684b      	ldr	r3, [r1, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	dc05      	bgt.n	8006874 <__sflush_r+0x20>
 8006868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	dc02      	bgt.n	8006874 <__sflush_r+0x20>
 800686e:	2000      	movs	r0, #0
 8006870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006876:	2e00      	cmp	r6, #0
 8006878:	d0f9      	beq.n	800686e <__sflush_r+0x1a>
 800687a:	2300      	movs	r3, #0
 800687c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006880:	682f      	ldr	r7, [r5, #0]
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	d032      	beq.n	80068ec <__sflush_r+0x98>
 8006886:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	075a      	lsls	r2, r3, #29
 800688c:	d505      	bpl.n	800689a <__sflush_r+0x46>
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	1ac0      	subs	r0, r0, r3
 8006892:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006894:	b10b      	cbz	r3, 800689a <__sflush_r+0x46>
 8006896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006898:	1ac0      	subs	r0, r0, r3
 800689a:	2300      	movs	r3, #0
 800689c:	4602      	mov	r2, r0
 800689e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068a0:	4628      	mov	r0, r5
 80068a2:	6a21      	ldr	r1, [r4, #32]
 80068a4:	47b0      	blx	r6
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	d106      	bne.n	80068ba <__sflush_r+0x66>
 80068ac:	6829      	ldr	r1, [r5, #0]
 80068ae:	291d      	cmp	r1, #29
 80068b0:	d82c      	bhi.n	800690c <__sflush_r+0xb8>
 80068b2:	4a2a      	ldr	r2, [pc, #168]	; (800695c <__sflush_r+0x108>)
 80068b4:	40ca      	lsrs	r2, r1
 80068b6:	07d6      	lsls	r6, r2, #31
 80068b8:	d528      	bpl.n	800690c <__sflush_r+0xb8>
 80068ba:	2200      	movs	r2, #0
 80068bc:	6062      	str	r2, [r4, #4]
 80068be:	6922      	ldr	r2, [r4, #16]
 80068c0:	04d9      	lsls	r1, r3, #19
 80068c2:	6022      	str	r2, [r4, #0]
 80068c4:	d504      	bpl.n	80068d0 <__sflush_r+0x7c>
 80068c6:	1c42      	adds	r2, r0, #1
 80068c8:	d101      	bne.n	80068ce <__sflush_r+0x7a>
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	b903      	cbnz	r3, 80068d0 <__sflush_r+0x7c>
 80068ce:	6560      	str	r0, [r4, #84]	; 0x54
 80068d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068d2:	602f      	str	r7, [r5, #0]
 80068d4:	2900      	cmp	r1, #0
 80068d6:	d0ca      	beq.n	800686e <__sflush_r+0x1a>
 80068d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068dc:	4299      	cmp	r1, r3
 80068de:	d002      	beq.n	80068e6 <__sflush_r+0x92>
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 f9dd 	bl	8006ca0 <_free_r>
 80068e6:	2000      	movs	r0, #0
 80068e8:	6360      	str	r0, [r4, #52]	; 0x34
 80068ea:	e7c1      	b.n	8006870 <__sflush_r+0x1c>
 80068ec:	6a21      	ldr	r1, [r4, #32]
 80068ee:	2301      	movs	r3, #1
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b0      	blx	r6
 80068f4:	1c41      	adds	r1, r0, #1
 80068f6:	d1c7      	bne.n	8006888 <__sflush_r+0x34>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0c4      	beq.n	8006888 <__sflush_r+0x34>
 80068fe:	2b1d      	cmp	r3, #29
 8006900:	d001      	beq.n	8006906 <__sflush_r+0xb2>
 8006902:	2b16      	cmp	r3, #22
 8006904:	d101      	bne.n	800690a <__sflush_r+0xb6>
 8006906:	602f      	str	r7, [r5, #0]
 8006908:	e7b1      	b.n	800686e <__sflush_r+0x1a>
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	e7ad      	b.n	8006870 <__sflush_r+0x1c>
 8006914:	690f      	ldr	r7, [r1, #16]
 8006916:	2f00      	cmp	r7, #0
 8006918:	d0a9      	beq.n	800686e <__sflush_r+0x1a>
 800691a:	0793      	lsls	r3, r2, #30
 800691c:	bf18      	it	ne
 800691e:	2300      	movne	r3, #0
 8006920:	680e      	ldr	r6, [r1, #0]
 8006922:	bf08      	it	eq
 8006924:	694b      	ldreq	r3, [r1, #20]
 8006926:	eba6 0807 	sub.w	r8, r6, r7
 800692a:	600f      	str	r7, [r1, #0]
 800692c:	608b      	str	r3, [r1, #8]
 800692e:	f1b8 0f00 	cmp.w	r8, #0
 8006932:	dd9c      	ble.n	800686e <__sflush_r+0x1a>
 8006934:	4643      	mov	r3, r8
 8006936:	463a      	mov	r2, r7
 8006938:	4628      	mov	r0, r5
 800693a:	6a21      	ldr	r1, [r4, #32]
 800693c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800693e:	47b0      	blx	r6
 8006940:	2800      	cmp	r0, #0
 8006942:	dc06      	bgt.n	8006952 <__sflush_r+0xfe>
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	f04f 30ff 	mov.w	r0, #4294967295
 800694a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800694e:	81a3      	strh	r3, [r4, #12]
 8006950:	e78e      	b.n	8006870 <__sflush_r+0x1c>
 8006952:	4407      	add	r7, r0
 8006954:	eba8 0800 	sub.w	r8, r8, r0
 8006958:	e7e9      	b.n	800692e <__sflush_r+0xda>
 800695a:	bf00      	nop
 800695c:	20400001 	.word	0x20400001

08006960 <_fflush_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	690b      	ldr	r3, [r1, #16]
 8006964:	4605      	mov	r5, r0
 8006966:	460c      	mov	r4, r1
 8006968:	b913      	cbnz	r3, 8006970 <_fflush_r+0x10>
 800696a:	2500      	movs	r5, #0
 800696c:	4628      	mov	r0, r5
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	b118      	cbz	r0, 800697a <_fflush_r+0x1a>
 8006972:	6983      	ldr	r3, [r0, #24]
 8006974:	b90b      	cbnz	r3, 800697a <_fflush_r+0x1a>
 8006976:	f000 f887 	bl	8006a88 <__sinit>
 800697a:	4b14      	ldr	r3, [pc, #80]	; (80069cc <_fflush_r+0x6c>)
 800697c:	429c      	cmp	r4, r3
 800697e:	d11b      	bne.n	80069b8 <_fflush_r+0x58>
 8006980:	686c      	ldr	r4, [r5, #4]
 8006982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0ef      	beq.n	800696a <_fflush_r+0xa>
 800698a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800698c:	07d0      	lsls	r0, r2, #31
 800698e:	d404      	bmi.n	800699a <_fflush_r+0x3a>
 8006990:	0599      	lsls	r1, r3, #22
 8006992:	d402      	bmi.n	800699a <_fflush_r+0x3a>
 8006994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006996:	f000 f915 	bl	8006bc4 <__retarget_lock_acquire_recursive>
 800699a:	4628      	mov	r0, r5
 800699c:	4621      	mov	r1, r4
 800699e:	f7ff ff59 	bl	8006854 <__sflush_r>
 80069a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069a4:	4605      	mov	r5, r0
 80069a6:	07da      	lsls	r2, r3, #31
 80069a8:	d4e0      	bmi.n	800696c <_fflush_r+0xc>
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	059b      	lsls	r3, r3, #22
 80069ae:	d4dd      	bmi.n	800696c <_fflush_r+0xc>
 80069b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069b2:	f000 f908 	bl	8006bc6 <__retarget_lock_release_recursive>
 80069b6:	e7d9      	b.n	800696c <_fflush_r+0xc>
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <_fflush_r+0x70>)
 80069ba:	429c      	cmp	r4, r3
 80069bc:	d101      	bne.n	80069c2 <_fflush_r+0x62>
 80069be:	68ac      	ldr	r4, [r5, #8]
 80069c0:	e7df      	b.n	8006982 <_fflush_r+0x22>
 80069c2:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <_fflush_r+0x74>)
 80069c4:	429c      	cmp	r4, r3
 80069c6:	bf08      	it	eq
 80069c8:	68ec      	ldreq	r4, [r5, #12]
 80069ca:	e7da      	b.n	8006982 <_fflush_r+0x22>
 80069cc:	08008640 	.word	0x08008640
 80069d0:	08008660 	.word	0x08008660
 80069d4:	08008620 	.word	0x08008620

080069d8 <std>:
 80069d8:	2300      	movs	r3, #0
 80069da:	b510      	push	{r4, lr}
 80069dc:	4604      	mov	r4, r0
 80069de:	e9c0 3300 	strd	r3, r3, [r0]
 80069e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069e6:	6083      	str	r3, [r0, #8]
 80069e8:	8181      	strh	r1, [r0, #12]
 80069ea:	6643      	str	r3, [r0, #100]	; 0x64
 80069ec:	81c2      	strh	r2, [r0, #14]
 80069ee:	6183      	str	r3, [r0, #24]
 80069f0:	4619      	mov	r1, r3
 80069f2:	2208      	movs	r2, #8
 80069f4:	305c      	adds	r0, #92	; 0x5c
 80069f6:	f7ff fcfb 	bl	80063f0 <memset>
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <std+0x38>)
 80069fc:	6224      	str	r4, [r4, #32]
 80069fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <std+0x3c>)
 8006a02:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a04:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <std+0x40>)
 8006a06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a08:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <std+0x44>)
 8006a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006a0c:	bd10      	pop	{r4, pc}
 8006a0e:	bf00      	nop
 8006a10:	080073e9 	.word	0x080073e9
 8006a14:	0800740b 	.word	0x0800740b
 8006a18:	08007443 	.word	0x08007443
 8006a1c:	08007467 	.word	0x08007467

08006a20 <_cleanup_r>:
 8006a20:	4901      	ldr	r1, [pc, #4]	; (8006a28 <_cleanup_r+0x8>)
 8006a22:	f000 b8af 	b.w	8006b84 <_fwalk_reent>
 8006a26:	bf00      	nop
 8006a28:	08006961 	.word	0x08006961

08006a2c <__sfmoreglue>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	2568      	movs	r5, #104	; 0x68
 8006a30:	1e4a      	subs	r2, r1, #1
 8006a32:	4355      	muls	r5, r2
 8006a34:	460e      	mov	r6, r1
 8006a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a3a:	f000 f97d 	bl	8006d38 <_malloc_r>
 8006a3e:	4604      	mov	r4, r0
 8006a40:	b140      	cbz	r0, 8006a54 <__sfmoreglue+0x28>
 8006a42:	2100      	movs	r1, #0
 8006a44:	e9c0 1600 	strd	r1, r6, [r0]
 8006a48:	300c      	adds	r0, #12
 8006a4a:	60a0      	str	r0, [r4, #8]
 8006a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a50:	f7ff fcce 	bl	80063f0 <memset>
 8006a54:	4620      	mov	r0, r4
 8006a56:	bd70      	pop	{r4, r5, r6, pc}

08006a58 <__sfp_lock_acquire>:
 8006a58:	4801      	ldr	r0, [pc, #4]	; (8006a60 <__sfp_lock_acquire+0x8>)
 8006a5a:	f000 b8b3 	b.w	8006bc4 <__retarget_lock_acquire_recursive>
 8006a5e:	bf00      	nop
 8006a60:	200001fc 	.word	0x200001fc

08006a64 <__sfp_lock_release>:
 8006a64:	4801      	ldr	r0, [pc, #4]	; (8006a6c <__sfp_lock_release+0x8>)
 8006a66:	f000 b8ae 	b.w	8006bc6 <__retarget_lock_release_recursive>
 8006a6a:	bf00      	nop
 8006a6c:	200001fc 	.word	0x200001fc

08006a70 <__sinit_lock_acquire>:
 8006a70:	4801      	ldr	r0, [pc, #4]	; (8006a78 <__sinit_lock_acquire+0x8>)
 8006a72:	f000 b8a7 	b.w	8006bc4 <__retarget_lock_acquire_recursive>
 8006a76:	bf00      	nop
 8006a78:	200001f7 	.word	0x200001f7

08006a7c <__sinit_lock_release>:
 8006a7c:	4801      	ldr	r0, [pc, #4]	; (8006a84 <__sinit_lock_release+0x8>)
 8006a7e:	f000 b8a2 	b.w	8006bc6 <__retarget_lock_release_recursive>
 8006a82:	bf00      	nop
 8006a84:	200001f7 	.word	0x200001f7

08006a88 <__sinit>:
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	f7ff fff0 	bl	8006a70 <__sinit_lock_acquire>
 8006a90:	69a3      	ldr	r3, [r4, #24]
 8006a92:	b11b      	cbz	r3, 8006a9c <__sinit+0x14>
 8006a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a98:	f7ff bff0 	b.w	8006a7c <__sinit_lock_release>
 8006a9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006aa0:	6523      	str	r3, [r4, #80]	; 0x50
 8006aa2:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <__sinit+0x68>)
 8006aa4:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <__sinit+0x6c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	bf08      	it	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	bf08      	it	eq
 8006ab4:	61a3      	streq	r3, [r4, #24]
 8006ab6:	f000 f81f 	bl	8006af8 <__sfp>
 8006aba:	6060      	str	r0, [r4, #4]
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 f81b 	bl	8006af8 <__sfp>
 8006ac2:	60a0      	str	r0, [r4, #8]
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 f817 	bl	8006af8 <__sfp>
 8006aca:	2200      	movs	r2, #0
 8006acc:	2104      	movs	r1, #4
 8006ace:	60e0      	str	r0, [r4, #12]
 8006ad0:	6860      	ldr	r0, [r4, #4]
 8006ad2:	f7ff ff81 	bl	80069d8 <std>
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	2109      	movs	r1, #9
 8006ada:	68a0      	ldr	r0, [r4, #8]
 8006adc:	f7ff ff7c 	bl	80069d8 <std>
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	2112      	movs	r1, #18
 8006ae4:	68e0      	ldr	r0, [r4, #12]
 8006ae6:	f7ff ff77 	bl	80069d8 <std>
 8006aea:	2301      	movs	r3, #1
 8006aec:	61a3      	str	r3, [r4, #24]
 8006aee:	e7d1      	b.n	8006a94 <__sinit+0xc>
 8006af0:	0800861c 	.word	0x0800861c
 8006af4:	08006a21 	.word	0x08006a21

08006af8 <__sfp>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	4607      	mov	r7, r0
 8006afc:	f7ff ffac 	bl	8006a58 <__sfp_lock_acquire>
 8006b00:	4b1e      	ldr	r3, [pc, #120]	; (8006b7c <__sfp+0x84>)
 8006b02:	681e      	ldr	r6, [r3, #0]
 8006b04:	69b3      	ldr	r3, [r6, #24]
 8006b06:	b913      	cbnz	r3, 8006b0e <__sfp+0x16>
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7ff ffbd 	bl	8006a88 <__sinit>
 8006b0e:	3648      	adds	r6, #72	; 0x48
 8006b10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	d503      	bpl.n	8006b20 <__sfp+0x28>
 8006b18:	6833      	ldr	r3, [r6, #0]
 8006b1a:	b30b      	cbz	r3, 8006b60 <__sfp+0x68>
 8006b1c:	6836      	ldr	r6, [r6, #0]
 8006b1e:	e7f7      	b.n	8006b10 <__sfp+0x18>
 8006b20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b24:	b9d5      	cbnz	r5, 8006b5c <__sfp+0x64>
 8006b26:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <__sfp+0x88>)
 8006b28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b2c:	60e3      	str	r3, [r4, #12]
 8006b2e:	6665      	str	r5, [r4, #100]	; 0x64
 8006b30:	f000 f847 	bl	8006bc2 <__retarget_lock_init_recursive>
 8006b34:	f7ff ff96 	bl	8006a64 <__sfp_lock_release>
 8006b38:	2208      	movs	r2, #8
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b44:	6025      	str	r5, [r4, #0]
 8006b46:	61a5      	str	r5, [r4, #24]
 8006b48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b4c:	f7ff fc50 	bl	80063f0 <memset>
 8006b50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b58:	4620      	mov	r0, r4
 8006b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b5c:	3468      	adds	r4, #104	; 0x68
 8006b5e:	e7d9      	b.n	8006b14 <__sfp+0x1c>
 8006b60:	2104      	movs	r1, #4
 8006b62:	4638      	mov	r0, r7
 8006b64:	f7ff ff62 	bl	8006a2c <__sfmoreglue>
 8006b68:	4604      	mov	r4, r0
 8006b6a:	6030      	str	r0, [r6, #0]
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d1d5      	bne.n	8006b1c <__sfp+0x24>
 8006b70:	f7ff ff78 	bl	8006a64 <__sfp_lock_release>
 8006b74:	230c      	movs	r3, #12
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	e7ee      	b.n	8006b58 <__sfp+0x60>
 8006b7a:	bf00      	nop
 8006b7c:	0800861c 	.word	0x0800861c
 8006b80:	ffff0001 	.word	0xffff0001

08006b84 <_fwalk_reent>:
 8006b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b88:	4606      	mov	r6, r0
 8006b8a:	4688      	mov	r8, r1
 8006b8c:	2700      	movs	r7, #0
 8006b8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b96:	f1b9 0901 	subs.w	r9, r9, #1
 8006b9a:	d505      	bpl.n	8006ba8 <_fwalk_reent+0x24>
 8006b9c:	6824      	ldr	r4, [r4, #0]
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	d1f7      	bne.n	8006b92 <_fwalk_reent+0xe>
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba8:	89ab      	ldrh	r3, [r5, #12]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d907      	bls.n	8006bbe <_fwalk_reent+0x3a>
 8006bae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	d003      	beq.n	8006bbe <_fwalk_reent+0x3a>
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4630      	mov	r0, r6
 8006bba:	47c0      	blx	r8
 8006bbc:	4307      	orrs	r7, r0
 8006bbe:	3568      	adds	r5, #104	; 0x68
 8006bc0:	e7e9      	b.n	8006b96 <_fwalk_reent+0x12>

08006bc2 <__retarget_lock_init_recursive>:
 8006bc2:	4770      	bx	lr

08006bc4 <__retarget_lock_acquire_recursive>:
 8006bc4:	4770      	bx	lr

08006bc6 <__retarget_lock_release_recursive>:
 8006bc6:	4770      	bx	lr

08006bc8 <__swhatbuf_r>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	460e      	mov	r6, r1
 8006bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	461d      	mov	r5, r3
 8006bd6:	b096      	sub	sp, #88	; 0x58
 8006bd8:	da07      	bge.n	8006bea <__swhatbuf_r+0x22>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	89b3      	ldrh	r3, [r6, #12]
 8006be0:	061a      	lsls	r2, r3, #24
 8006be2:	d410      	bmi.n	8006c06 <__swhatbuf_r+0x3e>
 8006be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be8:	e00e      	b.n	8006c08 <__swhatbuf_r+0x40>
 8006bea:	466a      	mov	r2, sp
 8006bec:	f000 fc62 	bl	80074b4 <_fstat_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	dbf2      	blt.n	8006bda <__swhatbuf_r+0x12>
 8006bf4:	9a01      	ldr	r2, [sp, #4]
 8006bf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bfe:	425a      	negs	r2, r3
 8006c00:	415a      	adcs	r2, r3
 8006c02:	602a      	str	r2, [r5, #0]
 8006c04:	e7ee      	b.n	8006be4 <__swhatbuf_r+0x1c>
 8006c06:	2340      	movs	r3, #64	; 0x40
 8006c08:	2000      	movs	r0, #0
 8006c0a:	6023      	str	r3, [r4, #0]
 8006c0c:	b016      	add	sp, #88	; 0x58
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}

08006c10 <__smakebuf_r>:
 8006c10:	898b      	ldrh	r3, [r1, #12]
 8006c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c14:	079d      	lsls	r5, r3, #30
 8006c16:	4606      	mov	r6, r0
 8006c18:	460c      	mov	r4, r1
 8006c1a:	d507      	bpl.n	8006c2c <__smakebuf_r+0x1c>
 8006c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	6123      	str	r3, [r4, #16]
 8006c24:	2301      	movs	r3, #1
 8006c26:	6163      	str	r3, [r4, #20]
 8006c28:	b002      	add	sp, #8
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	466a      	mov	r2, sp
 8006c2e:	ab01      	add	r3, sp, #4
 8006c30:	f7ff ffca 	bl	8006bc8 <__swhatbuf_r>
 8006c34:	9900      	ldr	r1, [sp, #0]
 8006c36:	4605      	mov	r5, r0
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f000 f87d 	bl	8006d38 <_malloc_r>
 8006c3e:	b948      	cbnz	r0, 8006c54 <__smakebuf_r+0x44>
 8006c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c44:	059a      	lsls	r2, r3, #22
 8006c46:	d4ef      	bmi.n	8006c28 <__smakebuf_r+0x18>
 8006c48:	f023 0303 	bic.w	r3, r3, #3
 8006c4c:	f043 0302 	orr.w	r3, r3, #2
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	e7e3      	b.n	8006c1c <__smakebuf_r+0xc>
 8006c54:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <__smakebuf_r+0x7c>)
 8006c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	6020      	str	r0, [r4, #0]
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	9b00      	ldr	r3, [sp, #0]
 8006c64:	6120      	str	r0, [r4, #16]
 8006c66:	6163      	str	r3, [r4, #20]
 8006c68:	9b01      	ldr	r3, [sp, #4]
 8006c6a:	b15b      	cbz	r3, 8006c84 <__smakebuf_r+0x74>
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c72:	f000 fc31 	bl	80074d8 <_isatty_r>
 8006c76:	b128      	cbz	r0, 8006c84 <__smakebuf_r+0x74>
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	81a3      	strh	r3, [r4, #12]
 8006c84:	89a0      	ldrh	r0, [r4, #12]
 8006c86:	4305      	orrs	r5, r0
 8006c88:	81a5      	strh	r5, [r4, #12]
 8006c8a:	e7cd      	b.n	8006c28 <__smakebuf_r+0x18>
 8006c8c:	08006a21 	.word	0x08006a21

08006c90 <malloc>:
 8006c90:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <malloc+0xc>)
 8006c92:	4601      	mov	r1, r0
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	f000 b84f 	b.w	8006d38 <_malloc_r>
 8006c9a:	bf00      	nop
 8006c9c:	20000014 	.word	0x20000014

08006ca0 <_free_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	2900      	cmp	r1, #0
 8006ca6:	d043      	beq.n	8006d30 <_free_r+0x90>
 8006ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cac:	1f0c      	subs	r4, r1, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfb8      	it	lt
 8006cb2:	18e4      	addlt	r4, r4, r3
 8006cb4:	f000 fc40 	bl	8007538 <__malloc_lock>
 8006cb8:	4a1e      	ldr	r2, [pc, #120]	; (8006d34 <_free_r+0x94>)
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	b933      	cbnz	r3, 8006cce <_free_r+0x2e>
 8006cc0:	6063      	str	r3, [r4, #4]
 8006cc2:	6014      	str	r4, [r2, #0]
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cca:	f000 bc3b 	b.w	8007544 <__malloc_unlock>
 8006cce:	42a3      	cmp	r3, r4
 8006cd0:	d90a      	bls.n	8006ce8 <_free_r+0x48>
 8006cd2:	6821      	ldr	r1, [r4, #0]
 8006cd4:	1862      	adds	r2, r4, r1
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	bf01      	itttt	eq
 8006cda:	681a      	ldreq	r2, [r3, #0]
 8006cdc:	685b      	ldreq	r3, [r3, #4]
 8006cde:	1852      	addeq	r2, r2, r1
 8006ce0:	6022      	streq	r2, [r4, #0]
 8006ce2:	6063      	str	r3, [r4, #4]
 8006ce4:	6004      	str	r4, [r0, #0]
 8006ce6:	e7ed      	b.n	8006cc4 <_free_r+0x24>
 8006ce8:	461a      	mov	r2, r3
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	b10b      	cbz	r3, 8006cf2 <_free_r+0x52>
 8006cee:	42a3      	cmp	r3, r4
 8006cf0:	d9fa      	bls.n	8006ce8 <_free_r+0x48>
 8006cf2:	6811      	ldr	r1, [r2, #0]
 8006cf4:	1850      	adds	r0, r2, r1
 8006cf6:	42a0      	cmp	r0, r4
 8006cf8:	d10b      	bne.n	8006d12 <_free_r+0x72>
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	4401      	add	r1, r0
 8006cfe:	1850      	adds	r0, r2, r1
 8006d00:	4283      	cmp	r3, r0
 8006d02:	6011      	str	r1, [r2, #0]
 8006d04:	d1de      	bne.n	8006cc4 <_free_r+0x24>
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4401      	add	r1, r0
 8006d0c:	6011      	str	r1, [r2, #0]
 8006d0e:	6053      	str	r3, [r2, #4]
 8006d10:	e7d8      	b.n	8006cc4 <_free_r+0x24>
 8006d12:	d902      	bls.n	8006d1a <_free_r+0x7a>
 8006d14:	230c      	movs	r3, #12
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	e7d4      	b.n	8006cc4 <_free_r+0x24>
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	1821      	adds	r1, r4, r0
 8006d1e:	428b      	cmp	r3, r1
 8006d20:	bf01      	itttt	eq
 8006d22:	6819      	ldreq	r1, [r3, #0]
 8006d24:	685b      	ldreq	r3, [r3, #4]
 8006d26:	1809      	addeq	r1, r1, r0
 8006d28:	6021      	streq	r1, [r4, #0]
 8006d2a:	6063      	str	r3, [r4, #4]
 8006d2c:	6054      	str	r4, [r2, #4]
 8006d2e:	e7c9      	b.n	8006cc4 <_free_r+0x24>
 8006d30:	bd38      	pop	{r3, r4, r5, pc}
 8006d32:	bf00      	nop
 8006d34:	200000a0 	.word	0x200000a0

08006d38 <_malloc_r>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	1ccd      	adds	r5, r1, #3
 8006d3c:	f025 0503 	bic.w	r5, r5, #3
 8006d40:	3508      	adds	r5, #8
 8006d42:	2d0c      	cmp	r5, #12
 8006d44:	bf38      	it	cc
 8006d46:	250c      	movcc	r5, #12
 8006d48:	2d00      	cmp	r5, #0
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	db01      	blt.n	8006d52 <_malloc_r+0x1a>
 8006d4e:	42a9      	cmp	r1, r5
 8006d50:	d903      	bls.n	8006d5a <_malloc_r+0x22>
 8006d52:	230c      	movs	r3, #12
 8006d54:	6033      	str	r3, [r6, #0]
 8006d56:	2000      	movs	r0, #0
 8006d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d5a:	f000 fbed 	bl	8007538 <__malloc_lock>
 8006d5e:	4921      	ldr	r1, [pc, #132]	; (8006de4 <_malloc_r+0xac>)
 8006d60:	680a      	ldr	r2, [r1, #0]
 8006d62:	4614      	mov	r4, r2
 8006d64:	b99c      	cbnz	r4, 8006d8e <_malloc_r+0x56>
 8006d66:	4f20      	ldr	r7, [pc, #128]	; (8006de8 <_malloc_r+0xb0>)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	b923      	cbnz	r3, 8006d76 <_malloc_r+0x3e>
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 fb2a 	bl	80073c8 <_sbrk_r>
 8006d74:	6038      	str	r0, [r7, #0]
 8006d76:	4629      	mov	r1, r5
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f000 fb25 	bl	80073c8 <_sbrk_r>
 8006d7e:	1c43      	adds	r3, r0, #1
 8006d80:	d123      	bne.n	8006dca <_malloc_r+0x92>
 8006d82:	230c      	movs	r3, #12
 8006d84:	4630      	mov	r0, r6
 8006d86:	6033      	str	r3, [r6, #0]
 8006d88:	f000 fbdc 	bl	8007544 <__malloc_unlock>
 8006d8c:	e7e3      	b.n	8006d56 <_malloc_r+0x1e>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	1b5b      	subs	r3, r3, r5
 8006d92:	d417      	bmi.n	8006dc4 <_malloc_r+0x8c>
 8006d94:	2b0b      	cmp	r3, #11
 8006d96:	d903      	bls.n	8006da0 <_malloc_r+0x68>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	441c      	add	r4, r3
 8006d9c:	6025      	str	r5, [r4, #0]
 8006d9e:	e004      	b.n	8006daa <_malloc_r+0x72>
 8006da0:	6863      	ldr	r3, [r4, #4]
 8006da2:	42a2      	cmp	r2, r4
 8006da4:	bf0c      	ite	eq
 8006da6:	600b      	streq	r3, [r1, #0]
 8006da8:	6053      	strne	r3, [r2, #4]
 8006daa:	4630      	mov	r0, r6
 8006dac:	f000 fbca 	bl	8007544 <__malloc_unlock>
 8006db0:	f104 000b 	add.w	r0, r4, #11
 8006db4:	1d23      	adds	r3, r4, #4
 8006db6:	f020 0007 	bic.w	r0, r0, #7
 8006dba:	1ac2      	subs	r2, r0, r3
 8006dbc:	d0cc      	beq.n	8006d58 <_malloc_r+0x20>
 8006dbe:	1a1b      	subs	r3, r3, r0
 8006dc0:	50a3      	str	r3, [r4, r2]
 8006dc2:	e7c9      	b.n	8006d58 <_malloc_r+0x20>
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	6864      	ldr	r4, [r4, #4]
 8006dc8:	e7cc      	b.n	8006d64 <_malloc_r+0x2c>
 8006dca:	1cc4      	adds	r4, r0, #3
 8006dcc:	f024 0403 	bic.w	r4, r4, #3
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d0e3      	beq.n	8006d9c <_malloc_r+0x64>
 8006dd4:	1a21      	subs	r1, r4, r0
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f000 faf6 	bl	80073c8 <_sbrk_r>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d1dd      	bne.n	8006d9c <_malloc_r+0x64>
 8006de0:	e7cf      	b.n	8006d82 <_malloc_r+0x4a>
 8006de2:	bf00      	nop
 8006de4:	200000a0 	.word	0x200000a0
 8006de8:	200000a4 	.word	0x200000a4

08006dec <__sfputc_r>:
 8006dec:	6893      	ldr	r3, [r2, #8]
 8006dee:	b410      	push	{r4}
 8006df0:	3b01      	subs	r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	6093      	str	r3, [r2, #8]
 8006df6:	da07      	bge.n	8006e08 <__sfputc_r+0x1c>
 8006df8:	6994      	ldr	r4, [r2, #24]
 8006dfa:	42a3      	cmp	r3, r4
 8006dfc:	db01      	blt.n	8006e02 <__sfputc_r+0x16>
 8006dfe:	290a      	cmp	r1, #10
 8006e00:	d102      	bne.n	8006e08 <__sfputc_r+0x1c>
 8006e02:	bc10      	pop	{r4}
 8006e04:	f7ff bc66 	b.w	80066d4 <__swbuf_r>
 8006e08:	6813      	ldr	r3, [r2, #0]
 8006e0a:	1c58      	adds	r0, r3, #1
 8006e0c:	6010      	str	r0, [r2, #0]
 8006e0e:	7019      	strb	r1, [r3, #0]
 8006e10:	4608      	mov	r0, r1
 8006e12:	bc10      	pop	{r4}
 8006e14:	4770      	bx	lr

08006e16 <__sfputs_r>:
 8006e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e18:	4606      	mov	r6, r0
 8006e1a:	460f      	mov	r7, r1
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	18d5      	adds	r5, r2, r3
 8006e20:	42ac      	cmp	r4, r5
 8006e22:	d101      	bne.n	8006e28 <__sfputs_r+0x12>
 8006e24:	2000      	movs	r0, #0
 8006e26:	e007      	b.n	8006e38 <__sfputs_r+0x22>
 8006e28:	463a      	mov	r2, r7
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e30:	f7ff ffdc 	bl	8006dec <__sfputc_r>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d1f3      	bne.n	8006e20 <__sfputs_r+0xa>
 8006e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e3c <_vfiprintf_r>:
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	460d      	mov	r5, r1
 8006e42:	4614      	mov	r4, r2
 8006e44:	4698      	mov	r8, r3
 8006e46:	4606      	mov	r6, r0
 8006e48:	b09d      	sub	sp, #116	; 0x74
 8006e4a:	b118      	cbz	r0, 8006e54 <_vfiprintf_r+0x18>
 8006e4c:	6983      	ldr	r3, [r0, #24]
 8006e4e:	b90b      	cbnz	r3, 8006e54 <_vfiprintf_r+0x18>
 8006e50:	f7ff fe1a 	bl	8006a88 <__sinit>
 8006e54:	4b89      	ldr	r3, [pc, #548]	; (800707c <_vfiprintf_r+0x240>)
 8006e56:	429d      	cmp	r5, r3
 8006e58:	d11b      	bne.n	8006e92 <_vfiprintf_r+0x56>
 8006e5a:	6875      	ldr	r5, [r6, #4]
 8006e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e5e:	07d9      	lsls	r1, r3, #31
 8006e60:	d405      	bmi.n	8006e6e <_vfiprintf_r+0x32>
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	059a      	lsls	r2, r3, #22
 8006e66:	d402      	bmi.n	8006e6e <_vfiprintf_r+0x32>
 8006e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e6a:	f7ff feab 	bl	8006bc4 <__retarget_lock_acquire_recursive>
 8006e6e:	89ab      	ldrh	r3, [r5, #12]
 8006e70:	071b      	lsls	r3, r3, #28
 8006e72:	d501      	bpl.n	8006e78 <_vfiprintf_r+0x3c>
 8006e74:	692b      	ldr	r3, [r5, #16]
 8006e76:	b9eb      	cbnz	r3, 8006eb4 <_vfiprintf_r+0x78>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7ff fc7c 	bl	8006778 <__swsetup_r>
 8006e80:	b1c0      	cbz	r0, 8006eb4 <_vfiprintf_r+0x78>
 8006e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e84:	07dc      	lsls	r4, r3, #31
 8006e86:	d50e      	bpl.n	8006ea6 <_vfiprintf_r+0x6a>
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8c:	b01d      	add	sp, #116	; 0x74
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	4b7b      	ldr	r3, [pc, #492]	; (8007080 <_vfiprintf_r+0x244>)
 8006e94:	429d      	cmp	r5, r3
 8006e96:	d101      	bne.n	8006e9c <_vfiprintf_r+0x60>
 8006e98:	68b5      	ldr	r5, [r6, #8]
 8006e9a:	e7df      	b.n	8006e5c <_vfiprintf_r+0x20>
 8006e9c:	4b79      	ldr	r3, [pc, #484]	; (8007084 <_vfiprintf_r+0x248>)
 8006e9e:	429d      	cmp	r5, r3
 8006ea0:	bf08      	it	eq
 8006ea2:	68f5      	ldreq	r5, [r6, #12]
 8006ea4:	e7da      	b.n	8006e5c <_vfiprintf_r+0x20>
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	0598      	lsls	r0, r3, #22
 8006eaa:	d4ed      	bmi.n	8006e88 <_vfiprintf_r+0x4c>
 8006eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eae:	f7ff fe8a 	bl	8006bc6 <__retarget_lock_release_recursive>
 8006eb2:	e7e9      	b.n	8006e88 <_vfiprintf_r+0x4c>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ebe:	2330      	movs	r3, #48	; 0x30
 8006ec0:	f04f 0901 	mov.w	r9, #1
 8006ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ec8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007088 <_vfiprintf_r+0x24c>
 8006ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ed0:	4623      	mov	r3, r4
 8006ed2:	469a      	mov	sl, r3
 8006ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ed8:	b10a      	cbz	r2, 8006ede <_vfiprintf_r+0xa2>
 8006eda:	2a25      	cmp	r2, #37	; 0x25
 8006edc:	d1f9      	bne.n	8006ed2 <_vfiprintf_r+0x96>
 8006ede:	ebba 0b04 	subs.w	fp, sl, r4
 8006ee2:	d00b      	beq.n	8006efc <_vfiprintf_r+0xc0>
 8006ee4:	465b      	mov	r3, fp
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7ff ff93 	bl	8006e16 <__sfputs_r>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f000 80aa 	beq.w	800704a <_vfiprintf_r+0x20e>
 8006ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ef8:	445a      	add	r2, fp
 8006efa:	9209      	str	r2, [sp, #36]	; 0x24
 8006efc:	f89a 3000 	ldrb.w	r3, [sl]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80a2 	beq.w	800704a <_vfiprintf_r+0x20e>
 8006f06:	2300      	movs	r3, #0
 8006f08:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f10:	f10a 0a01 	add.w	sl, sl, #1
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f1e:	4654      	mov	r4, sl
 8006f20:	2205      	movs	r2, #5
 8006f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f26:	4858      	ldr	r0, [pc, #352]	; (8007088 <_vfiprintf_r+0x24c>)
 8006f28:	f000 faf8 	bl	800751c <memchr>
 8006f2c:	9a04      	ldr	r2, [sp, #16]
 8006f2e:	b9d8      	cbnz	r0, 8006f68 <_vfiprintf_r+0x12c>
 8006f30:	06d1      	lsls	r1, r2, #27
 8006f32:	bf44      	itt	mi
 8006f34:	2320      	movmi	r3, #32
 8006f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f3a:	0713      	lsls	r3, r2, #28
 8006f3c:	bf44      	itt	mi
 8006f3e:	232b      	movmi	r3, #43	; 0x2b
 8006f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f44:	f89a 3000 	ldrb.w	r3, [sl]
 8006f48:	2b2a      	cmp	r3, #42	; 0x2a
 8006f4a:	d015      	beq.n	8006f78 <_vfiprintf_r+0x13c>
 8006f4c:	4654      	mov	r4, sl
 8006f4e:	2000      	movs	r0, #0
 8006f50:	f04f 0c0a 	mov.w	ip, #10
 8006f54:	9a07      	ldr	r2, [sp, #28]
 8006f56:	4621      	mov	r1, r4
 8006f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f5c:	3b30      	subs	r3, #48	; 0x30
 8006f5e:	2b09      	cmp	r3, #9
 8006f60:	d94e      	bls.n	8007000 <_vfiprintf_r+0x1c4>
 8006f62:	b1b0      	cbz	r0, 8006f92 <_vfiprintf_r+0x156>
 8006f64:	9207      	str	r2, [sp, #28]
 8006f66:	e014      	b.n	8006f92 <_vfiprintf_r+0x156>
 8006f68:	eba0 0308 	sub.w	r3, r0, r8
 8006f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f70:	4313      	orrs	r3, r2
 8006f72:	46a2      	mov	sl, r4
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	e7d2      	b.n	8006f1e <_vfiprintf_r+0xe2>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	1d19      	adds	r1, r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	9103      	str	r1, [sp, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bfbb      	ittet	lt
 8006f84:	425b      	neglt	r3, r3
 8006f86:	f042 0202 	orrlt.w	r2, r2, #2
 8006f8a:	9307      	strge	r3, [sp, #28]
 8006f8c:	9307      	strlt	r3, [sp, #28]
 8006f8e:	bfb8      	it	lt
 8006f90:	9204      	strlt	r2, [sp, #16]
 8006f92:	7823      	ldrb	r3, [r4, #0]
 8006f94:	2b2e      	cmp	r3, #46	; 0x2e
 8006f96:	d10c      	bne.n	8006fb2 <_vfiprintf_r+0x176>
 8006f98:	7863      	ldrb	r3, [r4, #1]
 8006f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f9c:	d135      	bne.n	800700a <_vfiprintf_r+0x1ce>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	3402      	adds	r4, #2
 8006fa2:	1d1a      	adds	r2, r3, #4
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	9203      	str	r2, [sp, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bfb8      	it	lt
 8006fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fb0:	9305      	str	r3, [sp, #20]
 8006fb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007098 <_vfiprintf_r+0x25c>
 8006fb6:	2203      	movs	r2, #3
 8006fb8:	4650      	mov	r0, sl
 8006fba:	7821      	ldrb	r1, [r4, #0]
 8006fbc:	f000 faae 	bl	800751c <memchr>
 8006fc0:	b140      	cbz	r0, 8006fd4 <_vfiprintf_r+0x198>
 8006fc2:	2340      	movs	r3, #64	; 0x40
 8006fc4:	eba0 000a 	sub.w	r0, r0, sl
 8006fc8:	fa03 f000 	lsl.w	r0, r3, r0
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	3401      	adds	r4, #1
 8006fd0:	4303      	orrs	r3, r0
 8006fd2:	9304      	str	r3, [sp, #16]
 8006fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd8:	2206      	movs	r2, #6
 8006fda:	482c      	ldr	r0, [pc, #176]	; (800708c <_vfiprintf_r+0x250>)
 8006fdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fe0:	f000 fa9c 	bl	800751c <memchr>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d03f      	beq.n	8007068 <_vfiprintf_r+0x22c>
 8006fe8:	4b29      	ldr	r3, [pc, #164]	; (8007090 <_vfiprintf_r+0x254>)
 8006fea:	bb1b      	cbnz	r3, 8007034 <_vfiprintf_r+0x1f8>
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	3307      	adds	r3, #7
 8006ff0:	f023 0307 	bic.w	r3, r3, #7
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	9303      	str	r3, [sp, #12]
 8006ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ffa:	443b      	add	r3, r7
 8006ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffe:	e767      	b.n	8006ed0 <_vfiprintf_r+0x94>
 8007000:	460c      	mov	r4, r1
 8007002:	2001      	movs	r0, #1
 8007004:	fb0c 3202 	mla	r2, ip, r2, r3
 8007008:	e7a5      	b.n	8006f56 <_vfiprintf_r+0x11a>
 800700a:	2300      	movs	r3, #0
 800700c:	f04f 0c0a 	mov.w	ip, #10
 8007010:	4619      	mov	r1, r3
 8007012:	3401      	adds	r4, #1
 8007014:	9305      	str	r3, [sp, #20]
 8007016:	4620      	mov	r0, r4
 8007018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800701c:	3a30      	subs	r2, #48	; 0x30
 800701e:	2a09      	cmp	r2, #9
 8007020:	d903      	bls.n	800702a <_vfiprintf_r+0x1ee>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0c5      	beq.n	8006fb2 <_vfiprintf_r+0x176>
 8007026:	9105      	str	r1, [sp, #20]
 8007028:	e7c3      	b.n	8006fb2 <_vfiprintf_r+0x176>
 800702a:	4604      	mov	r4, r0
 800702c:	2301      	movs	r3, #1
 800702e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007032:	e7f0      	b.n	8007016 <_vfiprintf_r+0x1da>
 8007034:	ab03      	add	r3, sp, #12
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	462a      	mov	r2, r5
 800703a:	4630      	mov	r0, r6
 800703c:	4b15      	ldr	r3, [pc, #84]	; (8007094 <_vfiprintf_r+0x258>)
 800703e:	a904      	add	r1, sp, #16
 8007040:	f3af 8000 	nop.w
 8007044:	4607      	mov	r7, r0
 8007046:	1c78      	adds	r0, r7, #1
 8007048:	d1d6      	bne.n	8006ff8 <_vfiprintf_r+0x1bc>
 800704a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800704c:	07d9      	lsls	r1, r3, #31
 800704e:	d405      	bmi.n	800705c <_vfiprintf_r+0x220>
 8007050:	89ab      	ldrh	r3, [r5, #12]
 8007052:	059a      	lsls	r2, r3, #22
 8007054:	d402      	bmi.n	800705c <_vfiprintf_r+0x220>
 8007056:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007058:	f7ff fdb5 	bl	8006bc6 <__retarget_lock_release_recursive>
 800705c:	89ab      	ldrh	r3, [r5, #12]
 800705e:	065b      	lsls	r3, r3, #25
 8007060:	f53f af12 	bmi.w	8006e88 <_vfiprintf_r+0x4c>
 8007064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007066:	e711      	b.n	8006e8c <_vfiprintf_r+0x50>
 8007068:	ab03      	add	r3, sp, #12
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	462a      	mov	r2, r5
 800706e:	4630      	mov	r0, r6
 8007070:	4b08      	ldr	r3, [pc, #32]	; (8007094 <_vfiprintf_r+0x258>)
 8007072:	a904      	add	r1, sp, #16
 8007074:	f000 f882 	bl	800717c <_printf_i>
 8007078:	e7e4      	b.n	8007044 <_vfiprintf_r+0x208>
 800707a:	bf00      	nop
 800707c:	08008640 	.word	0x08008640
 8007080:	08008660 	.word	0x08008660
 8007084:	08008620 	.word	0x08008620
 8007088:	08008680 	.word	0x08008680
 800708c:	0800868a 	.word	0x0800868a
 8007090:	00000000 	.word	0x00000000
 8007094:	08006e17 	.word	0x08006e17
 8007098:	08008686 	.word	0x08008686

0800709c <_printf_common>:
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	4616      	mov	r6, r2
 80070a2:	4699      	mov	r9, r3
 80070a4:	688a      	ldr	r2, [r1, #8]
 80070a6:	690b      	ldr	r3, [r1, #16]
 80070a8:	4607      	mov	r7, r0
 80070aa:	4293      	cmp	r3, r2
 80070ac:	bfb8      	it	lt
 80070ae:	4613      	movlt	r3, r2
 80070b0:	6033      	str	r3, [r6, #0]
 80070b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070b6:	460c      	mov	r4, r1
 80070b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070bc:	b10a      	cbz	r2, 80070c2 <_printf_common+0x26>
 80070be:	3301      	adds	r3, #1
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	0699      	lsls	r1, r3, #26
 80070c6:	bf42      	ittt	mi
 80070c8:	6833      	ldrmi	r3, [r6, #0]
 80070ca:	3302      	addmi	r3, #2
 80070cc:	6033      	strmi	r3, [r6, #0]
 80070ce:	6825      	ldr	r5, [r4, #0]
 80070d0:	f015 0506 	ands.w	r5, r5, #6
 80070d4:	d106      	bne.n	80070e4 <_printf_common+0x48>
 80070d6:	f104 0a19 	add.w	sl, r4, #25
 80070da:	68e3      	ldr	r3, [r4, #12]
 80070dc:	6832      	ldr	r2, [r6, #0]
 80070de:	1a9b      	subs	r3, r3, r2
 80070e0:	42ab      	cmp	r3, r5
 80070e2:	dc28      	bgt.n	8007136 <_printf_common+0x9a>
 80070e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070e8:	1e13      	subs	r3, r2, #0
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	bf18      	it	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	0692      	lsls	r2, r2, #26
 80070f2:	d42d      	bmi.n	8007150 <_printf_common+0xb4>
 80070f4:	4649      	mov	r1, r9
 80070f6:	4638      	mov	r0, r7
 80070f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070fc:	47c0      	blx	r8
 80070fe:	3001      	adds	r0, #1
 8007100:	d020      	beq.n	8007144 <_printf_common+0xa8>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	68e5      	ldr	r5, [r4, #12]
 8007106:	f003 0306 	and.w	r3, r3, #6
 800710a:	2b04      	cmp	r3, #4
 800710c:	bf18      	it	ne
 800710e:	2500      	movne	r5, #0
 8007110:	6832      	ldr	r2, [r6, #0]
 8007112:	f04f 0600 	mov.w	r6, #0
 8007116:	68a3      	ldr	r3, [r4, #8]
 8007118:	bf08      	it	eq
 800711a:	1aad      	subeq	r5, r5, r2
 800711c:	6922      	ldr	r2, [r4, #16]
 800711e:	bf08      	it	eq
 8007120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007124:	4293      	cmp	r3, r2
 8007126:	bfc4      	itt	gt
 8007128:	1a9b      	subgt	r3, r3, r2
 800712a:	18ed      	addgt	r5, r5, r3
 800712c:	341a      	adds	r4, #26
 800712e:	42b5      	cmp	r5, r6
 8007130:	d11a      	bne.n	8007168 <_printf_common+0xcc>
 8007132:	2000      	movs	r0, #0
 8007134:	e008      	b.n	8007148 <_printf_common+0xac>
 8007136:	2301      	movs	r3, #1
 8007138:	4652      	mov	r2, sl
 800713a:	4649      	mov	r1, r9
 800713c:	4638      	mov	r0, r7
 800713e:	47c0      	blx	r8
 8007140:	3001      	adds	r0, #1
 8007142:	d103      	bne.n	800714c <_printf_common+0xb0>
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714c:	3501      	adds	r5, #1
 800714e:	e7c4      	b.n	80070da <_printf_common+0x3e>
 8007150:	2030      	movs	r0, #48	; 0x30
 8007152:	18e1      	adds	r1, r4, r3
 8007154:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800715e:	4422      	add	r2, r4
 8007160:	3302      	adds	r3, #2
 8007162:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007166:	e7c5      	b.n	80070f4 <_printf_common+0x58>
 8007168:	2301      	movs	r3, #1
 800716a:	4622      	mov	r2, r4
 800716c:	4649      	mov	r1, r9
 800716e:	4638      	mov	r0, r7
 8007170:	47c0      	blx	r8
 8007172:	3001      	adds	r0, #1
 8007174:	d0e6      	beq.n	8007144 <_printf_common+0xa8>
 8007176:	3601      	adds	r6, #1
 8007178:	e7d9      	b.n	800712e <_printf_common+0x92>
	...

0800717c <_printf_i>:
 800717c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	460c      	mov	r4, r1
 8007182:	7e27      	ldrb	r7, [r4, #24]
 8007184:	4691      	mov	r9, r2
 8007186:	2f78      	cmp	r7, #120	; 0x78
 8007188:	4680      	mov	r8, r0
 800718a:	469a      	mov	sl, r3
 800718c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800718e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007192:	d807      	bhi.n	80071a4 <_printf_i+0x28>
 8007194:	2f62      	cmp	r7, #98	; 0x62
 8007196:	d80a      	bhi.n	80071ae <_printf_i+0x32>
 8007198:	2f00      	cmp	r7, #0
 800719a:	f000 80d9 	beq.w	8007350 <_printf_i+0x1d4>
 800719e:	2f58      	cmp	r7, #88	; 0x58
 80071a0:	f000 80a4 	beq.w	80072ec <_printf_i+0x170>
 80071a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071ac:	e03a      	b.n	8007224 <_printf_i+0xa8>
 80071ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071b2:	2b15      	cmp	r3, #21
 80071b4:	d8f6      	bhi.n	80071a4 <_printf_i+0x28>
 80071b6:	a001      	add	r0, pc, #4	; (adr r0, 80071bc <_printf_i+0x40>)
 80071b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80071bc:	08007215 	.word	0x08007215
 80071c0:	08007229 	.word	0x08007229
 80071c4:	080071a5 	.word	0x080071a5
 80071c8:	080071a5 	.word	0x080071a5
 80071cc:	080071a5 	.word	0x080071a5
 80071d0:	080071a5 	.word	0x080071a5
 80071d4:	08007229 	.word	0x08007229
 80071d8:	080071a5 	.word	0x080071a5
 80071dc:	080071a5 	.word	0x080071a5
 80071e0:	080071a5 	.word	0x080071a5
 80071e4:	080071a5 	.word	0x080071a5
 80071e8:	08007337 	.word	0x08007337
 80071ec:	08007259 	.word	0x08007259
 80071f0:	08007319 	.word	0x08007319
 80071f4:	080071a5 	.word	0x080071a5
 80071f8:	080071a5 	.word	0x080071a5
 80071fc:	08007359 	.word	0x08007359
 8007200:	080071a5 	.word	0x080071a5
 8007204:	08007259 	.word	0x08007259
 8007208:	080071a5 	.word	0x080071a5
 800720c:	080071a5 	.word	0x080071a5
 8007210:	08007321 	.word	0x08007321
 8007214:	680b      	ldr	r3, [r1, #0]
 8007216:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800721a:	1d1a      	adds	r2, r3, #4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	600a      	str	r2, [r1, #0]
 8007220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007224:	2301      	movs	r3, #1
 8007226:	e0a4      	b.n	8007372 <_printf_i+0x1f6>
 8007228:	6825      	ldr	r5, [r4, #0]
 800722a:	6808      	ldr	r0, [r1, #0]
 800722c:	062e      	lsls	r6, r5, #24
 800722e:	f100 0304 	add.w	r3, r0, #4
 8007232:	d50a      	bpl.n	800724a <_printf_i+0xce>
 8007234:	6805      	ldr	r5, [r0, #0]
 8007236:	600b      	str	r3, [r1, #0]
 8007238:	2d00      	cmp	r5, #0
 800723a:	da03      	bge.n	8007244 <_printf_i+0xc8>
 800723c:	232d      	movs	r3, #45	; 0x2d
 800723e:	426d      	negs	r5, r5
 8007240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007244:	230a      	movs	r3, #10
 8007246:	485e      	ldr	r0, [pc, #376]	; (80073c0 <_printf_i+0x244>)
 8007248:	e019      	b.n	800727e <_printf_i+0x102>
 800724a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800724e:	6805      	ldr	r5, [r0, #0]
 8007250:	600b      	str	r3, [r1, #0]
 8007252:	bf18      	it	ne
 8007254:	b22d      	sxthne	r5, r5
 8007256:	e7ef      	b.n	8007238 <_printf_i+0xbc>
 8007258:	680b      	ldr	r3, [r1, #0]
 800725a:	6825      	ldr	r5, [r4, #0]
 800725c:	1d18      	adds	r0, r3, #4
 800725e:	6008      	str	r0, [r1, #0]
 8007260:	0628      	lsls	r0, r5, #24
 8007262:	d501      	bpl.n	8007268 <_printf_i+0xec>
 8007264:	681d      	ldr	r5, [r3, #0]
 8007266:	e002      	b.n	800726e <_printf_i+0xf2>
 8007268:	0669      	lsls	r1, r5, #25
 800726a:	d5fb      	bpl.n	8007264 <_printf_i+0xe8>
 800726c:	881d      	ldrh	r5, [r3, #0]
 800726e:	2f6f      	cmp	r7, #111	; 0x6f
 8007270:	bf0c      	ite	eq
 8007272:	2308      	moveq	r3, #8
 8007274:	230a      	movne	r3, #10
 8007276:	4852      	ldr	r0, [pc, #328]	; (80073c0 <_printf_i+0x244>)
 8007278:	2100      	movs	r1, #0
 800727a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800727e:	6866      	ldr	r6, [r4, #4]
 8007280:	2e00      	cmp	r6, #0
 8007282:	bfa8      	it	ge
 8007284:	6821      	ldrge	r1, [r4, #0]
 8007286:	60a6      	str	r6, [r4, #8]
 8007288:	bfa4      	itt	ge
 800728a:	f021 0104 	bicge.w	r1, r1, #4
 800728e:	6021      	strge	r1, [r4, #0]
 8007290:	b90d      	cbnz	r5, 8007296 <_printf_i+0x11a>
 8007292:	2e00      	cmp	r6, #0
 8007294:	d04d      	beq.n	8007332 <_printf_i+0x1b6>
 8007296:	4616      	mov	r6, r2
 8007298:	fbb5 f1f3 	udiv	r1, r5, r3
 800729c:	fb03 5711 	mls	r7, r3, r1, r5
 80072a0:	5dc7      	ldrb	r7, [r0, r7]
 80072a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072a6:	462f      	mov	r7, r5
 80072a8:	42bb      	cmp	r3, r7
 80072aa:	460d      	mov	r5, r1
 80072ac:	d9f4      	bls.n	8007298 <_printf_i+0x11c>
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d10b      	bne.n	80072ca <_printf_i+0x14e>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	07df      	lsls	r7, r3, #31
 80072b6:	d508      	bpl.n	80072ca <_printf_i+0x14e>
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	6861      	ldr	r1, [r4, #4]
 80072bc:	4299      	cmp	r1, r3
 80072be:	bfde      	ittt	le
 80072c0:	2330      	movle	r3, #48	; 0x30
 80072c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072ca:	1b92      	subs	r2, r2, r6
 80072cc:	6122      	str	r2, [r4, #16]
 80072ce:	464b      	mov	r3, r9
 80072d0:	4621      	mov	r1, r4
 80072d2:	4640      	mov	r0, r8
 80072d4:	f8cd a000 	str.w	sl, [sp]
 80072d8:	aa03      	add	r2, sp, #12
 80072da:	f7ff fedf 	bl	800709c <_printf_common>
 80072de:	3001      	adds	r0, #1
 80072e0:	d14c      	bne.n	800737c <_printf_i+0x200>
 80072e2:	f04f 30ff 	mov.w	r0, #4294967295
 80072e6:	b004      	add	sp, #16
 80072e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ec:	4834      	ldr	r0, [pc, #208]	; (80073c0 <_printf_i+0x244>)
 80072ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072f2:	680e      	ldr	r6, [r1, #0]
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80072fa:	061f      	lsls	r7, r3, #24
 80072fc:	600e      	str	r6, [r1, #0]
 80072fe:	d514      	bpl.n	800732a <_printf_i+0x1ae>
 8007300:	07d9      	lsls	r1, r3, #31
 8007302:	bf44      	itt	mi
 8007304:	f043 0320 	orrmi.w	r3, r3, #32
 8007308:	6023      	strmi	r3, [r4, #0]
 800730a:	b91d      	cbnz	r5, 8007314 <_printf_i+0x198>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	f023 0320 	bic.w	r3, r3, #32
 8007312:	6023      	str	r3, [r4, #0]
 8007314:	2310      	movs	r3, #16
 8007316:	e7af      	b.n	8007278 <_printf_i+0xfc>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	f043 0320 	orr.w	r3, r3, #32
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	2378      	movs	r3, #120	; 0x78
 8007322:	4828      	ldr	r0, [pc, #160]	; (80073c4 <_printf_i+0x248>)
 8007324:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007328:	e7e3      	b.n	80072f2 <_printf_i+0x176>
 800732a:	065e      	lsls	r6, r3, #25
 800732c:	bf48      	it	mi
 800732e:	b2ad      	uxthmi	r5, r5
 8007330:	e7e6      	b.n	8007300 <_printf_i+0x184>
 8007332:	4616      	mov	r6, r2
 8007334:	e7bb      	b.n	80072ae <_printf_i+0x132>
 8007336:	680b      	ldr	r3, [r1, #0]
 8007338:	6826      	ldr	r6, [r4, #0]
 800733a:	1d1d      	adds	r5, r3, #4
 800733c:	6960      	ldr	r0, [r4, #20]
 800733e:	600d      	str	r5, [r1, #0]
 8007340:	0635      	lsls	r5, r6, #24
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	d501      	bpl.n	800734a <_printf_i+0x1ce>
 8007346:	6018      	str	r0, [r3, #0]
 8007348:	e002      	b.n	8007350 <_printf_i+0x1d4>
 800734a:	0671      	lsls	r1, r6, #25
 800734c:	d5fb      	bpl.n	8007346 <_printf_i+0x1ca>
 800734e:	8018      	strh	r0, [r3, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	4616      	mov	r6, r2
 8007354:	6123      	str	r3, [r4, #16]
 8007356:	e7ba      	b.n	80072ce <_printf_i+0x152>
 8007358:	680b      	ldr	r3, [r1, #0]
 800735a:	1d1a      	adds	r2, r3, #4
 800735c:	600a      	str	r2, [r1, #0]
 800735e:	681e      	ldr	r6, [r3, #0]
 8007360:	2100      	movs	r1, #0
 8007362:	4630      	mov	r0, r6
 8007364:	6862      	ldr	r2, [r4, #4]
 8007366:	f000 f8d9 	bl	800751c <memchr>
 800736a:	b108      	cbz	r0, 8007370 <_printf_i+0x1f4>
 800736c:	1b80      	subs	r0, r0, r6
 800736e:	6060      	str	r0, [r4, #4]
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	2300      	movs	r3, #0
 8007376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800737a:	e7a8      	b.n	80072ce <_printf_i+0x152>
 800737c:	4632      	mov	r2, r6
 800737e:	4649      	mov	r1, r9
 8007380:	4640      	mov	r0, r8
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	47d0      	blx	sl
 8007386:	3001      	adds	r0, #1
 8007388:	d0ab      	beq.n	80072e2 <_printf_i+0x166>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	079b      	lsls	r3, r3, #30
 800738e:	d413      	bmi.n	80073b8 <_printf_i+0x23c>
 8007390:	68e0      	ldr	r0, [r4, #12]
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	4298      	cmp	r0, r3
 8007396:	bfb8      	it	lt
 8007398:	4618      	movlt	r0, r3
 800739a:	e7a4      	b.n	80072e6 <_printf_i+0x16a>
 800739c:	2301      	movs	r3, #1
 800739e:	4632      	mov	r2, r6
 80073a0:	4649      	mov	r1, r9
 80073a2:	4640      	mov	r0, r8
 80073a4:	47d0      	blx	sl
 80073a6:	3001      	adds	r0, #1
 80073a8:	d09b      	beq.n	80072e2 <_printf_i+0x166>
 80073aa:	3501      	adds	r5, #1
 80073ac:	68e3      	ldr	r3, [r4, #12]
 80073ae:	9903      	ldr	r1, [sp, #12]
 80073b0:	1a5b      	subs	r3, r3, r1
 80073b2:	42ab      	cmp	r3, r5
 80073b4:	dcf2      	bgt.n	800739c <_printf_i+0x220>
 80073b6:	e7eb      	b.n	8007390 <_printf_i+0x214>
 80073b8:	2500      	movs	r5, #0
 80073ba:	f104 0619 	add.w	r6, r4, #25
 80073be:	e7f5      	b.n	80073ac <_printf_i+0x230>
 80073c0:	08008691 	.word	0x08008691
 80073c4:	080086a2 	.word	0x080086a2

080073c8 <_sbrk_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	2300      	movs	r3, #0
 80073cc:	4d05      	ldr	r5, [pc, #20]	; (80073e4 <_sbrk_r+0x1c>)
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	602b      	str	r3, [r5, #0]
 80073d4:	f7fb fb2e 	bl	8002a34 <_sbrk>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_sbrk_r+0x1a>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_sbrk_r+0x1a>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	20000200 	.word	0x20000200

080073e8 <__sread>:
 80073e8:	b510      	push	{r4, lr}
 80073ea:	460c      	mov	r4, r1
 80073ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f0:	f000 f8ae 	bl	8007550 <_read_r>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	bfab      	itete	ge
 80073f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073fa:	89a3      	ldrhlt	r3, [r4, #12]
 80073fc:	181b      	addge	r3, r3, r0
 80073fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007402:	bfac      	ite	ge
 8007404:	6563      	strge	r3, [r4, #84]	; 0x54
 8007406:	81a3      	strhlt	r3, [r4, #12]
 8007408:	bd10      	pop	{r4, pc}

0800740a <__swrite>:
 800740a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740e:	461f      	mov	r7, r3
 8007410:	898b      	ldrh	r3, [r1, #12]
 8007412:	4605      	mov	r5, r0
 8007414:	05db      	lsls	r3, r3, #23
 8007416:	460c      	mov	r4, r1
 8007418:	4616      	mov	r6, r2
 800741a:	d505      	bpl.n	8007428 <__swrite+0x1e>
 800741c:	2302      	movs	r3, #2
 800741e:	2200      	movs	r2, #0
 8007420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007424:	f000 f868 	bl	80074f8 <_lseek_r>
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	4632      	mov	r2, r6
 800742c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007430:	81a3      	strh	r3, [r4, #12]
 8007432:	4628      	mov	r0, r5
 8007434:	463b      	mov	r3, r7
 8007436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800743a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800743e:	f000 b817 	b.w	8007470 <_write_r>

08007442 <__sseek>:
 8007442:	b510      	push	{r4, lr}
 8007444:	460c      	mov	r4, r1
 8007446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744a:	f000 f855 	bl	80074f8 <_lseek_r>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	bf15      	itete	ne
 8007454:	6560      	strne	r0, [r4, #84]	; 0x54
 8007456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800745a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800745e:	81a3      	strheq	r3, [r4, #12]
 8007460:	bf18      	it	ne
 8007462:	81a3      	strhne	r3, [r4, #12]
 8007464:	bd10      	pop	{r4, pc}

08007466 <__sclose>:
 8007466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746a:	f000 b813 	b.w	8007494 <_close_r>
	...

08007470 <_write_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	4611      	mov	r1, r2
 8007478:	2200      	movs	r2, #0
 800747a:	4d05      	ldr	r5, [pc, #20]	; (8007490 <_write_r+0x20>)
 800747c:	602a      	str	r2, [r5, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	f7fb f858 	bl	8002534 <_write>
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d102      	bne.n	800748e <_write_r+0x1e>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	b103      	cbz	r3, 800748e <_write_r+0x1e>
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	20000200 	.word	0x20000200

08007494 <_close_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	2300      	movs	r3, #0
 8007498:	4d05      	ldr	r5, [pc, #20]	; (80074b0 <_close_r+0x1c>)
 800749a:	4604      	mov	r4, r0
 800749c:	4608      	mov	r0, r1
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	f7fb f874 	bl	800258c <_close>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_close_r+0x1a>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_close_r+0x1a>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	20000200 	.word	0x20000200

080074b4 <_fstat_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	2300      	movs	r3, #0
 80074b8:	4d06      	ldr	r5, [pc, #24]	; (80074d4 <_fstat_r+0x20>)
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	602b      	str	r3, [r5, #0]
 80074c2:	f7fb f8b3 	bl	800262c <_fstat>
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	d102      	bne.n	80074d0 <_fstat_r+0x1c>
 80074ca:	682b      	ldr	r3, [r5, #0]
 80074cc:	b103      	cbz	r3, 80074d0 <_fstat_r+0x1c>
 80074ce:	6023      	str	r3, [r4, #0]
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	bf00      	nop
 80074d4:	20000200 	.word	0x20000200

080074d8 <_isatty_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	2300      	movs	r3, #0
 80074dc:	4d05      	ldr	r5, [pc, #20]	; (80074f4 <_isatty_r+0x1c>)
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7fb f810 	bl	8002508 <_isatty>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_isatty_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_isatty_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20000200 	.word	0x20000200

080074f8 <_lseek_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	2200      	movs	r2, #0
 8007502:	4d05      	ldr	r5, [pc, #20]	; (8007518 <_lseek_r+0x20>)
 8007504:	602a      	str	r2, [r5, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f7fb f857 	bl	80025ba <_lseek>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_lseek_r+0x1e>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b103      	cbz	r3, 8007516 <_lseek_r+0x1e>
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	20000200 	.word	0x20000200

0800751c <memchr>:
 800751c:	4603      	mov	r3, r0
 800751e:	b510      	push	{r4, lr}
 8007520:	b2c9      	uxtb	r1, r1
 8007522:	4402      	add	r2, r0
 8007524:	4293      	cmp	r3, r2
 8007526:	4618      	mov	r0, r3
 8007528:	d101      	bne.n	800752e <memchr+0x12>
 800752a:	2000      	movs	r0, #0
 800752c:	e003      	b.n	8007536 <memchr+0x1a>
 800752e:	7804      	ldrb	r4, [r0, #0]
 8007530:	3301      	adds	r3, #1
 8007532:	428c      	cmp	r4, r1
 8007534:	d1f6      	bne.n	8007524 <memchr+0x8>
 8007536:	bd10      	pop	{r4, pc}

08007538 <__malloc_lock>:
 8007538:	4801      	ldr	r0, [pc, #4]	; (8007540 <__malloc_lock+0x8>)
 800753a:	f7ff bb43 	b.w	8006bc4 <__retarget_lock_acquire_recursive>
 800753e:	bf00      	nop
 8007540:	200001f8 	.word	0x200001f8

08007544 <__malloc_unlock>:
 8007544:	4801      	ldr	r0, [pc, #4]	; (800754c <__malloc_unlock+0x8>)
 8007546:	f7ff bb3e 	b.w	8006bc6 <__retarget_lock_release_recursive>
 800754a:	bf00      	nop
 800754c:	200001f8 	.word	0x200001f8

08007550 <_read_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	2200      	movs	r2, #0
 800755a:	4d05      	ldr	r5, [pc, #20]	; (8007570 <_read_r+0x20>)
 800755c:	602a      	str	r2, [r5, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f7fb f83c 	bl	80025dc <_read>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_read_r+0x1e>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_read_r+0x1e>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	20000200 	.word	0x20000200

08007574 <_init>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr

08007580 <_fini>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr


Do_An.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005174  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005738  08005738  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005738  08005738  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005738  08005738  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000078  080057b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080057b8  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001809f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003744  00000000  00000000  00038140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0003b888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  0003c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6d8  00000000  00000000  0003d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f37  00000000  00000000  00059f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009433a  00000000  00000000  00073e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001081b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c78  00000000  00000000  0010820c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005268 	.word	0x08005268

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005268 	.word	0x08005268

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b089      	sub	sp, #36	; 0x24
 8000658:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <MX_ADC1_Init+0xc8>)
 8000668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_ADC1_Init+0xc4>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000672:	2201      	movs	r2, #1
 8000674:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000678:	2200      	movs	r2, #0
 800067a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MX_ADC1_Init+0xc4>)
 800067e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <MX_ADC1_Init+0xc4>)
 800068c:	2201      	movs	r2, #1
 800068e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	4821      	ldr	r0, [pc, #132]	; (8000718 <MX_ADC1_Init+0xc4>)
 8000692:	f000 fff3 	bl	800167c <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 fa5c 	bl	8000b58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80006a8:	2307      	movs	r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4819      	ldr	r0, [pc, #100]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006b2:	f001 fa49 	bl	8001b48 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006bc:	f000 fa4c 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ERROR_CHECK(HAL_ADC_Start_IT(&hadc1));
 80006c0:	4815      	ldr	r0, [pc, #84]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006c2:	f001 f8b3 	bl	800182c <HAL_ADC_Start_IT>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d020      	beq.n	800070e <MX_ADC1_Init+0xba>
 80006cc:	f000 ffcc 	bl	8001668 <HAL_GetTick>
 80006d0:	4604      	mov	r4, r0
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006d4:	f001 f8aa 	bl	800182c <HAL_ADC_Start_IT>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d009      	beq.n	80006f2 <MX_ADC1_Init+0x9e>
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <MX_ADC1_Init+0xc4>)
 80006e0:	f001 f8a4 	bl	800182c <HAL_ADC_Start_IT>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d101      	bne.n	80006ee <MX_ADC1_Init+0x9a>
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_ADC1_Init+0xcc>)
 80006ec:	e002      	b.n	80006f4 <MX_ADC1_Init+0xa0>
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_ADC1_Init+0xd0>)
 80006f0:	e000      	b.n	80006f4 <MX_ADC1_Init+0xa0>
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_ADC1_Init+0xd4>)
 80006f4:	9303      	str	r3, [sp, #12]
 80006f6:	2341      	movs	r3, #65	; 0x41
 80006f8:	9302      	str	r3, [sp, #8]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_ADC1_Init+0xd8>)
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_ADC1_Init+0xdc>)
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4623      	mov	r3, r4
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <MX_ADC1_Init+0xe0>)
 8000706:	490a      	ldr	r1, [pc, #40]	; (8000730 <MX_ADC1_Init+0xdc>)
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fda9 	bl	8001260 <stm_log_write>
  /* USER CODE END ADC1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bd90      	pop	{r4, r7, pc}
 8000716:	bf00      	nop
 8000718:	200000a8 	.word	0x200000a8
 800071c:	40012400 	.word	0x40012400
 8000720:	08005280 	.word	0x08005280
 8000724:	0800528c 	.word	0x0800528c
 8000728:	08005298 	.word	0x08005298
 800072c:	08005618 	.word	0x08005618
 8000730:	080052d4 	.word	0x080052d4
 8000734:	080052a4 	.word	0x080052a4

08000738 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <HAL_ADC_MspInit+0x7c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d129      	bne.n	80007ac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 800075e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_ADC_MspInit+0x80>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_OUTPUT_Pin;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078c:	2303      	movs	r3, #3
 800078e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LIGHT_SENSOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <HAL_ADC_MspInit+0x84>)
 8000798:	f001 fce8 	bl	800216c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	2012      	movs	r0, #18
 80007a2:	f001 fc36 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007a6:	2012      	movs	r0, #18
 80007a8:	f001 fc4f 	bl	800204a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40012400 	.word	0x40012400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <MX_GPIO_Init+0x144>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a4a      	ldr	r2, [pc, #296]	; (8000904 <MX_GPIO_Init+0x144>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b48      	ldr	r3, [pc, #288]	; (8000904 <MX_GPIO_Init+0x144>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ec:	4b45      	ldr	r3, [pc, #276]	; (8000904 <MX_GPIO_Init+0x144>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a44      	ldr	r2, [pc, #272]	; (8000904 <MX_GPIO_Init+0x144>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b42      	ldr	r3, [pc, #264]	; (8000904 <MX_GPIO_Init+0x144>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b3f      	ldr	r3, [pc, #252]	; (8000904 <MX_GPIO_Init+0x144>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a3e      	ldr	r2, [pc, #248]	; (8000904 <MX_GPIO_Init+0x144>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <MX_GPIO_Init+0x144>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b39      	ldr	r3, [pc, #228]	; (8000904 <MX_GPIO_Init+0x144>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a38      	ldr	r2, [pc, #224]	; (8000904 <MX_GPIO_Init+0x144>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b36      	ldr	r3, [pc, #216]	; (8000904 <MX_GPIO_Init+0x144>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2102      	movs	r1, #2
 8000838:	4833      	ldr	r0, [pc, #204]	; (8000908 <MX_GPIO_Init+0x148>)
 800083a:	f001 fe1b 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2110      	movs	r1, #16
 8000842:	4831      	ldr	r0, [pc, #196]	; (8000908 <MX_GPIO_Init+0x148>)
 8000844:	f001 fe16 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2101      	movs	r1, #1
 800084c:	482f      	ldr	r0, [pc, #188]	; (800090c <MX_GPIO_Init+0x14c>)
 800084e:	f001 fe11 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000852:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000858:	2303      	movs	r3, #3
 800085a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	482b      	ldr	r0, [pc, #172]	; (8000910 <MX_GPIO_Init+0x150>)
 8000864:	f001 fc82 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin|SPI1_NSS_Pin;
 8000868:	2312      	movs	r3, #18
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2302      	movs	r3, #2
 8000876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4822      	ldr	r0, [pc, #136]	; (8000908 <MX_GPIO_Init+0x148>)
 8000880:	f001 fc74 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000884:	2304      	movs	r3, #4
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	481c      	ldr	r0, [pc, #112]	; (8000908 <MX_GPIO_Init+0x148>)
 8000898:	f001 fc68 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_LORA_Pin;
 800089c:	2308      	movs	r3, #8
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_GPIO_Init+0x154>)
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERRUPT_LORA_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4816      	ldr	r0, [pc, #88]	; (8000908 <MX_GPIO_Init+0x148>)
 80008b0:	f001 fc5c 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4810      	ldr	r0, [pc, #64]	; (800090c <MX_GPIO_Init+0x14c>)
 80008cc:	f001 fc4e 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80008d0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80008d4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d6:	2303      	movs	r3, #3
 80008d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	480a      	ldr	r0, [pc, #40]	; (800090c <MX_GPIO_Init+0x14c>)
 80008e2:	f001 fc43 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80008e6:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ec:	2303      	movs	r3, #3
 80008ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0x148>)
 80008f8:	f001 fc38 	bl	800216c <HAL_GPIO_Init>

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	40010800 	.word	0x40010800
 800090c:	40010c00 	.word	0x40010c00
 8000910:	40011000 	.word	0x40011000
 8000914:	10110000 	.word	0x10110000

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091a:	b085      	sub	sp, #20
 800091c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 fe4b 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f899 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f7ff ff4b 	bl	80007c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800092a:	f000 fd91 	bl	8001450 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800092e:	f7ff fe91 	bl	8000654 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000932:	f000 facb 	bl	8000ecc <MX_SPI1_Init>
  MX_TIM4_Init();
 8000936:	f000 fce5 	bl	8001304 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  STM_LOGD("IWDG", "SET WATCHDOG: {%ums}", iwdgInit(&hiwdg, WATCHDOG_TIME));
 800093a:	f000 fe95 	bl	8001668 <HAL_GetTick>
 800093e:	4604      	mov	r4, r0
 8000940:	f242 7110 	movw	r1, #10000	; 0x2710
 8000944:	4836      	ldr	r0, [pc, #216]	; (8000a20 <main+0x108>)
 8000946:	f000 f9b9 	bl	8000cbc <iwdgInit>
 800094a:	4603      	mov	r3, r0
 800094c:	9303      	str	r3, [sp, #12]
 800094e:	2367      	movs	r3, #103	; 0x67
 8000950:	9302      	str	r3, [sp, #8]
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <main+0x10c>)
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <main+0x110>)
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	4623      	mov	r3, r4
 800095c:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <main+0x114>)
 800095e:	4932      	ldr	r1, [pc, #200]	; (8000a28 <main+0x110>)
 8000960:	2004      	movs	r0, #4
 8000962:	f000 fc7d 	bl	8001260 <stm_log_write>
  STM_LOGD(MAIN_TAG, "MCU RESET CAUSE: {%s}", resetCauseGetName(resetCauseGet()));
 8000966:	4b32      	ldr	r3, [pc, #200]	; (8000a30 <main+0x118>)
 8000968:	681d      	ldr	r5, [r3, #0]
 800096a:	f000 fe7d 	bl	8001668 <HAL_GetTick>
 800096e:	4606      	mov	r6, r0
 8000970:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <main+0x118>)
 8000972:	681c      	ldr	r4, [r3, #0]
 8000974:	f000 f90e 	bl	8000b94 <resetCauseGet>
 8000978:	4603      	mov	r3, r0
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f950 	bl	8000c20 <resetCauseGetName>
 8000980:	4603      	mov	r3, r0
 8000982:	9303      	str	r3, [sp, #12]
 8000984:	2368      	movs	r3, #104	; 0x68
 8000986:	9302      	str	r3, [sp, #8]
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <main+0x10c>)
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	9400      	str	r4, [sp, #0]
 800098e:	4633      	mov	r3, r6
 8000990:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <main+0x11c>)
 8000992:	4629      	mov	r1, r5
 8000994:	2004      	movs	r0, #4
 8000996:	f000 fc63 	bl	8001260 <stm_log_write>
  STM_LOGD(MAIN_TAG, "------START APPLICATION------");
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <main+0x118>)
 800099c:	681c      	ldr	r4, [r3, #0]
 800099e:	f000 fe63 	bl	8001668 <HAL_GetTick>
 80009a2:	4602      	mov	r2, r0
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <main+0x118>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2169      	movs	r1, #105	; 0x69
 80009aa:	9102      	str	r1, [sp, #8]
 80009ac:	491d      	ldr	r1, [pc, #116]	; (8000a24 <main+0x10c>)
 80009ae:	9101      	str	r1, [sp, #4]
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	4613      	mov	r3, r2
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <main+0x120>)
 80009b6:	4621      	mov	r1, r4
 80009b8:	2004      	movs	r0, #4
 80009ba:	f000 fc51 	bl	8001260 <stm_log_write>
  ERROR_CHECK(HAL_UART_Receive_IT(&huart1, (uint8_t *)(&(uartCliHandle._rxData)), 1));
 80009be:	2201      	movs	r2, #1
 80009c0:	491e      	ldr	r1, [pc, #120]	; (8000a3c <main+0x124>)
 80009c2:	481f      	ldr	r0, [pc, #124]	; (8000a40 <main+0x128>)
 80009c4:	f003 f89c 	bl	8003b00 <HAL_UART_Receive_IT>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d024      	beq.n	8000a18 <main+0x100>
 80009ce:	f000 fe4b 	bl	8001668 <HAL_GetTick>
 80009d2:	4604      	mov	r4, r0
 80009d4:	2201      	movs	r2, #1
 80009d6:	4919      	ldr	r1, [pc, #100]	; (8000a3c <main+0x124>)
 80009d8:	4819      	ldr	r0, [pc, #100]	; (8000a40 <main+0x128>)
 80009da:	f003 f891 	bl	8003b00 <HAL_UART_Receive_IT>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d00b      	beq.n	80009fc <main+0xe4>
 80009e4:	2201      	movs	r2, #1
 80009e6:	4915      	ldr	r1, [pc, #84]	; (8000a3c <main+0x124>)
 80009e8:	4815      	ldr	r0, [pc, #84]	; (8000a40 <main+0x128>)
 80009ea:	f003 f889 	bl	8003b00 <HAL_UART_Receive_IT>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d101      	bne.n	80009f8 <main+0xe0>
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <main+0x12c>)
 80009f6:	e002      	b.n	80009fe <main+0xe6>
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <main+0x130>)
 80009fa:	e000      	b.n	80009fe <main+0xe6>
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <main+0x134>)
 80009fe:	9303      	str	r3, [sp, #12]
 8000a00:	236a      	movs	r3, #106	; 0x6a
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <main+0x10c>)
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <main+0x138>)
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	4623      	mov	r3, r4
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <main+0x13c>)
 8000a10:	490f      	ldr	r1, [pc, #60]	; (8000a50 <main+0x138>)
 8000a12:	2001      	movs	r0, #1
 8000a14:	f000 fc24 	bl	8001260 <stm_log_write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* reset IWDG */
    HAL_IWDG_Refresh(&hiwdg);
 8000a18:	4801      	ldr	r0, [pc, #4]	; (8000a20 <main+0x108>)
 8000a1a:	f001 fd95 	bl	8002548 <HAL_IWDG_Refresh>
 8000a1e:	e7fb      	b.n	8000a18 <main+0x100>
 8000a20:	200000d8 	.word	0x200000d8
 8000a24:	08005628 	.word	0x08005628
 8000a28:	08005328 	.word	0x08005328
 8000a2c:	080052f0 	.word	0x080052f0
 8000a30:	20000000 	.word	0x20000000
 8000a34:	08005330 	.word	0x08005330
 8000a38:	0800536c 	.word	0x0800536c
 8000a3c:	20000103 	.word	0x20000103
 8000a40:	200001ac 	.word	0x200001ac
 8000a44:	080053b0 	.word	0x080053b0
 8000a48:	080053bc 	.word	0x080053bc
 8000a4c:	080053c8 	.word	0x080053c8
 8000a50:	08005404 	.word	0x08005404
 8000a54:	080053d4 	.word	0x080053d4

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a62:	2228      	movs	r2, #40	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 fbca 	bl	8004200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a96:	2301      	movs	r3, #1
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aa8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fd58 	bl	8002568 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000abe:	f000 f84b 	bl	8000b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2102      	movs	r1, #2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 ffc3 	bl	8002a68 <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae8:	f000 f836 	bl	8000b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aec:	2302      	movs	r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000af0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 f94f 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b04:	f000 f828 	bl	8000b58 <Error_Handler>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3750      	adds	r7, #80	; 0x50
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_Error_Handler>:

/* USER CODE BEGIN 4 */
void _Error_Handler(char *file, int line)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af06      	add	r7, sp, #24
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1a:	b672      	cpsid	i
}
 8000b1c:	bf00      	nop
  __disable_irq();

  while (1)
  {
    STM_LOGE(MAIN_TAG, "Error file %s line %d", file, line);
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <_Error_Handler+0x3c>)
 8000b20:	681c      	ldr	r4, [r3, #0]
 8000b22:	f000 fda1 	bl	8001668 <HAL_GetTick>
 8000b26:	4601      	mov	r1, r0
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_Error_Handler+0x3c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	9204      	str	r2, [sp, #16]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	9203      	str	r2, [sp, #12]
 8000b34:	22ae      	movs	r2, #174	; 0xae
 8000b36:	9202      	str	r2, [sp, #8]
 8000b38:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_Error_Handler+0x40>)
 8000b3a:	9201      	str	r2, [sp, #4]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <_Error_Handler+0x44>)
 8000b42:	4621      	mov	r1, r4
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fb8b 	bl	8001260 <stm_log_write>
 8000b4a:	e7e8      	b.n	8000b1e <_Error_Handler+0xe>
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	08005630 	.word	0x08005630
 8000b54:	08005414 	.word	0x08005414

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af04      	add	r7, sp, #16
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5e:	b672      	cpsid	i
}
 8000b60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    STM_LOGE(MAIN_TAG, "");
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <Error_Handler+0x30>)
 8000b64:	681c      	ldr	r4, [r3, #0]
 8000b66:	f000 fd7f 	bl	8001668 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <Error_Handler+0x30>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	21be      	movs	r1, #190	; 0xbe
 8000b72:	9102      	str	r1, [sp, #8]
 8000b74:	4905      	ldr	r1, [pc, #20]	; (8000b8c <Error_Handler+0x34>)
 8000b76:	9101      	str	r1, [sp, #4]
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <Error_Handler+0x38>)
 8000b7e:	4621      	mov	r1, r4
 8000b80:	2001      	movs	r0, #1
 8000b82:	f000 fb6d 	bl	8001260 <stm_log_write>
 8000b86:	e7ec      	b.n	8000b62 <Error_Handler+0xa>
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	08005640 	.word	0x08005640
 8000b90:	08005450 	.word	0x08005450

08000b94 <resetCauseGet>:
#include "misc.h"

reset_cause_t resetCauseGet(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
		RCC_FLAG_WWDGRST: Window watchdog reset flag
		RCC_FLAG_LPWRRST: Low power reset flag 
	*/
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <resetCauseGet+0x84>)
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	da02      	bge.n	8000ba8 <resetCauseGet+0x14>
    {
        reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	e02e      	b.n	8000c06 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <resetCauseGet+0x84>)
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <resetCauseGet+0x26>
    {
        reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	e025      	b.n	8000c06 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <resetCauseGet+0x84>)
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <resetCauseGet+0x38>
    {
        reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	e01c      	b.n	8000c06 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <resetCauseGet+0x84>)
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <resetCauseGet+0x4a>
    {
        reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8000bd8:	2304      	movs	r3, #4
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	e013      	b.n	8000c06 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <resetCauseGet+0x84>)
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <resetCauseGet+0x5c>
    {
        reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8000bea:	2305      	movs	r3, #5
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e00a      	b.n	8000c06 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <resetCauseGet+0x84>)
 8000bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <resetCauseGet+0x6e>
    {
        reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	e001      	b.n	8000c06 <resetCauseGet+0x72>
    }
    else
    {
        reset_cause = eRESET_CAUSE_UNKNOWN;
 8000c02:	2300      	movs	r3, #0
 8000c04:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <resetCauseGet+0x88>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]

    return reset_cause;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	424204e0 	.word	0x424204e0

08000c20 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
    const char *reset_cause_name = "";
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <resetCauseGetName+0x78>)
 8000c2c:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b07      	cmp	r3, #7
 8000c32:	d82b      	bhi.n	8000c8c <resetCauseGetName+0x6c>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <resetCauseGetName+0x1c>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c5d 	.word	0x08000c5d
 8000c40:	08000c63 	.word	0x08000c63
 8000c44:	08000c69 	.word	0x08000c69
 8000c48:	08000c6f 	.word	0x08000c6f
 8000c4c:	08000c75 	.word	0x08000c75
 8000c50:	08000c7b 	.word	0x08000c7b
 8000c54:	08000c81 	.word	0x08000c81
 8000c58:	08000c87 	.word	0x08000c87
    {
    case eRESET_CAUSE_UNKNOWN:
        reset_cause_name = "UNKNOWN";
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <resetCauseGetName+0x7c>)
 8000c5e:	60fb      	str	r3, [r7, #12]
        break;
 8000c60:	e014      	b.n	8000c8c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_LOW_POWER_RESET:
        reset_cause_name = "LOW_POWER_RESET";
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <resetCauseGetName+0x80>)
 8000c64:	60fb      	str	r3, [r7, #12]
        break;
 8000c66:	e011      	b.n	8000c8c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
        reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <resetCauseGetName+0x84>)
 8000c6a:	60fb      	str	r3, [r7, #12]
        break;
 8000c6c:	e00e      	b.n	8000c8c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
        reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <resetCauseGetName+0x88>)
 8000c70:	60fb      	str	r3, [r7, #12]
        break;
 8000c72:	e00b      	b.n	8000c8c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_SOFTWARE_RESET:
        reset_cause_name = "SOFTWARE_RESET";
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <resetCauseGetName+0x8c>)
 8000c76:	60fb      	str	r3, [r7, #12]
        break;
 8000c78:	e008      	b.n	8000c8c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
        reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <resetCauseGetName+0x90>)
 8000c7c:	60fb      	str	r3, [r7, #12]
        break;
 8000c7e:	e005      	b.n	8000c8c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
        reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <resetCauseGetName+0x94>)
 8000c82:	60fb      	str	r3, [r7, #12]
        break;
 8000c84:	e002      	b.n	8000c8c <resetCauseGetName+0x6c>
    case eRESET_CAUSE_BROWNOUT_RESET:
        reset_cause_name = "BROWNOUT_RESET (BOR)";
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <resetCauseGetName+0x98>)
 8000c88:	60fb      	str	r3, [r7, #12]
        break;
 8000c8a:	bf00      	nop
    }
    return reset_cause_name;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	08005474 	.word	0x08005474
 8000c9c:	08005478 	.word	0x08005478
 8000ca0:	08005480 	.word	0x08005480
 8000ca4:	08005490 	.word	0x08005490
 8000ca8:	080054a8 	.word	0x080054a8
 8000cac:	080054c4 	.word	0x080054c4
 8000cb0:	080054d4 	.word	0x080054d4
 8000cb4:	08005504 	.word	0x08005504
 8000cb8:	08005520 	.word	0x08005520

08000cbc <iwdgInit>:

uint32_t iwdgInit(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
    uint32_t configTime = millis;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
    if (configTime > PRESCALER_256_UPPER_LIMIT)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f246 6266 	movw	r2, #26214	; 0x6666
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d902      	bls.n	8000cda <iwdgInit+0x1e>
    {
        configTime = PRESCALER_256_UPPER_LIMIT;
 8000cd4:	f246 6366 	movw	r3, #26214	; 0x6666
 8000cd8:	60fb      	str	r3, [r7, #12]
    }
    /* Select INDEPENDENT_WATCHDOG */
    hiwdg->Instance = IWDG;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <iwdgInit+0x74>)
 8000cde:	601a      	str	r2, [r3, #0]
    /* Use prescaler LSI/128 */
    hiwdg->Init.Prescaler = IWDG_PRESCALER_128;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2205      	movs	r2, #5
 8000ce4:	605a      	str	r2, [r3, #4]
    hiwdg->Init.Reload = (int)(IWDG_RESOLUTION * ((float)configTime / PRESCALER_128_UPPER_LIMIT));
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f7ff fae6 	bl	80002b8 <__aeabi_ui2f>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4911      	ldr	r1, [pc, #68]	; (8000d34 <iwdgInit+0x78>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fbed 	bl	80004d0 <__aeabi_fdiv>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	490f      	ldr	r1, [pc, #60]	; (8000d38 <iwdgInit+0x7c>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fb34 	bl	8000368 <__aeabi_fmul>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc80 	bl	8000608 <__aeabi_f2iz>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f001 fbe0 	bl	80024d6 <HAL_IWDG_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <iwdgInit+0x68>
    {
        _Error_Handler(__FILE__, __LINE__);
 8000d1c:	2162      	movs	r1, #98	; 0x62
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <iwdgInit+0x80>)
 8000d20:	f7ff fef6 	bl	8000b10 <_Error_Handler>
    }
    return configTime;
 8000d24:	68fb      	ldr	r3, [r7, #12]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40003000 	.word	0x40003000
 8000d34:	464ccc00 	.word	0x464ccc00
 8000d38:	457ff000 	.word	0x457ff000
 8000d3c:	08005538 	.word	0x08005538

08000d40 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <RetargetInit+0x28>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <RetargetInit+0x2c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6898      	ldr	r0, [r3, #8]
 8000d54:	2300      	movs	r3, #0
 8000d56:	2202      	movs	r2, #2
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f003 fa59 	bl	8004210 <setvbuf>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000108 	.word	0x20000108
 8000d6c:	20000014 	.word	0x20000014

08000d70 <_isatty>:

int _isatty(int fd) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db04      	blt.n	8000d88 <_isatty+0x18>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	dc01      	bgt.n	8000d88 <_isatty+0x18>
    return 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e005      	b.n	8000d94 <_isatty+0x24>

  errno = EBADF;
 8000d88:	f003 fa10 	bl	80041ac <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2209      	movs	r2, #9
 8000d90:	601a      	str	r2, [r3, #0]
  return 0;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_write>:

int _write(int fd, char* ptr, int len) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d002      	beq.n	8000db4 <_write+0x18>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d111      	bne.n	8000dd8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <_write+0x54>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	f002 fd6c 	bl	800389e <HAL_UART_Transmit>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000dca:	7dfb      	ldrb	r3, [r7, #23]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <_write+0x38>
      return len;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	e008      	b.n	8000de6 <_write+0x4a>
    else
      return EIO;
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	e006      	b.n	8000de6 <_write+0x4a>
  }
  errno = EBADF;
 8000dd8:	f003 f9e8 	bl	80041ac <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2209      	movs	r2, #9
 8000de0:	601a      	str	r2, [r3, #0]
  return -1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000108 	.word	0x20000108

08000df4 <_close>:

int _close(int fd) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db04      	blt.n	8000e0c <_close+0x18>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	dc01      	bgt.n	8000e0c <_close+0x18>
    return 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e006      	b.n	8000e1a <_close+0x26>

  errno = EBADF;
 8000e0c:	f003 f9ce 	bl	80041ac <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2209      	movs	r2, #9
 8000e14:	601a      	str	r2, [r3, #0]
  return -1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000e2e:	f003 f9bd 	bl	80041ac <__errno>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2209      	movs	r2, #9
 8000e36:	601a      	str	r2, [r3, #0]
  return -1;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_read>:

int _read(int fd, char* ptr, int len) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d110      	bne.n	8000e78 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <_read+0x4c>)
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	2201      	movs	r2, #1
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	f002 fdae 	bl	80039c2 <HAL_UART_Receive>
 8000e66:	4603      	mov	r3, r0
 8000e68:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <_read+0x30>
      return 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <_read+0x42>
    else
      return EIO;
 8000e74:	2305      	movs	r3, #5
 8000e76:	e006      	b.n	8000e86 <_read+0x42>
  }
  errno = EBADF;
 8000e78:	f003 f998 	bl	80041ac <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2209      	movs	r2, #9
 8000e80:	601a      	str	r2, [r3, #0]
  return -1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000108 	.word	0x20000108

08000e94 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db08      	blt.n	8000eb6 <_fstat+0x22>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	dc05      	bgt.n	8000eb6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb0:	605a      	str	r2, [r3, #4]
    return 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e005      	b.n	8000ec2 <_fstat+0x2e>
  }

  errno = EBADF;
 8000eb6:	f003 f979 	bl	80041ac <__errno>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2209      	movs	r2, #9
 8000ebe:	601a      	str	r2, [r3, #0]
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ed2:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <MX_SPI1_Init+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000edc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f18:	220a      	movs	r2, #10
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f1e:	f001 fff3 	bl	8002f08 <HAL_SPI_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f28:	f7ff fe16 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000010c 	.word	0x2000010c
 8000f34:	40013000 	.word	0x40013000

08000f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <HAL_SPI_MspInit+0x88>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d12f      	bne.n	8000fb8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_SPI_MspInit+0x8c>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_SPI_MspInit+0x8c>)
 8000f5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_SPI_MspInit+0x8c>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_SPI_MspInit+0x8c>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_SPI_MspInit+0x8c>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_SPI_MspInit+0x8c>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f88:	23a0      	movs	r3, #160	; 0xa0
 8000f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <HAL_SPI_MspInit+0x90>)
 8000f9c:	f001 f8e6 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fa0:	2340      	movs	r3, #64	; 0x40
 8000fa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_SPI_MspInit+0x90>)
 8000fb4:	f001 f8da 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40013000 	.word	0x40013000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010800 	.word	0x40010800

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <HAL_MspInit+0x5c>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_MspInit+0x5c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_MspInit+0x5c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_MspInit+0x5c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_MspInit+0x60>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_MspInit+0x60>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <NMI_Handler+0x4>
	...

08001038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b085      	sub	sp, #20
 800103c:	af04      	add	r7, sp, #16

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    STM_LOGE(ISR_TAG, "");
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HardFault_Handler+0x2c>)
 8001040:	681c      	ldr	r4, [r3, #0]
 8001042:	f000 fb11 	bl	8001668 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HardFault_Handler+0x2c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2162      	movs	r1, #98	; 0x62
 800104e:	9102      	str	r1, [sp, #8]
 8001050:	4905      	ldr	r1, [pc, #20]	; (8001068 <HardFault_Handler+0x30>)
 8001052:	9101      	str	r1, [sp, #4]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	4613      	mov	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HardFault_Handler+0x34>)
 800105a:	4621      	mov	r1, r4
 800105c:	2001      	movs	r0, #1
 800105e:	f000 f8ff 	bl	8001260 <stm_log_write>
 8001062:	e7ec      	b.n	800103e <HardFault_Handler+0x6>
 8001064:	20000004 	.word	0x20000004
 8001068:	08005650 	.word	0x08005650
 800106c:	0800555c 	.word	0x0800555c

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010aa:	f000 facb 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <ADC1_2_IRQHandler+0x10>)
 80010ba:	f000 fc79 	bl	80019b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000a8 	.word	0x200000a8

080010c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TIM4_IRQHandler+0x10>)
 80010ce:	f002 f841 	bl	8003154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000164 	.word	0x20000164

080010dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b085      	sub	sp, #20
 80010e0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN USART1_IRQn 0 */
  STM_LOGD(ISR_TAG, "");
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <USART1_IRQHandler+0x38>)
 80010e4:	681c      	ldr	r4, [r3, #0]
 80010e6:	f000 fabf 	bl	8001668 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <USART1_IRQHandler+0x38>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	21f2      	movs	r1, #242	; 0xf2
 80010f2:	9102      	str	r1, [sp, #8]
 80010f4:	4908      	ldr	r1, [pc, #32]	; (8001118 <USART1_IRQHandler+0x3c>)
 80010f6:	9101      	str	r1, [sp, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4613      	mov	r3, r2
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <USART1_IRQHandler+0x40>)
 80010fe:	4621      	mov	r1, r4
 8001100:	2004      	movs	r0, #4
 8001102:	f000 f8ad 	bl	8001260 <stm_log_write>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <USART1_IRQHandler+0x44>)
 8001108:	f002 fd4e 	bl	8003ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	3704      	adds	r7, #4
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	20000004 	.word	0x20000004
 8001118:	08005664 	.word	0x08005664
 800111c:	08005580 	.word	0x08005580
 8001120:	200001ac 	.word	0x200001ac

08001124 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d106      	bne.n	8001146 <HAL_ADC_ConvCpltCallback+0x22>
  {
    lightSensorAdcValue = HAL_ADC_GetValue(hadc);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 fc2d 	bl	8001998 <HAL_ADC_GetValue>
 800113e:	4603      	mov	r3, r0
 8001140:	b29a      	uxth	r2, r3
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_ADC_ConvCpltCallback+0x30>)
 8001144:	801a      	strh	r2, [r3, #0]
  }
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200000a8 	.word	0x200000a8
 8001154:	20000094 	.word	0x20000094

08001158 <HAL_UART_RxCpltCallback>:

__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Process USART2 Receive_Cplt_IT */
  if (huart->Instance == huart1.Instance)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_UART_RxCpltCallback+0x7c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d12e      	bne.n	80011ca <HAL_UART_RxCpltCallback+0x72>
  {
    /* Reset Receive Buffer whenever index_value = 0 */
    if (uartCliHandle._rxIndex == 0)
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_UART_RxCpltCallback+0x80>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10d      	bne.n	8001190 <HAL_UART_RxCpltCallback+0x38>
    {
      for (uint8_t i = 0; i < USART_BUFFER_SIZE; i++)
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e007      	b.n	800118a <HAL_UART_RxCpltCallback+0x32>
      {
        uartCliHandle._rxBuffer[i] = 0;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_UART_RxCpltCallback+0x80>)
 800117e:	4413      	add	r3, r2
 8001180:	2200      	movs	r2, #0
 8001182:	705a      	strb	r2, [r3, #1]
      for (uint8_t i = 0; i < USART_BUFFER_SIZE; i++)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	3301      	adds	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b1d      	cmp	r3, #29
 800118e:	d9f4      	bls.n	800117a <HAL_UART_RxCpltCallback+0x22>
      }
    }
    /* If user input data not equal to "\r" */
    if (uartCliHandle._rxData[0] != '\r')
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_UART_RxCpltCallback+0x80>)
 8001192:	7fdb      	ldrb	r3, [r3, #31]
 8001194:	2b0d      	cmp	r3, #13
 8001196:	d00c      	beq.n	80011b2 <HAL_UART_RxCpltCallback+0x5a>
    {
      uartCliHandle._rxBuffer[uartCliHandle._rxIndex++] = uartCliHandle._rxData[0];
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_UART_RxCpltCallback+0x80>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	b2d1      	uxtb	r1, r2
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <HAL_UART_RxCpltCallback+0x80>)
 80011a2:	7011      	strb	r1, [r2, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_UART_RxCpltCallback+0x80>)
 80011a8:	7fda      	ldrb	r2, [r3, #31]
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_UART_RxCpltCallback+0x80>)
 80011ac:	440b      	add	r3, r1
 80011ae:	705a      	strb	r2, [r3, #1]
 80011b0:	e006      	b.n	80011c0 <HAL_UART_RxCpltCallback+0x68>
    }
    /* If user input data = "\r" */
    else
    {
      uartCliHandle._rxIndex = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_UART_RxCpltCallback+0x80>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
      uartCliHandle._rxCpltFlag = 1;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <HAL_UART_RxCpltCallback+0x80>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Trigger to Receive and jump into ISR on each ISR process is necessary */
    HAL_UART_Receive_IT(huart, (uint8_t *)(&uartCliHandle._rxData), 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	4906      	ldr	r1, [pc, #24]	; (80011dc <HAL_UART_RxCpltCallback+0x84>)
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f002 fc9b 	bl	8003b00 <HAL_UART_Receive_IT>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001ac 	.word	0x200001ac
 80011d8:	200000e4 	.word	0x200000e4
 80011dc:	20000103 	.word	0x20000103

080011e0 <HAL_TIM_PeriodElapsedCallback>:

__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == htim4.Instance)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d126      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x62>
  {
    static uint16_t millisSecond;
    static uint16_t blinkLedDelay;
    millisSecond++;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011fe:	801a      	strh	r2, [r3, #0]
    blinkLedDelay++;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800120a:	801a      	strh	r2, [r3, #0]
    if (millisSecond == 70)
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	2b46      	cmp	r3, #70	; 0x46
 8001212:	d10a      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      millisSecond = 0;
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001216:	2200      	movs	r2, #0
 8001218:	801a      	strh	r2, [r3, #0]
      if (uartCliHandle._rxCpltFlag == 1)
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800121c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001220:	2b01      	cmp	r3, #1
 8001222:	d102      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x4a>
      {
        // STM_LOGI(ISR_TAG, "receive uart cmd: %s", (uint8_t *)uartCliHandle._rxBuffer);
        runUserCmd(&uartCliHandle);
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001226:	f000 f993 	bl	8001550 <runUserCmd>
      }
    }
    if(blinkLedDelay == 500){
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001232:	d106      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x62>
      blinkLedDelay = 0;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]
      TOGGLE_LED();
 800123a:	2101      	movs	r1, #1
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800123e:	f001 f931 	bl	80024a4 <HAL_GPIO_TogglePin>
    }
  }
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000164 	.word	0x20000164
 8001250:	20000096 	.word	0x20000096
 8001254:	20000098 	.word	0x20000098
 8001258:	200000e4 	.word	0x200000e4
 800125c:	40010c00 	.word	0x40010c00

08001260 <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 8001260:	b40c      	push	{r2, r3}
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	6039      	str	r1, [r7, #0]
 800126c:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 8001274:	68f9      	ldr	r1, [r7, #12]
 8001276:	69b8      	ldr	r0, [r7, #24]
 8001278:	f003 f890 	bl	800439c <viprintf>
    va_end(arg);
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001286:	b002      	add	sp, #8
 8001288:	4770      	bx	lr
	...

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f002 ff76 	bl	80041ac <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20005000 	.word	0x20005000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	2000009c 	.word	0x2000009c
 80012f4:	20000200 	.word	0x20000200

080012f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b08b      	sub	sp, #44	; 0x2c
 8001308:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	463b      	mov	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001320:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <MX_TIM4_Init+0xe0>)
 8001322:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <MX_TIM4_Init+0xe4>)
 8001324:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36 - 1;
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <MX_TIM4_Init+0xe0>)
 8001328:	2223      	movs	r2, #35	; 0x23
 800132a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <MX_TIM4_Init+0xe0>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <MX_TIM4_Init+0xe0>)
 8001334:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001338:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <MX_TIM4_Init+0xe0>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <MX_TIM4_Init+0xe0>)
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001346:	4827      	ldr	r0, [pc, #156]	; (80013e4 <MX_TIM4_Init+0xe0>)
 8001348:	f001 fe62 	bl	8003010 <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001352:	f7ff fc01 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4619      	mov	r1, r3
 8001362:	4820      	ldr	r0, [pc, #128]	; (80013e4 <MX_TIM4_Init+0xe0>)
 8001364:	f001 fffe 	bl	8003364 <HAL_TIM_ConfigClockSource>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800136e:	f7ff fbf3 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	4619      	mov	r1, r3
 800137e:	4819      	ldr	r0, [pc, #100]	; (80013e4 <MX_TIM4_Init+0xe0>)
 8001380:	f002 f9d0 	bl	8003724 <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800138a:	f7ff fbe5 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  ERROR_CHECK(HAL_TIM_Base_Start_IT(&htim4));
 800138e:	4815      	ldr	r0, [pc, #84]	; (80013e4 <MX_TIM4_Init+0xe0>)
 8001390:	f001 fe8e 	bl	80030b0 <HAL_TIM_Base_Start_IT>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d020      	beq.n	80013dc <MX_TIM4_Init+0xd8>
 800139a:	f000 f965 	bl	8001668 <HAL_GetTick>
 800139e:	4604      	mov	r4, r0
 80013a0:	4810      	ldr	r0, [pc, #64]	; (80013e4 <MX_TIM4_Init+0xe0>)
 80013a2:	f001 fe85 	bl	80030b0 <HAL_TIM_Base_Start_IT>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d009      	beq.n	80013c0 <MX_TIM4_Init+0xbc>
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_TIM4_Init+0xe0>)
 80013ae:	f001 fe7f 	bl	80030b0 <HAL_TIM_Base_Start_IT>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d101      	bne.n	80013bc <MX_TIM4_Init+0xb8>
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_TIM4_Init+0xe8>)
 80013ba:	e002      	b.n	80013c2 <MX_TIM4_Init+0xbe>
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_TIM4_Init+0xec>)
 80013be:	e000      	b.n	80013c2 <MX_TIM4_Init+0xbe>
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_TIM4_Init+0xf0>)
 80013c2:	9303      	str	r3, [sp, #12]
 80013c4:	2341      	movs	r3, #65	; 0x41
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_TIM4_Init+0xf4>)
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_TIM4_Init+0xf8>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4623      	mov	r3, r4
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <MX_TIM4_Init+0xfc>)
 80013d4:	4909      	ldr	r1, [pc, #36]	; (80013fc <MX_TIM4_Init+0xf8>)
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff ff42 	bl	8001260 <stm_log_write>
  /* USER CODE END TIM4_Init 2 */
}
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	20000164 	.word	0x20000164
 80013e8:	40000800 	.word	0x40000800
 80013ec:	080055a4 	.word	0x080055a4
 80013f0:	080055b0 	.word	0x080055b0
 80013f4:	080055bc 	.word	0x080055bc
 80013f8:	08005690 	.word	0x08005690
 80013fc:	080055f8 	.word	0x080055f8
 8001400:	080055c8 	.word	0x080055c8

08001404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  if (tim_baseHandle->Instance == TIM4)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_TIM_Base_MspInit+0x44>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d113      	bne.n	800143e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_TIM_Base_MspInit+0x48>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_TIM_Base_MspInit+0x48>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_TIM_Base_MspInit+0x48>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2101      	movs	r1, #1
 8001432:	201e      	movs	r0, #30
 8001434:	f000 fded 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001438:	201e      	movs	r0, #30
 800143a:	f000 fe06 	bl	800204a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40000800 	.word	0x40000800
 800144c:	40021000 	.word	0x40021000

08001450 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <MX_USART1_UART_Init+0x54>)
 8001458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 8001488:	f002 f9bc 	bl	8003804 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f7ff fb61 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  RetargetInit(&huart1);
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 8001498:	f7ff fc52 	bl	8000d40 <RetargetInit>
  /* USER CODE END USART1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200001ac 	.word	0x200001ac
 80014a4:	40013800 	.word	0x40013800

080014a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a20      	ldr	r2, [pc, #128]	; (8001544 <HAL_UART_MspInit+0x9c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d139      	bne.n	800153c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_UART_MspInit+0xa0>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <HAL_UART_MspInit+0xa0>)
 80014ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_UART_MspInit+0xa0>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_UART_MspInit+0xa0>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_UART_MspInit+0xa0>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_UART_MspInit+0xa0>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4619      	mov	r1, r3
 800150c:	480f      	ldr	r0, [pc, #60]	; (800154c <HAL_UART_MspInit+0xa4>)
 800150e:	f000 fe2d 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4619      	mov	r1, r3
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <HAL_UART_MspInit+0xa4>)
 8001528:	f000 fe20 	bl	800216c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	2025      	movs	r0, #37	; 0x25
 8001532:	f000 fd6e 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001536:	2025      	movs	r0, #37	; 0x25
 8001538:	f000 fd87 	bl	800204a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40013800 	.word	0x40013800
 8001548:	40021000 	.word	0x40021000
 800154c:	40010800 	.word	0x40010800

08001550 <runUserCmd>:
  }
}

/* USER CODE BEGIN 1 */
void runUserCmd(USART_CLI_HandleTypedef_t *uartCliHandle)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

//  char *input_string = (char *)&uartCliHandle->_rxBuffer;
  /* Clear receive complete flag */
  uartCliHandle->_rxCpltFlag = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  // else
  // {
  //   printf("Unknown Command: \"%s\"\r\n", input_string);
  //   printf("\r\n\r\n>>> ");
  // }
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800156c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800156e:	e003      	b.n	8001578 <LoopCopyDataInit>

08001570 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001572:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001574:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001576:	3104      	adds	r1, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800157c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800157e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001580:	d3f6      	bcc.n	8001570 <CopyDataInit>
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001584:	e002      	b.n	800158c <LoopFillZerobss>

08001586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001588:	f842 3b04 	str.w	r3, [r2], #4

0800158c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800158e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001590:	d3f9      	bcc.n	8001586 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001592:	f7ff feb1 	bl	80012f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f002 fe0f 	bl	80041b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159a:	f7ff f9bd 	bl	8000918 <main>
  bx lr
 800159e:	4770      	bx	lr
  ldr r3, =_sidata
 80015a0:	08005740 	.word	0x08005740
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015a8:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80015ac:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80015b0:	20000200 	.word	0x20000200

080015b4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <CAN1_RX1_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_Init+0x28>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_Init+0x28>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 fd17 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fcfa 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fd2f 	bl	8002066 <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 fcf7 	bl	8002012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000008 	.word	0x20000008
 800163c:	20000010 	.word	0x20000010
 8001640:	2000000c 	.word	0x2000000c

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_IncTick+0x1c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_IncTick+0x20>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a03      	ldr	r2, [pc, #12]	; (8001664 <HAL_IncTick+0x20>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000010 	.word	0x20000010
 8001664:	200001ec 	.word	0x200001ec

08001668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <HAL_GetTick+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	200001ec 	.word	0x200001ec

0800167c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0be      	b.n	800181c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff f83c 	bl	8000738 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fb8b 	bl	8001ddc <ADC_ConversionStop_Disable>
 80016c6:	4603      	mov	r3, r0
 80016c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 8099 	bne.w	800180a <HAL_ADC_Init+0x18e>
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 8095 	bne.w	800180a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016e8:	f023 0302 	bic.w	r3, r3, #2
 80016ec:	f043 0202 	orr.w	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7b1b      	ldrb	r3, [r3, #12]
 8001702:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001704:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	4313      	orrs	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	d003      	beq.n	800171e <HAL_ADC_Init+0xa2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d102      	bne.n	8001724 <HAL_ADC_Init+0xa8>
 800171e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001722:	e000      	b.n	8001726 <HAL_ADC_Init+0xaa>
 8001724:	2300      	movs	r3, #0
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7d1b      	ldrb	r3, [r3, #20]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d119      	bne.n	8001768 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7b1b      	ldrb	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	3b01      	subs	r3, #1
 8001742:	035a      	lsls	r2, r3, #13
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	e00b      	b.n	8001768 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	f043 0220 	orr.w	r2, r3, #32
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	430a      	orrs	r2, r1
 800177a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_ADC_Init+0x1a8>)
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	430b      	orrs	r3, r1
 800178e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001798:	d003      	beq.n	80017a2 <HAL_ADC_Init+0x126>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d104      	bne.n	80017ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	051b      	lsls	r3, r3, #20
 80017aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	430a      	orrs	r2, r1
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_ADC_Init+0x1ac>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d10b      	bne.n	80017e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017e6:	e018      	b.n	800181a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f023 0312 	bic.w	r3, r3, #18
 80017f0:	f043 0210 	orr.w	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	f043 0201 	orr.w	r2, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001808:	e007      	b.n	800181a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	f043 0210 	orr.w	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800181a:	7dfb      	ldrb	r3, [r7, #23]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	ffe1f7fd 	.word	0xffe1f7fd
 8001828:	ff1f0efe 	.word	0xff1f0efe

0800182c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Start_IT+0x1a>
 8001842:	2302      	movs	r3, #2
 8001844:	e0a0      	b.n	8001988 <HAL_ADC_Start_IT+0x15c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fa72 	bl	8001d38 <ADC_Enable>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 808f 	bne.w	800197e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a45      	ldr	r2, [pc, #276]	; (8001990 <HAL_ADC_Start_IT+0x164>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d105      	bne.n	800188a <HAL_ADC_Start_IT+0x5e>
 800187e:	4b45      	ldr	r3, [pc, #276]	; (8001994 <HAL_ADC_Start_IT+0x168>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d026      	beq.n	80018f2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018b4:	e01d      	b.n	80018f2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a33      	ldr	r2, [pc, #204]	; (8001994 <HAL_ADC_Start_IT+0x168>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d004      	beq.n	80018d6 <HAL_ADC_Start_IT+0xaa>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <HAL_ADC_Start_IT+0x164>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10d      	bne.n	80018f2 <HAL_ADC_Start_IT+0xc6>
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_ADC_Start_IT+0x168>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	f023 0206 	bic.w	r2, r3, #6
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
 800190a:	e002      	b.n	8001912 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0202 	mvn.w	r2, #2
 8001922:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0220 	orr.w	r2, r2, #32
 8001932:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800193e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001942:	d113      	bne.n	800196c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_ADC_Start_IT+0x164>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d105      	bne.n	800195a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_ADC_Start_IT+0x168>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001956:	2b00      	cmp	r3, #0
 8001958:	d108      	bne.n	800196c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	e00c      	b.n	8001986 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e003      	b.n	8001986 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40012800 	.word	0x40012800
 8001994:	40012400 	.word	0x40012400

08001998 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d140      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d139      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019fa:	d11d      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d119      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0220 	bic.w	r2, r2, #32
 8001a12:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fb73 	bl	8001124 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f06f 0212 	mvn.w	r2, #18
 8001a46:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a52:	2b80      	cmp	r3, #128	; 0x80
 8001a54:	d14f      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d148      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001a86:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001a8a:	d012      	beq.n	8001ab2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d125      	bne.n	8001ae6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001aa4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aa8:	d11d      	bne.n	8001ae6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d119      	bne.n	8001ae6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f9b2 	bl	8001e50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 020c 	mvn.w	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b40      	cmp	r3, #64	; 0x40
 8001b02:	d114      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10d      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f809 	bl	8001b36 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0201 	mvn.w	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x20>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e0dc      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x1da>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b06      	cmp	r3, #6
 8001b76:	d81c      	bhi.n	8001bb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	3b05      	subs	r3, #5
 8001b8a:	221f      	movs	r2, #31
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4019      	ands	r1, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b05      	subs	r3, #5
 8001ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb0:	e03c      	b.n	8001c2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d81c      	bhi.n	8001bf4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b23      	subs	r3, #35	; 0x23
 8001bcc:	221f      	movs	r2, #31
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4019      	ands	r1, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3b23      	subs	r3, #35	; 0x23
 8001be6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf2:	e01b      	b.n	8001c2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b41      	subs	r3, #65	; 0x41
 8001c06:	221f      	movs	r2, #31
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4019      	ands	r1, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b41      	subs	r3, #65	; 0x41
 8001c20:	fa00 f203 	lsl.w	r2, r0, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d91c      	bls.n	8001c6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	3b1e      	subs	r3, #30
 8001c46:	2207      	movs	r2, #7
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4019      	ands	r1, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6898      	ldr	r0, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b1e      	subs	r3, #30
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	e019      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6919      	ldr	r1, [r3, #16]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2207      	movs	r2, #7
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4019      	ands	r1, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6898      	ldr	r0, [r3, #8]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d003      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cae:	2b11      	cmp	r3, #17
 8001cb0:	d132      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_ADC_ConfigChannel+0x1e4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d125      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d126      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cd8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d11a      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9a      	lsrs	r2, r3, #18
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf8:	e002      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f9      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x1b2>
 8001d06:	e007      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	40012400 	.word	0x40012400
 8001d30:	20000008 	.word	0x20000008
 8001d34:	431bde83 	.word	0x431bde83

08001d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d039      	beq.n	8001dca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <ADC_Enable+0x9c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <ADC_Enable+0xa0>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9b      	lsrs	r3, r3, #18
 8001d72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d74:	e002      	b.n	8001d7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d82:	f7ff fc71 	bl	8001668 <HAL_GetTick>
 8001d86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d88:	e018      	b.n	8001dbc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d8a:	f7ff fc6d 	bl	8001668 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d911      	bls.n	8001dbc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f043 0210 	orr.w	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e007      	b.n	8001dcc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d1df      	bne.n	8001d8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	431bde83 	.word	0x431bde83

08001ddc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d127      	bne.n	8001e46 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e06:	f7ff fc2f 	bl	8001668 <HAL_GetTick>
 8001e0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e0c:	e014      	b.n	8001e38 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e0e:	f7ff fc2b 	bl	8001668 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d90d      	bls.n	8001e38 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e007      	b.n	8001e48 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d0e3      	beq.n	8001e0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4906      	ldr	r1, [pc, #24]	; (8001efc <__NVIC_EnableIRQ+0x34>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc8:	d301      	bcc.n	8001fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <SysTick_Config+0x40>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f7ff ff90 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff2d 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002024:	f7ff ff42 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8002028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f7ff ff90 	bl	8001f54 <NVIC_EncodePriority>
 8002034:	4602      	mov	r2, r0
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff5f 	bl	8001f00 <__NVIC_SetPriority>
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff35 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffa2 	bl	8001fb8 <SysTick_Config>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002092:	2b02      	cmp	r3, #2
 8002094:	d005      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2204      	movs	r2, #4
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e051      	b.n	8002146 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 020e 	bic.w	r2, r2, #14
 80020b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_DMA_Abort_IT+0xd0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d029      	beq.n	8002120 <HAL_DMA_Abort_IT+0xa0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a20      	ldr	r2, [pc, #128]	; (8002154 <HAL_DMA_Abort_IT+0xd4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d022      	beq.n	800211c <HAL_DMA_Abort_IT+0x9c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_DMA_Abort_IT+0xd8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d01a      	beq.n	8002116 <HAL_DMA_Abort_IT+0x96>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_DMA_Abort_IT+0xdc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d012      	beq.n	8002110 <HAL_DMA_Abort_IT+0x90>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <HAL_DMA_Abort_IT+0xe0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00a      	beq.n	800210a <HAL_DMA_Abort_IT+0x8a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_DMA_Abort_IT+0xe4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d102      	bne.n	8002104 <HAL_DMA_Abort_IT+0x84>
 80020fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002102:	e00e      	b.n	8002122 <HAL_DMA_Abort_IT+0xa2>
 8002104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002108:	e00b      	b.n	8002122 <HAL_DMA_Abort_IT+0xa2>
 800210a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800210e:	e008      	b.n	8002122 <HAL_DMA_Abort_IT+0xa2>
 8002110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002114:	e005      	b.n	8002122 <HAL_DMA_Abort_IT+0xa2>
 8002116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211a:	e002      	b.n	8002122 <HAL_DMA_Abort_IT+0xa2>
 800211c:	2310      	movs	r3, #16
 800211e:	e000      	b.n	8002122 <HAL_DMA_Abort_IT+0xa2>
 8002120:	2301      	movs	r3, #1
 8002122:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_DMA_Abort_IT+0xe8>)
 8002124:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
    } 
  }
  return status;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40020008 	.word	0x40020008
 8002154:	4002001c 	.word	0x4002001c
 8002158:	40020030 	.word	0x40020030
 800215c:	40020044 	.word	0x40020044
 8002160:	40020058 	.word	0x40020058
 8002164:	4002006c 	.word	0x4002006c
 8002168:	40020000 	.word	0x40020000

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b08b      	sub	sp, #44	; 0x2c
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217e:	e169      	b.n	8002454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002180:	2201      	movs	r2, #1
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 8158 	bne.w	800244e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a9a      	ldr	r2, [pc, #616]	; (800240c <HAL_GPIO_Init+0x2a0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d05e      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021a8:	4a98      	ldr	r2, [pc, #608]	; (800240c <HAL_GPIO_Init+0x2a0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d875      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021ae:	4a98      	ldr	r2, [pc, #608]	; (8002410 <HAL_GPIO_Init+0x2a4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d058      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021b4:	4a96      	ldr	r2, [pc, #600]	; (8002410 <HAL_GPIO_Init+0x2a4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d86f      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021ba:	4a96      	ldr	r2, [pc, #600]	; (8002414 <HAL_GPIO_Init+0x2a8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d052      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021c0:	4a94      	ldr	r2, [pc, #592]	; (8002414 <HAL_GPIO_Init+0x2a8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d869      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021c6:	4a94      	ldr	r2, [pc, #592]	; (8002418 <HAL_GPIO_Init+0x2ac>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d04c      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021cc:	4a92      	ldr	r2, [pc, #584]	; (8002418 <HAL_GPIO_Init+0x2ac>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d863      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021d2:	4a92      	ldr	r2, [pc, #584]	; (800241c <HAL_GPIO_Init+0x2b0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d046      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021d8:	4a90      	ldr	r2, [pc, #576]	; (800241c <HAL_GPIO_Init+0x2b0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d85d      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d82a      	bhi.n	8002238 <HAL_GPIO_Init+0xcc>
 80021e2:	2b12      	cmp	r3, #18
 80021e4:	d859      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <HAL_GPIO_Init+0x80>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	08002267 	.word	0x08002267
 80021f0:	08002241 	.word	0x08002241
 80021f4:	08002253 	.word	0x08002253
 80021f8:	08002295 	.word	0x08002295
 80021fc:	0800229b 	.word	0x0800229b
 8002200:	0800229b 	.word	0x0800229b
 8002204:	0800229b 	.word	0x0800229b
 8002208:	0800229b 	.word	0x0800229b
 800220c:	0800229b 	.word	0x0800229b
 8002210:	0800229b 	.word	0x0800229b
 8002214:	0800229b 	.word	0x0800229b
 8002218:	0800229b 	.word	0x0800229b
 800221c:	0800229b 	.word	0x0800229b
 8002220:	0800229b 	.word	0x0800229b
 8002224:	0800229b 	.word	0x0800229b
 8002228:	0800229b 	.word	0x0800229b
 800222c:	0800229b 	.word	0x0800229b
 8002230:	08002249 	.word	0x08002249
 8002234:	0800225d 	.word	0x0800225d
 8002238:	4a79      	ldr	r2, [pc, #484]	; (8002420 <HAL_GPIO_Init+0x2b4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800223e:	e02c      	b.n	800229a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	623b      	str	r3, [r7, #32]
          break;
 8002246:	e029      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	3304      	adds	r3, #4
 800224e:	623b      	str	r3, [r7, #32]
          break;
 8002250:	e024      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	3308      	adds	r3, #8
 8002258:	623b      	str	r3, [r7, #32]
          break;
 800225a:	e01f      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	330c      	adds	r3, #12
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e01a      	b.n	800229c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800226e:	2304      	movs	r3, #4
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e013      	b.n	800229c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800227c:	2308      	movs	r3, #8
 800227e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	611a      	str	r2, [r3, #16]
          break;
 8002286:	e009      	b.n	800229c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002288:	2308      	movs	r3, #8
 800228a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	615a      	str	r2, [r3, #20]
          break;
 8002292:	e003      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
          break;
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x130>
          break;
 800229a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2bff      	cmp	r3, #255	; 0xff
 80022a0:	d801      	bhi.n	80022a6 <HAL_GPIO_Init+0x13a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	e001      	b.n	80022aa <HAL_GPIO_Init+0x13e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d802      	bhi.n	80022b8 <HAL_GPIO_Init+0x14c>
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	e002      	b.n	80022be <HAL_GPIO_Init+0x152>
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	3b08      	subs	r3, #8
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	210f      	movs	r1, #15
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	401a      	ands	r2, r3
 80022d0:	6a39      	ldr	r1, [r7, #32]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	431a      	orrs	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80b1 	beq.w	800244e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ec:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <HAL_GPIO_Init+0x2b8>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <HAL_GPIO_Init+0x2b8>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6193      	str	r3, [r2, #24]
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_GPIO_Init+0x2b8>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002304:	4a48      	ldr	r2, [pc, #288]	; (8002428 <HAL_GPIO_Init+0x2bc>)
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a40      	ldr	r2, [pc, #256]	; (800242c <HAL_GPIO_Init+0x2c0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_GPIO_Init+0x1ec>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <HAL_GPIO_Init+0x2c4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00d      	beq.n	8002354 <HAL_GPIO_Init+0x1e8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3e      	ldr	r2, [pc, #248]	; (8002434 <HAL_GPIO_Init+0x2c8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <HAL_GPIO_Init+0x1e4>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3d      	ldr	r2, [pc, #244]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_GPIO_Init+0x1e0>
 8002348:	2303      	movs	r3, #3
 800234a:	e006      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 800234c:	2304      	movs	r3, #4
 800234e:	e004      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 8002350:	2302      	movs	r3, #2
 8002352:	e002      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 8002358:	2300      	movs	r3, #0
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	f002 0203 	and.w	r2, r2, #3
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	4093      	lsls	r3, r2
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800236a:	492f      	ldr	r1, [pc, #188]	; (8002428 <HAL_GPIO_Init+0x2bc>)
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_GPIO_Init+0x2d0>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	492c      	ldr	r1, [pc, #176]	; (800243c <HAL_GPIO_Init+0x2d0>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_GPIO_Init+0x2d0>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	43db      	mvns	r3, r3
 800239a:	4928      	ldr	r1, [pc, #160]	; (800243c <HAL_GPIO_Init+0x2d0>)
 800239c:	4013      	ands	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	491e      	ldr	r1, [pc, #120]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4918      	ldr	r1, [pc, #96]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	4914      	ldr	r1, [pc, #80]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d021      	beq.n	8002440 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_GPIO_Init+0x2d0>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
 8002408:	e021      	b.n	800244e <HAL_GPIO_Init+0x2e2>
 800240a:	bf00      	nop
 800240c:	10320000 	.word	0x10320000
 8002410:	10310000 	.word	0x10310000
 8002414:	10220000 	.word	0x10220000
 8002418:	10210000 	.word	0x10210000
 800241c:	10120000 	.word	0x10120000
 8002420:	10110000 	.word	0x10110000
 8002424:	40021000 	.word	0x40021000
 8002428:	40010000 	.word	0x40010000
 800242c:	40010800 	.word	0x40010800
 8002430:	40010c00 	.word	0x40010c00
 8002434:	40011000 	.word	0x40011000
 8002438:	40011400 	.word	0x40011400
 800243c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	43db      	mvns	r3, r3
 8002448:	4909      	ldr	r1, [pc, #36]	; (8002470 <HAL_GPIO_Init+0x304>)
 800244a:	4013      	ands	r3, r2
 800244c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3301      	adds	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	f47f ae8e 	bne.w	8002180 <HAL_GPIO_Init+0x14>
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	372c      	adds	r7, #44	; 0x2c
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	611a      	str	r2, [r3, #16]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43d9      	mvns	r1, r3
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	400b      	ands	r3, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e02b      	b.n	8002540 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80024f0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f245 5255 	movw	r2, #21845	; 0x5555
 80024fa:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6852      	ldr	r2, [r2, #4]
 8002504:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002510:	f7ff f8aa 	bl	8001668 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002516:	e008      	b.n	800252a <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002518:	f7ff f8a6 	bl	8001668 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b26      	cmp	r3, #38	; 0x26
 8002524:	d901      	bls.n	800252a <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e00a      	b.n	8002540 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f1      	bne.n	8002518 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800253c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002558:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
	...

08002568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e26c      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8087 	beq.w	8002696 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002588:	4b92      	ldr	r3, [pc, #584]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b04      	cmp	r3, #4
 8002592:	d00c      	beq.n	80025ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002594:	4b8f      	ldr	r3, [pc, #572]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d112      	bne.n	80025c6 <HAL_RCC_OscConfig+0x5e>
 80025a0:	4b8c      	ldr	r3, [pc, #560]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d10b      	bne.n	80025c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d06c      	beq.n	8002694 <HAL_RCC_OscConfig+0x12c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d168      	bne.n	8002694 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e246      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x76>
 80025d0:	4b80      	ldr	r3, [pc, #512]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a7f      	ldr	r2, [pc, #508]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e02e      	b.n	800263c <HAL_RCC_OscConfig+0xd4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x98>
 80025e6:	4b7b      	ldr	r3, [pc, #492]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a7a      	ldr	r2, [pc, #488]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e01d      	b.n	800263c <HAL_RCC_OscConfig+0xd4>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0xbc>
 800260a:	4b72      	ldr	r3, [pc, #456]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a71      	ldr	r2, [pc, #452]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b6f      	ldr	r3, [pc, #444]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6e      	ldr	r2, [pc, #440]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0xd4>
 8002624:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a6a      	ldr	r2, [pc, #424]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 800262a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a67      	ldr	r2, [pc, #412]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff f810 	bl	8001668 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7ff f80c 	bl	8001668 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1fa      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xe4>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fffc 	bl	8001668 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fff8 	bl	8001668 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e1e6      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x10c>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d063      	beq.n	800276a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a2:	4b4c      	ldr	r3, [pc, #304]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ae:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d11c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x18c>
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_RCC_OscConfig+0x176>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d001      	beq.n	80026de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e1ba      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4939      	ldr	r1, [pc, #228]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	e03a      	b.n	800276a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d020      	beq.n	800273e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fc:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <HAL_RCC_OscConfig+0x270>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7fe ffb1 	bl	8001668 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270a:	f7fe ffad 	bl	8001668 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e19b      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4927      	ldr	r1, [pc, #156]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
 800273c:	e015      	b.n	800276a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe ff90 	bl	8001668 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274c:	f7fe ff8c 	bl	8001668 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e17a      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d03a      	beq.n	80027ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d019      	beq.n	80027b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002784:	f7fe ff70 	bl	8001668 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe ff6c 	bl	8001668 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e15a      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027aa:	2001      	movs	r0, #1
 80027ac:	f000 fad8 	bl	8002d60 <RCC_Delay>
 80027b0:	e01c      	b.n	80027ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b8:	f7fe ff56 	bl	8001668 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027be:	e00f      	b.n	80027e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe ff52 	bl	8001668 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d908      	bls.n	80027e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e140      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	42420000 	.word	0x42420000
 80027dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e0:	4b9e      	ldr	r3, [pc, #632]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e9      	bne.n	80027c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80a6 	beq.w	8002946 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fe:	4b97      	ldr	r3, [pc, #604]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10d      	bne.n	8002826 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	4b94      	ldr	r3, [pc, #592]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4a93      	ldr	r2, [pc, #588]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	61d3      	str	r3, [r2, #28]
 8002816:	4b91      	ldr	r3, [pc, #580]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b8e      	ldr	r3, [pc, #568]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d118      	bne.n	8002864 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b8b      	ldr	r3, [pc, #556]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a8a      	ldr	r2, [pc, #552]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7fe ff13 	bl	8001668 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002846:	f7fe ff0f 	bl	8001668 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b64      	cmp	r3, #100	; 0x64
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0fd      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b81      	ldr	r3, [pc, #516]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x312>
 800286c:	4b7b      	ldr	r3, [pc, #492]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4a7a      	ldr	r2, [pc, #488]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6213      	str	r3, [r2, #32]
 8002878:	e02d      	b.n	80028d6 <HAL_RCC_OscConfig+0x36e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x334>
 8002882:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a75      	ldr	r2, [pc, #468]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	4b73      	ldr	r3, [pc, #460]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a72      	ldr	r2, [pc, #456]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	6213      	str	r3, [r2, #32]
 800289a:	e01c      	b.n	80028d6 <HAL_RCC_OscConfig+0x36e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d10c      	bne.n	80028be <HAL_RCC_OscConfig+0x356>
 80028a4:	4b6d      	ldr	r3, [pc, #436]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a6c      	ldr	r2, [pc, #432]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6213      	str	r3, [r2, #32]
 80028bc:	e00b      	b.n	80028d6 <HAL_RCC_OscConfig+0x36e>
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4a66      	ldr	r2, [pc, #408]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6213      	str	r3, [r2, #32]
 80028ca:	4b64      	ldr	r3, [pc, #400]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4a63      	ldr	r2, [pc, #396]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d015      	beq.n	800290a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7fe fec3 	bl	8001668 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe febf 	bl	8001668 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e0ab      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ee      	beq.n	80028e6 <HAL_RCC_OscConfig+0x37e>
 8002908:	e014      	b.n	8002934 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7fe fead 	bl	8001668 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fea9 	bl	8001668 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e095      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ee      	bne.n	8002912 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293a:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4a47      	ldr	r2, [pc, #284]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002944:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8081 	beq.w	8002a52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b08      	cmp	r3, #8
 800295a:	d061      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d146      	bne.n	80029f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002964:	4b3f      	ldr	r3, [pc, #252]	; (8002a64 <HAL_RCC_OscConfig+0x4fc>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe fe7d 	bl	8001668 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe fe79 	bl	8001668 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e067      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f0      	bne.n	8002972 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d108      	bne.n	80029ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800299a:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	492d      	ldr	r1, [pc, #180]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a19      	ldr	r1, [r3, #32]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	430b      	orrs	r3, r1
 80029be:	4927      	ldr	r1, [pc, #156]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c4:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <HAL_RCC_OscConfig+0x4fc>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe fe4d 	bl	8001668 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d2:	f7fe fe49 	bl	8001668 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e037      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x46a>
 80029f0:	e02f      	b.n	8002a52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_RCC_OscConfig+0x4fc>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fe36 	bl	8001668 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe fe32 	bl	8001668 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e020      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x498>
 8002a1e:	e018      	b.n	8002a52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e013      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40007000 	.word	0x40007000
 8002a64:	42420060 	.word	0x42420060

08002a68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0d0      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d910      	bls.n	8002aac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b67      	ldr	r3, [pc, #412]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 0207 	bic.w	r2, r3, #7
 8002a92:	4965      	ldr	r1, [pc, #404]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0b8      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac4:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ace:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ae6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	494d      	ldr	r1, [pc, #308]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d040      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d115      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e07f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b26:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e073      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e06b      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4936      	ldr	r1, [pc, #216]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b58:	f7fe fd86 	bl	8001668 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b60:	f7fe fd82 	bl	8001668 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e053      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 020c 	and.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1eb      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d210      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 0207 	bic.w	r2, r3, #7
 8002b9e:	4922      	ldr	r1, [pc, #136]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e032      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4916      	ldr	r1, [pc, #88]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	490e      	ldr	r1, [pc, #56]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bf6:	f000 f821 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	490a      	ldr	r1, [pc, #40]	; (8002c30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0e:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <HAL_RCC_ClockConfig+0x1cc>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_ClockConfig+0x1d0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fce4 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	08005678 	.word	0x08005678
 8002c34:	20000008 	.word	0x20000008
 8002c38:	2000000c 	.word	0x2000000c

08002c3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c3c:	b490      	push	{r4, r7}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c42:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c44:	1d3c      	adds	r4, r7, #4
 8002c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c4c:	f240 2301 	movw	r3, #513	; 0x201
 8002c50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c66:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x40>
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x46>
 8002c7a:	e02d      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7e:	623b      	str	r3, [r7, #32]
      break;
 8002c80:	e02d      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	0c9b      	lsrs	r3, r3, #18
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c8e:	4413      	add	r3, r2
 8002c90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c5b      	lsrs	r3, r3, #17
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cae:	4413      	add	r3, r2
 8002cb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cba:	fb02 f203 	mul.w	r2, r2, r3
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	e004      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	623b      	str	r3, [r7, #32]
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cda:	623b      	str	r3, [r7, #32]
      break;
 8002cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cde:	6a3b      	ldr	r3, [r7, #32]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3728      	adds	r7, #40	; 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc90      	pop	{r4, r7}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	08005608 	.word	0x08005608
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	007a1200 	.word	0x007a1200
 8002cf8:	003d0900 	.word	0x003d0900

08002cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	20000008 	.word	0x20000008

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff2 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08005688 	.word	0x08005688

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d3c:	f7ff ffde 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	0adb      	lsrs	r3, r3, #11
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08005688 	.word	0x08005688

08002d60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <RCC_Delay+0x34>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <RCC_Delay+0x38>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	0a5b      	lsrs	r3, r3, #9
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d7c:	bf00      	nop
  }
  while (Delay --);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1e5a      	subs	r2, r3, #1
 8002d82:	60fa      	str	r2, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f9      	bne.n	8002d7c <RCC_Delay+0x1c>
}
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	20000008 	.word	0x20000008
 8002d98:	10624dd3 	.word	0x10624dd3

08002d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d07d      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002db8:	2300      	movs	r3, #0
 8002dba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dbc:	4b4f      	ldr	r3, [pc, #316]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10d      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc8:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	61d3      	str	r3, [r2, #28]
 8002dd4:	4b49      	ldr	r3, [pc, #292]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	4b46      	ldr	r3, [pc, #280]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d118      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df0:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a42      	ldr	r2, [pc, #264]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fc34 	bl	8001668 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	e008      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e04:	f7fe fc30 	bl	8001668 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e06d      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e22:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d02e      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d027      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e40:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e50:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e56:	4a29      	ldr	r2, [pc, #164]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d014      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fe fbff 	bl	8001668 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fbfb 	bl	8001668 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e036      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ee      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4917      	ldr	r1, [pc, #92]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4a13      	ldr	r2, [pc, #76]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	490b      	ldr	r1, [pc, #44]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4904      	ldr	r1, [pc, #16]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	42420440 	.word	0x42420440

08002f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e076      	b.n	8003008 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f2a:	d009      	beq.n	8002f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
 8002f32:	e005      	b.n	8002f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd ffec 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	ea42 0103 	orr.w	r1, r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	0c1a      	lsrs	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f002 0204 	and.w	r2, r2, #4
 8002fe6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e041      	b.n	80030a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe f9e4 	bl	8001404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f000 fa70 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d001      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e03a      	b.n	800313e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_TIM_Base_Start_IT+0x98>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00e      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x58>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d009      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x58>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_TIM_Base_Start_IT+0x9c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x58>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <HAL_TIM_Base_Start_IT+0xa0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d111      	bne.n	800312c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b06      	cmp	r3, #6
 8003118:	d010      	beq.n	800313c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0201 	orr.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312a:	e007      	b.n	800313c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800

08003154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d122      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b02      	cmp	r3, #2
 8003176:	d11b      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0202 	mvn.w	r2, #2
 8003180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f9b1 	bl	80034fe <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9a4 	bl	80034ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f9b3 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d122      	bne.n	8003204 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d11b      	bne.n	8003204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0204 	mvn.w	r2, #4
 80031d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f987 	bl	80034fe <HAL_TIM_IC_CaptureCallback>
 80031f0:	e005      	b.n	80031fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f97a 	bl	80034ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f989 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b08      	cmp	r3, #8
 8003210:	d122      	bne.n	8003258 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b08      	cmp	r3, #8
 800321e:	d11b      	bne.n	8003258 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0208 	mvn.w	r2, #8
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2204      	movs	r2, #4
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f95d 	bl	80034fe <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f950 	bl	80034ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f95f 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b10      	cmp	r3, #16
 8003264:	d122      	bne.n	80032ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b10      	cmp	r3, #16
 8003272:	d11b      	bne.n	80032ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0210 	mvn.w	r2, #16
 800327c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2208      	movs	r2, #8
 8003282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f933 	bl	80034fe <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f926 	bl	80034ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f935 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0201 	mvn.w	r2, #1
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd ff84 	bl	80011e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d10e      	bne.n	8003304 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b80      	cmp	r3, #128	; 0x80
 80032f2:	d107      	bne.n	8003304 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa77 	bl	80037f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d10e      	bne.n	8003330 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d107      	bne.n	8003330 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8f9 	bl	8003522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b20      	cmp	r3, #32
 800333c:	d10e      	bne.n	800335c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b20      	cmp	r3, #32
 800334a:	d107      	bne.n	800335c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0220 	mvn.w	r2, #32
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa42 	bl	80037e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_TIM_ConfigClockSource+0x18>
 8003378:	2302      	movs	r3, #2
 800337a:	e0b3      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x180>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800339a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b4:	d03e      	beq.n	8003434 <HAL_TIM_ConfigClockSource+0xd0>
 80033b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ba:	f200 8087 	bhi.w	80034cc <HAL_TIM_ConfigClockSource+0x168>
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c2:	f000 8085 	beq.w	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ca:	d87f      	bhi.n	80034cc <HAL_TIM_ConfigClockSource+0x168>
 80033cc:	2b70      	cmp	r3, #112	; 0x70
 80033ce:	d01a      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0xa2>
 80033d0:	2b70      	cmp	r3, #112	; 0x70
 80033d2:	d87b      	bhi.n	80034cc <HAL_TIM_ConfigClockSource+0x168>
 80033d4:	2b60      	cmp	r3, #96	; 0x60
 80033d6:	d050      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x116>
 80033d8:	2b60      	cmp	r3, #96	; 0x60
 80033da:	d877      	bhi.n	80034cc <HAL_TIM_ConfigClockSource+0x168>
 80033dc:	2b50      	cmp	r3, #80	; 0x50
 80033de:	d03c      	beq.n	800345a <HAL_TIM_ConfigClockSource+0xf6>
 80033e0:	2b50      	cmp	r3, #80	; 0x50
 80033e2:	d873      	bhi.n	80034cc <HAL_TIM_ConfigClockSource+0x168>
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d058      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x136>
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d86f      	bhi.n	80034cc <HAL_TIM_ConfigClockSource+0x168>
 80033ec:	2b30      	cmp	r3, #48	; 0x30
 80033ee:	d064      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x156>
 80033f0:	2b30      	cmp	r3, #48	; 0x30
 80033f2:	d86b      	bhi.n	80034cc <HAL_TIM_ConfigClockSource+0x168>
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d060      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x156>
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d867      	bhi.n	80034cc <HAL_TIM_ConfigClockSource+0x168>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d05c      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x156>
 8003400:	2b10      	cmp	r3, #16
 8003402:	d05a      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003404:	e062      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6899      	ldr	r1, [r3, #8]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f000 f966 	bl	80036e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003428:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	609a      	str	r2, [r3, #8]
      break;
 8003432:	e04e      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6899      	ldr	r1, [r3, #8]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f000 f94f 	bl	80036e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003456:	609a      	str	r2, [r3, #8]
      break;
 8003458:	e03b      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	461a      	mov	r2, r3
 8003468:	f000 f8c6 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2150      	movs	r1, #80	; 0x50
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f91d 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8003478:	e02b      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	f000 f8e4 	bl	8003654 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2160      	movs	r1, #96	; 0x60
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f90d 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8003498:	e01b      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f000 f8a6 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2140      	movs	r1, #64	; 0x40
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f8fd 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 80034b8:	e00b      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f000 f8f4 	bl	80036b2 <TIM_ITRx_SetConfig>
        break;
 80034ca:	e002      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <TIM_Base_SetConfig+0xb8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <TIM_Base_SetConfig+0x30>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d007      	beq.n	8003564 <TIM_Base_SetConfig+0x30>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a26      	ldr	r2, [pc, #152]	; (80035f0 <TIM_Base_SetConfig+0xbc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_Base_SetConfig+0x30>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a25      	ldr	r2, [pc, #148]	; (80035f4 <TIM_Base_SetConfig+0xc0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d108      	bne.n	8003576 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <TIM_Base_SetConfig+0xb8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00b      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d007      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <TIM_Base_SetConfig+0xbc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <TIM_Base_SetConfig+0xc0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <TIM_Base_SetConfig+0xb8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	615a      	str	r2, [r3, #20]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800

080035f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 030a 	bic.w	r3, r3, #10
 8003634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	621a      	str	r2, [r3, #32]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f023 0210 	bic.w	r2, r3, #16
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800367e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	031b      	lsls	r3, r3, #12
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003690:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	621a      	str	r2, [r3, #32]
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 0307 	orr.w	r3, r3, #7
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003700:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	431a      	orrs	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4313      	orrs	r3, r2
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	609a      	str	r2, [r3, #8]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003738:	2302      	movs	r3, #2
 800373a:	e046      	b.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d009      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a10      	ldr	r2, [pc, #64]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10c      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800

080037e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e03f      	b.n	8003896 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fe3c 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fc21 	bl	8004090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800385c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800386c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800387c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b08a      	sub	sp, #40	; 0x28
 80038a2:	af02      	add	r7, sp, #8
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d17c      	bne.n	80039b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_UART_Transmit+0x2c>
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e075      	b.n	80039ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_UART_Transmit+0x3e>
 80038d8:	2302      	movs	r3, #2
 80038da:	e06e      	b.n	80039ba <HAL_UART_Transmit+0x11c>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2221      	movs	r2, #33	; 0x21
 80038ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038f2:	f7fd feb9 	bl	8001668 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	d108      	bne.n	8003920 <HAL_UART_Transmit+0x82>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e003      	b.n	8003928 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003930:	e02a      	b.n	8003988 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fa45 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e036      	b.n	80039ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10b      	bne.n	800396a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	3302      	adds	r3, #2
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	e007      	b.n	800397a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	3301      	adds	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1cf      	bne.n	8003932 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fa15 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e006      	b.n	80039ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e000      	b.n	80039ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b08a      	sub	sp, #40	; 0x28
 80039c6:	af02      	add	r7, sp, #8
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	f040 8089 	bne.w	8003af6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_UART_Receive+0x2e>
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e081      	b.n	8003af8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Receive+0x40>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e07a      	b.n	8003af8 <HAL_UART_Receive+0x136>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2222      	movs	r2, #34	; 0x22
 8003a14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a18:	f7fd fe26 	bl	8001668 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	d108      	bne.n	8003a46 <HAL_UART_Receive+0x84>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	e003      	b.n	8003a4e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a56:	e043      	b.n	8003ae0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2120      	movs	r1, #32
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f9b2 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e042      	b.n	8003af8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10c      	bne.n	8003a92 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e01f      	b.n	8003ad2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9a:	d007      	beq.n	8003aac <HAL_UART_Receive+0xea>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_UART_Receive+0xf8>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e008      	b.n	8003acc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1b6      	bne.n	8003a58 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e000      	b.n	8003af8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d140      	bne.n	8003b9c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_UART_Receive_IT+0x26>
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e039      	b.n	8003b9e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Receive_IT+0x38>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e032      	b.n	8003b9e <HAL_UART_Receive_IT+0x9e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	88fa      	ldrh	r2, [r7, #6]
 8003b4a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2222      	movs	r2, #34	; 0x22
 8003b5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b76:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10d      	bne.n	8003bfa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_UART_IRQHandler+0x52>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9cc 	bl	8003f90 <UART_Receive_IT>
      return;
 8003bf8:	e0d0      	b.n	8003d9c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80b0 	beq.w	8003d62 <HAL_UART_IRQHandler+0x1ba>
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_UART_IRQHandler+0x70>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80a5 	beq.w	8003d62 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_UART_IRQHandler+0x90>
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_UART_IRQHandler+0xb0>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	f043 0202 	orr.w	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_UART_IRQHandler+0xd0>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	f043 0204 	orr.w	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00f      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xfa>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <HAL_UART_IRQHandler+0xee>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	f043 0208 	orr.w	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d077      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x11c>
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f966 	bl	8003f90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <HAL_UART_IRQHandler+0x144>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d031      	beq.n	8003d50 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8b7 	bl	8003e60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d023      	beq.n	8003d48 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <HAL_UART_IRQHandler+0x1fc>)
 8003d1e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe f9ab 	bl	8002080 <HAL_DMA_Abort_IT>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d016      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3e:	e00e      	b.n	8003d5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f83a 	bl	8003dba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d46:	e00a      	b.n	8003d5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f836 	bl	8003dba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4e:	e006      	b.n	8003d5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f832 	bl	8003dba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d5c:	e01d      	b.n	8003d9a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5e:	bf00      	nop
    return;
 8003d60:	e01b      	b.n	8003d9a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_UART_IRQHandler+0x1d6>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8a3 	bl	8003ec2 <UART_Transmit_IT>
    return;
 8003d7c:	e00e      	b.n	8003d9c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <HAL_UART_IRQHandler+0x1f4>
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8e4 	bl	8003f60 <UART_EndTransmit_IT>
    return;
 8003d98:	e000      	b.n	8003d9c <HAL_UART_IRQHandler+0x1f4>
    return;
 8003d9a:	bf00      	nop
  }
}
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08003e9b 	.word	0x08003e9b

08003da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ddc:	e02c      	b.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d028      	beq.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8003dec:	f7fd fc3c 	bl	8001668 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d21d      	bcs.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e00f      	b.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4013      	ands	r3, r2
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d0c3      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr

08003e9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff ff80 	bl	8003dba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b21      	cmp	r3, #33	; 0x21
 8003ed4:	d13e      	bne.n	8003f54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ede:	d114      	bne.n	8003f0a <UART_Transmit_IT+0x48>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d110      	bne.n	8003f0a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003efc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	1c9a      	adds	r2, r3, #2
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	621a      	str	r2, [r3, #32]
 8003f08:	e008      	b.n	8003f1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	1c59      	adds	r1, r3, #1
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6211      	str	r1, [r2, #32]
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10f      	bne.n	8003f50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
  }
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ff11 	bl	8003da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b22      	cmp	r3, #34	; 0x22
 8003fa2:	d170      	bne.n	8004086 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d117      	bne.n	8003fde <UART_Receive_IT+0x4e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d113      	bne.n	8003fde <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
 8003fdc:	e026      	b.n	800402c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff0:	d007      	beq.n	8004002 <UART_Receive_IT+0x72>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <UART_Receive_IT+0x80>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e008      	b.n	8004022 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29b      	uxth	r3, r3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4619      	mov	r1, r3
 800403a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800403c:	2b00      	cmp	r3, #0
 800403e:	d120      	bne.n	8004082 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0220 	bic.w	r2, r2, #32
 800404e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fd f86d 	bl	8001158 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e002      	b.n	8004088 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040ca:	f023 030c 	bic.w	r3, r3, #12
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2c      	ldr	r2, [pc, #176]	; (80041a4 <UART_SetConfig+0x114>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7fe fe1e 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	e002      	b.n	8004106 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004100:	f7fe fe06 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8004104:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009a      	lsls	r2, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	4a22      	ldr	r2, [pc, #136]	; (80041a8 <UART_SetConfig+0x118>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	0119      	lsls	r1, r3, #4
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009a      	lsls	r2, r3, #2
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	fbb2 f2f3 	udiv	r2, r2, r3
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <UART_SetConfig+0x118>)
 800413e:	fba3 0302 	umull	r0, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2064      	movs	r0, #100	; 0x64
 8004146:	fb00 f303 	mul.w	r3, r0, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	3332      	adds	r3, #50	; 0x32
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <UART_SetConfig+0x118>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800415c:	4419      	add	r1, r3
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009a      	lsls	r2, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	fbb2 f2f3 	udiv	r2, r2, r3
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <UART_SetConfig+0x118>)
 8004176:	fba3 0302 	umull	r0, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2064      	movs	r0, #100	; 0x64
 800417e:	fb00 f303 	mul.w	r3, r0, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	3332      	adds	r3, #50	; 0x32
 8004188:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <UART_SetConfig+0x118>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	f003 020f 	and.w	r2, r3, #15
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	440a      	add	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40013800 	.word	0x40013800
 80041a8:	51eb851f 	.word	0x51eb851f

080041ac <__errno>:
 80041ac:	4b01      	ldr	r3, [pc, #4]	; (80041b4 <__errno+0x8>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000014 	.word	0x20000014

080041b8 <__libc_init_array>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	2600      	movs	r6, #0
 80041bc:	4d0c      	ldr	r5, [pc, #48]	; (80041f0 <__libc_init_array+0x38>)
 80041be:	4c0d      	ldr	r4, [pc, #52]	; (80041f4 <__libc_init_array+0x3c>)
 80041c0:	1b64      	subs	r4, r4, r5
 80041c2:	10a4      	asrs	r4, r4, #2
 80041c4:	42a6      	cmp	r6, r4
 80041c6:	d109      	bne.n	80041dc <__libc_init_array+0x24>
 80041c8:	f001 f84e 	bl	8005268 <_init>
 80041cc:	2600      	movs	r6, #0
 80041ce:	4d0a      	ldr	r5, [pc, #40]	; (80041f8 <__libc_init_array+0x40>)
 80041d0:	4c0a      	ldr	r4, [pc, #40]	; (80041fc <__libc_init_array+0x44>)
 80041d2:	1b64      	subs	r4, r4, r5
 80041d4:	10a4      	asrs	r4, r4, #2
 80041d6:	42a6      	cmp	r6, r4
 80041d8:	d105      	bne.n	80041e6 <__libc_init_array+0x2e>
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e0:	4798      	blx	r3
 80041e2:	3601      	adds	r6, #1
 80041e4:	e7ee      	b.n	80041c4 <__libc_init_array+0xc>
 80041e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ea:	4798      	blx	r3
 80041ec:	3601      	adds	r6, #1
 80041ee:	e7f2      	b.n	80041d6 <__libc_init_array+0x1e>
 80041f0:	08005738 	.word	0x08005738
 80041f4:	08005738 	.word	0x08005738
 80041f8:	08005738 	.word	0x08005738
 80041fc:	0800573c 	.word	0x0800573c

08004200 <memset>:
 8004200:	4603      	mov	r3, r0
 8004202:	4402      	add	r2, r0
 8004204:	4293      	cmp	r3, r2
 8004206:	d100      	bne.n	800420a <memset+0xa>
 8004208:	4770      	bx	lr
 800420a:	f803 1b01 	strb.w	r1, [r3], #1
 800420e:	e7f9      	b.n	8004204 <memset+0x4>

08004210 <setvbuf>:
 8004210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004214:	461d      	mov	r5, r3
 8004216:	4b5d      	ldr	r3, [pc, #372]	; (800438c <setvbuf+0x17c>)
 8004218:	4604      	mov	r4, r0
 800421a:	681f      	ldr	r7, [r3, #0]
 800421c:	460e      	mov	r6, r1
 800421e:	4690      	mov	r8, r2
 8004220:	b127      	cbz	r7, 800422c <setvbuf+0x1c>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	b913      	cbnz	r3, 800422c <setvbuf+0x1c>
 8004226:	4638      	mov	r0, r7
 8004228:	f000 f9e8 	bl	80045fc <__sinit>
 800422c:	4b58      	ldr	r3, [pc, #352]	; (8004390 <setvbuf+0x180>)
 800422e:	429c      	cmp	r4, r3
 8004230:	d167      	bne.n	8004302 <setvbuf+0xf2>
 8004232:	687c      	ldr	r4, [r7, #4]
 8004234:	f1b8 0f02 	cmp.w	r8, #2
 8004238:	d006      	beq.n	8004248 <setvbuf+0x38>
 800423a:	f1b8 0f01 	cmp.w	r8, #1
 800423e:	f200 809f 	bhi.w	8004380 <setvbuf+0x170>
 8004242:	2d00      	cmp	r5, #0
 8004244:	f2c0 809c 	blt.w	8004380 <setvbuf+0x170>
 8004248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800424a:	07db      	lsls	r3, r3, #31
 800424c:	d405      	bmi.n	800425a <setvbuf+0x4a>
 800424e:	89a3      	ldrh	r3, [r4, #12]
 8004250:	0598      	lsls	r0, r3, #22
 8004252:	d402      	bmi.n	800425a <setvbuf+0x4a>
 8004254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004256:	f000 fa6f 	bl	8004738 <__retarget_lock_acquire_recursive>
 800425a:	4621      	mov	r1, r4
 800425c:	4638      	mov	r0, r7
 800425e:	f000 f939 	bl	80044d4 <_fflush_r>
 8004262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004264:	b141      	cbz	r1, 8004278 <setvbuf+0x68>
 8004266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800426a:	4299      	cmp	r1, r3
 800426c:	d002      	beq.n	8004274 <setvbuf+0x64>
 800426e:	4638      	mov	r0, r7
 8004270:	f000 fad0 	bl	8004814 <_free_r>
 8004274:	2300      	movs	r3, #0
 8004276:	6363      	str	r3, [r4, #52]	; 0x34
 8004278:	2300      	movs	r3, #0
 800427a:	61a3      	str	r3, [r4, #24]
 800427c:	6063      	str	r3, [r4, #4]
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	0619      	lsls	r1, r3, #24
 8004282:	d503      	bpl.n	800428c <setvbuf+0x7c>
 8004284:	4638      	mov	r0, r7
 8004286:	6921      	ldr	r1, [r4, #16]
 8004288:	f000 fac4 	bl	8004814 <_free_r>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f1b8 0f02 	cmp.w	r8, #2
 8004292:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	81a3      	strh	r3, [r4, #12]
 800429c:	d06c      	beq.n	8004378 <setvbuf+0x168>
 800429e:	ab01      	add	r3, sp, #4
 80042a0:	466a      	mov	r2, sp
 80042a2:	4621      	mov	r1, r4
 80042a4:	4638      	mov	r0, r7
 80042a6:	f000 fa49 	bl	800473c <__swhatbuf_r>
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	4318      	orrs	r0, r3
 80042ae:	81a0      	strh	r0, [r4, #12]
 80042b0:	2d00      	cmp	r5, #0
 80042b2:	d130      	bne.n	8004316 <setvbuf+0x106>
 80042b4:	9d00      	ldr	r5, [sp, #0]
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 faa4 	bl	8004804 <malloc>
 80042bc:	4606      	mov	r6, r0
 80042be:	2800      	cmp	r0, #0
 80042c0:	d155      	bne.n	800436e <setvbuf+0x15e>
 80042c2:	f8dd 9000 	ldr.w	r9, [sp]
 80042c6:	45a9      	cmp	r9, r5
 80042c8:	d14a      	bne.n	8004360 <setvbuf+0x150>
 80042ca:	f04f 35ff 	mov.w	r5, #4294967295
 80042ce:	2200      	movs	r2, #0
 80042d0:	60a2      	str	r2, [r4, #8]
 80042d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80042d6:	6022      	str	r2, [r4, #0]
 80042d8:	6122      	str	r2, [r4, #16]
 80042da:	2201      	movs	r2, #1
 80042dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e0:	6162      	str	r2, [r4, #20]
 80042e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	07d2      	lsls	r2, r2, #31
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	d405      	bmi.n	80042fa <setvbuf+0xea>
 80042ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80042f2:	d102      	bne.n	80042fa <setvbuf+0xea>
 80042f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f6:	f000 fa20 	bl	800473a <__retarget_lock_release_recursive>
 80042fa:	4628      	mov	r0, r5
 80042fc:	b003      	add	sp, #12
 80042fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <setvbuf+0x184>)
 8004304:	429c      	cmp	r4, r3
 8004306:	d101      	bne.n	800430c <setvbuf+0xfc>
 8004308:	68bc      	ldr	r4, [r7, #8]
 800430a:	e793      	b.n	8004234 <setvbuf+0x24>
 800430c:	4b22      	ldr	r3, [pc, #136]	; (8004398 <setvbuf+0x188>)
 800430e:	429c      	cmp	r4, r3
 8004310:	bf08      	it	eq
 8004312:	68fc      	ldreq	r4, [r7, #12]
 8004314:	e78e      	b.n	8004234 <setvbuf+0x24>
 8004316:	2e00      	cmp	r6, #0
 8004318:	d0cd      	beq.n	80042b6 <setvbuf+0xa6>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	b913      	cbnz	r3, 8004324 <setvbuf+0x114>
 800431e:	4638      	mov	r0, r7
 8004320:	f000 f96c 	bl	80045fc <__sinit>
 8004324:	f1b8 0f01 	cmp.w	r8, #1
 8004328:	bf08      	it	eq
 800432a:	89a3      	ldrheq	r3, [r4, #12]
 800432c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004330:	bf04      	itt	eq
 8004332:	f043 0301 	orreq.w	r3, r3, #1
 8004336:	81a3      	strheq	r3, [r4, #12]
 8004338:	89a2      	ldrh	r2, [r4, #12]
 800433a:	6026      	str	r6, [r4, #0]
 800433c:	f012 0308 	ands.w	r3, r2, #8
 8004340:	d01c      	beq.n	800437c <setvbuf+0x16c>
 8004342:	07d3      	lsls	r3, r2, #31
 8004344:	bf41      	itttt	mi
 8004346:	2300      	movmi	r3, #0
 8004348:	426d      	negmi	r5, r5
 800434a:	60a3      	strmi	r3, [r4, #8]
 800434c:	61a5      	strmi	r5, [r4, #24]
 800434e:	bf58      	it	pl
 8004350:	60a5      	strpl	r5, [r4, #8]
 8004352:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004354:	f015 0501 	ands.w	r5, r5, #1
 8004358:	d115      	bne.n	8004386 <setvbuf+0x176>
 800435a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800435e:	e7c8      	b.n	80042f2 <setvbuf+0xe2>
 8004360:	4648      	mov	r0, r9
 8004362:	f000 fa4f 	bl	8004804 <malloc>
 8004366:	4606      	mov	r6, r0
 8004368:	2800      	cmp	r0, #0
 800436a:	d0ae      	beq.n	80042ca <setvbuf+0xba>
 800436c:	464d      	mov	r5, r9
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	e7d0      	b.n	800431a <setvbuf+0x10a>
 8004378:	2500      	movs	r5, #0
 800437a:	e7a8      	b.n	80042ce <setvbuf+0xbe>
 800437c:	60a3      	str	r3, [r4, #8]
 800437e:	e7e8      	b.n	8004352 <setvbuf+0x142>
 8004380:	f04f 35ff 	mov.w	r5, #4294967295
 8004384:	e7b9      	b.n	80042fa <setvbuf+0xea>
 8004386:	2500      	movs	r5, #0
 8004388:	e7b7      	b.n	80042fa <setvbuf+0xea>
 800438a:	bf00      	nop
 800438c:	20000014 	.word	0x20000014
 8004390:	080056c4 	.word	0x080056c4
 8004394:	080056e4 	.word	0x080056e4
 8004398:	080056a4 	.word	0x080056a4

0800439c <viprintf>:
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <viprintf+0x28>)
 800439e:	b570      	push	{r4, r5, r6, lr}
 80043a0:	681c      	ldr	r4, [r3, #0]
 80043a2:	4605      	mov	r5, r0
 80043a4:	460e      	mov	r6, r1
 80043a6:	b124      	cbz	r4, 80043b2 <viprintf+0x16>
 80043a8:	69a3      	ldr	r3, [r4, #24]
 80043aa:	b913      	cbnz	r3, 80043b2 <viprintf+0x16>
 80043ac:	4620      	mov	r0, r4
 80043ae:	f000 f925 	bl	80045fc <__sinit>
 80043b2:	4633      	mov	r3, r6
 80043b4:	462a      	mov	r2, r5
 80043b6:	4620      	mov	r0, r4
 80043b8:	68a1      	ldr	r1, [r4, #8]
 80043ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043be:	f000 baf7 	b.w	80049b0 <_vfiprintf_r>
 80043c2:	bf00      	nop
 80043c4:	20000014 	.word	0x20000014

080043c8 <__sflush_r>:
 80043c8:	898a      	ldrh	r2, [r1, #12]
 80043ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ce:	4605      	mov	r5, r0
 80043d0:	0710      	lsls	r0, r2, #28
 80043d2:	460c      	mov	r4, r1
 80043d4:	d458      	bmi.n	8004488 <__sflush_r+0xc0>
 80043d6:	684b      	ldr	r3, [r1, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	dc05      	bgt.n	80043e8 <__sflush_r+0x20>
 80043dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	dc02      	bgt.n	80043e8 <__sflush_r+0x20>
 80043e2:	2000      	movs	r0, #0
 80043e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043ea:	2e00      	cmp	r6, #0
 80043ec:	d0f9      	beq.n	80043e2 <__sflush_r+0x1a>
 80043ee:	2300      	movs	r3, #0
 80043f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043f4:	682f      	ldr	r7, [r5, #0]
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	d032      	beq.n	8004460 <__sflush_r+0x98>
 80043fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	075a      	lsls	r2, r3, #29
 8004400:	d505      	bpl.n	800440e <__sflush_r+0x46>
 8004402:	6863      	ldr	r3, [r4, #4]
 8004404:	1ac0      	subs	r0, r0, r3
 8004406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004408:	b10b      	cbz	r3, 800440e <__sflush_r+0x46>
 800440a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800440c:	1ac0      	subs	r0, r0, r3
 800440e:	2300      	movs	r3, #0
 8004410:	4602      	mov	r2, r0
 8004412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004414:	4628      	mov	r0, r5
 8004416:	6a21      	ldr	r1, [r4, #32]
 8004418:	47b0      	blx	r6
 800441a:	1c43      	adds	r3, r0, #1
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	d106      	bne.n	800442e <__sflush_r+0x66>
 8004420:	6829      	ldr	r1, [r5, #0]
 8004422:	291d      	cmp	r1, #29
 8004424:	d82c      	bhi.n	8004480 <__sflush_r+0xb8>
 8004426:	4a2a      	ldr	r2, [pc, #168]	; (80044d0 <__sflush_r+0x108>)
 8004428:	40ca      	lsrs	r2, r1
 800442a:	07d6      	lsls	r6, r2, #31
 800442c:	d528      	bpl.n	8004480 <__sflush_r+0xb8>
 800442e:	2200      	movs	r2, #0
 8004430:	6062      	str	r2, [r4, #4]
 8004432:	6922      	ldr	r2, [r4, #16]
 8004434:	04d9      	lsls	r1, r3, #19
 8004436:	6022      	str	r2, [r4, #0]
 8004438:	d504      	bpl.n	8004444 <__sflush_r+0x7c>
 800443a:	1c42      	adds	r2, r0, #1
 800443c:	d101      	bne.n	8004442 <__sflush_r+0x7a>
 800443e:	682b      	ldr	r3, [r5, #0]
 8004440:	b903      	cbnz	r3, 8004444 <__sflush_r+0x7c>
 8004442:	6560      	str	r0, [r4, #84]	; 0x54
 8004444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004446:	602f      	str	r7, [r5, #0]
 8004448:	2900      	cmp	r1, #0
 800444a:	d0ca      	beq.n	80043e2 <__sflush_r+0x1a>
 800444c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004450:	4299      	cmp	r1, r3
 8004452:	d002      	beq.n	800445a <__sflush_r+0x92>
 8004454:	4628      	mov	r0, r5
 8004456:	f000 f9dd 	bl	8004814 <_free_r>
 800445a:	2000      	movs	r0, #0
 800445c:	6360      	str	r0, [r4, #52]	; 0x34
 800445e:	e7c1      	b.n	80043e4 <__sflush_r+0x1c>
 8004460:	6a21      	ldr	r1, [r4, #32]
 8004462:	2301      	movs	r3, #1
 8004464:	4628      	mov	r0, r5
 8004466:	47b0      	blx	r6
 8004468:	1c41      	adds	r1, r0, #1
 800446a:	d1c7      	bne.n	80043fc <__sflush_r+0x34>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0c4      	beq.n	80043fc <__sflush_r+0x34>
 8004472:	2b1d      	cmp	r3, #29
 8004474:	d001      	beq.n	800447a <__sflush_r+0xb2>
 8004476:	2b16      	cmp	r3, #22
 8004478:	d101      	bne.n	800447e <__sflush_r+0xb6>
 800447a:	602f      	str	r7, [r5, #0]
 800447c:	e7b1      	b.n	80043e2 <__sflush_r+0x1a>
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004484:	81a3      	strh	r3, [r4, #12]
 8004486:	e7ad      	b.n	80043e4 <__sflush_r+0x1c>
 8004488:	690f      	ldr	r7, [r1, #16]
 800448a:	2f00      	cmp	r7, #0
 800448c:	d0a9      	beq.n	80043e2 <__sflush_r+0x1a>
 800448e:	0793      	lsls	r3, r2, #30
 8004490:	bf18      	it	ne
 8004492:	2300      	movne	r3, #0
 8004494:	680e      	ldr	r6, [r1, #0]
 8004496:	bf08      	it	eq
 8004498:	694b      	ldreq	r3, [r1, #20]
 800449a:	eba6 0807 	sub.w	r8, r6, r7
 800449e:	600f      	str	r7, [r1, #0]
 80044a0:	608b      	str	r3, [r1, #8]
 80044a2:	f1b8 0f00 	cmp.w	r8, #0
 80044a6:	dd9c      	ble.n	80043e2 <__sflush_r+0x1a>
 80044a8:	4643      	mov	r3, r8
 80044aa:	463a      	mov	r2, r7
 80044ac:	4628      	mov	r0, r5
 80044ae:	6a21      	ldr	r1, [r4, #32]
 80044b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044b2:	47b0      	blx	r6
 80044b4:	2800      	cmp	r0, #0
 80044b6:	dc06      	bgt.n	80044c6 <__sflush_r+0xfe>
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	f04f 30ff 	mov.w	r0, #4294967295
 80044be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	e78e      	b.n	80043e4 <__sflush_r+0x1c>
 80044c6:	4407      	add	r7, r0
 80044c8:	eba8 0800 	sub.w	r8, r8, r0
 80044cc:	e7e9      	b.n	80044a2 <__sflush_r+0xda>
 80044ce:	bf00      	nop
 80044d0:	20400001 	.word	0x20400001

080044d4 <_fflush_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	690b      	ldr	r3, [r1, #16]
 80044d8:	4605      	mov	r5, r0
 80044da:	460c      	mov	r4, r1
 80044dc:	b913      	cbnz	r3, 80044e4 <_fflush_r+0x10>
 80044de:	2500      	movs	r5, #0
 80044e0:	4628      	mov	r0, r5
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	b118      	cbz	r0, 80044ee <_fflush_r+0x1a>
 80044e6:	6983      	ldr	r3, [r0, #24]
 80044e8:	b90b      	cbnz	r3, 80044ee <_fflush_r+0x1a>
 80044ea:	f000 f887 	bl	80045fc <__sinit>
 80044ee:	4b14      	ldr	r3, [pc, #80]	; (8004540 <_fflush_r+0x6c>)
 80044f0:	429c      	cmp	r4, r3
 80044f2:	d11b      	bne.n	800452c <_fflush_r+0x58>
 80044f4:	686c      	ldr	r4, [r5, #4]
 80044f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ef      	beq.n	80044de <_fflush_r+0xa>
 80044fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004500:	07d0      	lsls	r0, r2, #31
 8004502:	d404      	bmi.n	800450e <_fflush_r+0x3a>
 8004504:	0599      	lsls	r1, r3, #22
 8004506:	d402      	bmi.n	800450e <_fflush_r+0x3a>
 8004508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800450a:	f000 f915 	bl	8004738 <__retarget_lock_acquire_recursive>
 800450e:	4628      	mov	r0, r5
 8004510:	4621      	mov	r1, r4
 8004512:	f7ff ff59 	bl	80043c8 <__sflush_r>
 8004516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004518:	4605      	mov	r5, r0
 800451a:	07da      	lsls	r2, r3, #31
 800451c:	d4e0      	bmi.n	80044e0 <_fflush_r+0xc>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	059b      	lsls	r3, r3, #22
 8004522:	d4dd      	bmi.n	80044e0 <_fflush_r+0xc>
 8004524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004526:	f000 f908 	bl	800473a <__retarget_lock_release_recursive>
 800452a:	e7d9      	b.n	80044e0 <_fflush_r+0xc>
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <_fflush_r+0x70>)
 800452e:	429c      	cmp	r4, r3
 8004530:	d101      	bne.n	8004536 <_fflush_r+0x62>
 8004532:	68ac      	ldr	r4, [r5, #8]
 8004534:	e7df      	b.n	80044f6 <_fflush_r+0x22>
 8004536:	4b04      	ldr	r3, [pc, #16]	; (8004548 <_fflush_r+0x74>)
 8004538:	429c      	cmp	r4, r3
 800453a:	bf08      	it	eq
 800453c:	68ec      	ldreq	r4, [r5, #12]
 800453e:	e7da      	b.n	80044f6 <_fflush_r+0x22>
 8004540:	080056c4 	.word	0x080056c4
 8004544:	080056e4 	.word	0x080056e4
 8004548:	080056a4 	.word	0x080056a4

0800454c <std>:
 800454c:	2300      	movs	r3, #0
 800454e:	b510      	push	{r4, lr}
 8004550:	4604      	mov	r4, r0
 8004552:	e9c0 3300 	strd	r3, r3, [r0]
 8004556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800455a:	6083      	str	r3, [r0, #8]
 800455c:	8181      	strh	r1, [r0, #12]
 800455e:	6643      	str	r3, [r0, #100]	; 0x64
 8004560:	81c2      	strh	r2, [r0, #14]
 8004562:	6183      	str	r3, [r0, #24]
 8004564:	4619      	mov	r1, r3
 8004566:	2208      	movs	r2, #8
 8004568:	305c      	adds	r0, #92	; 0x5c
 800456a:	f7ff fe49 	bl	8004200 <memset>
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <std+0x38>)
 8004570:	6224      	str	r4, [r4, #32]
 8004572:	6263      	str	r3, [r4, #36]	; 0x24
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <std+0x3c>)
 8004576:	62a3      	str	r3, [r4, #40]	; 0x28
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <std+0x40>)
 800457a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <std+0x44>)
 800457e:	6323      	str	r3, [r4, #48]	; 0x30
 8004580:	bd10      	pop	{r4, pc}
 8004582:	bf00      	nop
 8004584:	08004f5d 	.word	0x08004f5d
 8004588:	08004f7f 	.word	0x08004f7f
 800458c:	08004fb7 	.word	0x08004fb7
 8004590:	08004fdb 	.word	0x08004fdb

08004594 <_cleanup_r>:
 8004594:	4901      	ldr	r1, [pc, #4]	; (800459c <_cleanup_r+0x8>)
 8004596:	f000 b8af 	b.w	80046f8 <_fwalk_reent>
 800459a:	bf00      	nop
 800459c:	080044d5 	.word	0x080044d5

080045a0 <__sfmoreglue>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	2568      	movs	r5, #104	; 0x68
 80045a4:	1e4a      	subs	r2, r1, #1
 80045a6:	4355      	muls	r5, r2
 80045a8:	460e      	mov	r6, r1
 80045aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045ae:	f000 f97d 	bl	80048ac <_malloc_r>
 80045b2:	4604      	mov	r4, r0
 80045b4:	b140      	cbz	r0, 80045c8 <__sfmoreglue+0x28>
 80045b6:	2100      	movs	r1, #0
 80045b8:	e9c0 1600 	strd	r1, r6, [r0]
 80045bc:	300c      	adds	r0, #12
 80045be:	60a0      	str	r0, [r4, #8]
 80045c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045c4:	f7ff fe1c 	bl	8004200 <memset>
 80045c8:	4620      	mov	r0, r4
 80045ca:	bd70      	pop	{r4, r5, r6, pc}

080045cc <__sfp_lock_acquire>:
 80045cc:	4801      	ldr	r0, [pc, #4]	; (80045d4 <__sfp_lock_acquire+0x8>)
 80045ce:	f000 b8b3 	b.w	8004738 <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	200001f8 	.word	0x200001f8

080045d8 <__sfp_lock_release>:
 80045d8:	4801      	ldr	r0, [pc, #4]	; (80045e0 <__sfp_lock_release+0x8>)
 80045da:	f000 b8ae 	b.w	800473a <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	200001f8 	.word	0x200001f8

080045e4 <__sinit_lock_acquire>:
 80045e4:	4801      	ldr	r0, [pc, #4]	; (80045ec <__sinit_lock_acquire+0x8>)
 80045e6:	f000 b8a7 	b.w	8004738 <__retarget_lock_acquire_recursive>
 80045ea:	bf00      	nop
 80045ec:	200001f3 	.word	0x200001f3

080045f0 <__sinit_lock_release>:
 80045f0:	4801      	ldr	r0, [pc, #4]	; (80045f8 <__sinit_lock_release+0x8>)
 80045f2:	f000 b8a2 	b.w	800473a <__retarget_lock_release_recursive>
 80045f6:	bf00      	nop
 80045f8:	200001f3 	.word	0x200001f3

080045fc <__sinit>:
 80045fc:	b510      	push	{r4, lr}
 80045fe:	4604      	mov	r4, r0
 8004600:	f7ff fff0 	bl	80045e4 <__sinit_lock_acquire>
 8004604:	69a3      	ldr	r3, [r4, #24]
 8004606:	b11b      	cbz	r3, 8004610 <__sinit+0x14>
 8004608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800460c:	f7ff bff0 	b.w	80045f0 <__sinit_lock_release>
 8004610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004614:	6523      	str	r3, [r4, #80]	; 0x50
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <__sinit+0x68>)
 8004618:	4a13      	ldr	r2, [pc, #76]	; (8004668 <__sinit+0x6c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	62a2      	str	r2, [r4, #40]	; 0x28
 800461e:	42a3      	cmp	r3, r4
 8004620:	bf08      	it	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	4620      	mov	r0, r4
 8004626:	bf08      	it	eq
 8004628:	61a3      	streq	r3, [r4, #24]
 800462a:	f000 f81f 	bl	800466c <__sfp>
 800462e:	6060      	str	r0, [r4, #4]
 8004630:	4620      	mov	r0, r4
 8004632:	f000 f81b 	bl	800466c <__sfp>
 8004636:	60a0      	str	r0, [r4, #8]
 8004638:	4620      	mov	r0, r4
 800463a:	f000 f817 	bl	800466c <__sfp>
 800463e:	2200      	movs	r2, #0
 8004640:	2104      	movs	r1, #4
 8004642:	60e0      	str	r0, [r4, #12]
 8004644:	6860      	ldr	r0, [r4, #4]
 8004646:	f7ff ff81 	bl	800454c <std>
 800464a:	2201      	movs	r2, #1
 800464c:	2109      	movs	r1, #9
 800464e:	68a0      	ldr	r0, [r4, #8]
 8004650:	f7ff ff7c 	bl	800454c <std>
 8004654:	2202      	movs	r2, #2
 8004656:	2112      	movs	r1, #18
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	f7ff ff77 	bl	800454c <std>
 800465e:	2301      	movs	r3, #1
 8004660:	61a3      	str	r3, [r4, #24]
 8004662:	e7d1      	b.n	8004608 <__sinit+0xc>
 8004664:	080056a0 	.word	0x080056a0
 8004668:	08004595 	.word	0x08004595

0800466c <__sfp>:
 800466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466e:	4607      	mov	r7, r0
 8004670:	f7ff ffac 	bl	80045cc <__sfp_lock_acquire>
 8004674:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <__sfp+0x84>)
 8004676:	681e      	ldr	r6, [r3, #0]
 8004678:	69b3      	ldr	r3, [r6, #24]
 800467a:	b913      	cbnz	r3, 8004682 <__sfp+0x16>
 800467c:	4630      	mov	r0, r6
 800467e:	f7ff ffbd 	bl	80045fc <__sinit>
 8004682:	3648      	adds	r6, #72	; 0x48
 8004684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004688:	3b01      	subs	r3, #1
 800468a:	d503      	bpl.n	8004694 <__sfp+0x28>
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	b30b      	cbz	r3, 80046d4 <__sfp+0x68>
 8004690:	6836      	ldr	r6, [r6, #0]
 8004692:	e7f7      	b.n	8004684 <__sfp+0x18>
 8004694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004698:	b9d5      	cbnz	r5, 80046d0 <__sfp+0x64>
 800469a:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <__sfp+0x88>)
 800469c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046a0:	60e3      	str	r3, [r4, #12]
 80046a2:	6665      	str	r5, [r4, #100]	; 0x64
 80046a4:	f000 f847 	bl	8004736 <__retarget_lock_init_recursive>
 80046a8:	f7ff ff96 	bl	80045d8 <__sfp_lock_release>
 80046ac:	2208      	movs	r2, #8
 80046ae:	4629      	mov	r1, r5
 80046b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046b8:	6025      	str	r5, [r4, #0]
 80046ba:	61a5      	str	r5, [r4, #24]
 80046bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046c0:	f7ff fd9e 	bl	8004200 <memset>
 80046c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046cc:	4620      	mov	r0, r4
 80046ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d0:	3468      	adds	r4, #104	; 0x68
 80046d2:	e7d9      	b.n	8004688 <__sfp+0x1c>
 80046d4:	2104      	movs	r1, #4
 80046d6:	4638      	mov	r0, r7
 80046d8:	f7ff ff62 	bl	80045a0 <__sfmoreglue>
 80046dc:	4604      	mov	r4, r0
 80046de:	6030      	str	r0, [r6, #0]
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d1d5      	bne.n	8004690 <__sfp+0x24>
 80046e4:	f7ff ff78 	bl	80045d8 <__sfp_lock_release>
 80046e8:	230c      	movs	r3, #12
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	e7ee      	b.n	80046cc <__sfp+0x60>
 80046ee:	bf00      	nop
 80046f0:	080056a0 	.word	0x080056a0
 80046f4:	ffff0001 	.word	0xffff0001

080046f8 <_fwalk_reent>:
 80046f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046fc:	4606      	mov	r6, r0
 80046fe:	4688      	mov	r8, r1
 8004700:	2700      	movs	r7, #0
 8004702:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800470a:	f1b9 0901 	subs.w	r9, r9, #1
 800470e:	d505      	bpl.n	800471c <_fwalk_reent+0x24>
 8004710:	6824      	ldr	r4, [r4, #0]
 8004712:	2c00      	cmp	r4, #0
 8004714:	d1f7      	bne.n	8004706 <_fwalk_reent+0xe>
 8004716:	4638      	mov	r0, r7
 8004718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800471c:	89ab      	ldrh	r3, [r5, #12]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d907      	bls.n	8004732 <_fwalk_reent+0x3a>
 8004722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004726:	3301      	adds	r3, #1
 8004728:	d003      	beq.n	8004732 <_fwalk_reent+0x3a>
 800472a:	4629      	mov	r1, r5
 800472c:	4630      	mov	r0, r6
 800472e:	47c0      	blx	r8
 8004730:	4307      	orrs	r7, r0
 8004732:	3568      	adds	r5, #104	; 0x68
 8004734:	e7e9      	b.n	800470a <_fwalk_reent+0x12>

08004736 <__retarget_lock_init_recursive>:
 8004736:	4770      	bx	lr

08004738 <__retarget_lock_acquire_recursive>:
 8004738:	4770      	bx	lr

0800473a <__retarget_lock_release_recursive>:
 800473a:	4770      	bx	lr

0800473c <__swhatbuf_r>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	460e      	mov	r6, r1
 8004740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004744:	4614      	mov	r4, r2
 8004746:	2900      	cmp	r1, #0
 8004748:	461d      	mov	r5, r3
 800474a:	b096      	sub	sp, #88	; 0x58
 800474c:	da07      	bge.n	800475e <__swhatbuf_r+0x22>
 800474e:	2300      	movs	r3, #0
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	89b3      	ldrh	r3, [r6, #12]
 8004754:	061a      	lsls	r2, r3, #24
 8004756:	d410      	bmi.n	800477a <__swhatbuf_r+0x3e>
 8004758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475c:	e00e      	b.n	800477c <__swhatbuf_r+0x40>
 800475e:	466a      	mov	r2, sp
 8004760:	f000 fd22 	bl	80051a8 <_fstat_r>
 8004764:	2800      	cmp	r0, #0
 8004766:	dbf2      	blt.n	800474e <__swhatbuf_r+0x12>
 8004768:	9a01      	ldr	r2, [sp, #4]
 800476a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800476e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004772:	425a      	negs	r2, r3
 8004774:	415a      	adcs	r2, r3
 8004776:	602a      	str	r2, [r5, #0]
 8004778:	e7ee      	b.n	8004758 <__swhatbuf_r+0x1c>
 800477a:	2340      	movs	r3, #64	; 0x40
 800477c:	2000      	movs	r0, #0
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	b016      	add	sp, #88	; 0x58
 8004782:	bd70      	pop	{r4, r5, r6, pc}

08004784 <__smakebuf_r>:
 8004784:	898b      	ldrh	r3, [r1, #12]
 8004786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004788:	079d      	lsls	r5, r3, #30
 800478a:	4606      	mov	r6, r0
 800478c:	460c      	mov	r4, r1
 800478e:	d507      	bpl.n	80047a0 <__smakebuf_r+0x1c>
 8004790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	2301      	movs	r3, #1
 800479a:	6163      	str	r3, [r4, #20]
 800479c:	b002      	add	sp, #8
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	466a      	mov	r2, sp
 80047a2:	ab01      	add	r3, sp, #4
 80047a4:	f7ff ffca 	bl	800473c <__swhatbuf_r>
 80047a8:	9900      	ldr	r1, [sp, #0]
 80047aa:	4605      	mov	r5, r0
 80047ac:	4630      	mov	r0, r6
 80047ae:	f000 f87d 	bl	80048ac <_malloc_r>
 80047b2:	b948      	cbnz	r0, 80047c8 <__smakebuf_r+0x44>
 80047b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b8:	059a      	lsls	r2, r3, #22
 80047ba:	d4ef      	bmi.n	800479c <__smakebuf_r+0x18>
 80047bc:	f023 0303 	bic.w	r3, r3, #3
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e7e3      	b.n	8004790 <__smakebuf_r+0xc>
 80047c8:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <__smakebuf_r+0x7c>)
 80047ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	6020      	str	r0, [r4, #0]
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	9b00      	ldr	r3, [sp, #0]
 80047d8:	6120      	str	r0, [r4, #16]
 80047da:	6163      	str	r3, [r4, #20]
 80047dc:	9b01      	ldr	r3, [sp, #4]
 80047de:	b15b      	cbz	r3, 80047f8 <__smakebuf_r+0x74>
 80047e0:	4630      	mov	r0, r6
 80047e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047e6:	f000 fcf1 	bl	80051cc <_isatty_r>
 80047ea:	b128      	cbz	r0, 80047f8 <__smakebuf_r+0x74>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	89a0      	ldrh	r0, [r4, #12]
 80047fa:	4305      	orrs	r5, r0
 80047fc:	81a5      	strh	r5, [r4, #12]
 80047fe:	e7cd      	b.n	800479c <__smakebuf_r+0x18>
 8004800:	08004595 	.word	0x08004595

08004804 <malloc>:
 8004804:	4b02      	ldr	r3, [pc, #8]	; (8004810 <malloc+0xc>)
 8004806:	4601      	mov	r1, r0
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	f000 b84f 	b.w	80048ac <_malloc_r>
 800480e:	bf00      	nop
 8004810:	20000014 	.word	0x20000014

08004814 <_free_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4605      	mov	r5, r0
 8004818:	2900      	cmp	r1, #0
 800481a:	d043      	beq.n	80048a4 <_free_r+0x90>
 800481c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004820:	1f0c      	subs	r4, r1, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	bfb8      	it	lt
 8004826:	18e4      	addlt	r4, r4, r3
 8004828:	f000 fd00 	bl	800522c <__malloc_lock>
 800482c:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <_free_r+0x94>)
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	4610      	mov	r0, r2
 8004832:	b933      	cbnz	r3, 8004842 <_free_r+0x2e>
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	6014      	str	r4, [r2, #0]
 8004838:	4628      	mov	r0, r5
 800483a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800483e:	f000 bcfb 	b.w	8005238 <__malloc_unlock>
 8004842:	42a3      	cmp	r3, r4
 8004844:	d90a      	bls.n	800485c <_free_r+0x48>
 8004846:	6821      	ldr	r1, [r4, #0]
 8004848:	1862      	adds	r2, r4, r1
 800484a:	4293      	cmp	r3, r2
 800484c:	bf01      	itttt	eq
 800484e:	681a      	ldreq	r2, [r3, #0]
 8004850:	685b      	ldreq	r3, [r3, #4]
 8004852:	1852      	addeq	r2, r2, r1
 8004854:	6022      	streq	r2, [r4, #0]
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	6004      	str	r4, [r0, #0]
 800485a:	e7ed      	b.n	8004838 <_free_r+0x24>
 800485c:	461a      	mov	r2, r3
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	b10b      	cbz	r3, 8004866 <_free_r+0x52>
 8004862:	42a3      	cmp	r3, r4
 8004864:	d9fa      	bls.n	800485c <_free_r+0x48>
 8004866:	6811      	ldr	r1, [r2, #0]
 8004868:	1850      	adds	r0, r2, r1
 800486a:	42a0      	cmp	r0, r4
 800486c:	d10b      	bne.n	8004886 <_free_r+0x72>
 800486e:	6820      	ldr	r0, [r4, #0]
 8004870:	4401      	add	r1, r0
 8004872:	1850      	adds	r0, r2, r1
 8004874:	4283      	cmp	r3, r0
 8004876:	6011      	str	r1, [r2, #0]
 8004878:	d1de      	bne.n	8004838 <_free_r+0x24>
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4401      	add	r1, r0
 8004880:	6011      	str	r1, [r2, #0]
 8004882:	6053      	str	r3, [r2, #4]
 8004884:	e7d8      	b.n	8004838 <_free_r+0x24>
 8004886:	d902      	bls.n	800488e <_free_r+0x7a>
 8004888:	230c      	movs	r3, #12
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	e7d4      	b.n	8004838 <_free_r+0x24>
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	1821      	adds	r1, r4, r0
 8004892:	428b      	cmp	r3, r1
 8004894:	bf01      	itttt	eq
 8004896:	6819      	ldreq	r1, [r3, #0]
 8004898:	685b      	ldreq	r3, [r3, #4]
 800489a:	1809      	addeq	r1, r1, r0
 800489c:	6021      	streq	r1, [r4, #0]
 800489e:	6063      	str	r3, [r4, #4]
 80048a0:	6054      	str	r4, [r2, #4]
 80048a2:	e7c9      	b.n	8004838 <_free_r+0x24>
 80048a4:	bd38      	pop	{r3, r4, r5, pc}
 80048a6:	bf00      	nop
 80048a8:	200000a0 	.word	0x200000a0

080048ac <_malloc_r>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	1ccd      	adds	r5, r1, #3
 80048b0:	f025 0503 	bic.w	r5, r5, #3
 80048b4:	3508      	adds	r5, #8
 80048b6:	2d0c      	cmp	r5, #12
 80048b8:	bf38      	it	cc
 80048ba:	250c      	movcc	r5, #12
 80048bc:	2d00      	cmp	r5, #0
 80048be:	4606      	mov	r6, r0
 80048c0:	db01      	blt.n	80048c6 <_malloc_r+0x1a>
 80048c2:	42a9      	cmp	r1, r5
 80048c4:	d903      	bls.n	80048ce <_malloc_r+0x22>
 80048c6:	230c      	movs	r3, #12
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	2000      	movs	r0, #0
 80048cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ce:	f000 fcad 	bl	800522c <__malloc_lock>
 80048d2:	4921      	ldr	r1, [pc, #132]	; (8004958 <_malloc_r+0xac>)
 80048d4:	680a      	ldr	r2, [r1, #0]
 80048d6:	4614      	mov	r4, r2
 80048d8:	b99c      	cbnz	r4, 8004902 <_malloc_r+0x56>
 80048da:	4f20      	ldr	r7, [pc, #128]	; (800495c <_malloc_r+0xb0>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	b923      	cbnz	r3, 80048ea <_malloc_r+0x3e>
 80048e0:	4621      	mov	r1, r4
 80048e2:	4630      	mov	r0, r6
 80048e4:	f000 fb2a 	bl	8004f3c <_sbrk_r>
 80048e8:	6038      	str	r0, [r7, #0]
 80048ea:	4629      	mov	r1, r5
 80048ec:	4630      	mov	r0, r6
 80048ee:	f000 fb25 	bl	8004f3c <_sbrk_r>
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	d123      	bne.n	800493e <_malloc_r+0x92>
 80048f6:	230c      	movs	r3, #12
 80048f8:	4630      	mov	r0, r6
 80048fa:	6033      	str	r3, [r6, #0]
 80048fc:	f000 fc9c 	bl	8005238 <__malloc_unlock>
 8004900:	e7e3      	b.n	80048ca <_malloc_r+0x1e>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	1b5b      	subs	r3, r3, r5
 8004906:	d417      	bmi.n	8004938 <_malloc_r+0x8c>
 8004908:	2b0b      	cmp	r3, #11
 800490a:	d903      	bls.n	8004914 <_malloc_r+0x68>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	441c      	add	r4, r3
 8004910:	6025      	str	r5, [r4, #0]
 8004912:	e004      	b.n	800491e <_malloc_r+0x72>
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	42a2      	cmp	r2, r4
 8004918:	bf0c      	ite	eq
 800491a:	600b      	streq	r3, [r1, #0]
 800491c:	6053      	strne	r3, [r2, #4]
 800491e:	4630      	mov	r0, r6
 8004920:	f000 fc8a 	bl	8005238 <__malloc_unlock>
 8004924:	f104 000b 	add.w	r0, r4, #11
 8004928:	1d23      	adds	r3, r4, #4
 800492a:	f020 0007 	bic.w	r0, r0, #7
 800492e:	1ac2      	subs	r2, r0, r3
 8004930:	d0cc      	beq.n	80048cc <_malloc_r+0x20>
 8004932:	1a1b      	subs	r3, r3, r0
 8004934:	50a3      	str	r3, [r4, r2]
 8004936:	e7c9      	b.n	80048cc <_malloc_r+0x20>
 8004938:	4622      	mov	r2, r4
 800493a:	6864      	ldr	r4, [r4, #4]
 800493c:	e7cc      	b.n	80048d8 <_malloc_r+0x2c>
 800493e:	1cc4      	adds	r4, r0, #3
 8004940:	f024 0403 	bic.w	r4, r4, #3
 8004944:	42a0      	cmp	r0, r4
 8004946:	d0e3      	beq.n	8004910 <_malloc_r+0x64>
 8004948:	1a21      	subs	r1, r4, r0
 800494a:	4630      	mov	r0, r6
 800494c:	f000 faf6 	bl	8004f3c <_sbrk_r>
 8004950:	3001      	adds	r0, #1
 8004952:	d1dd      	bne.n	8004910 <_malloc_r+0x64>
 8004954:	e7cf      	b.n	80048f6 <_malloc_r+0x4a>
 8004956:	bf00      	nop
 8004958:	200000a0 	.word	0x200000a0
 800495c:	200000a4 	.word	0x200000a4

08004960 <__sfputc_r>:
 8004960:	6893      	ldr	r3, [r2, #8]
 8004962:	b410      	push	{r4}
 8004964:	3b01      	subs	r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	6093      	str	r3, [r2, #8]
 800496a:	da07      	bge.n	800497c <__sfputc_r+0x1c>
 800496c:	6994      	ldr	r4, [r2, #24]
 800496e:	42a3      	cmp	r3, r4
 8004970:	db01      	blt.n	8004976 <__sfputc_r+0x16>
 8004972:	290a      	cmp	r1, #10
 8004974:	d102      	bne.n	800497c <__sfputc_r+0x1c>
 8004976:	bc10      	pop	{r4}
 8004978:	f000 bb34 	b.w	8004fe4 <__swbuf_r>
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	1c58      	adds	r0, r3, #1
 8004980:	6010      	str	r0, [r2, #0]
 8004982:	7019      	strb	r1, [r3, #0]
 8004984:	4608      	mov	r0, r1
 8004986:	bc10      	pop	{r4}
 8004988:	4770      	bx	lr

0800498a <__sfputs_r>:
 800498a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498c:	4606      	mov	r6, r0
 800498e:	460f      	mov	r7, r1
 8004990:	4614      	mov	r4, r2
 8004992:	18d5      	adds	r5, r2, r3
 8004994:	42ac      	cmp	r4, r5
 8004996:	d101      	bne.n	800499c <__sfputs_r+0x12>
 8004998:	2000      	movs	r0, #0
 800499a:	e007      	b.n	80049ac <__sfputs_r+0x22>
 800499c:	463a      	mov	r2, r7
 800499e:	4630      	mov	r0, r6
 80049a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a4:	f7ff ffdc 	bl	8004960 <__sfputc_r>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d1f3      	bne.n	8004994 <__sfputs_r+0xa>
 80049ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049b0 <_vfiprintf_r>:
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	460d      	mov	r5, r1
 80049b6:	4614      	mov	r4, r2
 80049b8:	4698      	mov	r8, r3
 80049ba:	4606      	mov	r6, r0
 80049bc:	b09d      	sub	sp, #116	; 0x74
 80049be:	b118      	cbz	r0, 80049c8 <_vfiprintf_r+0x18>
 80049c0:	6983      	ldr	r3, [r0, #24]
 80049c2:	b90b      	cbnz	r3, 80049c8 <_vfiprintf_r+0x18>
 80049c4:	f7ff fe1a 	bl	80045fc <__sinit>
 80049c8:	4b89      	ldr	r3, [pc, #548]	; (8004bf0 <_vfiprintf_r+0x240>)
 80049ca:	429d      	cmp	r5, r3
 80049cc:	d11b      	bne.n	8004a06 <_vfiprintf_r+0x56>
 80049ce:	6875      	ldr	r5, [r6, #4]
 80049d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049d2:	07d9      	lsls	r1, r3, #31
 80049d4:	d405      	bmi.n	80049e2 <_vfiprintf_r+0x32>
 80049d6:	89ab      	ldrh	r3, [r5, #12]
 80049d8:	059a      	lsls	r2, r3, #22
 80049da:	d402      	bmi.n	80049e2 <_vfiprintf_r+0x32>
 80049dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049de:	f7ff feab 	bl	8004738 <__retarget_lock_acquire_recursive>
 80049e2:	89ab      	ldrh	r3, [r5, #12]
 80049e4:	071b      	lsls	r3, r3, #28
 80049e6:	d501      	bpl.n	80049ec <_vfiprintf_r+0x3c>
 80049e8:	692b      	ldr	r3, [r5, #16]
 80049ea:	b9eb      	cbnz	r3, 8004a28 <_vfiprintf_r+0x78>
 80049ec:	4629      	mov	r1, r5
 80049ee:	4630      	mov	r0, r6
 80049f0:	f000 fb5c 	bl	80050ac <__swsetup_r>
 80049f4:	b1c0      	cbz	r0, 8004a28 <_vfiprintf_r+0x78>
 80049f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049f8:	07dc      	lsls	r4, r3, #31
 80049fa:	d50e      	bpl.n	8004a1a <_vfiprintf_r+0x6a>
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	b01d      	add	sp, #116	; 0x74
 8004a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a06:	4b7b      	ldr	r3, [pc, #492]	; (8004bf4 <_vfiprintf_r+0x244>)
 8004a08:	429d      	cmp	r5, r3
 8004a0a:	d101      	bne.n	8004a10 <_vfiprintf_r+0x60>
 8004a0c:	68b5      	ldr	r5, [r6, #8]
 8004a0e:	e7df      	b.n	80049d0 <_vfiprintf_r+0x20>
 8004a10:	4b79      	ldr	r3, [pc, #484]	; (8004bf8 <_vfiprintf_r+0x248>)
 8004a12:	429d      	cmp	r5, r3
 8004a14:	bf08      	it	eq
 8004a16:	68f5      	ldreq	r5, [r6, #12]
 8004a18:	e7da      	b.n	80049d0 <_vfiprintf_r+0x20>
 8004a1a:	89ab      	ldrh	r3, [r5, #12]
 8004a1c:	0598      	lsls	r0, r3, #22
 8004a1e:	d4ed      	bmi.n	80049fc <_vfiprintf_r+0x4c>
 8004a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a22:	f7ff fe8a 	bl	800473a <__retarget_lock_release_recursive>
 8004a26:	e7e9      	b.n	80049fc <_vfiprintf_r+0x4c>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a32:	2330      	movs	r3, #48	; 0x30
 8004a34:	f04f 0901 	mov.w	r9, #1
 8004a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004bfc <_vfiprintf_r+0x24c>
 8004a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a44:	4623      	mov	r3, r4
 8004a46:	469a      	mov	sl, r3
 8004a48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a4c:	b10a      	cbz	r2, 8004a52 <_vfiprintf_r+0xa2>
 8004a4e:	2a25      	cmp	r2, #37	; 0x25
 8004a50:	d1f9      	bne.n	8004a46 <_vfiprintf_r+0x96>
 8004a52:	ebba 0b04 	subs.w	fp, sl, r4
 8004a56:	d00b      	beq.n	8004a70 <_vfiprintf_r+0xc0>
 8004a58:	465b      	mov	r3, fp
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f7ff ff93 	bl	800498a <__sfputs_r>
 8004a64:	3001      	adds	r0, #1
 8004a66:	f000 80aa 	beq.w	8004bbe <_vfiprintf_r+0x20e>
 8004a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a6c:	445a      	add	r2, fp
 8004a6e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a70:	f89a 3000 	ldrb.w	r3, [sl]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80a2 	beq.w	8004bbe <_vfiprintf_r+0x20e>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a84:	f10a 0a01 	add.w	sl, sl, #1
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	9307      	str	r3, [sp, #28]
 8004a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a90:	931a      	str	r3, [sp, #104]	; 0x68
 8004a92:	4654      	mov	r4, sl
 8004a94:	2205      	movs	r2, #5
 8004a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a9a:	4858      	ldr	r0, [pc, #352]	; (8004bfc <_vfiprintf_r+0x24c>)
 8004a9c:	f000 fbb8 	bl	8005210 <memchr>
 8004aa0:	9a04      	ldr	r2, [sp, #16]
 8004aa2:	b9d8      	cbnz	r0, 8004adc <_vfiprintf_r+0x12c>
 8004aa4:	06d1      	lsls	r1, r2, #27
 8004aa6:	bf44      	itt	mi
 8004aa8:	2320      	movmi	r3, #32
 8004aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aae:	0713      	lsls	r3, r2, #28
 8004ab0:	bf44      	itt	mi
 8004ab2:	232b      	movmi	r3, #43	; 0x2b
 8004ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8004abc:	2b2a      	cmp	r3, #42	; 0x2a
 8004abe:	d015      	beq.n	8004aec <_vfiprintf_r+0x13c>
 8004ac0:	4654      	mov	r4, sl
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f04f 0c0a 	mov.w	ip, #10
 8004ac8:	9a07      	ldr	r2, [sp, #28]
 8004aca:	4621      	mov	r1, r4
 8004acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad0:	3b30      	subs	r3, #48	; 0x30
 8004ad2:	2b09      	cmp	r3, #9
 8004ad4:	d94e      	bls.n	8004b74 <_vfiprintf_r+0x1c4>
 8004ad6:	b1b0      	cbz	r0, 8004b06 <_vfiprintf_r+0x156>
 8004ad8:	9207      	str	r2, [sp, #28]
 8004ada:	e014      	b.n	8004b06 <_vfiprintf_r+0x156>
 8004adc:	eba0 0308 	sub.w	r3, r0, r8
 8004ae0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	46a2      	mov	sl, r4
 8004ae8:	9304      	str	r3, [sp, #16]
 8004aea:	e7d2      	b.n	8004a92 <_vfiprintf_r+0xe2>
 8004aec:	9b03      	ldr	r3, [sp, #12]
 8004aee:	1d19      	adds	r1, r3, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	9103      	str	r1, [sp, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bfbb      	ittet	lt
 8004af8:	425b      	neglt	r3, r3
 8004afa:	f042 0202 	orrlt.w	r2, r2, #2
 8004afe:	9307      	strge	r3, [sp, #28]
 8004b00:	9307      	strlt	r3, [sp, #28]
 8004b02:	bfb8      	it	lt
 8004b04:	9204      	strlt	r2, [sp, #16]
 8004b06:	7823      	ldrb	r3, [r4, #0]
 8004b08:	2b2e      	cmp	r3, #46	; 0x2e
 8004b0a:	d10c      	bne.n	8004b26 <_vfiprintf_r+0x176>
 8004b0c:	7863      	ldrb	r3, [r4, #1]
 8004b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b10:	d135      	bne.n	8004b7e <_vfiprintf_r+0x1ce>
 8004b12:	9b03      	ldr	r3, [sp, #12]
 8004b14:	3402      	adds	r4, #2
 8004b16:	1d1a      	adds	r2, r3, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	9203      	str	r2, [sp, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bfb8      	it	lt
 8004b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b24:	9305      	str	r3, [sp, #20]
 8004b26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c0c <_vfiprintf_r+0x25c>
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	4650      	mov	r0, sl
 8004b2e:	7821      	ldrb	r1, [r4, #0]
 8004b30:	f000 fb6e 	bl	8005210 <memchr>
 8004b34:	b140      	cbz	r0, 8004b48 <_vfiprintf_r+0x198>
 8004b36:	2340      	movs	r3, #64	; 0x40
 8004b38:	eba0 000a 	sub.w	r0, r0, sl
 8004b3c:	fa03 f000 	lsl.w	r0, r3, r0
 8004b40:	9b04      	ldr	r3, [sp, #16]
 8004b42:	3401      	adds	r4, #1
 8004b44:	4303      	orrs	r3, r0
 8004b46:	9304      	str	r3, [sp, #16]
 8004b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b4c:	2206      	movs	r2, #6
 8004b4e:	482c      	ldr	r0, [pc, #176]	; (8004c00 <_vfiprintf_r+0x250>)
 8004b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b54:	f000 fb5c 	bl	8005210 <memchr>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d03f      	beq.n	8004bdc <_vfiprintf_r+0x22c>
 8004b5c:	4b29      	ldr	r3, [pc, #164]	; (8004c04 <_vfiprintf_r+0x254>)
 8004b5e:	bb1b      	cbnz	r3, 8004ba8 <_vfiprintf_r+0x1f8>
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	3307      	adds	r3, #7
 8004b64:	f023 0307 	bic.w	r3, r3, #7
 8004b68:	3308      	adds	r3, #8
 8004b6a:	9303      	str	r3, [sp, #12]
 8004b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b6e:	443b      	add	r3, r7
 8004b70:	9309      	str	r3, [sp, #36]	; 0x24
 8004b72:	e767      	b.n	8004a44 <_vfiprintf_r+0x94>
 8004b74:	460c      	mov	r4, r1
 8004b76:	2001      	movs	r0, #1
 8004b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b7c:	e7a5      	b.n	8004aca <_vfiprintf_r+0x11a>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f04f 0c0a 	mov.w	ip, #10
 8004b84:	4619      	mov	r1, r3
 8004b86:	3401      	adds	r4, #1
 8004b88:	9305      	str	r3, [sp, #20]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b90:	3a30      	subs	r2, #48	; 0x30
 8004b92:	2a09      	cmp	r2, #9
 8004b94:	d903      	bls.n	8004b9e <_vfiprintf_r+0x1ee>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0c5      	beq.n	8004b26 <_vfiprintf_r+0x176>
 8004b9a:	9105      	str	r1, [sp, #20]
 8004b9c:	e7c3      	b.n	8004b26 <_vfiprintf_r+0x176>
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ba6:	e7f0      	b.n	8004b8a <_vfiprintf_r+0x1da>
 8004ba8:	ab03      	add	r3, sp, #12
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	462a      	mov	r2, r5
 8004bae:	4630      	mov	r0, r6
 8004bb0:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <_vfiprintf_r+0x258>)
 8004bb2:	a904      	add	r1, sp, #16
 8004bb4:	f3af 8000 	nop.w
 8004bb8:	4607      	mov	r7, r0
 8004bba:	1c78      	adds	r0, r7, #1
 8004bbc:	d1d6      	bne.n	8004b6c <_vfiprintf_r+0x1bc>
 8004bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bc0:	07d9      	lsls	r1, r3, #31
 8004bc2:	d405      	bmi.n	8004bd0 <_vfiprintf_r+0x220>
 8004bc4:	89ab      	ldrh	r3, [r5, #12]
 8004bc6:	059a      	lsls	r2, r3, #22
 8004bc8:	d402      	bmi.n	8004bd0 <_vfiprintf_r+0x220>
 8004bca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bcc:	f7ff fdb5 	bl	800473a <__retarget_lock_release_recursive>
 8004bd0:	89ab      	ldrh	r3, [r5, #12]
 8004bd2:	065b      	lsls	r3, r3, #25
 8004bd4:	f53f af12 	bmi.w	80049fc <_vfiprintf_r+0x4c>
 8004bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bda:	e711      	b.n	8004a00 <_vfiprintf_r+0x50>
 8004bdc:	ab03      	add	r3, sp, #12
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	462a      	mov	r2, r5
 8004be2:	4630      	mov	r0, r6
 8004be4:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <_vfiprintf_r+0x258>)
 8004be6:	a904      	add	r1, sp, #16
 8004be8:	f000 f882 	bl	8004cf0 <_printf_i>
 8004bec:	e7e4      	b.n	8004bb8 <_vfiprintf_r+0x208>
 8004bee:	bf00      	nop
 8004bf0:	080056c4 	.word	0x080056c4
 8004bf4:	080056e4 	.word	0x080056e4
 8004bf8:	080056a4 	.word	0x080056a4
 8004bfc:	08005704 	.word	0x08005704
 8004c00:	0800570e 	.word	0x0800570e
 8004c04:	00000000 	.word	0x00000000
 8004c08:	0800498b 	.word	0x0800498b
 8004c0c:	0800570a 	.word	0x0800570a

08004c10 <_printf_common>:
 8004c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c14:	4616      	mov	r6, r2
 8004c16:	4699      	mov	r9, r3
 8004c18:	688a      	ldr	r2, [r1, #8]
 8004c1a:	690b      	ldr	r3, [r1, #16]
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	bfb8      	it	lt
 8004c22:	4613      	movlt	r3, r2
 8004c24:	6033      	str	r3, [r6, #0]
 8004c26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c30:	b10a      	cbz	r2, 8004c36 <_printf_common+0x26>
 8004c32:	3301      	adds	r3, #1
 8004c34:	6033      	str	r3, [r6, #0]
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	0699      	lsls	r1, r3, #26
 8004c3a:	bf42      	ittt	mi
 8004c3c:	6833      	ldrmi	r3, [r6, #0]
 8004c3e:	3302      	addmi	r3, #2
 8004c40:	6033      	strmi	r3, [r6, #0]
 8004c42:	6825      	ldr	r5, [r4, #0]
 8004c44:	f015 0506 	ands.w	r5, r5, #6
 8004c48:	d106      	bne.n	8004c58 <_printf_common+0x48>
 8004c4a:	f104 0a19 	add.w	sl, r4, #25
 8004c4e:	68e3      	ldr	r3, [r4, #12]
 8004c50:	6832      	ldr	r2, [r6, #0]
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	42ab      	cmp	r3, r5
 8004c56:	dc28      	bgt.n	8004caa <_printf_common+0x9a>
 8004c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c5c:	1e13      	subs	r3, r2, #0
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	bf18      	it	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	0692      	lsls	r2, r2, #26
 8004c66:	d42d      	bmi.n	8004cc4 <_printf_common+0xb4>
 8004c68:	4649      	mov	r1, r9
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c70:	47c0      	blx	r8
 8004c72:	3001      	adds	r0, #1
 8004c74:	d020      	beq.n	8004cb8 <_printf_common+0xa8>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	68e5      	ldr	r5, [r4, #12]
 8004c7a:	f003 0306 	and.w	r3, r3, #6
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	bf18      	it	ne
 8004c82:	2500      	movne	r5, #0
 8004c84:	6832      	ldr	r2, [r6, #0]
 8004c86:	f04f 0600 	mov.w	r6, #0
 8004c8a:	68a3      	ldr	r3, [r4, #8]
 8004c8c:	bf08      	it	eq
 8004c8e:	1aad      	subeq	r5, r5, r2
 8004c90:	6922      	ldr	r2, [r4, #16]
 8004c92:	bf08      	it	eq
 8004c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bfc4      	itt	gt
 8004c9c:	1a9b      	subgt	r3, r3, r2
 8004c9e:	18ed      	addgt	r5, r5, r3
 8004ca0:	341a      	adds	r4, #26
 8004ca2:	42b5      	cmp	r5, r6
 8004ca4:	d11a      	bne.n	8004cdc <_printf_common+0xcc>
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	e008      	b.n	8004cbc <_printf_common+0xac>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4652      	mov	r2, sl
 8004cae:	4649      	mov	r1, r9
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	47c0      	blx	r8
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d103      	bne.n	8004cc0 <_printf_common+0xb0>
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	3501      	adds	r5, #1
 8004cc2:	e7c4      	b.n	8004c4e <_printf_common+0x3e>
 8004cc4:	2030      	movs	r0, #48	; 0x30
 8004cc6:	18e1      	adds	r1, r4, r3
 8004cc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cd2:	4422      	add	r2, r4
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cda:	e7c5      	b.n	8004c68 <_printf_common+0x58>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4622      	mov	r2, r4
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d0e6      	beq.n	8004cb8 <_printf_common+0xa8>
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7d9      	b.n	8004ca2 <_printf_common+0x92>
	...

08004cf0 <_printf_i>:
 8004cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	7e27      	ldrb	r7, [r4, #24]
 8004cf8:	4691      	mov	r9, r2
 8004cfa:	2f78      	cmp	r7, #120	; 0x78
 8004cfc:	4680      	mov	r8, r0
 8004cfe:	469a      	mov	sl, r3
 8004d00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d06:	d807      	bhi.n	8004d18 <_printf_i+0x28>
 8004d08:	2f62      	cmp	r7, #98	; 0x62
 8004d0a:	d80a      	bhi.n	8004d22 <_printf_i+0x32>
 8004d0c:	2f00      	cmp	r7, #0
 8004d0e:	f000 80d9 	beq.w	8004ec4 <_printf_i+0x1d4>
 8004d12:	2f58      	cmp	r7, #88	; 0x58
 8004d14:	f000 80a4 	beq.w	8004e60 <_printf_i+0x170>
 8004d18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d20:	e03a      	b.n	8004d98 <_printf_i+0xa8>
 8004d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d26:	2b15      	cmp	r3, #21
 8004d28:	d8f6      	bhi.n	8004d18 <_printf_i+0x28>
 8004d2a:	a001      	add	r0, pc, #4	; (adr r0, 8004d30 <_printf_i+0x40>)
 8004d2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d9d 	.word	0x08004d9d
 8004d38:	08004d19 	.word	0x08004d19
 8004d3c:	08004d19 	.word	0x08004d19
 8004d40:	08004d19 	.word	0x08004d19
 8004d44:	08004d19 	.word	0x08004d19
 8004d48:	08004d9d 	.word	0x08004d9d
 8004d4c:	08004d19 	.word	0x08004d19
 8004d50:	08004d19 	.word	0x08004d19
 8004d54:	08004d19 	.word	0x08004d19
 8004d58:	08004d19 	.word	0x08004d19
 8004d5c:	08004eab 	.word	0x08004eab
 8004d60:	08004dcd 	.word	0x08004dcd
 8004d64:	08004e8d 	.word	0x08004e8d
 8004d68:	08004d19 	.word	0x08004d19
 8004d6c:	08004d19 	.word	0x08004d19
 8004d70:	08004ecd 	.word	0x08004ecd
 8004d74:	08004d19 	.word	0x08004d19
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004d19 	.word	0x08004d19
 8004d80:	08004d19 	.word	0x08004d19
 8004d84:	08004e95 	.word	0x08004e95
 8004d88:	680b      	ldr	r3, [r1, #0]
 8004d8a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d8e:	1d1a      	adds	r2, r3, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	600a      	str	r2, [r1, #0]
 8004d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0a4      	b.n	8004ee6 <_printf_i+0x1f6>
 8004d9c:	6825      	ldr	r5, [r4, #0]
 8004d9e:	6808      	ldr	r0, [r1, #0]
 8004da0:	062e      	lsls	r6, r5, #24
 8004da2:	f100 0304 	add.w	r3, r0, #4
 8004da6:	d50a      	bpl.n	8004dbe <_printf_i+0xce>
 8004da8:	6805      	ldr	r5, [r0, #0]
 8004daa:	600b      	str	r3, [r1, #0]
 8004dac:	2d00      	cmp	r5, #0
 8004dae:	da03      	bge.n	8004db8 <_printf_i+0xc8>
 8004db0:	232d      	movs	r3, #45	; 0x2d
 8004db2:	426d      	negs	r5, r5
 8004db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db8:	230a      	movs	r3, #10
 8004dba:	485e      	ldr	r0, [pc, #376]	; (8004f34 <_printf_i+0x244>)
 8004dbc:	e019      	b.n	8004df2 <_printf_i+0x102>
 8004dbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004dc2:	6805      	ldr	r5, [r0, #0]
 8004dc4:	600b      	str	r3, [r1, #0]
 8004dc6:	bf18      	it	ne
 8004dc8:	b22d      	sxthne	r5, r5
 8004dca:	e7ef      	b.n	8004dac <_printf_i+0xbc>
 8004dcc:	680b      	ldr	r3, [r1, #0]
 8004dce:	6825      	ldr	r5, [r4, #0]
 8004dd0:	1d18      	adds	r0, r3, #4
 8004dd2:	6008      	str	r0, [r1, #0]
 8004dd4:	0628      	lsls	r0, r5, #24
 8004dd6:	d501      	bpl.n	8004ddc <_printf_i+0xec>
 8004dd8:	681d      	ldr	r5, [r3, #0]
 8004dda:	e002      	b.n	8004de2 <_printf_i+0xf2>
 8004ddc:	0669      	lsls	r1, r5, #25
 8004dde:	d5fb      	bpl.n	8004dd8 <_printf_i+0xe8>
 8004de0:	881d      	ldrh	r5, [r3, #0]
 8004de2:	2f6f      	cmp	r7, #111	; 0x6f
 8004de4:	bf0c      	ite	eq
 8004de6:	2308      	moveq	r3, #8
 8004de8:	230a      	movne	r3, #10
 8004dea:	4852      	ldr	r0, [pc, #328]	; (8004f34 <_printf_i+0x244>)
 8004dec:	2100      	movs	r1, #0
 8004dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004df2:	6866      	ldr	r6, [r4, #4]
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	bfa8      	it	ge
 8004df8:	6821      	ldrge	r1, [r4, #0]
 8004dfa:	60a6      	str	r6, [r4, #8]
 8004dfc:	bfa4      	itt	ge
 8004dfe:	f021 0104 	bicge.w	r1, r1, #4
 8004e02:	6021      	strge	r1, [r4, #0]
 8004e04:	b90d      	cbnz	r5, 8004e0a <_printf_i+0x11a>
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	d04d      	beq.n	8004ea6 <_printf_i+0x1b6>
 8004e0a:	4616      	mov	r6, r2
 8004e0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e10:	fb03 5711 	mls	r7, r3, r1, r5
 8004e14:	5dc7      	ldrb	r7, [r0, r7]
 8004e16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e1a:	462f      	mov	r7, r5
 8004e1c:	42bb      	cmp	r3, r7
 8004e1e:	460d      	mov	r5, r1
 8004e20:	d9f4      	bls.n	8004e0c <_printf_i+0x11c>
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d10b      	bne.n	8004e3e <_printf_i+0x14e>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	07df      	lsls	r7, r3, #31
 8004e2a:	d508      	bpl.n	8004e3e <_printf_i+0x14e>
 8004e2c:	6923      	ldr	r3, [r4, #16]
 8004e2e:	6861      	ldr	r1, [r4, #4]
 8004e30:	4299      	cmp	r1, r3
 8004e32:	bfde      	ittt	le
 8004e34:	2330      	movle	r3, #48	; 0x30
 8004e36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e3e:	1b92      	subs	r2, r2, r6
 8004e40:	6122      	str	r2, [r4, #16]
 8004e42:	464b      	mov	r3, r9
 8004e44:	4621      	mov	r1, r4
 8004e46:	4640      	mov	r0, r8
 8004e48:	f8cd a000 	str.w	sl, [sp]
 8004e4c:	aa03      	add	r2, sp, #12
 8004e4e:	f7ff fedf 	bl	8004c10 <_printf_common>
 8004e52:	3001      	adds	r0, #1
 8004e54:	d14c      	bne.n	8004ef0 <_printf_i+0x200>
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5a:	b004      	add	sp, #16
 8004e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e60:	4834      	ldr	r0, [pc, #208]	; (8004f34 <_printf_i+0x244>)
 8004e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e66:	680e      	ldr	r6, [r1, #0]
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e6e:	061f      	lsls	r7, r3, #24
 8004e70:	600e      	str	r6, [r1, #0]
 8004e72:	d514      	bpl.n	8004e9e <_printf_i+0x1ae>
 8004e74:	07d9      	lsls	r1, r3, #31
 8004e76:	bf44      	itt	mi
 8004e78:	f043 0320 	orrmi.w	r3, r3, #32
 8004e7c:	6023      	strmi	r3, [r4, #0]
 8004e7e:	b91d      	cbnz	r5, 8004e88 <_printf_i+0x198>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	f023 0320 	bic.w	r3, r3, #32
 8004e86:	6023      	str	r3, [r4, #0]
 8004e88:	2310      	movs	r3, #16
 8004e8a:	e7af      	b.n	8004dec <_printf_i+0xfc>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	f043 0320 	orr.w	r3, r3, #32
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	2378      	movs	r3, #120	; 0x78
 8004e96:	4828      	ldr	r0, [pc, #160]	; (8004f38 <_printf_i+0x248>)
 8004e98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e9c:	e7e3      	b.n	8004e66 <_printf_i+0x176>
 8004e9e:	065e      	lsls	r6, r3, #25
 8004ea0:	bf48      	it	mi
 8004ea2:	b2ad      	uxthmi	r5, r5
 8004ea4:	e7e6      	b.n	8004e74 <_printf_i+0x184>
 8004ea6:	4616      	mov	r6, r2
 8004ea8:	e7bb      	b.n	8004e22 <_printf_i+0x132>
 8004eaa:	680b      	ldr	r3, [r1, #0]
 8004eac:	6826      	ldr	r6, [r4, #0]
 8004eae:	1d1d      	adds	r5, r3, #4
 8004eb0:	6960      	ldr	r0, [r4, #20]
 8004eb2:	600d      	str	r5, [r1, #0]
 8004eb4:	0635      	lsls	r5, r6, #24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	d501      	bpl.n	8004ebe <_printf_i+0x1ce>
 8004eba:	6018      	str	r0, [r3, #0]
 8004ebc:	e002      	b.n	8004ec4 <_printf_i+0x1d4>
 8004ebe:	0671      	lsls	r1, r6, #25
 8004ec0:	d5fb      	bpl.n	8004eba <_printf_i+0x1ca>
 8004ec2:	8018      	strh	r0, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4616      	mov	r6, r2
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	e7ba      	b.n	8004e42 <_printf_i+0x152>
 8004ecc:	680b      	ldr	r3, [r1, #0]
 8004ece:	1d1a      	adds	r2, r3, #4
 8004ed0:	600a      	str	r2, [r1, #0]
 8004ed2:	681e      	ldr	r6, [r3, #0]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	6862      	ldr	r2, [r4, #4]
 8004eda:	f000 f999 	bl	8005210 <memchr>
 8004ede:	b108      	cbz	r0, 8004ee4 <_printf_i+0x1f4>
 8004ee0:	1b80      	subs	r0, r0, r6
 8004ee2:	6060      	str	r0, [r4, #4]
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eee:	e7a8      	b.n	8004e42 <_printf_i+0x152>
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	47d0      	blx	sl
 8004efa:	3001      	adds	r0, #1
 8004efc:	d0ab      	beq.n	8004e56 <_printf_i+0x166>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	079b      	lsls	r3, r3, #30
 8004f02:	d413      	bmi.n	8004f2c <_printf_i+0x23c>
 8004f04:	68e0      	ldr	r0, [r4, #12]
 8004f06:	9b03      	ldr	r3, [sp, #12]
 8004f08:	4298      	cmp	r0, r3
 8004f0a:	bfb8      	it	lt
 8004f0c:	4618      	movlt	r0, r3
 8004f0e:	e7a4      	b.n	8004e5a <_printf_i+0x16a>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4632      	mov	r2, r6
 8004f14:	4649      	mov	r1, r9
 8004f16:	4640      	mov	r0, r8
 8004f18:	47d0      	blx	sl
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d09b      	beq.n	8004e56 <_printf_i+0x166>
 8004f1e:	3501      	adds	r5, #1
 8004f20:	68e3      	ldr	r3, [r4, #12]
 8004f22:	9903      	ldr	r1, [sp, #12]
 8004f24:	1a5b      	subs	r3, r3, r1
 8004f26:	42ab      	cmp	r3, r5
 8004f28:	dcf2      	bgt.n	8004f10 <_printf_i+0x220>
 8004f2a:	e7eb      	b.n	8004f04 <_printf_i+0x214>
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	f104 0619 	add.w	r6, r4, #25
 8004f32:	e7f5      	b.n	8004f20 <_printf_i+0x230>
 8004f34:	08005715 	.word	0x08005715
 8004f38:	08005726 	.word	0x08005726

08004f3c <_sbrk_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	2300      	movs	r3, #0
 8004f40:	4d05      	ldr	r5, [pc, #20]	; (8004f58 <_sbrk_r+0x1c>)
 8004f42:	4604      	mov	r4, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	602b      	str	r3, [r5, #0]
 8004f48:	f7fc f9a0 	bl	800128c <_sbrk>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_sbrk_r+0x1a>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_sbrk_r+0x1a>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	200001fc 	.word	0x200001fc

08004f5c <__sread>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	460c      	mov	r4, r1
 8004f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f64:	f000 f96e 	bl	8005244 <_read_r>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	bfab      	itete	ge
 8004f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f70:	181b      	addge	r3, r3, r0
 8004f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f76:	bfac      	ite	ge
 8004f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f7a:	81a3      	strhlt	r3, [r4, #12]
 8004f7c:	bd10      	pop	{r4, pc}

08004f7e <__swrite>:
 8004f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f82:	461f      	mov	r7, r3
 8004f84:	898b      	ldrh	r3, [r1, #12]
 8004f86:	4605      	mov	r5, r0
 8004f88:	05db      	lsls	r3, r3, #23
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	d505      	bpl.n	8004f9c <__swrite+0x1e>
 8004f90:	2302      	movs	r3, #2
 8004f92:	2200      	movs	r2, #0
 8004f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f98:	f000 f928 	bl	80051ec <_lseek_r>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	463b      	mov	r3, r7
 8004faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb2:	f000 b869 	b.w	8005088 <_write_r>

08004fb6 <__sseek>:
 8004fb6:	b510      	push	{r4, lr}
 8004fb8:	460c      	mov	r4, r1
 8004fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbe:	f000 f915 	bl	80051ec <_lseek_r>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	bf15      	itete	ne
 8004fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fd2:	81a3      	strheq	r3, [r4, #12]
 8004fd4:	bf18      	it	ne
 8004fd6:	81a3      	strhne	r3, [r4, #12]
 8004fd8:	bd10      	pop	{r4, pc}

08004fda <__sclose>:
 8004fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fde:	f000 b8d3 	b.w	8005188 <_close_r>
	...

08004fe4 <__swbuf_r>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	460e      	mov	r6, r1
 8004fe8:	4614      	mov	r4, r2
 8004fea:	4605      	mov	r5, r0
 8004fec:	b118      	cbz	r0, 8004ff6 <__swbuf_r+0x12>
 8004fee:	6983      	ldr	r3, [r0, #24]
 8004ff0:	b90b      	cbnz	r3, 8004ff6 <__swbuf_r+0x12>
 8004ff2:	f7ff fb03 	bl	80045fc <__sinit>
 8004ff6:	4b21      	ldr	r3, [pc, #132]	; (800507c <__swbuf_r+0x98>)
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	d12b      	bne.n	8005054 <__swbuf_r+0x70>
 8004ffc:	686c      	ldr	r4, [r5, #4]
 8004ffe:	69a3      	ldr	r3, [r4, #24]
 8005000:	60a3      	str	r3, [r4, #8]
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	071a      	lsls	r2, r3, #28
 8005006:	d52f      	bpl.n	8005068 <__swbuf_r+0x84>
 8005008:	6923      	ldr	r3, [r4, #16]
 800500a:	b36b      	cbz	r3, 8005068 <__swbuf_r+0x84>
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	b2f6      	uxtb	r6, r6
 8005012:	1ac0      	subs	r0, r0, r3
 8005014:	6963      	ldr	r3, [r4, #20]
 8005016:	4637      	mov	r7, r6
 8005018:	4283      	cmp	r3, r0
 800501a:	dc04      	bgt.n	8005026 <__swbuf_r+0x42>
 800501c:	4621      	mov	r1, r4
 800501e:	4628      	mov	r0, r5
 8005020:	f7ff fa58 	bl	80044d4 <_fflush_r>
 8005024:	bb30      	cbnz	r0, 8005074 <__swbuf_r+0x90>
 8005026:	68a3      	ldr	r3, [r4, #8]
 8005028:	3001      	adds	r0, #1
 800502a:	3b01      	subs	r3, #1
 800502c:	60a3      	str	r3, [r4, #8]
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	6022      	str	r2, [r4, #0]
 8005034:	701e      	strb	r6, [r3, #0]
 8005036:	6963      	ldr	r3, [r4, #20]
 8005038:	4283      	cmp	r3, r0
 800503a:	d004      	beq.n	8005046 <__swbuf_r+0x62>
 800503c:	89a3      	ldrh	r3, [r4, #12]
 800503e:	07db      	lsls	r3, r3, #31
 8005040:	d506      	bpl.n	8005050 <__swbuf_r+0x6c>
 8005042:	2e0a      	cmp	r6, #10
 8005044:	d104      	bne.n	8005050 <__swbuf_r+0x6c>
 8005046:	4621      	mov	r1, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f7ff fa43 	bl	80044d4 <_fflush_r>
 800504e:	b988      	cbnz	r0, 8005074 <__swbuf_r+0x90>
 8005050:	4638      	mov	r0, r7
 8005052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <__swbuf_r+0x9c>)
 8005056:	429c      	cmp	r4, r3
 8005058:	d101      	bne.n	800505e <__swbuf_r+0x7a>
 800505a:	68ac      	ldr	r4, [r5, #8]
 800505c:	e7cf      	b.n	8004ffe <__swbuf_r+0x1a>
 800505e:	4b09      	ldr	r3, [pc, #36]	; (8005084 <__swbuf_r+0xa0>)
 8005060:	429c      	cmp	r4, r3
 8005062:	bf08      	it	eq
 8005064:	68ec      	ldreq	r4, [r5, #12]
 8005066:	e7ca      	b.n	8004ffe <__swbuf_r+0x1a>
 8005068:	4621      	mov	r1, r4
 800506a:	4628      	mov	r0, r5
 800506c:	f000 f81e 	bl	80050ac <__swsetup_r>
 8005070:	2800      	cmp	r0, #0
 8005072:	d0cb      	beq.n	800500c <__swbuf_r+0x28>
 8005074:	f04f 37ff 	mov.w	r7, #4294967295
 8005078:	e7ea      	b.n	8005050 <__swbuf_r+0x6c>
 800507a:	bf00      	nop
 800507c:	080056c4 	.word	0x080056c4
 8005080:	080056e4 	.word	0x080056e4
 8005084:	080056a4 	.word	0x080056a4

08005088 <_write_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	2200      	movs	r2, #0
 8005092:	4d05      	ldr	r5, [pc, #20]	; (80050a8 <_write_r+0x20>)
 8005094:	602a      	str	r2, [r5, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	f7fb fe80 	bl	8000d9c <_write>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_write_r+0x1e>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_write_r+0x1e>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	200001fc 	.word	0x200001fc

080050ac <__swsetup_r>:
 80050ac:	4b32      	ldr	r3, [pc, #200]	; (8005178 <__swsetup_r+0xcc>)
 80050ae:	b570      	push	{r4, r5, r6, lr}
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	4606      	mov	r6, r0
 80050b4:	460c      	mov	r4, r1
 80050b6:	b125      	cbz	r5, 80050c2 <__swsetup_r+0x16>
 80050b8:	69ab      	ldr	r3, [r5, #24]
 80050ba:	b913      	cbnz	r3, 80050c2 <__swsetup_r+0x16>
 80050bc:	4628      	mov	r0, r5
 80050be:	f7ff fa9d 	bl	80045fc <__sinit>
 80050c2:	4b2e      	ldr	r3, [pc, #184]	; (800517c <__swsetup_r+0xd0>)
 80050c4:	429c      	cmp	r4, r3
 80050c6:	d10f      	bne.n	80050e8 <__swsetup_r+0x3c>
 80050c8:	686c      	ldr	r4, [r5, #4]
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050d0:	0719      	lsls	r1, r3, #28
 80050d2:	d42c      	bmi.n	800512e <__swsetup_r+0x82>
 80050d4:	06dd      	lsls	r5, r3, #27
 80050d6:	d411      	bmi.n	80050fc <__swsetup_r+0x50>
 80050d8:	2309      	movs	r3, #9
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	e03e      	b.n	8005166 <__swsetup_r+0xba>
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <__swsetup_r+0xd4>)
 80050ea:	429c      	cmp	r4, r3
 80050ec:	d101      	bne.n	80050f2 <__swsetup_r+0x46>
 80050ee:	68ac      	ldr	r4, [r5, #8]
 80050f0:	e7eb      	b.n	80050ca <__swsetup_r+0x1e>
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <__swsetup_r+0xd8>)
 80050f4:	429c      	cmp	r4, r3
 80050f6:	bf08      	it	eq
 80050f8:	68ec      	ldreq	r4, [r5, #12]
 80050fa:	e7e6      	b.n	80050ca <__swsetup_r+0x1e>
 80050fc:	0758      	lsls	r0, r3, #29
 80050fe:	d512      	bpl.n	8005126 <__swsetup_r+0x7a>
 8005100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005102:	b141      	cbz	r1, 8005116 <__swsetup_r+0x6a>
 8005104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005108:	4299      	cmp	r1, r3
 800510a:	d002      	beq.n	8005112 <__swsetup_r+0x66>
 800510c:	4630      	mov	r0, r6
 800510e:	f7ff fb81 	bl	8004814 <_free_r>
 8005112:	2300      	movs	r3, #0
 8005114:	6363      	str	r3, [r4, #52]	; 0x34
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	2300      	movs	r3, #0
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	f043 0308 	orr.w	r3, r3, #8
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	b94b      	cbnz	r3, 8005146 <__swsetup_r+0x9a>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513c:	d003      	beq.n	8005146 <__swsetup_r+0x9a>
 800513e:	4621      	mov	r1, r4
 8005140:	4630      	mov	r0, r6
 8005142:	f7ff fb1f 	bl	8004784 <__smakebuf_r>
 8005146:	89a0      	ldrh	r0, [r4, #12]
 8005148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800514c:	f010 0301 	ands.w	r3, r0, #1
 8005150:	d00a      	beq.n	8005168 <__swsetup_r+0xbc>
 8005152:	2300      	movs	r3, #0
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6963      	ldr	r3, [r4, #20]
 8005158:	425b      	negs	r3, r3
 800515a:	61a3      	str	r3, [r4, #24]
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	b943      	cbnz	r3, 8005172 <__swsetup_r+0xc6>
 8005160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005164:	d1ba      	bne.n	80050dc <__swsetup_r+0x30>
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	0781      	lsls	r1, r0, #30
 800516a:	bf58      	it	pl
 800516c:	6963      	ldrpl	r3, [r4, #20]
 800516e:	60a3      	str	r3, [r4, #8]
 8005170:	e7f4      	b.n	800515c <__swsetup_r+0xb0>
 8005172:	2000      	movs	r0, #0
 8005174:	e7f7      	b.n	8005166 <__swsetup_r+0xba>
 8005176:	bf00      	nop
 8005178:	20000014 	.word	0x20000014
 800517c:	080056c4 	.word	0x080056c4
 8005180:	080056e4 	.word	0x080056e4
 8005184:	080056a4 	.word	0x080056a4

08005188 <_close_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	2300      	movs	r3, #0
 800518c:	4d05      	ldr	r5, [pc, #20]	; (80051a4 <_close_r+0x1c>)
 800518e:	4604      	mov	r4, r0
 8005190:	4608      	mov	r0, r1
 8005192:	602b      	str	r3, [r5, #0]
 8005194:	f7fb fe2e 	bl	8000df4 <_close>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_close_r+0x1a>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_close_r+0x1a>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	200001fc 	.word	0x200001fc

080051a8 <_fstat_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	2300      	movs	r3, #0
 80051ac:	4d06      	ldr	r5, [pc, #24]	; (80051c8 <_fstat_r+0x20>)
 80051ae:	4604      	mov	r4, r0
 80051b0:	4608      	mov	r0, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	602b      	str	r3, [r5, #0]
 80051b6:	f7fb fe6d 	bl	8000e94 <_fstat>
 80051ba:	1c43      	adds	r3, r0, #1
 80051bc:	d102      	bne.n	80051c4 <_fstat_r+0x1c>
 80051be:	682b      	ldr	r3, [r5, #0]
 80051c0:	b103      	cbz	r3, 80051c4 <_fstat_r+0x1c>
 80051c2:	6023      	str	r3, [r4, #0]
 80051c4:	bd38      	pop	{r3, r4, r5, pc}
 80051c6:	bf00      	nop
 80051c8:	200001fc 	.word	0x200001fc

080051cc <_isatty_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	2300      	movs	r3, #0
 80051d0:	4d05      	ldr	r5, [pc, #20]	; (80051e8 <_isatty_r+0x1c>)
 80051d2:	4604      	mov	r4, r0
 80051d4:	4608      	mov	r0, r1
 80051d6:	602b      	str	r3, [r5, #0]
 80051d8:	f7fb fdca 	bl	8000d70 <_isatty>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_isatty_r+0x1a>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_isatty_r+0x1a>
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	200001fc 	.word	0x200001fc

080051ec <_lseek_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	4611      	mov	r1, r2
 80051f4:	2200      	movs	r2, #0
 80051f6:	4d05      	ldr	r5, [pc, #20]	; (800520c <_lseek_r+0x20>)
 80051f8:	602a      	str	r2, [r5, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f7fb fe11 	bl	8000e22 <_lseek>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_lseek_r+0x1e>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	b103      	cbz	r3, 800520a <_lseek_r+0x1e>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	200001fc 	.word	0x200001fc

08005210 <memchr>:
 8005210:	4603      	mov	r3, r0
 8005212:	b510      	push	{r4, lr}
 8005214:	b2c9      	uxtb	r1, r1
 8005216:	4402      	add	r2, r0
 8005218:	4293      	cmp	r3, r2
 800521a:	4618      	mov	r0, r3
 800521c:	d101      	bne.n	8005222 <memchr+0x12>
 800521e:	2000      	movs	r0, #0
 8005220:	e003      	b.n	800522a <memchr+0x1a>
 8005222:	7804      	ldrb	r4, [r0, #0]
 8005224:	3301      	adds	r3, #1
 8005226:	428c      	cmp	r4, r1
 8005228:	d1f6      	bne.n	8005218 <memchr+0x8>
 800522a:	bd10      	pop	{r4, pc}

0800522c <__malloc_lock>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__malloc_lock+0x8>)
 800522e:	f7ff ba83 	b.w	8004738 <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	200001f4 	.word	0x200001f4

08005238 <__malloc_unlock>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__malloc_unlock+0x8>)
 800523a:	f7ff ba7e 	b.w	800473a <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	200001f4 	.word	0x200001f4

08005244 <_read_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	4611      	mov	r1, r2
 800524c:	2200      	movs	r2, #0
 800524e:	4d05      	ldr	r5, [pc, #20]	; (8005264 <_read_r+0x20>)
 8005250:	602a      	str	r2, [r5, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	f7fb fdf6 	bl	8000e44 <_read>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_read_r+0x1e>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_read_r+0x1e>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	200001fc 	.word	0x200001fc

08005268 <_init>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr

08005274 <_fini>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr

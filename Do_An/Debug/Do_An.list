
Do_An.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040ac  080040ac  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080040ac  080040ac  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040ac  080040ac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000078  0800412c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  0800412c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1d3  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002158  00000000  00000000  0002d274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002f3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000439b  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e50e  00000000  00000000  00034e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b851  00000000  00000000  00043321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ceb72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b0  00000000  00000000  000cebc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f18 	.word	0x08003f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003f18 	.word	0x08003f18

0800014c <ucSpi1Read>:
  * @brief Read Data Function from Lora Module
  * @param ucAddress: Address registers or fifo of Lora Module
  * @retval ucData: Data contained in registers or fifo of Lora Module  
  */
uint8_t ucSpi1Read(uint8_t ucAddress)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af04      	add	r7, sp, #16
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t ucData = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef ret = HAL_ERROR;
 800015a:	2301      	movs	r3, #1
 800015c:	73fb      	strb	r3, [r7, #15]
    ucAddress &= 0x7F; /* A wnr bit, which is 1 for write access and 0 for read access */
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000164:	b2db      	uxtb	r3, r3
 8000166:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	2101      	movs	r1, #1
 800016c:	4828      	ldr	r0, [pc, #160]	; (8000210 <ucSpi1Read+0xc4>)
 800016e:	f001 f9b1 	bl	80014d4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000172:	200a      	movs	r0, #10
 8000174:	f000 fd18 	bl	8000ba8 <HAL_Delay>
    ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)&ucAddress, sizeof(ucAddress), 100);
 8000178:	1df9      	adds	r1, r7, #7
 800017a:	2364      	movs	r3, #100	; 0x64
 800017c:	2201      	movs	r2, #1
 800017e:	4825      	ldr	r0, [pc, #148]	; (8000214 <ucSpi1Read+0xc8>)
 8000180:	f001 ff2e 	bl	8001fe0 <HAL_SPI_Transmit>
 8000184:	4603      	mov	r3, r0
 8000186:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK)
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d013      	beq.n	80001b6 <ucSpi1Read+0x6a>
    {
        STM_LOGE(LORA_TAG, "error [%d]", ret);
 800018e:	4b22      	ldr	r3, [pc, #136]	; (8000218 <ucSpi1Read+0xcc>)
 8000190:	681c      	ldr	r4, [r3, #0]
 8000192:	f000 fcff 	bl	8000b94 <HAL_GetTick>
 8000196:	4601      	mov	r1, r0
 8000198:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <ucSpi1Read+0xcc>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	7bfa      	ldrb	r2, [r7, #15]
 800019e:	9203      	str	r2, [sp, #12]
 80001a0:	2239      	movs	r2, #57	; 0x39
 80001a2:	9202      	str	r2, [sp, #8]
 80001a4:	4a1d      	ldr	r2, [pc, #116]	; (800021c <ucSpi1Read+0xd0>)
 80001a6:	9201      	str	r2, [sp, #4]
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	460b      	mov	r3, r1
 80001ac:	4a1c      	ldr	r2, [pc, #112]	; (8000220 <ucSpi1Read+0xd4>)
 80001ae:	4621      	mov	r1, r4
 80001b0:	2001      	movs	r0, #1
 80001b2:	f000 fc20 	bl	80009f6 <stm_log_write>
    }
    ret = HAL_SPI_Receive(&hspi1, (uint8_t *)&ucData, sizeof(ucData), 100);
 80001b6:	f107 010e 	add.w	r1, r7, #14
 80001ba:	2364      	movs	r3, #100	; 0x64
 80001bc:	2201      	movs	r2, #1
 80001be:	4815      	ldr	r0, [pc, #84]	; (8000214 <ucSpi1Read+0xc8>)
 80001c0:	f002 f84a 	bl	8002258 <HAL_SPI_Receive>
 80001c4:	4603      	mov	r3, r0
 80001c6:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK)
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d013      	beq.n	80001f6 <ucSpi1Read+0xaa>
    {
        STM_LOGE(LORA_TAG, "error [%d]", ret);
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <ucSpi1Read+0xcc>)
 80001d0:	681c      	ldr	r4, [r3, #0]
 80001d2:	f000 fcdf 	bl	8000b94 <HAL_GetTick>
 80001d6:	4601      	mov	r1, r0
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <ucSpi1Read+0xcc>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	7bfa      	ldrb	r2, [r7, #15]
 80001de:	9203      	str	r2, [sp, #12]
 80001e0:	223e      	movs	r2, #62	; 0x3e
 80001e2:	9202      	str	r2, [sp, #8]
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <ucSpi1Read+0xd0>)
 80001e6:	9201      	str	r2, [sp, #4]
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	460b      	mov	r3, r1
 80001ec:	4a0c      	ldr	r2, [pc, #48]	; (8000220 <ucSpi1Read+0xd4>)
 80001ee:	4621      	mov	r1, r4
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 fc00 	bl	80009f6 <stm_log_write>
    }
    HAL_Delay(10);
 80001f6:	200a      	movs	r0, #10
 80001f8:	f000 fcd6 	bl	8000ba8 <HAL_Delay>
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <ucSpi1Read+0xc4>)
 8000202:	f001 f967 	bl	80014d4 <HAL_GPIO_WritePin>
    return ucData;
 8000206:	7bbb      	ldrb	r3, [r7, #14]
}
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	bd90      	pop	{r4, r7, pc}
 8000210:	40010800 	.word	0x40010800
 8000214:	2000011c 	.word	0x2000011c
 8000218:	20000000 	.word	0x20000000
 800021c:	08003fe8 	.word	0x08003fe8
 8000220:	08003f3c 	.word	0x08003f3c

08000224 <main>:

/**
  * @retval int
  */
int main(void)
{
 8000224:	b590      	push	{r4, r7, lr}
 8000226:	b085      	sub	sp, #20
 8000228:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fc5b 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f879 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f96b 	bl	800050c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000236:	f000 f8cb 	bl	80003d0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800023a:	f000 f907 	bl	800044c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800023e:	f000 f93b 	bl	80004b8 <MX_USART1_UART_Init>
  RetargetInit(&huart1);
 8000242:	482e      	ldr	r0, [pc, #184]	; (80002fc <main+0xd8>)
 8000244:	f000 f9e6 	bl	8000614 <RetargetInit>
  /* USER CODE BEGIN 2 */
  relayBlinkDelay = ledBlinkDelay = HAL_GetTick();
 8000248:	f000 fca4 	bl	8000b94 <HAL_GetTick>
 800024c:	4603      	mov	r3, r0
 800024e:	4a2c      	ldr	r2, [pc, #176]	; (8000300 <main+0xdc>)
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	4b2b      	ldr	r3, [pc, #172]	; (8000300 <main+0xdc>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a2b      	ldr	r2, [pc, #172]	; (8000304 <main+0xe0>)
 8000258:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if (HAL_GetTick() - ledBlinkDelay >= 500)
 800025a:	f000 fc9b 	bl	8000b94 <HAL_GetTick>
 800025e:	4602      	mov	r2, r0
 8000260:	4b27      	ldr	r3, [pc, #156]	; (8000300 <main+0xdc>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800026a:	d31a      	bcc.n	80002a2 <main+0x7e>
    {
      ledBlinkDelay = HAL_GetTick();
 800026c:	f000 fc92 	bl	8000b94 <HAL_GetTick>
 8000270:	4603      	mov	r3, r0
 8000272:	4a23      	ldr	r2, [pc, #140]	; (8000300 <main+0xdc>)
 8000274:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin);
 8000276:	2101      	movs	r1, #1
 8000278:	4823      	ldr	r0, [pc, #140]	; (8000308 <main+0xe4>)
 800027a:	f001 f943 	bl	8001504 <HAL_GPIO_TogglePin>
      STM_LOGI(MAIN_TAG, "led blinks");
 800027e:	4b23      	ldr	r3, [pc, #140]	; (800030c <main+0xe8>)
 8000280:	681c      	ldr	r4, [r3, #0]
 8000282:	f000 fc87 	bl	8000b94 <HAL_GetTick>
 8000286:	4602      	mov	r2, r0
 8000288:	4b20      	ldr	r3, [pc, #128]	; (800030c <main+0xe8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2172      	movs	r1, #114	; 0x72
 800028e:	9102      	str	r1, [sp, #8]
 8000290:	491f      	ldr	r1, [pc, #124]	; (8000310 <main+0xec>)
 8000292:	9101      	str	r1, [sp, #4]
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	4613      	mov	r3, r2
 8000298:	4a1e      	ldr	r2, [pc, #120]	; (8000314 <main+0xf0>)
 800029a:	4621      	mov	r1, r4
 800029c:	2003      	movs	r0, #3
 800029e:	f000 fbaa 	bl	80009f6 <stm_log_write>
    }

    if (HAL_GetTick() - relayBlinkDelay >= 5000)
 80002a2:	f000 fc77 	bl	8000b94 <HAL_GetTick>
 80002a6:	4602      	mov	r2, r0
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <main+0xe0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	1ad3      	subs	r3, r2, r3
 80002ae:	f241 3287 	movw	r2, #4999	; 0x1387
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d91a      	bls.n	80002ec <main+0xc8>
    {
      relayBlinkDelay = HAL_GetTick();
 80002b6:	f000 fc6d 	bl	8000b94 <HAL_GetTick>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a11      	ldr	r2, [pc, #68]	; (8000304 <main+0xe0>)
 80002be:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin);
 80002c0:	2102      	movs	r1, #2
 80002c2:	4815      	ldr	r0, [pc, #84]	; (8000318 <main+0xf4>)
 80002c4:	f001 f91e 	bl	8001504 <HAL_GPIO_TogglePin>
      STM_LOGI(MAIN_TAG, "relay toggles");
 80002c8:	4b10      	ldr	r3, [pc, #64]	; (800030c <main+0xe8>)
 80002ca:	681c      	ldr	r4, [r3, #0]
 80002cc:	f000 fc62 	bl	8000b94 <HAL_GetTick>
 80002d0:	4602      	mov	r2, r0
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <main+0xe8>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2179      	movs	r1, #121	; 0x79
 80002d8:	9102      	str	r1, [sp, #8]
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <main+0xec>)
 80002dc:	9101      	str	r1, [sp, #4]
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	4613      	mov	r3, r2
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <main+0xf8>)
 80002e4:	4621      	mov	r1, r4
 80002e6:	2003      	movs	r0, #3
 80002e8:	f000 fb85 	bl	80009f6 <stm_log_write>
    }

    //vSpi1Write(RegFifo, ucData);
    ucData = ucSpi1Read(RegFrfMsb);
 80002ec:	2006      	movs	r0, #6
 80002ee:	f7ff ff2d 	bl	800014c <ucSpi1Read>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <main+0xfc>)
 80002f8:	701a      	strb	r2, [r3, #0]
    if (HAL_GetTick() - ledBlinkDelay >= 500)
 80002fa:	e7ae      	b.n	800025a <main+0x36>
 80002fc:	200000dc 	.word	0x200000dc
 8000300:	2000009c 	.word	0x2000009c
 8000304:	20000098 	.word	0x20000098
 8000308:	40010c00 	.word	0x40010c00
 800030c:	20000004 	.word	0x20000004
 8000310:	08003ff4 	.word	0x08003ff4
 8000314:	08003f78 	.word	0x08003f78
 8000318:	40010800 	.word	0x40010800
 800031c:	08003fa8 	.word	0x08003fa8
 8000320:	20000094 	.word	0x20000094

08000324 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b094      	sub	sp, #80	; 0x50
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fdbc 	bl	8002eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000354:	2302      	movs	r3, #2
 8000356:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035c:	2310      	movs	r3, #16
 800035e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000364:	2300      	movs	r3, #0
 8000366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000368:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000372:	4618      	mov	r0, r3
 8000374:	f001 f8e0 	bl	8001538 <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800037e:	f000 f943 	bl	8000608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
 */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000382:	230f      	movs	r3, #15
 8000384:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	2101      	movs	r1, #1
 800039c:	4618      	mov	r0, r3
 800039e:	f001 fb4b 	bl	8001a38 <HAL_RCC_ClockConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003a8:	f000 f92e 	bl	8000608 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003ac:	2302      	movs	r3, #2
 80003ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80003b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 fcd7 	bl	8001d6c <HAL_RCCEx_PeriphCLKConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003c4:	f000 f920 	bl	8000608 <Error_Handler>
  }
}
 80003c8:	bf00      	nop
 80003ca:	3750      	adds	r7, #80	; 0x50
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
 */
  hadc1.Instance = ADC1;
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <MX_ADC1_Init+0x74>)
 80003e2:	4a19      	ldr	r2, [pc, #100]	; (8000448 <MX_ADC1_Init+0x78>)
 80003e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_ADC1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_ADC1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_ADC1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_ADC1_Init+0x74>)
 80003fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <MX_ADC1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_ADC1_Init+0x74>)
 8000408:	2201      	movs	r2, #1
 800040a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800040c:	480d      	ldr	r0, [pc, #52]	; (8000444 <MX_ADC1_Init+0x74>)
 800040e:	f000 fbef 	bl	8000bf0 <HAL_ADC_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000418:	f000 f8f6 	bl	8000608 <Error_Handler>
  }
  /** Configure Regular Channel
 */
  sConfig.Channel = ADC_CHANNEL_0;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000420:	2301      	movs	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	4619      	mov	r1, r3
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <MX_ADC1_Init+0x74>)
 800042e:	f000 fcb7 	bl	8000da0 <HAL_ADC_ConfigChannel>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000438:	f000 f8e6 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800043c:	bf00      	nop
 800043e:	3710      	adds	r7, #16
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200000ac 	.word	0x200000ac
 8000448:	40012400 	.word	0x40012400

0800044c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000450:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000452:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <MX_SPI1_Init+0x68>)
 8000454:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800045c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_SPI1_Init+0x64>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800047c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_SPI1_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000498:	220a      	movs	r2, #10
 800049a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_SPI1_Init+0x64>)
 800049e:	f001 fd1b 	bl	8001ed8 <HAL_SPI_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004a8:	f000 f8ae 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000011c 	.word	0x2000011c
 80004b4:	40013000 	.word	0x40013000

080004b8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004be:	4a12      	ldr	r2, [pc, #72]	; (8000508 <MX_USART1_UART_Init+0x50>)
 80004c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004de:	220c      	movs	r2, #12
 80004e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004f0:	f002 fa5e 	bl	80029b0 <HAL_UART_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004fa:	f000 f885 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200000dc 	.word	0x200000dc
 8000508:	40013800 	.word	0x40013800

0800050c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000520:	4b35      	ldr	r3, [pc, #212]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a34      	ldr	r2, [pc, #208]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000526:	f043 0320 	orr.w	r3, r3, #32
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <MX_GPIO_Init+0xec>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0320 	and.w	r3, r3, #32
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b2f      	ldr	r3, [pc, #188]	; (80005f8 <MX_GPIO_Init+0xec>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a2e      	ldr	r2, [pc, #184]	; (80005f8 <MX_GPIO_Init+0xec>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a28      	ldr	r2, [pc, #160]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <MX_GPIO_Init+0xec>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2102      	movs	r1, #2
 800056c:	4823      	ldr	r0, [pc, #140]	; (80005fc <MX_GPIO_Init+0xf0>)
 800056e:	f000 ffb1 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2110      	movs	r1, #16
 8000576:	4821      	ldr	r0, [pc, #132]	; (80005fc <MX_GPIO_Init+0xf0>)
 8000578:	f000 ffac 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	481f      	ldr	r0, [pc, #124]	; (8000600 <MX_GPIO_Init+0xf4>)
 8000582:	f000 ffa7 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_OUTPUT_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin | SPI1_NSS_Pin;
 8000586:	2312      	movs	r3, #18
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2302      	movs	r3, #2
 8000594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <MX_GPIO_Init+0xf0>)
 800059e:	f000 fe15 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 80005a2:	2304      	movs	r3, #4
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	4811      	ldr	r0, [pc, #68]	; (80005fc <MX_GPIO_Init+0xf0>)
 80005b6:	f000 fe09 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERRUPT_LORA_Pin */
  GPIO_InitStruct.Pin = INTERRUPT_LORA_Pin;
 80005ba:	2308      	movs	r3, #8
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_GPIO_Init+0xf8>)
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERRUPT_LORA_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4619      	mov	r1, r3
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <MX_GPIO_Init+0xf0>)
 80005ce:	f000 fdfd 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OUTPUT_Pin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 80005d2:	2301      	movs	r3, #1
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2302      	movs	r3, #2
 80005e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_GPIO_Init+0xf4>)
 80005ea:	f000 fdef 	bl	80011cc <HAL_GPIO_Init>
}
 80005ee:	bf00      	nop
 80005f0:	3720      	adds	r7, #32
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800
 8000600:	40010c00 	.word	0x40010c00
 8000604:	10110000 	.word	0x10110000

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <RetargetInit+0x28>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <RetargetInit+0x2c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	6898      	ldr	r0, [r3, #8]
 8000628:	2300      	movs	r3, #0
 800062a:	2202      	movs	r2, #2
 800062c:	2100      	movs	r1, #0
 800062e:	f002 fc47 	bl	8002ec0 <setvbuf>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000174 	.word	0x20000174
 8000640:	20000014 	.word	0x20000014

08000644 <_isatty>:

int _isatty(int fd) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db04      	blt.n	800065c <_isatty+0x18>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b02      	cmp	r3, #2
 8000656:	dc01      	bgt.n	800065c <_isatty+0x18>
    return 1;
 8000658:	2301      	movs	r3, #1
 800065a:	e005      	b.n	8000668 <_isatty+0x24>

  errno = EBADF;
 800065c:	f002 fbfe 	bl	8002e5c <__errno>
 8000660:	4603      	mov	r3, r0
 8000662:	2209      	movs	r2, #9
 8000664:	601a      	str	r2, [r3, #0]
  return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <_write>:

int _write(int fd, char* ptr, int len) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d002      	beq.n	8000688 <_write+0x18>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d111      	bne.n	80006ac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <_write+0x54>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	b29a      	uxth	r2, r3
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	f002 f9d8 	bl	8002a4a <HAL_UART_Transmit>
 800069a:	4603      	mov	r3, r0
 800069c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800069e:	7dfb      	ldrb	r3, [r7, #23]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <_write+0x38>
      return len;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	e008      	b.n	80006ba <_write+0x4a>
    else
      return EIO;
 80006a8:	2305      	movs	r3, #5
 80006aa:	e006      	b.n	80006ba <_write+0x4a>
  }
  errno = EBADF;
 80006ac:	f002 fbd6 	bl	8002e5c <__errno>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2209      	movs	r2, #9
 80006b4:	601a      	str	r2, [r3, #0]
  return -1;
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000174 	.word	0x20000174

080006c8 <_close>:

int _close(int fd) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db04      	blt.n	80006e0 <_close+0x18>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	dc01      	bgt.n	80006e0 <_close+0x18>
    return 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	e006      	b.n	80006ee <_close+0x26>

  errno = EBADF;
 80006e0:	f002 fbbc 	bl	8002e5c <__errno>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2209      	movs	r2, #9
 80006e8:	601a      	str	r2, [r3, #0]
  return -1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000702:	f002 fbab 	bl	8002e5c <__errno>
 8000706:	4603      	mov	r3, r0
 8000708:	2209      	movs	r2, #9
 800070a:	601a      	str	r2, [r3, #0]
  return -1;
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_read>:

int _read(int fd, char* ptr, int len) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d110      	bne.n	800074c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <_read+0x4c>)
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	2201      	movs	r2, #1
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	f002 fa1a 	bl	8002b6e <HAL_UART_Receive>
 800073a:	4603      	mov	r3, r0
 800073c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d101      	bne.n	8000748 <_read+0x30>
      return 1;
 8000744:	2301      	movs	r3, #1
 8000746:	e008      	b.n	800075a <_read+0x42>
    else
      return EIO;
 8000748:	2305      	movs	r3, #5
 800074a:	e006      	b.n	800075a <_read+0x42>
  }
  errno = EBADF;
 800074c:	f002 fb86 	bl	8002e5c <__errno>
 8000750:	4603      	mov	r3, r0
 8000752:	2209      	movs	r2, #9
 8000754:	601a      	str	r2, [r3, #0]
  return -1;
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800075a:	4618      	mov	r0, r3
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000174 	.word	0x20000174

08000768 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db08      	blt.n	800078a <_fstat+0x22>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b02      	cmp	r3, #2
 800077c:	dc05      	bgt.n	800078a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000784:	605a      	str	r2, [r3, #4]
    return 0;
 8000786:	2300      	movs	r3, #0
 8000788:	e005      	b.n	8000796 <_fstat+0x2e>
  }

  errno = EBADF;
 800078a:	f002 fb67 	bl	8002e5c <__errno>
 800078e:	4603      	mov	r3, r0
 8000790:	2209      	movs	r2, #9
 8000792:	601a      	str	r2, [r3, #0]
  return 0;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_MspInit+0x5c>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a14      	ldr	r2, [pc, #80]	; (80007fc <HAL_MspInit+0x5c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_MspInit+0x5c>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x5c>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x5c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	61d3      	str	r3, [r2, #28]
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x5c>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_MspInit+0x60>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_MspInit+0x60>)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010000 	.word	0x40010000

08000804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <HAL_ADC_MspInit+0x6c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d121      	bne.n	8000868 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <HAL_ADC_MspInit+0x70>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <HAL_ADC_MspInit+0x70>)
 800082a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_ADC_MspInit+0x70>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_ADC_MspInit+0x70>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <HAL_ADC_MspInit+0x70>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <HAL_ADC_MspInit+0x70>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000858:	2303      	movs	r3, #3
 800085a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <HAL_ADC_MspInit+0x74>)
 8000864:	f000 fcb2 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40012400 	.word	0x40012400
 8000874:	40021000 	.word	0x40021000
 8000878:	40010800 	.word	0x40010800

0800087c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <HAL_SPI_MspInit+0x88>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d12f      	bne.n	80008fc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <HAL_SPI_MspInit+0x8c>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a19      	ldr	r2, [pc, #100]	; (8000908 <HAL_SPI_MspInit+0x8c>)
 80008a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_SPI_MspInit+0x8c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_SPI_MspInit+0x8c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a13      	ldr	r2, [pc, #76]	; (8000908 <HAL_SPI_MspInit+0x8c>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_SPI_MspInit+0x8c>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008cc:	23a0      	movs	r3, #160	; 0xa0
 80008ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	480b      	ldr	r0, [pc, #44]	; (800090c <HAL_SPI_MspInit+0x90>)
 80008e0:	f000 fc74 	bl	80011cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <HAL_SPI_MspInit+0x90>)
 80008f8:	f000 fc68 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40013000 	.word	0x40013000
 8000908:	40021000 	.word	0x40021000
 800090c:	40010800 	.word	0x40010800

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <HAL_UART_MspInit+0x8c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d131      	bne.n	8000994 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_UART_MspInit+0x90>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a1a      	ldr	r2, [pc, #104]	; (80009a0 <HAL_UART_MspInit+0x90>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_UART_MspInit+0x90>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_UART_MspInit+0x90>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <HAL_UART_MspInit+0x90>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_UART_MspInit+0x90>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <HAL_UART_MspInit+0x94>)
 8000976:	f000 fc29 	bl	80011cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800097a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_UART_MspInit+0x94>)
 8000990:	f000 fc1c 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40013800 	.word	0x40013800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010800 	.word	0x40010800

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ee:	f000 f8bf 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 80009f6:	b40c      	push	{r2, r3}
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 8000a0a:	68f9      	ldr	r1, [r7, #12]
 8000a0c:	69b8      	ldr	r0, [r7, #24]
 8000a0e:	f002 fb1d 	bl	800304c <viprintf>
    va_end(arg);
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a1c:	b002      	add	sp, #8
 8000a1e:	4770      	bx	lr

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f002 fa04 	bl	8002e5c <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20005000 	.word	0x20005000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	200000a0 	.word	0x200000a0
 8000a88:	20000190 	.word	0x20000190

08000a8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a9a:	e003      	b.n	8000aa4 <LoopCopyDataInit>

08000a9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000aa0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aa2:	3104      	adds	r1, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000aa8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000aac:	d3f6      	bcc.n	8000a9c <CopyDataInit>
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ab0:	e002      	b.n	8000ab8 <LoopFillZerobss>

08000ab2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ab4:	f842 3b04 	str.w	r3, [r2], #4

08000ab8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000abc:	d3f9      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000abe:	f7ff ffe5 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f002 f9d1 	bl	8002e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac6:	f7ff fbad 	bl	8000224 <main>
  bx lr
 8000aca:	4770      	bx	lr
  ldr r3, =_sidata
 8000acc:	080040b4 	.word	0x080040b4
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ad4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000ad8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000adc:	2000018c 	.word	0x2000018c

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_Init+0x28>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_Init+0x28>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 fb35 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fe4e 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fb3f 	bl	80011b2 <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 fb15 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000010 	.word	0x20000010
 8000b6c:	2000000c 	.word	0x2000000c

08000b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x1c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x20>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <HAL_IncTick+0x20>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	20000178 	.word	0x20000178

08000b94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <HAL_GetTick+0x10>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000178 	.word	0x20000178

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fff0 	bl	8000b94 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffe0 	bl	8000b94 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000010 	.word	0x20000010

08000bf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e0be      	b.n	8000d90 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d109      	bne.n	8000c34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fde8 	bl	8000804 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 f9ab 	bl	8000f90 <ADC_ConversionStop_Disable>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8099 	bne.w	8000d7e <HAL_ADC_Init+0x18e>
 8000c4c:	7dfb      	ldrb	r3, [r7, #23]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f040 8095 	bne.w	8000d7e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c5c:	f023 0302 	bic.w	r3, r3, #2
 8000c60:	f043 0202 	orr.w	r2, r3, #2
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7b1b      	ldrb	r3, [r3, #12]
 8000c76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c88:	d003      	beq.n	8000c92 <HAL_ADC_Init+0xa2>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d102      	bne.n	8000c98 <HAL_ADC_Init+0xa8>
 8000c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c96:	e000      	b.n	8000c9a <HAL_ADC_Init+0xaa>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7d1b      	ldrb	r3, [r3, #20]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d119      	bne.n	8000cdc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7b1b      	ldrb	r3, [r3, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d109      	bne.n	8000cc4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	035a      	lsls	r2, r3, #13
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	e00b      	b.n	8000cdc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	f043 0220 	orr.w	r2, r3, #32
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd4:	f043 0201 	orr.w	r2, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <HAL_ADC_Init+0x1a8>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	430b      	orrs	r3, r1
 8000d02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d0c:	d003      	beq.n	8000d16 <HAL_ADC_Init+0x126>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d104      	bne.n	8000d20 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	051b      	lsls	r3, r3, #20
 8000d1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_ADC_Init+0x1ac>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d10b      	bne.n	8000d5c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4e:	f023 0303 	bic.w	r3, r3, #3
 8000d52:	f043 0201 	orr.w	r2, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d5a:	e018      	b.n	8000d8e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d60:	f023 0312 	bic.w	r3, r3, #18
 8000d64:	f043 0210 	orr.w	r2, r3, #16
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d70:	f043 0201 	orr.w	r2, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d7c:	e007      	b.n	8000d8e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	f043 0210 	orr.w	r2, r3, #16
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	ffe1f7fd 	.word	0xffe1f7fd
 8000d9c:	ff1f0efe 	.word	0xff1f0efe

08000da0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d101      	bne.n	8000dc0 <HAL_ADC_ConfigChannel+0x20>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e0dc      	b.n	8000f7a <HAL_ADC_ConfigChannel+0x1da>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b06      	cmp	r3, #6
 8000dce:	d81c      	bhi.n	8000e0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	3b05      	subs	r3, #5
 8000de2:	221f      	movs	r2, #31
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4019      	ands	r1, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b05      	subs	r3, #5
 8000dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
 8000e08:	e03c      	b.n	8000e84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b0c      	cmp	r3, #12
 8000e10:	d81c      	bhi.n	8000e4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	3b23      	subs	r3, #35	; 0x23
 8000e24:	221f      	movs	r2, #31
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4019      	ands	r1, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3b23      	subs	r3, #35	; 0x23
 8000e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
 8000e4a:	e01b      	b.n	8000e84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3b41      	subs	r3, #65	; 0x41
 8000e5e:	221f      	movs	r2, #31
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4019      	ands	r1, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	3b41      	subs	r3, #65	; 0x41
 8000e78:	fa00 f203 	lsl.w	r2, r0, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b09      	cmp	r3, #9
 8000e8a:	d91c      	bls.n	8000ec6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68d9      	ldr	r1, [r3, #12]
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3b1e      	subs	r3, #30
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	4019      	ands	r1, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	6898      	ldr	r0, [r3, #8]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	3b1e      	subs	r3, #30
 8000eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	e019      	b.n	8000efa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6919      	ldr	r1, [r3, #16]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4019      	ands	r1, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	6898      	ldr	r0, [r3, #8]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b10      	cmp	r3, #16
 8000f00:	d003      	beq.n	8000f0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f06:	2b11      	cmp	r3, #17
 8000f08:	d132      	bne.n	8000f70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d125      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d126      	bne.n	8000f70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f30:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d11a      	bne.n	8000f70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <HAL_ADC_ConfigChannel+0x1ec>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	0c9a      	lsrs	r2, r3, #18
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f50:	e002      	b.n	8000f58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f9      	bne.n	8000f52 <HAL_ADC_ConfigChannel+0x1b2>
 8000f5e:	e007      	b.n	8000f70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f043 0220 	orr.w	r2, r3, #32
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	40012400 	.word	0x40012400
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	431bde83 	.word	0x431bde83

08000f90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d127      	bne.n	8000ffa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fba:	f7ff fdeb 	bl	8000b94 <HAL_GetTick>
 8000fbe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fc0:	e014      	b.n	8000fec <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fc2:	f7ff fde7 	bl	8000b94 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d90d      	bls.n	8000fec <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	f043 0210 	orr.w	r2, r3, #16
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	f043 0201 	orr.w	r2, r3, #1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e007      	b.n	8000ffc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d0e3      	beq.n	8000fc2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff90 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff49 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff5e 	bl	800104c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff90 	bl	80010bc <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5f 	bl	8001068 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffb0 	bl	8001120 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b08b      	sub	sp, #44	; 0x2c
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e169      	b.n	80014b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e0:	2201      	movs	r2, #1
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f040 8158 	bne.w	80014ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a9a      	ldr	r2, [pc, #616]	; (800146c <HAL_GPIO_Init+0x2a0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d05e      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001208:	4a98      	ldr	r2, [pc, #608]	; (800146c <HAL_GPIO_Init+0x2a0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d875      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 800120e:	4a98      	ldr	r2, [pc, #608]	; (8001470 <HAL_GPIO_Init+0x2a4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d058      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001214:	4a96      	ldr	r2, [pc, #600]	; (8001470 <HAL_GPIO_Init+0x2a4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d86f      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 800121a:	4a96      	ldr	r2, [pc, #600]	; (8001474 <HAL_GPIO_Init+0x2a8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d052      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001220:	4a94      	ldr	r2, [pc, #592]	; (8001474 <HAL_GPIO_Init+0x2a8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d869      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 8001226:	4a94      	ldr	r2, [pc, #592]	; (8001478 <HAL_GPIO_Init+0x2ac>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d04c      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 800122c:	4a92      	ldr	r2, [pc, #584]	; (8001478 <HAL_GPIO_Init+0x2ac>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d863      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 8001232:	4a92      	ldr	r2, [pc, #584]	; (800147c <HAL_GPIO_Init+0x2b0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d046      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001238:	4a90      	ldr	r2, [pc, #576]	; (800147c <HAL_GPIO_Init+0x2b0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d85d      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 800123e:	2b12      	cmp	r3, #18
 8001240:	d82a      	bhi.n	8001298 <HAL_GPIO_Init+0xcc>
 8001242:	2b12      	cmp	r3, #18
 8001244:	d859      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <HAL_GPIO_Init+0x80>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	080012c7 	.word	0x080012c7
 8001250:	080012a1 	.word	0x080012a1
 8001254:	080012b3 	.word	0x080012b3
 8001258:	080012f5 	.word	0x080012f5
 800125c:	080012fb 	.word	0x080012fb
 8001260:	080012fb 	.word	0x080012fb
 8001264:	080012fb 	.word	0x080012fb
 8001268:	080012fb 	.word	0x080012fb
 800126c:	080012fb 	.word	0x080012fb
 8001270:	080012fb 	.word	0x080012fb
 8001274:	080012fb 	.word	0x080012fb
 8001278:	080012fb 	.word	0x080012fb
 800127c:	080012fb 	.word	0x080012fb
 8001280:	080012fb 	.word	0x080012fb
 8001284:	080012fb 	.word	0x080012fb
 8001288:	080012fb 	.word	0x080012fb
 800128c:	080012fb 	.word	0x080012fb
 8001290:	080012a9 	.word	0x080012a9
 8001294:	080012bd 	.word	0x080012bd
 8001298:	4a79      	ldr	r2, [pc, #484]	; (8001480 <HAL_GPIO_Init+0x2b4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800129e:	e02c      	b.n	80012fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	623b      	str	r3, [r7, #32]
          break;
 80012a6:	e029      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	3304      	adds	r3, #4
 80012ae:	623b      	str	r3, [r7, #32]
          break;
 80012b0:	e024      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	3308      	adds	r3, #8
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e01f      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	330c      	adds	r3, #12
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e01a      	b.n	80012fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ce:	2304      	movs	r3, #4
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e013      	b.n	80012fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012dc:	2308      	movs	r3, #8
 80012de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	611a      	str	r2, [r3, #16]
          break;
 80012e6:	e009      	b.n	80012fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	615a      	str	r2, [r3, #20]
          break;
 80012f2:	e003      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
          break;
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x130>
          break;
 80012fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2bff      	cmp	r3, #255	; 0xff
 8001300:	d801      	bhi.n	8001306 <HAL_GPIO_Init+0x13a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	e001      	b.n	800130a <HAL_GPIO_Init+0x13e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3304      	adds	r3, #4
 800130a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2bff      	cmp	r3, #255	; 0xff
 8001310:	d802      	bhi.n	8001318 <HAL_GPIO_Init+0x14c>
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x152>
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	3b08      	subs	r3, #8
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	210f      	movs	r1, #15
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	6a39      	ldr	r1, [r7, #32]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	431a      	orrs	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 80b1 	beq.w	80014ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800134c:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_GPIO_Init+0x2b8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_GPIO_Init+0x2b8>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_GPIO_Init+0x2b8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001364:	4a48      	ldr	r2, [pc, #288]	; (8001488 <HAL_GPIO_Init+0x2bc>)
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a40      	ldr	r2, [pc, #256]	; (800148c <HAL_GPIO_Init+0x2c0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d013      	beq.n	80013b8 <HAL_GPIO_Init+0x1ec>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a3f      	ldr	r2, [pc, #252]	; (8001490 <HAL_GPIO_Init+0x2c4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d00d      	beq.n	80013b4 <HAL_GPIO_Init+0x1e8>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a3e      	ldr	r2, [pc, #248]	; (8001494 <HAL_GPIO_Init+0x2c8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d007      	beq.n	80013b0 <HAL_GPIO_Init+0x1e4>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <HAL_GPIO_Init+0x2cc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d101      	bne.n	80013ac <HAL_GPIO_Init+0x1e0>
 80013a8:	2303      	movs	r3, #3
 80013aa:	e006      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013ac:	2304      	movs	r3, #4
 80013ae:	e004      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e002      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b8:	2300      	movs	r3, #0
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	f002 0203 	and.w	r2, r2, #3
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4093      	lsls	r3, r2
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ca:	492f      	ldr	r1, [pc, #188]	; (8001488 <HAL_GPIO_Init+0x2bc>)
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013e4:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	492c      	ldr	r1, [pc, #176]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	4928      	ldr	r1, [pc, #160]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4922      	ldr	r1, [pc, #136]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	43db      	mvns	r3, r3
 8001422:	491e      	ldr	r1, [pc, #120]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001424:	4013      	ands	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d006      	beq.n	8001442 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	4918      	ldr	r1, [pc, #96]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	43db      	mvns	r3, r3
 800144a:	4914      	ldr	r1, [pc, #80]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800144c:	4013      	ands	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d021      	beq.n	80014a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	490e      	ldr	r1, [pc, #56]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
 8001468:	e021      	b.n	80014ae <HAL_GPIO_Init+0x2e2>
 800146a:	bf00      	nop
 800146c:	10320000 	.word	0x10320000
 8001470:	10310000 	.word	0x10310000
 8001474:	10220000 	.word	0x10220000
 8001478:	10210000 	.word	0x10210000
 800147c:	10120000 	.word	0x10120000
 8001480:	10110000 	.word	0x10110000
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000
 800148c:	40010800 	.word	0x40010800
 8001490:	40010c00 	.word	0x40010c00
 8001494:	40011000 	.word	0x40011000
 8001498:	40011400 	.word	0x40011400
 800149c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_GPIO_Init+0x304>)
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	4909      	ldr	r1, [pc, #36]	; (80014d0 <HAL_GPIO_Init+0x304>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3301      	adds	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f47f ae8e 	bne.w	80011e0 <HAL_GPIO_Init+0x14>
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	372c      	adds	r7, #44	; 0x2c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40010400 	.word	0x40010400

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	041a      	lsls	r2, r3, #16
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43d9      	mvns	r1, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	400b      	ands	r3, r1
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
	...

08001538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e26c      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8087 	beq.w	8001666 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001558:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00c      	beq.n	800157e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001564:	4b8f      	ldr	r3, [pc, #572]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d112      	bne.n	8001596 <HAL_RCC_OscConfig+0x5e>
 8001570:	4b8c      	ldr	r3, [pc, #560]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d10b      	bne.n	8001596 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157e:	4b89      	ldr	r3, [pc, #548]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d06c      	beq.n	8001664 <HAL_RCC_OscConfig+0x12c>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d168      	bne.n	8001664 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e246      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x76>
 80015a0:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a7f      	ldr	r2, [pc, #508]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e02e      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7a      	ldr	r2, [pc, #488]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e01d      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0xbc>
 80015da:	4b72      	ldr	r3, [pc, #456]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a71      	ldr	r2, [pc, #452]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a6e      	ldr	r2, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015f4:	4b6b      	ldr	r3, [pc, #428]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a6a      	ldr	r2, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a67      	ldr	r2, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fabe 	bl	8000b94 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff faba 	bl	8000b94 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e1fa      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0xe4>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff faaa 	bl	8000b94 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff faa6 	bl	8000b94 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1e6      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x10c>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d063      	beq.n	800173a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001672:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b08      	cmp	r3, #8
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x18c>
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d116      	bne.n	80016c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x176>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e1ba      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4939      	ldr	r1, [pc, #228]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e03a      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa5f 	bl	8000b94 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fa5b 	bl	8000b94 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e19b      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4927      	ldr	r1, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e015      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fa3e 	bl	8000b94 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fa3a 	bl	8000b94 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e17a      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d03a      	beq.n	80017bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d019      	beq.n	8001782 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_RCC_OscConfig+0x274>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fa1e 	bl	8000b94 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fa1a 	bl	8000b94 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e15a      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f000 fad8 	bl	8001d30 <RCC_Delay>
 8001780:	e01c      	b.n	80017bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_RCC_OscConfig+0x274>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fa04 	bl	8000b94 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178e:	e00f      	b.n	80017b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fa00 	bl	8000b94 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d908      	bls.n	80017b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e140      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	42420000 	.word	0x42420000
 80017ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b9e      	ldr	r3, [pc, #632]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1e9      	bne.n	8001790 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a6 	beq.w	8001916 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ce:	4b97      	ldr	r3, [pc, #604]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10d      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b94      	ldr	r3, [pc, #592]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a93      	ldr	r2, [pc, #588]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	61d3      	str	r3, [r2, #28]
 80017e6:	4b91      	ldr	r3, [pc, #580]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f2:	2301      	movs	r3, #1
 80017f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f6:	4b8e      	ldr	r3, [pc, #568]	; (8001a30 <HAL_RCC_OscConfig+0x4f8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d118      	bne.n	8001834 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001802:	4b8b      	ldr	r3, [pc, #556]	; (8001a30 <HAL_RCC_OscConfig+0x4f8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a8a      	ldr	r2, [pc, #552]	; (8001a30 <HAL_RCC_OscConfig+0x4f8>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180e:	f7ff f9c1 	bl	8000b94 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001816:	f7ff f9bd 	bl	8000b94 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b64      	cmp	r3, #100	; 0x64
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0fd      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4b81      	ldr	r3, [pc, #516]	; (8001a30 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x312>
 800183c:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a7a      	ldr	r2, [pc, #488]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	e02d      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x334>
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a75      	ldr	r2, [pc, #468]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a72      	ldr	r2, [pc, #456]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	e01c      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d10c      	bne.n	800188e <HAL_RCC_OscConfig+0x356>
 8001874:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4a6c      	ldr	r2, [pc, #432]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6213      	str	r3, [r2, #32]
 8001880:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a69      	ldr	r2, [pc, #420]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800188e:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a66      	ldr	r2, [pc, #408]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	4b64      	ldr	r3, [pc, #400]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a63      	ldr	r2, [pc, #396]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d015      	beq.n	80018da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff f971 	bl	8000b94 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff f96d 	bl	8000b94 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0ab      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ee      	beq.n	80018b6 <HAL_RCC_OscConfig+0x37e>
 80018d8:	e014      	b.n	8001904 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018da:	f7ff f95b 	bl	8000b94 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff f957 	bl	8000b94 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e095      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	4b4c      	ldr	r3, [pc, #304]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ee      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d105      	bne.n	8001916 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190a:	4b48      	ldr	r3, [pc, #288]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a47      	ldr	r2, [pc, #284]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001914:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8081 	beq.w	8001a22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d061      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d146      	bne.n	80019c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b3f      	ldr	r3, [pc, #252]	; (8001a34 <HAL_RCC_OscConfig+0x4fc>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff f92b 	bl	8000b94 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff f927 	bl	8000b94 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e067      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001954:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d108      	bne.n	800197c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196a:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	492d      	ldr	r1, [pc, #180]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a19      	ldr	r1, [r3, #32]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	430b      	orrs	r3, r1
 800198e:	4927      	ldr	r1, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_OscConfig+0x4fc>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f8fb 	bl	8000b94 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff f8f7 	bl	8000b94 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e037      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46a>
 80019c0:	e02f      	b.n	8001a22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_RCC_OscConfig+0x4fc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f8e4 	bl	8000b94 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f8e0 	bl	8000b94 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e020      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x498>
 80019ee:	e018      	b.n	8001a22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e013      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40007000 	.word	0x40007000
 8001a34:	42420060 	.word	0x42420060

08001a38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0d0      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d910      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 0207 	bic.w	r2, r3, #7
 8001a62:	4965      	ldr	r1, [pc, #404]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0b8      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a94:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ab6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	494d      	ldr	r1, [pc, #308]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d040      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d115      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e07f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e073      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e06b      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f023 0203 	bic.w	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4936      	ldr	r1, [pc, #216]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b28:	f7ff f834 	bl	8000b94 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff f830 	bl	8000b94 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e053      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 020c 	and.w	r2, r3, #12
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1eb      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d210      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 0207 	bic.w	r2, r3, #7
 8001b6e:	4922      	ldr	r1, [pc, #136]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e032      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4916      	ldr	r1, [pc, #88]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	490e      	ldr	r1, [pc, #56]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bc6:	f000 f821 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	490a      	ldr	r1, [pc, #40]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd8:	5ccb      	ldrb	r3, [r1, r3]
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1cc>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1d0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe ff92 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08003ffc 	.word	0x08003ffc
 8001c04:	20000008 	.word	0x20000008
 8001c08:	2000000c 	.word	0x2000000c

08001c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	b490      	push	{r4, r7}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c14:	1d3c      	adds	r4, r7, #4
 8001c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c1c:	f240 2301 	movw	r3, #513	; 0x201
 8001c20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x40>
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x46>
 8001c4a:	e02d      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c4e:	623b      	str	r3, [r7, #32]
      break;
 8001c50:	e02d      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	0c9b      	lsrs	r3, r3, #18
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c5e:	4413      	add	r3, r2
 8001c60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	0c5b      	lsrs	r3, r3, #17
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c7e:	4413      	add	r3, r2
 8001c80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8a:	fb02 f203 	mul.w	r2, r2, r3
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	e004      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	623b      	str	r3, [r7, #32]
      break;
 8001ca6:	e002      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001caa:	623b      	str	r3, [r7, #32]
      break;
 8001cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cae:	6a3b      	ldr	r3, [r7, #32]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc90      	pop	{r4, r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	08003fd8 	.word	0x08003fd8
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	007a1200 	.word	0x007a1200
 8001cc8:	003d0900 	.word	0x003d0900

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce4:	f7ff fff2 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4903      	ldr	r1, [pc, #12]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	0800400c 	.word	0x0800400c

08001d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	0adb      	lsrs	r3, r3, #11
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	0800400c 	.word	0x0800400c

08001d30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <RCC_Delay+0x34>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <RCC_Delay+0x38>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0a5b      	lsrs	r3, r3, #9
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d4c:	bf00      	nop
  }
  while (Delay --);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	60fa      	str	r2, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f9      	bne.n	8001d4c <RCC_Delay+0x1c>
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000008 	.word	0x20000008
 8001d68:	10624dd3 	.word	0x10624dd3

08001d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d07d      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10d      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d98:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da2:	61d3      	str	r3, [r2, #28]
 8001da4:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db0:	2301      	movs	r3, #1
 8001db2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d118      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc0:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a42      	ldr	r2, [pc, #264]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dcc:	f7fe fee2 	bl	8000b94 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	e008      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7fe fede 	bl	8000b94 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e06d      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d02e      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d027      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e26:	4a29      	ldr	r2, [pc, #164]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d014      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fead 	bl	8000b94 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fea9 	bl	8000b94 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e036      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ee      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4917      	ldr	r1, [pc, #92]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	490b      	ldr	r1, [pc, #44]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4904      	ldr	r1, [pc, #16]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	42420440 	.word	0x42420440

08001ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e076      	b.n	8001fd8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001efa:	d009      	beq.n	8001f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
 8001f02:	e005      	b.n	8001f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fca6 	bl	800087c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f94:	ea42 0103 	orr.w	r1, r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	0c1a      	lsrs	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f002 0204 	and.w	r2, r2, #4
 8001fb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_SPI_Transmit+0x22>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e126      	b.n	8002250 <HAL_SPI_Transmit+0x270>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800200a:	f7fe fdc3 	bl	8000b94 <HAL_GetTick>
 800200e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d002      	beq.n	8002026 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002020:	2302      	movs	r3, #2
 8002022:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002024:	e10b      	b.n	800223e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_SPI_Transmit+0x52>
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002036:	e102      	b.n	800223e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2203      	movs	r2, #3
 800203c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	88fa      	ldrh	r2, [r7, #6]
 8002050:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800207e:	d10f      	bne.n	80020a0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800209e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b40      	cmp	r3, #64	; 0x40
 80020ac:	d007      	beq.n	80020be <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c6:	d14b      	bne.n	8002160 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_SPI_Transmit+0xf6>
 80020d0:	8afb      	ldrh	r3, [r7, #22]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d13e      	bne.n	8002154 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	881a      	ldrh	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	1c9a      	adds	r2, r3, #2
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020fa:	e02b      	b.n	8002154 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b02      	cmp	r3, #2
 8002108:	d112      	bne.n	8002130 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	1c9a      	adds	r2, r3, #2
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	86da      	strh	r2, [r3, #54]	; 0x36
 800212e:	e011      	b.n	8002154 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002130:	f7fe fd30 	bl	8000b94 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d803      	bhi.n	8002148 <HAL_SPI_Transmit+0x168>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002146:	d102      	bne.n	800214e <HAL_SPI_Transmit+0x16e>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002152:	e074      	b.n	800223e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1ce      	bne.n	80020fc <HAL_SPI_Transmit+0x11c>
 800215e:	e04c      	b.n	80021fa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_SPI_Transmit+0x18e>
 8002168:	8afb      	ldrh	r3, [r7, #22]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d140      	bne.n	80021f0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	330c      	adds	r3, #12
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002194:	e02c      	b.n	80021f0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d113      	bne.n	80021cc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	330c      	adds	r3, #12
 80021ae:	7812      	ldrb	r2, [r2, #0]
 80021b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80021ca:	e011      	b.n	80021f0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021cc:	f7fe fce2 	bl	8000b94 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d803      	bhi.n	80021e4 <HAL_SPI_Transmit+0x204>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d102      	bne.n	80021ea <HAL_SPI_Transmit+0x20a>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021ee:	e026      	b.n	800223e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1cd      	bne.n	8002196 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 fbb8 	bl	8002974 <SPI_EndRxTxTransaction>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2220      	movs	r2, #32
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	77fb      	strb	r3, [r7, #31]
 800223a:	e000      	b.n	800223e <HAL_SPI_Transmit+0x25e>
  }

error:
 800223c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800224e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002274:	d112      	bne.n	800229c <HAL_SPI_Receive+0x44>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10e      	bne.n	800229c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2204      	movs	r2, #4
 8002282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f8f1 	bl	800247a <HAL_SPI_TransmitReceive>
 8002298:	4603      	mov	r3, r0
 800229a:	e0ea      	b.n	8002472 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_SPI_Receive+0x52>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e0e3      	b.n	8002472 <HAL_SPI_Receive+0x21a>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022b2:	f7fe fc6f 	bl	8000b94 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d002      	beq.n	80022ca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
 80022c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022c8:	e0ca      	b.n	8002460 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_SPI_Receive+0x7e>
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022da:	e0c1      	b.n	8002460 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2204      	movs	r2, #4
 80022e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	88fa      	ldrh	r2, [r7, #6]
 80022f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002322:	d10f      	bne.n	8002344 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002332:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002342:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d007      	beq.n	8002362 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d162      	bne.n	8002430 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800236a:	e02e      	b.n	80023ca <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d115      	bne.n	80023a6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f103 020c 	add.w	r2, r3, #12
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023a4:	e011      	b.n	80023ca <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a6:	f7fe fbf5 	bl	8000b94 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d803      	bhi.n	80023be <HAL_SPI_Receive+0x166>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d102      	bne.n	80023c4 <HAL_SPI_Receive+0x16c>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023c8:	e04a      	b.n	8002460 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1cb      	bne.n	800236c <HAL_SPI_Receive+0x114>
 80023d4:	e031      	b.n	800243a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d113      	bne.n	800240c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	b292      	uxth	r2, r2
 80023f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	1c9a      	adds	r2, r3, #2
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	87da      	strh	r2, [r3, #62]	; 0x3e
 800240a:	e011      	b.n	8002430 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800240c:	f7fe fbc2 	bl	8000b94 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d803      	bhi.n	8002424 <HAL_SPI_Receive+0x1cc>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002422:	d102      	bne.n	800242a <HAL_SPI_Receive+0x1d2>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800242e:	e017      	b.n	8002460 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1cd      	bne.n	80023d6 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	6839      	ldr	r1, [r7, #0]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fa46 	bl	80028d0 <SPI_EndRxTransaction>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	75fb      	strb	r3, [r7, #23]
 800245c:	e000      	b.n	8002460 <HAL_SPI_Receive+0x208>
  }

error :
 800245e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002470:	7dfb      	ldrb	r3, [r7, #23]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b08c      	sub	sp, #48	; 0x30
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002488:	2301      	movs	r3, #1
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_SPI_TransmitReceive+0x26>
 800249c:	2302      	movs	r3, #2
 800249e:	e18a      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x33c>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024a8:	f7fe fb74 	bl	8000b94 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d00f      	beq.n	80024ea <HAL_SPI_TransmitReceive+0x70>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d0:	d107      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x68>
 80024da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d003      	beq.n	80024ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
 80024e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024e8:	e15b      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_SPI_TransmitReceive+0x82>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_SPI_TransmitReceive+0x82>
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002502:	e14e      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b04      	cmp	r3, #4
 800250e:	d003      	beq.n	8002518 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2205      	movs	r2, #5
 8002514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	887a      	ldrh	r2, [r7, #2]
 800252e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	887a      	ldrh	r2, [r7, #2]
 800253a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d007      	beq.n	800256c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002574:	d178      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_SPI_TransmitReceive+0x10a>
 800257e:	8b7b      	ldrh	r3, [r7, #26]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d166      	bne.n	8002652 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	881a      	ldrh	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	1c9a      	adds	r2, r3, #2
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a8:	e053      	b.n	8002652 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d11b      	bne.n	80025f0 <HAL_SPI_TransmitReceive+0x176>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0x176>
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d113      	bne.n	80025f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	1c9a      	adds	r2, r3, #2
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d119      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x1b8>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d014      	beq.n	8002632 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	b292      	uxth	r2, r2
 8002614:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	1c9a      	adds	r2, r3, #2
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800262e:	2301      	movs	r3, #1
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002632:	f7fe faaf 	bl	8000b94 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800263e:	429a      	cmp	r2, r3
 8002640:	d807      	bhi.n	8002652 <HAL_SPI_TransmitReceive+0x1d8>
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d003      	beq.n	8002652 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002650:	e0a7      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1a6      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x130>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1a1      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x130>
 8002666:	e07c      	b.n	8002762 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_SPI_TransmitReceive+0x1fc>
 8002670:	8b7b      	ldrh	r3, [r7, #26]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d16b      	bne.n	800274e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	330c      	adds	r3, #12
 8002680:	7812      	ldrb	r2, [r2, #0]
 8002682:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800269c:	e057      	b.n	800274e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d11c      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x26c>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d017      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x26c>
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d114      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	330c      	adds	r3, #12
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d119      	bne.n	8002728 <HAL_SPI_TransmitReceive+0x2ae>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d014      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002724:	2301      	movs	r3, #1
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002728:	f7fe fa34 	bl	8000b94 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002734:	429a      	cmp	r2, r3
 8002736:	d803      	bhi.n	8002740 <HAL_SPI_TransmitReceive+0x2c6>
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d102      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x2cc>
 8002740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800274c:	e029      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1a2      	bne.n	800269e <HAL_SPI_TransmitReceive+0x224>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d19d      	bne.n	800269e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f904 	bl	8002974 <SPI_EndRxTxTransaction>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800277e:	e010      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	e000      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3730      	adds	r7, #48	; 0x30
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027d0:	f7fe f9e0 	bl	8000b94 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	4413      	add	r3, r2
 80027de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027e0:	f7fe f9d8 	bl	8000b94 <HAL_GetTick>
 80027e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	015b      	lsls	r3, r3, #5
 80027ec:	0d1b      	lsrs	r3, r3, #20
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	fb02 f303 	mul.w	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027f6:	e054      	b.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d050      	beq.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002800:	f7fe f9c8 	bl	8000b94 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	429a      	cmp	r2, r3
 800280e:	d902      	bls.n	8002816 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d13d      	bne.n	8002892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800282e:	d111      	bne.n	8002854 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002838:	d004      	beq.n	8002844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d107      	bne.n	8002854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285c:	d10f      	bne.n	800287e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800287c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e017      	b.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3b01      	subs	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	bf0c      	ite	eq
 80028b2:	2301      	moveq	r3, #1
 80028b4:	2300      	movne	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d19b      	bne.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000008 	.word	0x20000008

080028d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e4:	d111      	bne.n	800290a <SPI_EndRxTransaction+0x3a>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ee:	d004      	beq.n	80028fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f8:	d107      	bne.n	800290a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002908:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002912:	d117      	bne.n	8002944 <SPI_EndRxTransaction+0x74>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291c:	d112      	bne.n	8002944 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2200      	movs	r2, #0
 8002926:	2101      	movs	r1, #1
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff ff49 	bl	80027c0 <SPI_WaitFlagStateUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01a      	beq.n	800296a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e013      	b.n	800296c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff ff36 	bl	80027c0 <SPI_WaitFlagStateUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f043 0220 	orr.w	r2, r3, #32
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e000      	b.n	800296c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2200      	movs	r2, #0
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff ff18 	bl	80027c0 <SPI_WaitFlagStateUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e000      	b.n	80029a8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e03f      	b.n	8002a42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd ff9a 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f9a3 	bl	8002d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08a      	sub	sp, #40	; 0x28
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d17c      	bne.n	8002b64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_UART_Transmit+0x2c>
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e075      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_UART_Transmit+0x3e>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e06e      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2221      	movs	r2, #33	; 0x21
 8002a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a9e:	f7fe f879 	bl	8000b94 <HAL_GetTick>
 8002aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	d108      	bne.n	8002acc <HAL_UART_Transmit+0x82>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e003      	b.n	8002ad4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002adc:	e02a      	b.n	8002b34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f8df 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e036      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10b      	bne.n	8002b16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3302      	adds	r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	e007      	b.n	8002b26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	3301      	adds	r3, #1
 8002b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1cf      	bne.n	8002ade <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2140      	movs	r1, #64	; 0x40
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f8af 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e006      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b08a      	sub	sp, #40	; 0x28
 8002b72:	af02      	add	r7, sp, #8
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	f040 8089 	bne.w	8002ca2 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_UART_Receive+0x2e>
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e081      	b.n	8002ca4 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_UART_Receive+0x40>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e07a      	b.n	8002ca4 <HAL_UART_Receive+0x136>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2222      	movs	r2, #34	; 0x22
 8002bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002bc4:	f7fd ffe6 	bl	8000b94 <HAL_GetTick>
 8002bc8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	d108      	bne.n	8002bf2 <HAL_UART_Receive+0x84>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	e003      	b.n	8002bfa <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c02:	e043      	b.n	8002c8c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2120      	movs	r1, #32
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f84c 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e042      	b.n	8002ca4 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10c      	bne.n	8002c3e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	3302      	adds	r3, #2
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	e01f      	b.n	8002c7e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c46:	d007      	beq.n	8002c58 <HAL_UART_Receive+0xea>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_UART_Receive+0xf8>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e008      	b.n	8002c78 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1b6      	bne.n	8002c04 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbc:	e02c      	b.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d028      	beq.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ccc:	f7fd ff62 	bl	8000b94 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d21d      	bcs.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e00f      	b.n	8002d38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4013      	ands	r3, r2
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d0c3      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d7a:	f023 030c 	bic.w	r3, r3, #12
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	; (8002e54 <UART_SetConfig+0x114>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d103      	bne.n	8002db0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002da8:	f7fe ffae 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	e002      	b.n	8002db6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002db0:	f7fe ff96 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8002db4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <UART_SetConfig+0x118>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	0119      	lsls	r1, r3, #4
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	009a      	lsls	r2, r3, #2
 8002de0:	441a      	add	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dec:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <UART_SetConfig+0x118>)
 8002dee:	fba3 0302 	umull	r0, r3, r3, r2
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	2064      	movs	r0, #100	; 0x64
 8002df6:	fb00 f303 	mul.w	r3, r0, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	3332      	adds	r3, #50	; 0x32
 8002e00:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <UART_SetConfig+0x118>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0c:	4419      	add	r1, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009a      	lsls	r2, r3, #2
 8002e18:	441a      	add	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <UART_SetConfig+0x118>)
 8002e26:	fba3 0302 	umull	r0, r3, r3, r2
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2064      	movs	r0, #100	; 0x64
 8002e2e:	fb00 f303 	mul.w	r3, r0, r3
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	3332      	adds	r3, #50	; 0x32
 8002e38:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <UART_SetConfig+0x118>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	f003 020f 	and.w	r2, r3, #15
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	440a      	add	r2, r1
 8002e4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40013800 	.word	0x40013800
 8002e58:	51eb851f 	.word	0x51eb851f

08002e5c <__errno>:
 8002e5c:	4b01      	ldr	r3, [pc, #4]	; (8002e64 <__errno+0x8>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000014 	.word	0x20000014

08002e68 <__libc_init_array>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	2600      	movs	r6, #0
 8002e6c:	4d0c      	ldr	r5, [pc, #48]	; (8002ea0 <__libc_init_array+0x38>)
 8002e6e:	4c0d      	ldr	r4, [pc, #52]	; (8002ea4 <__libc_init_array+0x3c>)
 8002e70:	1b64      	subs	r4, r4, r5
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	42a6      	cmp	r6, r4
 8002e76:	d109      	bne.n	8002e8c <__libc_init_array+0x24>
 8002e78:	f001 f84e 	bl	8003f18 <_init>
 8002e7c:	2600      	movs	r6, #0
 8002e7e:	4d0a      	ldr	r5, [pc, #40]	; (8002ea8 <__libc_init_array+0x40>)
 8002e80:	4c0a      	ldr	r4, [pc, #40]	; (8002eac <__libc_init_array+0x44>)
 8002e82:	1b64      	subs	r4, r4, r5
 8002e84:	10a4      	asrs	r4, r4, #2
 8002e86:	42a6      	cmp	r6, r4
 8002e88:	d105      	bne.n	8002e96 <__libc_init_array+0x2e>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e90:	4798      	blx	r3
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7ee      	b.n	8002e74 <__libc_init_array+0xc>
 8002e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9a:	4798      	blx	r3
 8002e9c:	3601      	adds	r6, #1
 8002e9e:	e7f2      	b.n	8002e86 <__libc_init_array+0x1e>
 8002ea0:	080040ac 	.word	0x080040ac
 8002ea4:	080040ac 	.word	0x080040ac
 8002ea8:	080040ac 	.word	0x080040ac
 8002eac:	080040b0 	.word	0x080040b0

08002eb0 <memset>:
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4402      	add	r2, r0
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d100      	bne.n	8002eba <memset+0xa>
 8002eb8:	4770      	bx	lr
 8002eba:	f803 1b01 	strb.w	r1, [r3], #1
 8002ebe:	e7f9      	b.n	8002eb4 <memset+0x4>

08002ec0 <setvbuf>:
 8002ec0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002ec4:	461d      	mov	r5, r3
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	; (800303c <setvbuf+0x17c>)
 8002ec8:	4604      	mov	r4, r0
 8002eca:	681f      	ldr	r7, [r3, #0]
 8002ecc:	460e      	mov	r6, r1
 8002ece:	4690      	mov	r8, r2
 8002ed0:	b127      	cbz	r7, 8002edc <setvbuf+0x1c>
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	b913      	cbnz	r3, 8002edc <setvbuf+0x1c>
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	f000 f9e8 	bl	80032ac <__sinit>
 8002edc:	4b58      	ldr	r3, [pc, #352]	; (8003040 <setvbuf+0x180>)
 8002ede:	429c      	cmp	r4, r3
 8002ee0:	d167      	bne.n	8002fb2 <setvbuf+0xf2>
 8002ee2:	687c      	ldr	r4, [r7, #4]
 8002ee4:	f1b8 0f02 	cmp.w	r8, #2
 8002ee8:	d006      	beq.n	8002ef8 <setvbuf+0x38>
 8002eea:	f1b8 0f01 	cmp.w	r8, #1
 8002eee:	f200 809f 	bhi.w	8003030 <setvbuf+0x170>
 8002ef2:	2d00      	cmp	r5, #0
 8002ef4:	f2c0 809c 	blt.w	8003030 <setvbuf+0x170>
 8002ef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002efa:	07db      	lsls	r3, r3, #31
 8002efc:	d405      	bmi.n	8002f0a <setvbuf+0x4a>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	0598      	lsls	r0, r3, #22
 8002f02:	d402      	bmi.n	8002f0a <setvbuf+0x4a>
 8002f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f06:	f000 fa6f 	bl	80033e8 <__retarget_lock_acquire_recursive>
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4638      	mov	r0, r7
 8002f0e:	f000 f939 	bl	8003184 <_fflush_r>
 8002f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f14:	b141      	cbz	r1, 8002f28 <setvbuf+0x68>
 8002f16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f1a:	4299      	cmp	r1, r3
 8002f1c:	d002      	beq.n	8002f24 <setvbuf+0x64>
 8002f1e:	4638      	mov	r0, r7
 8002f20:	f000 fad0 	bl	80034c4 <_free_r>
 8002f24:	2300      	movs	r3, #0
 8002f26:	6363      	str	r3, [r4, #52]	; 0x34
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61a3      	str	r3, [r4, #24]
 8002f2c:	6063      	str	r3, [r4, #4]
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	0619      	lsls	r1, r3, #24
 8002f32:	d503      	bpl.n	8002f3c <setvbuf+0x7c>
 8002f34:	4638      	mov	r0, r7
 8002f36:	6921      	ldr	r1, [r4, #16]
 8002f38:	f000 fac4 	bl	80034c4 <_free_r>
 8002f3c:	89a3      	ldrh	r3, [r4, #12]
 8002f3e:	f1b8 0f02 	cmp.w	r8, #2
 8002f42:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002f46:	f023 0303 	bic.w	r3, r3, #3
 8002f4a:	81a3      	strh	r3, [r4, #12]
 8002f4c:	d06c      	beq.n	8003028 <setvbuf+0x168>
 8002f4e:	ab01      	add	r3, sp, #4
 8002f50:	466a      	mov	r2, sp
 8002f52:	4621      	mov	r1, r4
 8002f54:	4638      	mov	r0, r7
 8002f56:	f000 fa49 	bl	80033ec <__swhatbuf_r>
 8002f5a:	89a3      	ldrh	r3, [r4, #12]
 8002f5c:	4318      	orrs	r0, r3
 8002f5e:	81a0      	strh	r0, [r4, #12]
 8002f60:	2d00      	cmp	r5, #0
 8002f62:	d130      	bne.n	8002fc6 <setvbuf+0x106>
 8002f64:	9d00      	ldr	r5, [sp, #0]
 8002f66:	4628      	mov	r0, r5
 8002f68:	f000 faa4 	bl	80034b4 <malloc>
 8002f6c:	4606      	mov	r6, r0
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d155      	bne.n	800301e <setvbuf+0x15e>
 8002f72:	f8dd 9000 	ldr.w	r9, [sp]
 8002f76:	45a9      	cmp	r9, r5
 8002f78:	d14a      	bne.n	8003010 <setvbuf+0x150>
 8002f7a:	f04f 35ff 	mov.w	r5, #4294967295
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60a2      	str	r2, [r4, #8]
 8002f82:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002f86:	6022      	str	r2, [r4, #0]
 8002f88:	6122      	str	r2, [r4, #16]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f90:	6162      	str	r2, [r4, #20]
 8002f92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	07d2      	lsls	r2, r2, #31
 8002f9a:	81a3      	strh	r3, [r4, #12]
 8002f9c:	d405      	bmi.n	8002faa <setvbuf+0xea>
 8002f9e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002fa2:	d102      	bne.n	8002faa <setvbuf+0xea>
 8002fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fa6:	f000 fa20 	bl	80033ea <__retarget_lock_release_recursive>
 8002faa:	4628      	mov	r0, r5
 8002fac:	b003      	add	sp, #12
 8002fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <setvbuf+0x184>)
 8002fb4:	429c      	cmp	r4, r3
 8002fb6:	d101      	bne.n	8002fbc <setvbuf+0xfc>
 8002fb8:	68bc      	ldr	r4, [r7, #8]
 8002fba:	e793      	b.n	8002ee4 <setvbuf+0x24>
 8002fbc:	4b22      	ldr	r3, [pc, #136]	; (8003048 <setvbuf+0x188>)
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	bf08      	it	eq
 8002fc2:	68fc      	ldreq	r4, [r7, #12]
 8002fc4:	e78e      	b.n	8002ee4 <setvbuf+0x24>
 8002fc6:	2e00      	cmp	r6, #0
 8002fc8:	d0cd      	beq.n	8002f66 <setvbuf+0xa6>
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	b913      	cbnz	r3, 8002fd4 <setvbuf+0x114>
 8002fce:	4638      	mov	r0, r7
 8002fd0:	f000 f96c 	bl	80032ac <__sinit>
 8002fd4:	f1b8 0f01 	cmp.w	r8, #1
 8002fd8:	bf08      	it	eq
 8002fda:	89a3      	ldrheq	r3, [r4, #12]
 8002fdc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002fe0:	bf04      	itt	eq
 8002fe2:	f043 0301 	orreq.w	r3, r3, #1
 8002fe6:	81a3      	strheq	r3, [r4, #12]
 8002fe8:	89a2      	ldrh	r2, [r4, #12]
 8002fea:	6026      	str	r6, [r4, #0]
 8002fec:	f012 0308 	ands.w	r3, r2, #8
 8002ff0:	d01c      	beq.n	800302c <setvbuf+0x16c>
 8002ff2:	07d3      	lsls	r3, r2, #31
 8002ff4:	bf41      	itttt	mi
 8002ff6:	2300      	movmi	r3, #0
 8002ff8:	426d      	negmi	r5, r5
 8002ffa:	60a3      	strmi	r3, [r4, #8]
 8002ffc:	61a5      	strmi	r5, [r4, #24]
 8002ffe:	bf58      	it	pl
 8003000:	60a5      	strpl	r5, [r4, #8]
 8003002:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003004:	f015 0501 	ands.w	r5, r5, #1
 8003008:	d115      	bne.n	8003036 <setvbuf+0x176>
 800300a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800300e:	e7c8      	b.n	8002fa2 <setvbuf+0xe2>
 8003010:	4648      	mov	r0, r9
 8003012:	f000 fa4f 	bl	80034b4 <malloc>
 8003016:	4606      	mov	r6, r0
 8003018:	2800      	cmp	r0, #0
 800301a:	d0ae      	beq.n	8002f7a <setvbuf+0xba>
 800301c:	464d      	mov	r5, r9
 800301e:	89a3      	ldrh	r3, [r4, #12]
 8003020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003024:	81a3      	strh	r3, [r4, #12]
 8003026:	e7d0      	b.n	8002fca <setvbuf+0x10a>
 8003028:	2500      	movs	r5, #0
 800302a:	e7a8      	b.n	8002f7e <setvbuf+0xbe>
 800302c:	60a3      	str	r3, [r4, #8]
 800302e:	e7e8      	b.n	8003002 <setvbuf+0x142>
 8003030:	f04f 35ff 	mov.w	r5, #4294967295
 8003034:	e7b9      	b.n	8002faa <setvbuf+0xea>
 8003036:	2500      	movs	r5, #0
 8003038:	e7b7      	b.n	8002faa <setvbuf+0xea>
 800303a:	bf00      	nop
 800303c:	20000014 	.word	0x20000014
 8003040:	08004038 	.word	0x08004038
 8003044:	08004058 	.word	0x08004058
 8003048:	08004018 	.word	0x08004018

0800304c <viprintf>:
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <viprintf+0x28>)
 800304e:	b570      	push	{r4, r5, r6, lr}
 8003050:	681c      	ldr	r4, [r3, #0]
 8003052:	4605      	mov	r5, r0
 8003054:	460e      	mov	r6, r1
 8003056:	b124      	cbz	r4, 8003062 <viprintf+0x16>
 8003058:	69a3      	ldr	r3, [r4, #24]
 800305a:	b913      	cbnz	r3, 8003062 <viprintf+0x16>
 800305c:	4620      	mov	r0, r4
 800305e:	f000 f925 	bl	80032ac <__sinit>
 8003062:	4633      	mov	r3, r6
 8003064:	462a      	mov	r2, r5
 8003066:	4620      	mov	r0, r4
 8003068:	68a1      	ldr	r1, [r4, #8]
 800306a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800306e:	f000 baf7 	b.w	8003660 <_vfiprintf_r>
 8003072:	bf00      	nop
 8003074:	20000014 	.word	0x20000014

08003078 <__sflush_r>:
 8003078:	898a      	ldrh	r2, [r1, #12]
 800307a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800307e:	4605      	mov	r5, r0
 8003080:	0710      	lsls	r0, r2, #28
 8003082:	460c      	mov	r4, r1
 8003084:	d458      	bmi.n	8003138 <__sflush_r+0xc0>
 8003086:	684b      	ldr	r3, [r1, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	dc05      	bgt.n	8003098 <__sflush_r+0x20>
 800308c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	dc02      	bgt.n	8003098 <__sflush_r+0x20>
 8003092:	2000      	movs	r0, #0
 8003094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800309a:	2e00      	cmp	r6, #0
 800309c:	d0f9      	beq.n	8003092 <__sflush_r+0x1a>
 800309e:	2300      	movs	r3, #0
 80030a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030a4:	682f      	ldr	r7, [r5, #0]
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	d032      	beq.n	8003110 <__sflush_r+0x98>
 80030aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	075a      	lsls	r2, r3, #29
 80030b0:	d505      	bpl.n	80030be <__sflush_r+0x46>
 80030b2:	6863      	ldr	r3, [r4, #4]
 80030b4:	1ac0      	subs	r0, r0, r3
 80030b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030b8:	b10b      	cbz	r3, 80030be <__sflush_r+0x46>
 80030ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030bc:	1ac0      	subs	r0, r0, r3
 80030be:	2300      	movs	r3, #0
 80030c0:	4602      	mov	r2, r0
 80030c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030c4:	4628      	mov	r0, r5
 80030c6:	6a21      	ldr	r1, [r4, #32]
 80030c8:	47b0      	blx	r6
 80030ca:	1c43      	adds	r3, r0, #1
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	d106      	bne.n	80030de <__sflush_r+0x66>
 80030d0:	6829      	ldr	r1, [r5, #0]
 80030d2:	291d      	cmp	r1, #29
 80030d4:	d82c      	bhi.n	8003130 <__sflush_r+0xb8>
 80030d6:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <__sflush_r+0x108>)
 80030d8:	40ca      	lsrs	r2, r1
 80030da:	07d6      	lsls	r6, r2, #31
 80030dc:	d528      	bpl.n	8003130 <__sflush_r+0xb8>
 80030de:	2200      	movs	r2, #0
 80030e0:	6062      	str	r2, [r4, #4]
 80030e2:	6922      	ldr	r2, [r4, #16]
 80030e4:	04d9      	lsls	r1, r3, #19
 80030e6:	6022      	str	r2, [r4, #0]
 80030e8:	d504      	bpl.n	80030f4 <__sflush_r+0x7c>
 80030ea:	1c42      	adds	r2, r0, #1
 80030ec:	d101      	bne.n	80030f2 <__sflush_r+0x7a>
 80030ee:	682b      	ldr	r3, [r5, #0]
 80030f0:	b903      	cbnz	r3, 80030f4 <__sflush_r+0x7c>
 80030f2:	6560      	str	r0, [r4, #84]	; 0x54
 80030f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030f6:	602f      	str	r7, [r5, #0]
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d0ca      	beq.n	8003092 <__sflush_r+0x1a>
 80030fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003100:	4299      	cmp	r1, r3
 8003102:	d002      	beq.n	800310a <__sflush_r+0x92>
 8003104:	4628      	mov	r0, r5
 8003106:	f000 f9dd 	bl	80034c4 <_free_r>
 800310a:	2000      	movs	r0, #0
 800310c:	6360      	str	r0, [r4, #52]	; 0x34
 800310e:	e7c1      	b.n	8003094 <__sflush_r+0x1c>
 8003110:	6a21      	ldr	r1, [r4, #32]
 8003112:	2301      	movs	r3, #1
 8003114:	4628      	mov	r0, r5
 8003116:	47b0      	blx	r6
 8003118:	1c41      	adds	r1, r0, #1
 800311a:	d1c7      	bne.n	80030ac <__sflush_r+0x34>
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0c4      	beq.n	80030ac <__sflush_r+0x34>
 8003122:	2b1d      	cmp	r3, #29
 8003124:	d001      	beq.n	800312a <__sflush_r+0xb2>
 8003126:	2b16      	cmp	r3, #22
 8003128:	d101      	bne.n	800312e <__sflush_r+0xb6>
 800312a:	602f      	str	r7, [r5, #0]
 800312c:	e7b1      	b.n	8003092 <__sflush_r+0x1a>
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003134:	81a3      	strh	r3, [r4, #12]
 8003136:	e7ad      	b.n	8003094 <__sflush_r+0x1c>
 8003138:	690f      	ldr	r7, [r1, #16]
 800313a:	2f00      	cmp	r7, #0
 800313c:	d0a9      	beq.n	8003092 <__sflush_r+0x1a>
 800313e:	0793      	lsls	r3, r2, #30
 8003140:	bf18      	it	ne
 8003142:	2300      	movne	r3, #0
 8003144:	680e      	ldr	r6, [r1, #0]
 8003146:	bf08      	it	eq
 8003148:	694b      	ldreq	r3, [r1, #20]
 800314a:	eba6 0807 	sub.w	r8, r6, r7
 800314e:	600f      	str	r7, [r1, #0]
 8003150:	608b      	str	r3, [r1, #8]
 8003152:	f1b8 0f00 	cmp.w	r8, #0
 8003156:	dd9c      	ble.n	8003092 <__sflush_r+0x1a>
 8003158:	4643      	mov	r3, r8
 800315a:	463a      	mov	r2, r7
 800315c:	4628      	mov	r0, r5
 800315e:	6a21      	ldr	r1, [r4, #32]
 8003160:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003162:	47b0      	blx	r6
 8003164:	2800      	cmp	r0, #0
 8003166:	dc06      	bgt.n	8003176 <__sflush_r+0xfe>
 8003168:	89a3      	ldrh	r3, [r4, #12]
 800316a:	f04f 30ff 	mov.w	r0, #4294967295
 800316e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003172:	81a3      	strh	r3, [r4, #12]
 8003174:	e78e      	b.n	8003094 <__sflush_r+0x1c>
 8003176:	4407      	add	r7, r0
 8003178:	eba8 0800 	sub.w	r8, r8, r0
 800317c:	e7e9      	b.n	8003152 <__sflush_r+0xda>
 800317e:	bf00      	nop
 8003180:	20400001 	.word	0x20400001

08003184 <_fflush_r>:
 8003184:	b538      	push	{r3, r4, r5, lr}
 8003186:	690b      	ldr	r3, [r1, #16]
 8003188:	4605      	mov	r5, r0
 800318a:	460c      	mov	r4, r1
 800318c:	b913      	cbnz	r3, 8003194 <_fflush_r+0x10>
 800318e:	2500      	movs	r5, #0
 8003190:	4628      	mov	r0, r5
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	b118      	cbz	r0, 800319e <_fflush_r+0x1a>
 8003196:	6983      	ldr	r3, [r0, #24]
 8003198:	b90b      	cbnz	r3, 800319e <_fflush_r+0x1a>
 800319a:	f000 f887 	bl	80032ac <__sinit>
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <_fflush_r+0x6c>)
 80031a0:	429c      	cmp	r4, r3
 80031a2:	d11b      	bne.n	80031dc <_fflush_r+0x58>
 80031a4:	686c      	ldr	r4, [r5, #4]
 80031a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ef      	beq.n	800318e <_fflush_r+0xa>
 80031ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031b0:	07d0      	lsls	r0, r2, #31
 80031b2:	d404      	bmi.n	80031be <_fflush_r+0x3a>
 80031b4:	0599      	lsls	r1, r3, #22
 80031b6:	d402      	bmi.n	80031be <_fflush_r+0x3a>
 80031b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ba:	f000 f915 	bl	80033e8 <__retarget_lock_acquire_recursive>
 80031be:	4628      	mov	r0, r5
 80031c0:	4621      	mov	r1, r4
 80031c2:	f7ff ff59 	bl	8003078 <__sflush_r>
 80031c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031c8:	4605      	mov	r5, r0
 80031ca:	07da      	lsls	r2, r3, #31
 80031cc:	d4e0      	bmi.n	8003190 <_fflush_r+0xc>
 80031ce:	89a3      	ldrh	r3, [r4, #12]
 80031d0:	059b      	lsls	r3, r3, #22
 80031d2:	d4dd      	bmi.n	8003190 <_fflush_r+0xc>
 80031d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031d6:	f000 f908 	bl	80033ea <__retarget_lock_release_recursive>
 80031da:	e7d9      	b.n	8003190 <_fflush_r+0xc>
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <_fflush_r+0x70>)
 80031de:	429c      	cmp	r4, r3
 80031e0:	d101      	bne.n	80031e6 <_fflush_r+0x62>
 80031e2:	68ac      	ldr	r4, [r5, #8]
 80031e4:	e7df      	b.n	80031a6 <_fflush_r+0x22>
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <_fflush_r+0x74>)
 80031e8:	429c      	cmp	r4, r3
 80031ea:	bf08      	it	eq
 80031ec:	68ec      	ldreq	r4, [r5, #12]
 80031ee:	e7da      	b.n	80031a6 <_fflush_r+0x22>
 80031f0:	08004038 	.word	0x08004038
 80031f4:	08004058 	.word	0x08004058
 80031f8:	08004018 	.word	0x08004018

080031fc <std>:
 80031fc:	2300      	movs	r3, #0
 80031fe:	b510      	push	{r4, lr}
 8003200:	4604      	mov	r4, r0
 8003202:	e9c0 3300 	strd	r3, r3, [r0]
 8003206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800320a:	6083      	str	r3, [r0, #8]
 800320c:	8181      	strh	r1, [r0, #12]
 800320e:	6643      	str	r3, [r0, #100]	; 0x64
 8003210:	81c2      	strh	r2, [r0, #14]
 8003212:	6183      	str	r3, [r0, #24]
 8003214:	4619      	mov	r1, r3
 8003216:	2208      	movs	r2, #8
 8003218:	305c      	adds	r0, #92	; 0x5c
 800321a:	f7ff fe49 	bl	8002eb0 <memset>
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <std+0x38>)
 8003220:	6224      	str	r4, [r4, #32]
 8003222:	6263      	str	r3, [r4, #36]	; 0x24
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <std+0x3c>)
 8003226:	62a3      	str	r3, [r4, #40]	; 0x28
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <std+0x40>)
 800322a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <std+0x44>)
 800322e:	6323      	str	r3, [r4, #48]	; 0x30
 8003230:	bd10      	pop	{r4, pc}
 8003232:	bf00      	nop
 8003234:	08003c0d 	.word	0x08003c0d
 8003238:	08003c2f 	.word	0x08003c2f
 800323c:	08003c67 	.word	0x08003c67
 8003240:	08003c8b 	.word	0x08003c8b

08003244 <_cleanup_r>:
 8003244:	4901      	ldr	r1, [pc, #4]	; (800324c <_cleanup_r+0x8>)
 8003246:	f000 b8af 	b.w	80033a8 <_fwalk_reent>
 800324a:	bf00      	nop
 800324c:	08003185 	.word	0x08003185

08003250 <__sfmoreglue>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	2568      	movs	r5, #104	; 0x68
 8003254:	1e4a      	subs	r2, r1, #1
 8003256:	4355      	muls	r5, r2
 8003258:	460e      	mov	r6, r1
 800325a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800325e:	f000 f97d 	bl	800355c <_malloc_r>
 8003262:	4604      	mov	r4, r0
 8003264:	b140      	cbz	r0, 8003278 <__sfmoreglue+0x28>
 8003266:	2100      	movs	r1, #0
 8003268:	e9c0 1600 	strd	r1, r6, [r0]
 800326c:	300c      	adds	r0, #12
 800326e:	60a0      	str	r0, [r4, #8]
 8003270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003274:	f7ff fe1c 	bl	8002eb0 <memset>
 8003278:	4620      	mov	r0, r4
 800327a:	bd70      	pop	{r4, r5, r6, pc}

0800327c <__sfp_lock_acquire>:
 800327c:	4801      	ldr	r0, [pc, #4]	; (8003284 <__sfp_lock_acquire+0x8>)
 800327e:	f000 b8b3 	b.w	80033e8 <__retarget_lock_acquire_recursive>
 8003282:	bf00      	nop
 8003284:	20000184 	.word	0x20000184

08003288 <__sfp_lock_release>:
 8003288:	4801      	ldr	r0, [pc, #4]	; (8003290 <__sfp_lock_release+0x8>)
 800328a:	f000 b8ae 	b.w	80033ea <__retarget_lock_release_recursive>
 800328e:	bf00      	nop
 8003290:	20000184 	.word	0x20000184

08003294 <__sinit_lock_acquire>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__sinit_lock_acquire+0x8>)
 8003296:	f000 b8a7 	b.w	80033e8 <__retarget_lock_acquire_recursive>
 800329a:	bf00      	nop
 800329c:	2000017f 	.word	0x2000017f

080032a0 <__sinit_lock_release>:
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <__sinit_lock_release+0x8>)
 80032a2:	f000 b8a2 	b.w	80033ea <__retarget_lock_release_recursive>
 80032a6:	bf00      	nop
 80032a8:	2000017f 	.word	0x2000017f

080032ac <__sinit>:
 80032ac:	b510      	push	{r4, lr}
 80032ae:	4604      	mov	r4, r0
 80032b0:	f7ff fff0 	bl	8003294 <__sinit_lock_acquire>
 80032b4:	69a3      	ldr	r3, [r4, #24]
 80032b6:	b11b      	cbz	r3, 80032c0 <__sinit+0x14>
 80032b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032bc:	f7ff bff0 	b.w	80032a0 <__sinit_lock_release>
 80032c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032c4:	6523      	str	r3, [r4, #80]	; 0x50
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <__sinit+0x68>)
 80032c8:	4a13      	ldr	r2, [pc, #76]	; (8003318 <__sinit+0x6c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80032ce:	42a3      	cmp	r3, r4
 80032d0:	bf08      	it	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	4620      	mov	r0, r4
 80032d6:	bf08      	it	eq
 80032d8:	61a3      	streq	r3, [r4, #24]
 80032da:	f000 f81f 	bl	800331c <__sfp>
 80032de:	6060      	str	r0, [r4, #4]
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 f81b 	bl	800331c <__sfp>
 80032e6:	60a0      	str	r0, [r4, #8]
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 f817 	bl	800331c <__sfp>
 80032ee:	2200      	movs	r2, #0
 80032f0:	2104      	movs	r1, #4
 80032f2:	60e0      	str	r0, [r4, #12]
 80032f4:	6860      	ldr	r0, [r4, #4]
 80032f6:	f7ff ff81 	bl	80031fc <std>
 80032fa:	2201      	movs	r2, #1
 80032fc:	2109      	movs	r1, #9
 80032fe:	68a0      	ldr	r0, [r4, #8]
 8003300:	f7ff ff7c 	bl	80031fc <std>
 8003304:	2202      	movs	r2, #2
 8003306:	2112      	movs	r1, #18
 8003308:	68e0      	ldr	r0, [r4, #12]
 800330a:	f7ff ff77 	bl	80031fc <std>
 800330e:	2301      	movs	r3, #1
 8003310:	61a3      	str	r3, [r4, #24]
 8003312:	e7d1      	b.n	80032b8 <__sinit+0xc>
 8003314:	08004014 	.word	0x08004014
 8003318:	08003245 	.word	0x08003245

0800331c <__sfp>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	4607      	mov	r7, r0
 8003320:	f7ff ffac 	bl	800327c <__sfp_lock_acquire>
 8003324:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <__sfp+0x84>)
 8003326:	681e      	ldr	r6, [r3, #0]
 8003328:	69b3      	ldr	r3, [r6, #24]
 800332a:	b913      	cbnz	r3, 8003332 <__sfp+0x16>
 800332c:	4630      	mov	r0, r6
 800332e:	f7ff ffbd 	bl	80032ac <__sinit>
 8003332:	3648      	adds	r6, #72	; 0x48
 8003334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003338:	3b01      	subs	r3, #1
 800333a:	d503      	bpl.n	8003344 <__sfp+0x28>
 800333c:	6833      	ldr	r3, [r6, #0]
 800333e:	b30b      	cbz	r3, 8003384 <__sfp+0x68>
 8003340:	6836      	ldr	r6, [r6, #0]
 8003342:	e7f7      	b.n	8003334 <__sfp+0x18>
 8003344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003348:	b9d5      	cbnz	r5, 8003380 <__sfp+0x64>
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <__sfp+0x88>)
 800334c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003350:	60e3      	str	r3, [r4, #12]
 8003352:	6665      	str	r5, [r4, #100]	; 0x64
 8003354:	f000 f847 	bl	80033e6 <__retarget_lock_init_recursive>
 8003358:	f7ff ff96 	bl	8003288 <__sfp_lock_release>
 800335c:	2208      	movs	r2, #8
 800335e:	4629      	mov	r1, r5
 8003360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003368:	6025      	str	r5, [r4, #0]
 800336a:	61a5      	str	r5, [r4, #24]
 800336c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003370:	f7ff fd9e 	bl	8002eb0 <memset>
 8003374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800337c:	4620      	mov	r0, r4
 800337e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003380:	3468      	adds	r4, #104	; 0x68
 8003382:	e7d9      	b.n	8003338 <__sfp+0x1c>
 8003384:	2104      	movs	r1, #4
 8003386:	4638      	mov	r0, r7
 8003388:	f7ff ff62 	bl	8003250 <__sfmoreglue>
 800338c:	4604      	mov	r4, r0
 800338e:	6030      	str	r0, [r6, #0]
 8003390:	2800      	cmp	r0, #0
 8003392:	d1d5      	bne.n	8003340 <__sfp+0x24>
 8003394:	f7ff ff78 	bl	8003288 <__sfp_lock_release>
 8003398:	230c      	movs	r3, #12
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	e7ee      	b.n	800337c <__sfp+0x60>
 800339e:	bf00      	nop
 80033a0:	08004014 	.word	0x08004014
 80033a4:	ffff0001 	.word	0xffff0001

080033a8 <_fwalk_reent>:
 80033a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033ac:	4606      	mov	r6, r0
 80033ae:	4688      	mov	r8, r1
 80033b0:	2700      	movs	r7, #0
 80033b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033ba:	f1b9 0901 	subs.w	r9, r9, #1
 80033be:	d505      	bpl.n	80033cc <_fwalk_reent+0x24>
 80033c0:	6824      	ldr	r4, [r4, #0]
 80033c2:	2c00      	cmp	r4, #0
 80033c4:	d1f7      	bne.n	80033b6 <_fwalk_reent+0xe>
 80033c6:	4638      	mov	r0, r7
 80033c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033cc:	89ab      	ldrh	r3, [r5, #12]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d907      	bls.n	80033e2 <_fwalk_reent+0x3a>
 80033d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033d6:	3301      	adds	r3, #1
 80033d8:	d003      	beq.n	80033e2 <_fwalk_reent+0x3a>
 80033da:	4629      	mov	r1, r5
 80033dc:	4630      	mov	r0, r6
 80033de:	47c0      	blx	r8
 80033e0:	4307      	orrs	r7, r0
 80033e2:	3568      	adds	r5, #104	; 0x68
 80033e4:	e7e9      	b.n	80033ba <_fwalk_reent+0x12>

080033e6 <__retarget_lock_init_recursive>:
 80033e6:	4770      	bx	lr

080033e8 <__retarget_lock_acquire_recursive>:
 80033e8:	4770      	bx	lr

080033ea <__retarget_lock_release_recursive>:
 80033ea:	4770      	bx	lr

080033ec <__swhatbuf_r>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	460e      	mov	r6, r1
 80033f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f4:	4614      	mov	r4, r2
 80033f6:	2900      	cmp	r1, #0
 80033f8:	461d      	mov	r5, r3
 80033fa:	b096      	sub	sp, #88	; 0x58
 80033fc:	da07      	bge.n	800340e <__swhatbuf_r+0x22>
 80033fe:	2300      	movs	r3, #0
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	89b3      	ldrh	r3, [r6, #12]
 8003404:	061a      	lsls	r2, r3, #24
 8003406:	d410      	bmi.n	800342a <__swhatbuf_r+0x3e>
 8003408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800340c:	e00e      	b.n	800342c <__swhatbuf_r+0x40>
 800340e:	466a      	mov	r2, sp
 8003410:	f000 fd22 	bl	8003e58 <_fstat_r>
 8003414:	2800      	cmp	r0, #0
 8003416:	dbf2      	blt.n	80033fe <__swhatbuf_r+0x12>
 8003418:	9a01      	ldr	r2, [sp, #4]
 800341a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800341e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003422:	425a      	negs	r2, r3
 8003424:	415a      	adcs	r2, r3
 8003426:	602a      	str	r2, [r5, #0]
 8003428:	e7ee      	b.n	8003408 <__swhatbuf_r+0x1c>
 800342a:	2340      	movs	r3, #64	; 0x40
 800342c:	2000      	movs	r0, #0
 800342e:	6023      	str	r3, [r4, #0]
 8003430:	b016      	add	sp, #88	; 0x58
 8003432:	bd70      	pop	{r4, r5, r6, pc}

08003434 <__smakebuf_r>:
 8003434:	898b      	ldrh	r3, [r1, #12]
 8003436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003438:	079d      	lsls	r5, r3, #30
 800343a:	4606      	mov	r6, r0
 800343c:	460c      	mov	r4, r1
 800343e:	d507      	bpl.n	8003450 <__smakebuf_r+0x1c>
 8003440:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	6123      	str	r3, [r4, #16]
 8003448:	2301      	movs	r3, #1
 800344a:	6163      	str	r3, [r4, #20]
 800344c:	b002      	add	sp, #8
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	466a      	mov	r2, sp
 8003452:	ab01      	add	r3, sp, #4
 8003454:	f7ff ffca 	bl	80033ec <__swhatbuf_r>
 8003458:	9900      	ldr	r1, [sp, #0]
 800345a:	4605      	mov	r5, r0
 800345c:	4630      	mov	r0, r6
 800345e:	f000 f87d 	bl	800355c <_malloc_r>
 8003462:	b948      	cbnz	r0, 8003478 <__smakebuf_r+0x44>
 8003464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003468:	059a      	lsls	r2, r3, #22
 800346a:	d4ef      	bmi.n	800344c <__smakebuf_r+0x18>
 800346c:	f023 0303 	bic.w	r3, r3, #3
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	81a3      	strh	r3, [r4, #12]
 8003476:	e7e3      	b.n	8003440 <__smakebuf_r+0xc>
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <__smakebuf_r+0x7c>)
 800347a:	62b3      	str	r3, [r6, #40]	; 0x28
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	6020      	str	r0, [r4, #0]
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003484:	81a3      	strh	r3, [r4, #12]
 8003486:	9b00      	ldr	r3, [sp, #0]
 8003488:	6120      	str	r0, [r4, #16]
 800348a:	6163      	str	r3, [r4, #20]
 800348c:	9b01      	ldr	r3, [sp, #4]
 800348e:	b15b      	cbz	r3, 80034a8 <__smakebuf_r+0x74>
 8003490:	4630      	mov	r0, r6
 8003492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003496:	f000 fcf1 	bl	8003e7c <_isatty_r>
 800349a:	b128      	cbz	r0, 80034a8 <__smakebuf_r+0x74>
 800349c:	89a3      	ldrh	r3, [r4, #12]
 800349e:	f023 0303 	bic.w	r3, r3, #3
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	81a3      	strh	r3, [r4, #12]
 80034a8:	89a0      	ldrh	r0, [r4, #12]
 80034aa:	4305      	orrs	r5, r0
 80034ac:	81a5      	strh	r5, [r4, #12]
 80034ae:	e7cd      	b.n	800344c <__smakebuf_r+0x18>
 80034b0:	08003245 	.word	0x08003245

080034b4 <malloc>:
 80034b4:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <malloc+0xc>)
 80034b6:	4601      	mov	r1, r0
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	f000 b84f 	b.w	800355c <_malloc_r>
 80034be:	bf00      	nop
 80034c0:	20000014 	.word	0x20000014

080034c4 <_free_r>:
 80034c4:	b538      	push	{r3, r4, r5, lr}
 80034c6:	4605      	mov	r5, r0
 80034c8:	2900      	cmp	r1, #0
 80034ca:	d043      	beq.n	8003554 <_free_r+0x90>
 80034cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034d0:	1f0c      	subs	r4, r1, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bfb8      	it	lt
 80034d6:	18e4      	addlt	r4, r4, r3
 80034d8:	f000 fd00 	bl	8003edc <__malloc_lock>
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <_free_r+0x94>)
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	4610      	mov	r0, r2
 80034e2:	b933      	cbnz	r3, 80034f2 <_free_r+0x2e>
 80034e4:	6063      	str	r3, [r4, #4]
 80034e6:	6014      	str	r4, [r2, #0]
 80034e8:	4628      	mov	r0, r5
 80034ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ee:	f000 bcfb 	b.w	8003ee8 <__malloc_unlock>
 80034f2:	42a3      	cmp	r3, r4
 80034f4:	d90a      	bls.n	800350c <_free_r+0x48>
 80034f6:	6821      	ldr	r1, [r4, #0]
 80034f8:	1862      	adds	r2, r4, r1
 80034fa:	4293      	cmp	r3, r2
 80034fc:	bf01      	itttt	eq
 80034fe:	681a      	ldreq	r2, [r3, #0]
 8003500:	685b      	ldreq	r3, [r3, #4]
 8003502:	1852      	addeq	r2, r2, r1
 8003504:	6022      	streq	r2, [r4, #0]
 8003506:	6063      	str	r3, [r4, #4]
 8003508:	6004      	str	r4, [r0, #0]
 800350a:	e7ed      	b.n	80034e8 <_free_r+0x24>
 800350c:	461a      	mov	r2, r3
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	b10b      	cbz	r3, 8003516 <_free_r+0x52>
 8003512:	42a3      	cmp	r3, r4
 8003514:	d9fa      	bls.n	800350c <_free_r+0x48>
 8003516:	6811      	ldr	r1, [r2, #0]
 8003518:	1850      	adds	r0, r2, r1
 800351a:	42a0      	cmp	r0, r4
 800351c:	d10b      	bne.n	8003536 <_free_r+0x72>
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	4401      	add	r1, r0
 8003522:	1850      	adds	r0, r2, r1
 8003524:	4283      	cmp	r3, r0
 8003526:	6011      	str	r1, [r2, #0]
 8003528:	d1de      	bne.n	80034e8 <_free_r+0x24>
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4401      	add	r1, r0
 8003530:	6011      	str	r1, [r2, #0]
 8003532:	6053      	str	r3, [r2, #4]
 8003534:	e7d8      	b.n	80034e8 <_free_r+0x24>
 8003536:	d902      	bls.n	800353e <_free_r+0x7a>
 8003538:	230c      	movs	r3, #12
 800353a:	602b      	str	r3, [r5, #0]
 800353c:	e7d4      	b.n	80034e8 <_free_r+0x24>
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	1821      	adds	r1, r4, r0
 8003542:	428b      	cmp	r3, r1
 8003544:	bf01      	itttt	eq
 8003546:	6819      	ldreq	r1, [r3, #0]
 8003548:	685b      	ldreq	r3, [r3, #4]
 800354a:	1809      	addeq	r1, r1, r0
 800354c:	6021      	streq	r1, [r4, #0]
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	6054      	str	r4, [r2, #4]
 8003552:	e7c9      	b.n	80034e8 <_free_r+0x24>
 8003554:	bd38      	pop	{r3, r4, r5, pc}
 8003556:	bf00      	nop
 8003558:	200000a4 	.word	0x200000a4

0800355c <_malloc_r>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	1ccd      	adds	r5, r1, #3
 8003560:	f025 0503 	bic.w	r5, r5, #3
 8003564:	3508      	adds	r5, #8
 8003566:	2d0c      	cmp	r5, #12
 8003568:	bf38      	it	cc
 800356a:	250c      	movcc	r5, #12
 800356c:	2d00      	cmp	r5, #0
 800356e:	4606      	mov	r6, r0
 8003570:	db01      	blt.n	8003576 <_malloc_r+0x1a>
 8003572:	42a9      	cmp	r1, r5
 8003574:	d903      	bls.n	800357e <_malloc_r+0x22>
 8003576:	230c      	movs	r3, #12
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	2000      	movs	r0, #0
 800357c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800357e:	f000 fcad 	bl	8003edc <__malloc_lock>
 8003582:	4921      	ldr	r1, [pc, #132]	; (8003608 <_malloc_r+0xac>)
 8003584:	680a      	ldr	r2, [r1, #0]
 8003586:	4614      	mov	r4, r2
 8003588:	b99c      	cbnz	r4, 80035b2 <_malloc_r+0x56>
 800358a:	4f20      	ldr	r7, [pc, #128]	; (800360c <_malloc_r+0xb0>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	b923      	cbnz	r3, 800359a <_malloc_r+0x3e>
 8003590:	4621      	mov	r1, r4
 8003592:	4630      	mov	r0, r6
 8003594:	f000 fb2a 	bl	8003bec <_sbrk_r>
 8003598:	6038      	str	r0, [r7, #0]
 800359a:	4629      	mov	r1, r5
 800359c:	4630      	mov	r0, r6
 800359e:	f000 fb25 	bl	8003bec <_sbrk_r>
 80035a2:	1c43      	adds	r3, r0, #1
 80035a4:	d123      	bne.n	80035ee <_malloc_r+0x92>
 80035a6:	230c      	movs	r3, #12
 80035a8:	4630      	mov	r0, r6
 80035aa:	6033      	str	r3, [r6, #0]
 80035ac:	f000 fc9c 	bl	8003ee8 <__malloc_unlock>
 80035b0:	e7e3      	b.n	800357a <_malloc_r+0x1e>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	1b5b      	subs	r3, r3, r5
 80035b6:	d417      	bmi.n	80035e8 <_malloc_r+0x8c>
 80035b8:	2b0b      	cmp	r3, #11
 80035ba:	d903      	bls.n	80035c4 <_malloc_r+0x68>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	441c      	add	r4, r3
 80035c0:	6025      	str	r5, [r4, #0]
 80035c2:	e004      	b.n	80035ce <_malloc_r+0x72>
 80035c4:	6863      	ldr	r3, [r4, #4]
 80035c6:	42a2      	cmp	r2, r4
 80035c8:	bf0c      	ite	eq
 80035ca:	600b      	streq	r3, [r1, #0]
 80035cc:	6053      	strne	r3, [r2, #4]
 80035ce:	4630      	mov	r0, r6
 80035d0:	f000 fc8a 	bl	8003ee8 <__malloc_unlock>
 80035d4:	f104 000b 	add.w	r0, r4, #11
 80035d8:	1d23      	adds	r3, r4, #4
 80035da:	f020 0007 	bic.w	r0, r0, #7
 80035de:	1ac2      	subs	r2, r0, r3
 80035e0:	d0cc      	beq.n	800357c <_malloc_r+0x20>
 80035e2:	1a1b      	subs	r3, r3, r0
 80035e4:	50a3      	str	r3, [r4, r2]
 80035e6:	e7c9      	b.n	800357c <_malloc_r+0x20>
 80035e8:	4622      	mov	r2, r4
 80035ea:	6864      	ldr	r4, [r4, #4]
 80035ec:	e7cc      	b.n	8003588 <_malloc_r+0x2c>
 80035ee:	1cc4      	adds	r4, r0, #3
 80035f0:	f024 0403 	bic.w	r4, r4, #3
 80035f4:	42a0      	cmp	r0, r4
 80035f6:	d0e3      	beq.n	80035c0 <_malloc_r+0x64>
 80035f8:	1a21      	subs	r1, r4, r0
 80035fa:	4630      	mov	r0, r6
 80035fc:	f000 faf6 	bl	8003bec <_sbrk_r>
 8003600:	3001      	adds	r0, #1
 8003602:	d1dd      	bne.n	80035c0 <_malloc_r+0x64>
 8003604:	e7cf      	b.n	80035a6 <_malloc_r+0x4a>
 8003606:	bf00      	nop
 8003608:	200000a4 	.word	0x200000a4
 800360c:	200000a8 	.word	0x200000a8

08003610 <__sfputc_r>:
 8003610:	6893      	ldr	r3, [r2, #8]
 8003612:	b410      	push	{r4}
 8003614:	3b01      	subs	r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	6093      	str	r3, [r2, #8]
 800361a:	da07      	bge.n	800362c <__sfputc_r+0x1c>
 800361c:	6994      	ldr	r4, [r2, #24]
 800361e:	42a3      	cmp	r3, r4
 8003620:	db01      	blt.n	8003626 <__sfputc_r+0x16>
 8003622:	290a      	cmp	r1, #10
 8003624:	d102      	bne.n	800362c <__sfputc_r+0x1c>
 8003626:	bc10      	pop	{r4}
 8003628:	f000 bb34 	b.w	8003c94 <__swbuf_r>
 800362c:	6813      	ldr	r3, [r2, #0]
 800362e:	1c58      	adds	r0, r3, #1
 8003630:	6010      	str	r0, [r2, #0]
 8003632:	7019      	strb	r1, [r3, #0]
 8003634:	4608      	mov	r0, r1
 8003636:	bc10      	pop	{r4}
 8003638:	4770      	bx	lr

0800363a <__sfputs_r>:
 800363a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363c:	4606      	mov	r6, r0
 800363e:	460f      	mov	r7, r1
 8003640:	4614      	mov	r4, r2
 8003642:	18d5      	adds	r5, r2, r3
 8003644:	42ac      	cmp	r4, r5
 8003646:	d101      	bne.n	800364c <__sfputs_r+0x12>
 8003648:	2000      	movs	r0, #0
 800364a:	e007      	b.n	800365c <__sfputs_r+0x22>
 800364c:	463a      	mov	r2, r7
 800364e:	4630      	mov	r0, r6
 8003650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003654:	f7ff ffdc 	bl	8003610 <__sfputc_r>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d1f3      	bne.n	8003644 <__sfputs_r+0xa>
 800365c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003660 <_vfiprintf_r>:
 8003660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003664:	460d      	mov	r5, r1
 8003666:	4614      	mov	r4, r2
 8003668:	4698      	mov	r8, r3
 800366a:	4606      	mov	r6, r0
 800366c:	b09d      	sub	sp, #116	; 0x74
 800366e:	b118      	cbz	r0, 8003678 <_vfiprintf_r+0x18>
 8003670:	6983      	ldr	r3, [r0, #24]
 8003672:	b90b      	cbnz	r3, 8003678 <_vfiprintf_r+0x18>
 8003674:	f7ff fe1a 	bl	80032ac <__sinit>
 8003678:	4b89      	ldr	r3, [pc, #548]	; (80038a0 <_vfiprintf_r+0x240>)
 800367a:	429d      	cmp	r5, r3
 800367c:	d11b      	bne.n	80036b6 <_vfiprintf_r+0x56>
 800367e:	6875      	ldr	r5, [r6, #4]
 8003680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003682:	07d9      	lsls	r1, r3, #31
 8003684:	d405      	bmi.n	8003692 <_vfiprintf_r+0x32>
 8003686:	89ab      	ldrh	r3, [r5, #12]
 8003688:	059a      	lsls	r2, r3, #22
 800368a:	d402      	bmi.n	8003692 <_vfiprintf_r+0x32>
 800368c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800368e:	f7ff feab 	bl	80033e8 <__retarget_lock_acquire_recursive>
 8003692:	89ab      	ldrh	r3, [r5, #12]
 8003694:	071b      	lsls	r3, r3, #28
 8003696:	d501      	bpl.n	800369c <_vfiprintf_r+0x3c>
 8003698:	692b      	ldr	r3, [r5, #16]
 800369a:	b9eb      	cbnz	r3, 80036d8 <_vfiprintf_r+0x78>
 800369c:	4629      	mov	r1, r5
 800369e:	4630      	mov	r0, r6
 80036a0:	f000 fb5c 	bl	8003d5c <__swsetup_r>
 80036a4:	b1c0      	cbz	r0, 80036d8 <_vfiprintf_r+0x78>
 80036a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036a8:	07dc      	lsls	r4, r3, #31
 80036aa:	d50e      	bpl.n	80036ca <_vfiprintf_r+0x6a>
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	b01d      	add	sp, #116	; 0x74
 80036b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b6:	4b7b      	ldr	r3, [pc, #492]	; (80038a4 <_vfiprintf_r+0x244>)
 80036b8:	429d      	cmp	r5, r3
 80036ba:	d101      	bne.n	80036c0 <_vfiprintf_r+0x60>
 80036bc:	68b5      	ldr	r5, [r6, #8]
 80036be:	e7df      	b.n	8003680 <_vfiprintf_r+0x20>
 80036c0:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <_vfiprintf_r+0x248>)
 80036c2:	429d      	cmp	r5, r3
 80036c4:	bf08      	it	eq
 80036c6:	68f5      	ldreq	r5, [r6, #12]
 80036c8:	e7da      	b.n	8003680 <_vfiprintf_r+0x20>
 80036ca:	89ab      	ldrh	r3, [r5, #12]
 80036cc:	0598      	lsls	r0, r3, #22
 80036ce:	d4ed      	bmi.n	80036ac <_vfiprintf_r+0x4c>
 80036d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036d2:	f7ff fe8a 	bl	80033ea <__retarget_lock_release_recursive>
 80036d6:	e7e9      	b.n	80036ac <_vfiprintf_r+0x4c>
 80036d8:	2300      	movs	r3, #0
 80036da:	9309      	str	r3, [sp, #36]	; 0x24
 80036dc:	2320      	movs	r3, #32
 80036de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036e2:	2330      	movs	r3, #48	; 0x30
 80036e4:	f04f 0901 	mov.w	r9, #1
 80036e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80036ec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80038ac <_vfiprintf_r+0x24c>
 80036f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036f4:	4623      	mov	r3, r4
 80036f6:	469a      	mov	sl, r3
 80036f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036fc:	b10a      	cbz	r2, 8003702 <_vfiprintf_r+0xa2>
 80036fe:	2a25      	cmp	r2, #37	; 0x25
 8003700:	d1f9      	bne.n	80036f6 <_vfiprintf_r+0x96>
 8003702:	ebba 0b04 	subs.w	fp, sl, r4
 8003706:	d00b      	beq.n	8003720 <_vfiprintf_r+0xc0>
 8003708:	465b      	mov	r3, fp
 800370a:	4622      	mov	r2, r4
 800370c:	4629      	mov	r1, r5
 800370e:	4630      	mov	r0, r6
 8003710:	f7ff ff93 	bl	800363a <__sfputs_r>
 8003714:	3001      	adds	r0, #1
 8003716:	f000 80aa 	beq.w	800386e <_vfiprintf_r+0x20e>
 800371a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800371c:	445a      	add	r2, fp
 800371e:	9209      	str	r2, [sp, #36]	; 0x24
 8003720:	f89a 3000 	ldrb.w	r3, [sl]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a2 	beq.w	800386e <_vfiprintf_r+0x20e>
 800372a:	2300      	movs	r3, #0
 800372c:	f04f 32ff 	mov.w	r2, #4294967295
 8003730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003734:	f10a 0a01 	add.w	sl, sl, #1
 8003738:	9304      	str	r3, [sp, #16]
 800373a:	9307      	str	r3, [sp, #28]
 800373c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003740:	931a      	str	r3, [sp, #104]	; 0x68
 8003742:	4654      	mov	r4, sl
 8003744:	2205      	movs	r2, #5
 8003746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800374a:	4858      	ldr	r0, [pc, #352]	; (80038ac <_vfiprintf_r+0x24c>)
 800374c:	f000 fbb8 	bl	8003ec0 <memchr>
 8003750:	9a04      	ldr	r2, [sp, #16]
 8003752:	b9d8      	cbnz	r0, 800378c <_vfiprintf_r+0x12c>
 8003754:	06d1      	lsls	r1, r2, #27
 8003756:	bf44      	itt	mi
 8003758:	2320      	movmi	r3, #32
 800375a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800375e:	0713      	lsls	r3, r2, #28
 8003760:	bf44      	itt	mi
 8003762:	232b      	movmi	r3, #43	; 0x2b
 8003764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003768:	f89a 3000 	ldrb.w	r3, [sl]
 800376c:	2b2a      	cmp	r3, #42	; 0x2a
 800376e:	d015      	beq.n	800379c <_vfiprintf_r+0x13c>
 8003770:	4654      	mov	r4, sl
 8003772:	2000      	movs	r0, #0
 8003774:	f04f 0c0a 	mov.w	ip, #10
 8003778:	9a07      	ldr	r2, [sp, #28]
 800377a:	4621      	mov	r1, r4
 800377c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003780:	3b30      	subs	r3, #48	; 0x30
 8003782:	2b09      	cmp	r3, #9
 8003784:	d94e      	bls.n	8003824 <_vfiprintf_r+0x1c4>
 8003786:	b1b0      	cbz	r0, 80037b6 <_vfiprintf_r+0x156>
 8003788:	9207      	str	r2, [sp, #28]
 800378a:	e014      	b.n	80037b6 <_vfiprintf_r+0x156>
 800378c:	eba0 0308 	sub.w	r3, r0, r8
 8003790:	fa09 f303 	lsl.w	r3, r9, r3
 8003794:	4313      	orrs	r3, r2
 8003796:	46a2      	mov	sl, r4
 8003798:	9304      	str	r3, [sp, #16]
 800379a:	e7d2      	b.n	8003742 <_vfiprintf_r+0xe2>
 800379c:	9b03      	ldr	r3, [sp, #12]
 800379e:	1d19      	adds	r1, r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	9103      	str	r1, [sp, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bfbb      	ittet	lt
 80037a8:	425b      	neglt	r3, r3
 80037aa:	f042 0202 	orrlt.w	r2, r2, #2
 80037ae:	9307      	strge	r3, [sp, #28]
 80037b0:	9307      	strlt	r3, [sp, #28]
 80037b2:	bfb8      	it	lt
 80037b4:	9204      	strlt	r2, [sp, #16]
 80037b6:	7823      	ldrb	r3, [r4, #0]
 80037b8:	2b2e      	cmp	r3, #46	; 0x2e
 80037ba:	d10c      	bne.n	80037d6 <_vfiprintf_r+0x176>
 80037bc:	7863      	ldrb	r3, [r4, #1]
 80037be:	2b2a      	cmp	r3, #42	; 0x2a
 80037c0:	d135      	bne.n	800382e <_vfiprintf_r+0x1ce>
 80037c2:	9b03      	ldr	r3, [sp, #12]
 80037c4:	3402      	adds	r4, #2
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	9203      	str	r2, [sp, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bfb8      	it	lt
 80037d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80037d4:	9305      	str	r3, [sp, #20]
 80037d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80038bc <_vfiprintf_r+0x25c>
 80037da:	2203      	movs	r2, #3
 80037dc:	4650      	mov	r0, sl
 80037de:	7821      	ldrb	r1, [r4, #0]
 80037e0:	f000 fb6e 	bl	8003ec0 <memchr>
 80037e4:	b140      	cbz	r0, 80037f8 <_vfiprintf_r+0x198>
 80037e6:	2340      	movs	r3, #64	; 0x40
 80037e8:	eba0 000a 	sub.w	r0, r0, sl
 80037ec:	fa03 f000 	lsl.w	r0, r3, r0
 80037f0:	9b04      	ldr	r3, [sp, #16]
 80037f2:	3401      	adds	r4, #1
 80037f4:	4303      	orrs	r3, r0
 80037f6:	9304      	str	r3, [sp, #16]
 80037f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037fc:	2206      	movs	r2, #6
 80037fe:	482c      	ldr	r0, [pc, #176]	; (80038b0 <_vfiprintf_r+0x250>)
 8003800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003804:	f000 fb5c 	bl	8003ec0 <memchr>
 8003808:	2800      	cmp	r0, #0
 800380a:	d03f      	beq.n	800388c <_vfiprintf_r+0x22c>
 800380c:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <_vfiprintf_r+0x254>)
 800380e:	bb1b      	cbnz	r3, 8003858 <_vfiprintf_r+0x1f8>
 8003810:	9b03      	ldr	r3, [sp, #12]
 8003812:	3307      	adds	r3, #7
 8003814:	f023 0307 	bic.w	r3, r3, #7
 8003818:	3308      	adds	r3, #8
 800381a:	9303      	str	r3, [sp, #12]
 800381c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800381e:	443b      	add	r3, r7
 8003820:	9309      	str	r3, [sp, #36]	; 0x24
 8003822:	e767      	b.n	80036f4 <_vfiprintf_r+0x94>
 8003824:	460c      	mov	r4, r1
 8003826:	2001      	movs	r0, #1
 8003828:	fb0c 3202 	mla	r2, ip, r2, r3
 800382c:	e7a5      	b.n	800377a <_vfiprintf_r+0x11a>
 800382e:	2300      	movs	r3, #0
 8003830:	f04f 0c0a 	mov.w	ip, #10
 8003834:	4619      	mov	r1, r3
 8003836:	3401      	adds	r4, #1
 8003838:	9305      	str	r3, [sp, #20]
 800383a:	4620      	mov	r0, r4
 800383c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003840:	3a30      	subs	r2, #48	; 0x30
 8003842:	2a09      	cmp	r2, #9
 8003844:	d903      	bls.n	800384e <_vfiprintf_r+0x1ee>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0c5      	beq.n	80037d6 <_vfiprintf_r+0x176>
 800384a:	9105      	str	r1, [sp, #20]
 800384c:	e7c3      	b.n	80037d6 <_vfiprintf_r+0x176>
 800384e:	4604      	mov	r4, r0
 8003850:	2301      	movs	r3, #1
 8003852:	fb0c 2101 	mla	r1, ip, r1, r2
 8003856:	e7f0      	b.n	800383a <_vfiprintf_r+0x1da>
 8003858:	ab03      	add	r3, sp, #12
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	462a      	mov	r2, r5
 800385e:	4630      	mov	r0, r6
 8003860:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <_vfiprintf_r+0x258>)
 8003862:	a904      	add	r1, sp, #16
 8003864:	f3af 8000 	nop.w
 8003868:	4607      	mov	r7, r0
 800386a:	1c78      	adds	r0, r7, #1
 800386c:	d1d6      	bne.n	800381c <_vfiprintf_r+0x1bc>
 800386e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003870:	07d9      	lsls	r1, r3, #31
 8003872:	d405      	bmi.n	8003880 <_vfiprintf_r+0x220>
 8003874:	89ab      	ldrh	r3, [r5, #12]
 8003876:	059a      	lsls	r2, r3, #22
 8003878:	d402      	bmi.n	8003880 <_vfiprintf_r+0x220>
 800387a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800387c:	f7ff fdb5 	bl	80033ea <__retarget_lock_release_recursive>
 8003880:	89ab      	ldrh	r3, [r5, #12]
 8003882:	065b      	lsls	r3, r3, #25
 8003884:	f53f af12 	bmi.w	80036ac <_vfiprintf_r+0x4c>
 8003888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800388a:	e711      	b.n	80036b0 <_vfiprintf_r+0x50>
 800388c:	ab03      	add	r3, sp, #12
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	462a      	mov	r2, r5
 8003892:	4630      	mov	r0, r6
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <_vfiprintf_r+0x258>)
 8003896:	a904      	add	r1, sp, #16
 8003898:	f000 f882 	bl	80039a0 <_printf_i>
 800389c:	e7e4      	b.n	8003868 <_vfiprintf_r+0x208>
 800389e:	bf00      	nop
 80038a0:	08004038 	.word	0x08004038
 80038a4:	08004058 	.word	0x08004058
 80038a8:	08004018 	.word	0x08004018
 80038ac:	08004078 	.word	0x08004078
 80038b0:	08004082 	.word	0x08004082
 80038b4:	00000000 	.word	0x00000000
 80038b8:	0800363b 	.word	0x0800363b
 80038bc:	0800407e 	.word	0x0800407e

080038c0 <_printf_common>:
 80038c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c4:	4616      	mov	r6, r2
 80038c6:	4699      	mov	r9, r3
 80038c8:	688a      	ldr	r2, [r1, #8]
 80038ca:	690b      	ldr	r3, [r1, #16]
 80038cc:	4607      	mov	r7, r0
 80038ce:	4293      	cmp	r3, r2
 80038d0:	bfb8      	it	lt
 80038d2:	4613      	movlt	r3, r2
 80038d4:	6033      	str	r3, [r6, #0]
 80038d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038da:	460c      	mov	r4, r1
 80038dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038e0:	b10a      	cbz	r2, 80038e6 <_printf_common+0x26>
 80038e2:	3301      	adds	r3, #1
 80038e4:	6033      	str	r3, [r6, #0]
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	0699      	lsls	r1, r3, #26
 80038ea:	bf42      	ittt	mi
 80038ec:	6833      	ldrmi	r3, [r6, #0]
 80038ee:	3302      	addmi	r3, #2
 80038f0:	6033      	strmi	r3, [r6, #0]
 80038f2:	6825      	ldr	r5, [r4, #0]
 80038f4:	f015 0506 	ands.w	r5, r5, #6
 80038f8:	d106      	bne.n	8003908 <_printf_common+0x48>
 80038fa:	f104 0a19 	add.w	sl, r4, #25
 80038fe:	68e3      	ldr	r3, [r4, #12]
 8003900:	6832      	ldr	r2, [r6, #0]
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	42ab      	cmp	r3, r5
 8003906:	dc28      	bgt.n	800395a <_printf_common+0x9a>
 8003908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800390c:	1e13      	subs	r3, r2, #0
 800390e:	6822      	ldr	r2, [r4, #0]
 8003910:	bf18      	it	ne
 8003912:	2301      	movne	r3, #1
 8003914:	0692      	lsls	r2, r2, #26
 8003916:	d42d      	bmi.n	8003974 <_printf_common+0xb4>
 8003918:	4649      	mov	r1, r9
 800391a:	4638      	mov	r0, r7
 800391c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003920:	47c0      	blx	r8
 8003922:	3001      	adds	r0, #1
 8003924:	d020      	beq.n	8003968 <_printf_common+0xa8>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	68e5      	ldr	r5, [r4, #12]
 800392a:	f003 0306 	and.w	r3, r3, #6
 800392e:	2b04      	cmp	r3, #4
 8003930:	bf18      	it	ne
 8003932:	2500      	movne	r5, #0
 8003934:	6832      	ldr	r2, [r6, #0]
 8003936:	f04f 0600 	mov.w	r6, #0
 800393a:	68a3      	ldr	r3, [r4, #8]
 800393c:	bf08      	it	eq
 800393e:	1aad      	subeq	r5, r5, r2
 8003940:	6922      	ldr	r2, [r4, #16]
 8003942:	bf08      	it	eq
 8003944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003948:	4293      	cmp	r3, r2
 800394a:	bfc4      	itt	gt
 800394c:	1a9b      	subgt	r3, r3, r2
 800394e:	18ed      	addgt	r5, r5, r3
 8003950:	341a      	adds	r4, #26
 8003952:	42b5      	cmp	r5, r6
 8003954:	d11a      	bne.n	800398c <_printf_common+0xcc>
 8003956:	2000      	movs	r0, #0
 8003958:	e008      	b.n	800396c <_printf_common+0xac>
 800395a:	2301      	movs	r3, #1
 800395c:	4652      	mov	r2, sl
 800395e:	4649      	mov	r1, r9
 8003960:	4638      	mov	r0, r7
 8003962:	47c0      	blx	r8
 8003964:	3001      	adds	r0, #1
 8003966:	d103      	bne.n	8003970 <_printf_common+0xb0>
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003970:	3501      	adds	r5, #1
 8003972:	e7c4      	b.n	80038fe <_printf_common+0x3e>
 8003974:	2030      	movs	r0, #48	; 0x30
 8003976:	18e1      	adds	r1, r4, r3
 8003978:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003982:	4422      	add	r2, r4
 8003984:	3302      	adds	r3, #2
 8003986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800398a:	e7c5      	b.n	8003918 <_printf_common+0x58>
 800398c:	2301      	movs	r3, #1
 800398e:	4622      	mov	r2, r4
 8003990:	4649      	mov	r1, r9
 8003992:	4638      	mov	r0, r7
 8003994:	47c0      	blx	r8
 8003996:	3001      	adds	r0, #1
 8003998:	d0e6      	beq.n	8003968 <_printf_common+0xa8>
 800399a:	3601      	adds	r6, #1
 800399c:	e7d9      	b.n	8003952 <_printf_common+0x92>
	...

080039a0 <_printf_i>:
 80039a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039a4:	460c      	mov	r4, r1
 80039a6:	7e27      	ldrb	r7, [r4, #24]
 80039a8:	4691      	mov	r9, r2
 80039aa:	2f78      	cmp	r7, #120	; 0x78
 80039ac:	4680      	mov	r8, r0
 80039ae:	469a      	mov	sl, r3
 80039b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039b6:	d807      	bhi.n	80039c8 <_printf_i+0x28>
 80039b8:	2f62      	cmp	r7, #98	; 0x62
 80039ba:	d80a      	bhi.n	80039d2 <_printf_i+0x32>
 80039bc:	2f00      	cmp	r7, #0
 80039be:	f000 80d9 	beq.w	8003b74 <_printf_i+0x1d4>
 80039c2:	2f58      	cmp	r7, #88	; 0x58
 80039c4:	f000 80a4 	beq.w	8003b10 <_printf_i+0x170>
 80039c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039d0:	e03a      	b.n	8003a48 <_printf_i+0xa8>
 80039d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039d6:	2b15      	cmp	r3, #21
 80039d8:	d8f6      	bhi.n	80039c8 <_printf_i+0x28>
 80039da:	a001      	add	r0, pc, #4	; (adr r0, 80039e0 <_printf_i+0x40>)
 80039dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80039e0:	08003a39 	.word	0x08003a39
 80039e4:	08003a4d 	.word	0x08003a4d
 80039e8:	080039c9 	.word	0x080039c9
 80039ec:	080039c9 	.word	0x080039c9
 80039f0:	080039c9 	.word	0x080039c9
 80039f4:	080039c9 	.word	0x080039c9
 80039f8:	08003a4d 	.word	0x08003a4d
 80039fc:	080039c9 	.word	0x080039c9
 8003a00:	080039c9 	.word	0x080039c9
 8003a04:	080039c9 	.word	0x080039c9
 8003a08:	080039c9 	.word	0x080039c9
 8003a0c:	08003b5b 	.word	0x08003b5b
 8003a10:	08003a7d 	.word	0x08003a7d
 8003a14:	08003b3d 	.word	0x08003b3d
 8003a18:	080039c9 	.word	0x080039c9
 8003a1c:	080039c9 	.word	0x080039c9
 8003a20:	08003b7d 	.word	0x08003b7d
 8003a24:	080039c9 	.word	0x080039c9
 8003a28:	08003a7d 	.word	0x08003a7d
 8003a2c:	080039c9 	.word	0x080039c9
 8003a30:	080039c9 	.word	0x080039c9
 8003a34:	08003b45 	.word	0x08003b45
 8003a38:	680b      	ldr	r3, [r1, #0]
 8003a3a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a3e:	1d1a      	adds	r2, r3, #4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	600a      	str	r2, [r1, #0]
 8003a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0a4      	b.n	8003b96 <_printf_i+0x1f6>
 8003a4c:	6825      	ldr	r5, [r4, #0]
 8003a4e:	6808      	ldr	r0, [r1, #0]
 8003a50:	062e      	lsls	r6, r5, #24
 8003a52:	f100 0304 	add.w	r3, r0, #4
 8003a56:	d50a      	bpl.n	8003a6e <_printf_i+0xce>
 8003a58:	6805      	ldr	r5, [r0, #0]
 8003a5a:	600b      	str	r3, [r1, #0]
 8003a5c:	2d00      	cmp	r5, #0
 8003a5e:	da03      	bge.n	8003a68 <_printf_i+0xc8>
 8003a60:	232d      	movs	r3, #45	; 0x2d
 8003a62:	426d      	negs	r5, r5
 8003a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a68:	230a      	movs	r3, #10
 8003a6a:	485e      	ldr	r0, [pc, #376]	; (8003be4 <_printf_i+0x244>)
 8003a6c:	e019      	b.n	8003aa2 <_printf_i+0x102>
 8003a6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a72:	6805      	ldr	r5, [r0, #0]
 8003a74:	600b      	str	r3, [r1, #0]
 8003a76:	bf18      	it	ne
 8003a78:	b22d      	sxthne	r5, r5
 8003a7a:	e7ef      	b.n	8003a5c <_printf_i+0xbc>
 8003a7c:	680b      	ldr	r3, [r1, #0]
 8003a7e:	6825      	ldr	r5, [r4, #0]
 8003a80:	1d18      	adds	r0, r3, #4
 8003a82:	6008      	str	r0, [r1, #0]
 8003a84:	0628      	lsls	r0, r5, #24
 8003a86:	d501      	bpl.n	8003a8c <_printf_i+0xec>
 8003a88:	681d      	ldr	r5, [r3, #0]
 8003a8a:	e002      	b.n	8003a92 <_printf_i+0xf2>
 8003a8c:	0669      	lsls	r1, r5, #25
 8003a8e:	d5fb      	bpl.n	8003a88 <_printf_i+0xe8>
 8003a90:	881d      	ldrh	r5, [r3, #0]
 8003a92:	2f6f      	cmp	r7, #111	; 0x6f
 8003a94:	bf0c      	ite	eq
 8003a96:	2308      	moveq	r3, #8
 8003a98:	230a      	movne	r3, #10
 8003a9a:	4852      	ldr	r0, [pc, #328]	; (8003be4 <_printf_i+0x244>)
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aa2:	6866      	ldr	r6, [r4, #4]
 8003aa4:	2e00      	cmp	r6, #0
 8003aa6:	bfa8      	it	ge
 8003aa8:	6821      	ldrge	r1, [r4, #0]
 8003aaa:	60a6      	str	r6, [r4, #8]
 8003aac:	bfa4      	itt	ge
 8003aae:	f021 0104 	bicge.w	r1, r1, #4
 8003ab2:	6021      	strge	r1, [r4, #0]
 8003ab4:	b90d      	cbnz	r5, 8003aba <_printf_i+0x11a>
 8003ab6:	2e00      	cmp	r6, #0
 8003ab8:	d04d      	beq.n	8003b56 <_printf_i+0x1b6>
 8003aba:	4616      	mov	r6, r2
 8003abc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ac0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ac4:	5dc7      	ldrb	r7, [r0, r7]
 8003ac6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003aca:	462f      	mov	r7, r5
 8003acc:	42bb      	cmp	r3, r7
 8003ace:	460d      	mov	r5, r1
 8003ad0:	d9f4      	bls.n	8003abc <_printf_i+0x11c>
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d10b      	bne.n	8003aee <_printf_i+0x14e>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	07df      	lsls	r7, r3, #31
 8003ada:	d508      	bpl.n	8003aee <_printf_i+0x14e>
 8003adc:	6923      	ldr	r3, [r4, #16]
 8003ade:	6861      	ldr	r1, [r4, #4]
 8003ae0:	4299      	cmp	r1, r3
 8003ae2:	bfde      	ittt	le
 8003ae4:	2330      	movle	r3, #48	; 0x30
 8003ae6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003aea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003aee:	1b92      	subs	r2, r2, r6
 8003af0:	6122      	str	r2, [r4, #16]
 8003af2:	464b      	mov	r3, r9
 8003af4:	4621      	mov	r1, r4
 8003af6:	4640      	mov	r0, r8
 8003af8:	f8cd a000 	str.w	sl, [sp]
 8003afc:	aa03      	add	r2, sp, #12
 8003afe:	f7ff fedf 	bl	80038c0 <_printf_common>
 8003b02:	3001      	adds	r0, #1
 8003b04:	d14c      	bne.n	8003ba0 <_printf_i+0x200>
 8003b06:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0a:	b004      	add	sp, #16
 8003b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b10:	4834      	ldr	r0, [pc, #208]	; (8003be4 <_printf_i+0x244>)
 8003b12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b16:	680e      	ldr	r6, [r1, #0]
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b1e:	061f      	lsls	r7, r3, #24
 8003b20:	600e      	str	r6, [r1, #0]
 8003b22:	d514      	bpl.n	8003b4e <_printf_i+0x1ae>
 8003b24:	07d9      	lsls	r1, r3, #31
 8003b26:	bf44      	itt	mi
 8003b28:	f043 0320 	orrmi.w	r3, r3, #32
 8003b2c:	6023      	strmi	r3, [r4, #0]
 8003b2e:	b91d      	cbnz	r5, 8003b38 <_printf_i+0x198>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f023 0320 	bic.w	r3, r3, #32
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	2310      	movs	r3, #16
 8003b3a:	e7af      	b.n	8003a9c <_printf_i+0xfc>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	f043 0320 	orr.w	r3, r3, #32
 8003b42:	6023      	str	r3, [r4, #0]
 8003b44:	2378      	movs	r3, #120	; 0x78
 8003b46:	4828      	ldr	r0, [pc, #160]	; (8003be8 <_printf_i+0x248>)
 8003b48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b4c:	e7e3      	b.n	8003b16 <_printf_i+0x176>
 8003b4e:	065e      	lsls	r6, r3, #25
 8003b50:	bf48      	it	mi
 8003b52:	b2ad      	uxthmi	r5, r5
 8003b54:	e7e6      	b.n	8003b24 <_printf_i+0x184>
 8003b56:	4616      	mov	r6, r2
 8003b58:	e7bb      	b.n	8003ad2 <_printf_i+0x132>
 8003b5a:	680b      	ldr	r3, [r1, #0]
 8003b5c:	6826      	ldr	r6, [r4, #0]
 8003b5e:	1d1d      	adds	r5, r3, #4
 8003b60:	6960      	ldr	r0, [r4, #20]
 8003b62:	600d      	str	r5, [r1, #0]
 8003b64:	0635      	lsls	r5, r6, #24
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	d501      	bpl.n	8003b6e <_printf_i+0x1ce>
 8003b6a:	6018      	str	r0, [r3, #0]
 8003b6c:	e002      	b.n	8003b74 <_printf_i+0x1d4>
 8003b6e:	0671      	lsls	r1, r6, #25
 8003b70:	d5fb      	bpl.n	8003b6a <_printf_i+0x1ca>
 8003b72:	8018      	strh	r0, [r3, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	4616      	mov	r6, r2
 8003b78:	6123      	str	r3, [r4, #16]
 8003b7a:	e7ba      	b.n	8003af2 <_printf_i+0x152>
 8003b7c:	680b      	ldr	r3, [r1, #0]
 8003b7e:	1d1a      	adds	r2, r3, #4
 8003b80:	600a      	str	r2, [r1, #0]
 8003b82:	681e      	ldr	r6, [r3, #0]
 8003b84:	2100      	movs	r1, #0
 8003b86:	4630      	mov	r0, r6
 8003b88:	6862      	ldr	r2, [r4, #4]
 8003b8a:	f000 f999 	bl	8003ec0 <memchr>
 8003b8e:	b108      	cbz	r0, 8003b94 <_printf_i+0x1f4>
 8003b90:	1b80      	subs	r0, r0, r6
 8003b92:	6060      	str	r0, [r4, #4]
 8003b94:	6863      	ldr	r3, [r4, #4]
 8003b96:	6123      	str	r3, [r4, #16]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b9e:	e7a8      	b.n	8003af2 <_printf_i+0x152>
 8003ba0:	4632      	mov	r2, r6
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	4640      	mov	r0, r8
 8003ba6:	6923      	ldr	r3, [r4, #16]
 8003ba8:	47d0      	blx	sl
 8003baa:	3001      	adds	r0, #1
 8003bac:	d0ab      	beq.n	8003b06 <_printf_i+0x166>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	079b      	lsls	r3, r3, #30
 8003bb2:	d413      	bmi.n	8003bdc <_printf_i+0x23c>
 8003bb4:	68e0      	ldr	r0, [r4, #12]
 8003bb6:	9b03      	ldr	r3, [sp, #12]
 8003bb8:	4298      	cmp	r0, r3
 8003bba:	bfb8      	it	lt
 8003bbc:	4618      	movlt	r0, r3
 8003bbe:	e7a4      	b.n	8003b0a <_printf_i+0x16a>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	4632      	mov	r2, r6
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	47d0      	blx	sl
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d09b      	beq.n	8003b06 <_printf_i+0x166>
 8003bce:	3501      	adds	r5, #1
 8003bd0:	68e3      	ldr	r3, [r4, #12]
 8003bd2:	9903      	ldr	r1, [sp, #12]
 8003bd4:	1a5b      	subs	r3, r3, r1
 8003bd6:	42ab      	cmp	r3, r5
 8003bd8:	dcf2      	bgt.n	8003bc0 <_printf_i+0x220>
 8003bda:	e7eb      	b.n	8003bb4 <_printf_i+0x214>
 8003bdc:	2500      	movs	r5, #0
 8003bde:	f104 0619 	add.w	r6, r4, #25
 8003be2:	e7f5      	b.n	8003bd0 <_printf_i+0x230>
 8003be4:	08004089 	.word	0x08004089
 8003be8:	0800409a 	.word	0x0800409a

08003bec <_sbrk_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	2300      	movs	r3, #0
 8003bf0:	4d05      	ldr	r5, [pc, #20]	; (8003c08 <_sbrk_r+0x1c>)
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	f7fc ff12 	bl	8000a20 <_sbrk>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_sbrk_r+0x1a>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_sbrk_r+0x1a>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	20000188 	.word	0x20000188

08003c0c <__sread>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	460c      	mov	r4, r1
 8003c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c14:	f000 f96e 	bl	8003ef4 <_read_r>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	bfab      	itete	ge
 8003c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c20:	181b      	addge	r3, r3, r0
 8003c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c26:	bfac      	ite	ge
 8003c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c2a:	81a3      	strhlt	r3, [r4, #12]
 8003c2c:	bd10      	pop	{r4, pc}

08003c2e <__swrite>:
 8003c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c32:	461f      	mov	r7, r3
 8003c34:	898b      	ldrh	r3, [r1, #12]
 8003c36:	4605      	mov	r5, r0
 8003c38:	05db      	lsls	r3, r3, #23
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	4616      	mov	r6, r2
 8003c3e:	d505      	bpl.n	8003c4c <__swrite+0x1e>
 8003c40:	2302      	movs	r3, #2
 8003c42:	2200      	movs	r2, #0
 8003c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c48:	f000 f928 	bl	8003e9c <_lseek_r>
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	4632      	mov	r2, r6
 8003c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	4628      	mov	r0, r5
 8003c58:	463b      	mov	r3, r7
 8003c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c62:	f000 b869 	b.w	8003d38 <_write_r>

08003c66 <__sseek>:
 8003c66:	b510      	push	{r4, lr}
 8003c68:	460c      	mov	r4, r1
 8003c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c6e:	f000 f915 	bl	8003e9c <_lseek_r>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	bf15      	itete	ne
 8003c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c82:	81a3      	strheq	r3, [r4, #12]
 8003c84:	bf18      	it	ne
 8003c86:	81a3      	strhne	r3, [r4, #12]
 8003c88:	bd10      	pop	{r4, pc}

08003c8a <__sclose>:
 8003c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c8e:	f000 b8d3 	b.w	8003e38 <_close_r>
	...

08003c94 <__swbuf_r>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	460e      	mov	r6, r1
 8003c98:	4614      	mov	r4, r2
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	b118      	cbz	r0, 8003ca6 <__swbuf_r+0x12>
 8003c9e:	6983      	ldr	r3, [r0, #24]
 8003ca0:	b90b      	cbnz	r3, 8003ca6 <__swbuf_r+0x12>
 8003ca2:	f7ff fb03 	bl	80032ac <__sinit>
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <__swbuf_r+0x98>)
 8003ca8:	429c      	cmp	r4, r3
 8003caa:	d12b      	bne.n	8003d04 <__swbuf_r+0x70>
 8003cac:	686c      	ldr	r4, [r5, #4]
 8003cae:	69a3      	ldr	r3, [r4, #24]
 8003cb0:	60a3      	str	r3, [r4, #8]
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	071a      	lsls	r2, r3, #28
 8003cb6:	d52f      	bpl.n	8003d18 <__swbuf_r+0x84>
 8003cb8:	6923      	ldr	r3, [r4, #16]
 8003cba:	b36b      	cbz	r3, 8003d18 <__swbuf_r+0x84>
 8003cbc:	6923      	ldr	r3, [r4, #16]
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	b2f6      	uxtb	r6, r6
 8003cc2:	1ac0      	subs	r0, r0, r3
 8003cc4:	6963      	ldr	r3, [r4, #20]
 8003cc6:	4637      	mov	r7, r6
 8003cc8:	4283      	cmp	r3, r0
 8003cca:	dc04      	bgt.n	8003cd6 <__swbuf_r+0x42>
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f7ff fa58 	bl	8003184 <_fflush_r>
 8003cd4:	bb30      	cbnz	r0, 8003d24 <__swbuf_r+0x90>
 8003cd6:	68a3      	ldr	r3, [r4, #8]
 8003cd8:	3001      	adds	r0, #1
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	60a3      	str	r3, [r4, #8]
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	6022      	str	r2, [r4, #0]
 8003ce4:	701e      	strb	r6, [r3, #0]
 8003ce6:	6963      	ldr	r3, [r4, #20]
 8003ce8:	4283      	cmp	r3, r0
 8003cea:	d004      	beq.n	8003cf6 <__swbuf_r+0x62>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	07db      	lsls	r3, r3, #31
 8003cf0:	d506      	bpl.n	8003d00 <__swbuf_r+0x6c>
 8003cf2:	2e0a      	cmp	r6, #10
 8003cf4:	d104      	bne.n	8003d00 <__swbuf_r+0x6c>
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f7ff fa43 	bl	8003184 <_fflush_r>
 8003cfe:	b988      	cbnz	r0, 8003d24 <__swbuf_r+0x90>
 8003d00:	4638      	mov	r0, r7
 8003d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <__swbuf_r+0x9c>)
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d101      	bne.n	8003d0e <__swbuf_r+0x7a>
 8003d0a:	68ac      	ldr	r4, [r5, #8]
 8003d0c:	e7cf      	b.n	8003cae <__swbuf_r+0x1a>
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <__swbuf_r+0xa0>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	bf08      	it	eq
 8003d14:	68ec      	ldreq	r4, [r5, #12]
 8003d16:	e7ca      	b.n	8003cae <__swbuf_r+0x1a>
 8003d18:	4621      	mov	r1, r4
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f000 f81e 	bl	8003d5c <__swsetup_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d0cb      	beq.n	8003cbc <__swbuf_r+0x28>
 8003d24:	f04f 37ff 	mov.w	r7, #4294967295
 8003d28:	e7ea      	b.n	8003d00 <__swbuf_r+0x6c>
 8003d2a:	bf00      	nop
 8003d2c:	08004038 	.word	0x08004038
 8003d30:	08004058 	.word	0x08004058
 8003d34:	08004018 	.word	0x08004018

08003d38 <_write_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	2200      	movs	r2, #0
 8003d42:	4d05      	ldr	r5, [pc, #20]	; (8003d58 <_write_r+0x20>)
 8003d44:	602a      	str	r2, [r5, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f7fc fc92 	bl	8000670 <_write>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	d102      	bne.n	8003d56 <_write_r+0x1e>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	b103      	cbz	r3, 8003d56 <_write_r+0x1e>
 8003d54:	6023      	str	r3, [r4, #0]
 8003d56:	bd38      	pop	{r3, r4, r5, pc}
 8003d58:	20000188 	.word	0x20000188

08003d5c <__swsetup_r>:
 8003d5c:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <__swsetup_r+0xcc>)
 8003d5e:	b570      	push	{r4, r5, r6, lr}
 8003d60:	681d      	ldr	r5, [r3, #0]
 8003d62:	4606      	mov	r6, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	b125      	cbz	r5, 8003d72 <__swsetup_r+0x16>
 8003d68:	69ab      	ldr	r3, [r5, #24]
 8003d6a:	b913      	cbnz	r3, 8003d72 <__swsetup_r+0x16>
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f7ff fa9d 	bl	80032ac <__sinit>
 8003d72:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <__swsetup_r+0xd0>)
 8003d74:	429c      	cmp	r4, r3
 8003d76:	d10f      	bne.n	8003d98 <__swsetup_r+0x3c>
 8003d78:	686c      	ldr	r4, [r5, #4]
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d80:	0719      	lsls	r1, r3, #28
 8003d82:	d42c      	bmi.n	8003dde <__swsetup_r+0x82>
 8003d84:	06dd      	lsls	r5, r3, #27
 8003d86:	d411      	bmi.n	8003dac <__swsetup_r+0x50>
 8003d88:	2309      	movs	r3, #9
 8003d8a:	6033      	str	r3, [r6, #0]
 8003d8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	e03e      	b.n	8003e16 <__swsetup_r+0xba>
 8003d98:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <__swsetup_r+0xd4>)
 8003d9a:	429c      	cmp	r4, r3
 8003d9c:	d101      	bne.n	8003da2 <__swsetup_r+0x46>
 8003d9e:	68ac      	ldr	r4, [r5, #8]
 8003da0:	e7eb      	b.n	8003d7a <__swsetup_r+0x1e>
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <__swsetup_r+0xd8>)
 8003da4:	429c      	cmp	r4, r3
 8003da6:	bf08      	it	eq
 8003da8:	68ec      	ldreq	r4, [r5, #12]
 8003daa:	e7e6      	b.n	8003d7a <__swsetup_r+0x1e>
 8003dac:	0758      	lsls	r0, r3, #29
 8003dae:	d512      	bpl.n	8003dd6 <__swsetup_r+0x7a>
 8003db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003db2:	b141      	cbz	r1, 8003dc6 <__swsetup_r+0x6a>
 8003db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003db8:	4299      	cmp	r1, r3
 8003dba:	d002      	beq.n	8003dc2 <__swsetup_r+0x66>
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	f7ff fb81 	bl	80034c4 <_free_r>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	6363      	str	r3, [r4, #52]	; 0x34
 8003dc6:	89a3      	ldrh	r3, [r4, #12]
 8003dc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003dcc:	81a3      	strh	r3, [r4, #12]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	6063      	str	r3, [r4, #4]
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	f043 0308 	orr.w	r3, r3, #8
 8003ddc:	81a3      	strh	r3, [r4, #12]
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	b94b      	cbnz	r3, 8003df6 <__swsetup_r+0x9a>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dec:	d003      	beq.n	8003df6 <__swsetup_r+0x9a>
 8003dee:	4621      	mov	r1, r4
 8003df0:	4630      	mov	r0, r6
 8003df2:	f7ff fb1f 	bl	8003434 <__smakebuf_r>
 8003df6:	89a0      	ldrh	r0, [r4, #12]
 8003df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dfc:	f010 0301 	ands.w	r3, r0, #1
 8003e00:	d00a      	beq.n	8003e18 <__swsetup_r+0xbc>
 8003e02:	2300      	movs	r3, #0
 8003e04:	60a3      	str	r3, [r4, #8]
 8003e06:	6963      	ldr	r3, [r4, #20]
 8003e08:	425b      	negs	r3, r3
 8003e0a:	61a3      	str	r3, [r4, #24]
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	b943      	cbnz	r3, 8003e22 <__swsetup_r+0xc6>
 8003e10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e14:	d1ba      	bne.n	8003d8c <__swsetup_r+0x30>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	0781      	lsls	r1, r0, #30
 8003e1a:	bf58      	it	pl
 8003e1c:	6963      	ldrpl	r3, [r4, #20]
 8003e1e:	60a3      	str	r3, [r4, #8]
 8003e20:	e7f4      	b.n	8003e0c <__swsetup_r+0xb0>
 8003e22:	2000      	movs	r0, #0
 8003e24:	e7f7      	b.n	8003e16 <__swsetup_r+0xba>
 8003e26:	bf00      	nop
 8003e28:	20000014 	.word	0x20000014
 8003e2c:	08004038 	.word	0x08004038
 8003e30:	08004058 	.word	0x08004058
 8003e34:	08004018 	.word	0x08004018

08003e38 <_close_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	4d05      	ldr	r5, [pc, #20]	; (8003e54 <_close_r+0x1c>)
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	f7fc fc40 	bl	80006c8 <_close>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_close_r+0x1a>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_close_r+0x1a>
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	20000188 	.word	0x20000188

08003e58 <_fstat_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	4d06      	ldr	r5, [pc, #24]	; (8003e78 <_fstat_r+0x20>)
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	602b      	str	r3, [r5, #0]
 8003e66:	f7fc fc7f 	bl	8000768 <_fstat>
 8003e6a:	1c43      	adds	r3, r0, #1
 8003e6c:	d102      	bne.n	8003e74 <_fstat_r+0x1c>
 8003e6e:	682b      	ldr	r3, [r5, #0]
 8003e70:	b103      	cbz	r3, 8003e74 <_fstat_r+0x1c>
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	bd38      	pop	{r3, r4, r5, pc}
 8003e76:	bf00      	nop
 8003e78:	20000188 	.word	0x20000188

08003e7c <_isatty_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	2300      	movs	r3, #0
 8003e80:	4d05      	ldr	r5, [pc, #20]	; (8003e98 <_isatty_r+0x1c>)
 8003e82:	4604      	mov	r4, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	602b      	str	r3, [r5, #0]
 8003e88:	f7fc fbdc 	bl	8000644 <_isatty>
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	d102      	bne.n	8003e96 <_isatty_r+0x1a>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	b103      	cbz	r3, 8003e96 <_isatty_r+0x1a>
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	20000188 	.word	0x20000188

08003e9c <_lseek_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	4d05      	ldr	r5, [pc, #20]	; (8003ebc <_lseek_r+0x20>)
 8003ea8:	602a      	str	r2, [r5, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f7fc fc23 	bl	80006f6 <_lseek>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d102      	bne.n	8003eba <_lseek_r+0x1e>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	b103      	cbz	r3, 8003eba <_lseek_r+0x1e>
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	20000188 	.word	0x20000188

08003ec0 <memchr>:
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	b510      	push	{r4, lr}
 8003ec4:	b2c9      	uxtb	r1, r1
 8003ec6:	4402      	add	r2, r0
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	d101      	bne.n	8003ed2 <memchr+0x12>
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e003      	b.n	8003eda <memchr+0x1a>
 8003ed2:	7804      	ldrb	r4, [r0, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	428c      	cmp	r4, r1
 8003ed8:	d1f6      	bne.n	8003ec8 <memchr+0x8>
 8003eda:	bd10      	pop	{r4, pc}

08003edc <__malloc_lock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__malloc_lock+0x8>)
 8003ede:	f7ff ba83 	b.w	80033e8 <__retarget_lock_acquire_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	20000180 	.word	0x20000180

08003ee8 <__malloc_unlock>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <__malloc_unlock+0x8>)
 8003eea:	f7ff ba7e 	b.w	80033ea <__retarget_lock_release_recursive>
 8003eee:	bf00      	nop
 8003ef0:	20000180 	.word	0x20000180

08003ef4 <_read_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	2200      	movs	r2, #0
 8003efe:	4d05      	ldr	r5, [pc, #20]	; (8003f14 <_read_r+0x20>)
 8003f00:	602a      	str	r2, [r5, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f7fc fc08 	bl	8000718 <_read>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_read_r+0x1e>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_read_r+0x1e>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	20000188 	.word	0x20000188

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
